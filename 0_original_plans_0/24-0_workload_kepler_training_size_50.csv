query,plan_id,plan_content
"SELECT MIN(chn.name) AS voiced_char_name, MIN(n.name) AS voicing_actress_name, MIN(t.title) AS voiced_action_movie_jap_eng
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
   keyword AS k,
   movie_companies AS mc,
   movie_info AS mi,
   movie_keyword AS mk,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND t.id = mk.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mc.movie_id = mk.movie_id
AND mi.movie_id = ci.movie_id
AND mi.movie_id = mk.movie_id
AND ci.movie_id = mk.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND k.id = mk.keyword_id
AND ci.note IN ('(as Charles Tamburro)', '(as Nick Heaney)', '(as Kathleen Paulo)', '(as Sean Cooper)', '(Auteur)')
AND cn.country_code = '[se]'
AND it.info = 'book'
AND k.keyword IN ('battle', 'beaujolais-wine', 'persian-tradition', 'year-802,701', 'brennan')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%Y%' OR mi.info LIKE '%S%')
AND n.gender = 'm'
AND n.name LIKE '%a%'
AND rt.role = 'actor'
AND t.production_year > 1990;",80,/*+  IndexScan(k keyword_pkey) IndexScan(mk keyword_id_movie_keyword) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) IndexScan(it info_type_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexOnlyScan(an person_id_aka_name) IndexScan(chn char_name_pkey) NestLoop(k mk) NestLoop(k mk t) NestLoop(k mk t ci) HashJoin(k mk t ci rt) NestLoop(k mk t ci rt n) NestLoop(k mk t ci rt n mi) NestLoop(k mk t ci rt n mi it) NestLoop(k mk t ci rt n mi it mc) NestLoop(k mk t ci rt n mi it mc cn) NestLoop(k mk t ci rt n mi it mc cn an) NestLoop(k mk t ci rt n mi it mc cn an chn) Leading((((((((((((k mk) t) ci) rt) n) mi) it) mc) cn) an) chn)) */
"SELECT MIN(chn.name) AS voiced_char_name, MIN(n.name) AS voicing_actress_name, MIN(t.title) AS voiced_action_movie_jap_eng
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
   keyword AS k,
   movie_companies AS mc,
   movie_info AS mi,
   movie_keyword AS mk,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND t.id = mk.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mc.movie_id = mk.movie_id
AND mi.movie_id = ci.movie_id
AND mi.movie_id = mk.movie_id
AND ci.movie_id = mk.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND k.id = mk.keyword_id
AND ci.note IN ('(as Charles Tamburro)', '(as Mike Biase)', '(as Jeff Ramos)', '(as HamatarÃ´ Oda)', '(as Marty Bolger)')
AND cn.country_code = '[se]'
AND it.info = 'production process protocol'
AND k.keyword IN ('weapons-research', 'book-festival', 'impossible', 'tag-artist', 'hoof-dancing')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%J%' OR mi.info LIKE '%P%')
AND n.gender = 'm'
AND n.name LIKE '%b%'
AND rt.role = 'actor'
AND t.production_year > 1990;",80,/*+  IndexScan(k keyword_pkey) IndexScan(mk keyword_id_movie_keyword) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) IndexScan(it info_type_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexOnlyScan(an person_id_aka_name) IndexScan(chn char_name_pkey) NestLoop(k mk) NestLoop(k mk t) NestLoop(k mk t ci) HashJoin(k mk t ci rt) NestLoop(k mk t ci rt n) NestLoop(k mk t ci rt n mi) NestLoop(k mk t ci rt n mi it) NestLoop(k mk t ci rt n mi it mc) NestLoop(k mk t ci rt n mi it mc cn) NestLoop(k mk t ci rt n mi it mc cn an) NestLoop(k mk t ci rt n mi it mc cn an chn) Leading((((((((((((k mk) t) ci) rt) n) mi) it) mc) cn) an) chn)) */
"SELECT MIN(chn.name) AS voiced_char_name, MIN(n.name) AS voicing_actress_name, MIN(t.title) AS voiced_action_movie_jap_eng
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
   keyword AS k,
   movie_companies AS mc,
   movie_info AS mi,
   movie_keyword AS mk,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND t.id = mk.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mc.movie_id = mk.movie_id
AND mi.movie_id = ci.movie_id
AND mi.movie_id = mk.movie_id
AND ci.movie_id = mk.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND k.id = mk.keyword_id
AND ci.note IN ('(as Charles Tamburro)', '(support: Usen)', '(as JosÃ© Sanchiz)', '(as Lerry Brashear)', '(episodes 1-10)')
AND cn.country_code = '[es]'
AND it.info = 'screenplay-teleplay'
AND k.keyword IN ('voice-sampling', 'contestant', 'grill', 'punch-clock', 'fishing-tackle')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%D%' OR mi.info LIKE '%d%')
AND n.gender = 'm'
AND n.name LIKE '%s%'
AND rt.role = 'actor'
AND t.production_year > 1990;",80,/*+  IndexScan(k keyword_pkey) IndexScan(mk keyword_id_movie_keyword) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) IndexScan(it info_type_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexOnlyScan(an person_id_aka_name) IndexScan(chn char_name_pkey) NestLoop(k mk) NestLoop(k mk t) NestLoop(k mk t ci) HashJoin(k mk t ci rt) NestLoop(k mk t ci rt n) NestLoop(k mk t ci rt n mi) NestLoop(k mk t ci rt n mi it) NestLoop(k mk t ci rt n mi it mc) NestLoop(k mk t ci rt n mi it mc cn) NestLoop(k mk t ci rt n mi it mc cn an) NestLoop(k mk t ci rt n mi it mc cn an chn) Leading((((((((((((k mk) t) ci) rt) n) mi) it) mc) cn) an) chn)) */
"SELECT MIN(chn.name) AS voiced_char_name, MIN(n.name) AS voicing_actress_name, MIN(t.title) AS voiced_action_movie_jap_eng
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
   keyword AS k,
   movie_companies AS mc,
   movie_info AS mi,
   movie_keyword AS mk,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND t.id = mk.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mc.movie_id = mk.movie_id
AND mi.movie_id = ci.movie_id
AND mi.movie_id = mk.movie_id
AND ci.movie_id = mk.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND k.id = mk.keyword_id
AND ci.note IN ('(as Charles Tamburro)', '(dramatist)', '(technical adviser)', '(guest artiste)', '(as V. Makarov)')
AND cn.country_code = '[nl]'
AND it.info = 'printed media reviews'
AND k.keyword IN ('battle', 'stearn''s-wharf', 'brazilian', 'rock-palace', 'wire-service')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%Ã%' OR mi.info LIKE '%""%')
AND n.gender = 'm'
AND n.name LIKE '%r%'
AND rt.role = 'actor'
AND t.production_year > 1990;",80,/*+  IndexScan(k keyword_pkey) IndexScan(mk keyword_id_movie_keyword) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) IndexScan(it info_type_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexOnlyScan(an person_id_aka_name) IndexScan(chn char_name_pkey) NestLoop(k mk) NestLoop(k mk t) NestLoop(k mk t ci) HashJoin(k mk t ci rt) NestLoop(k mk t ci rt n) NestLoop(k mk t ci rt n mi) NestLoop(k mk t ci rt n mi it) NestLoop(k mk t ci rt n mi it mc) NestLoop(k mk t ci rt n mi it mc cn) NestLoop(k mk t ci rt n mi it mc cn an) NestLoop(k mk t ci rt n mi it mc cn an chn) Leading((((((((((((k mk) t) ci) rt) n) mi) it) mc) cn) an) chn)) */
"SELECT MIN(chn.name) AS voiced_char_name, MIN(n.name) AS voicing_actress_name, MIN(t.title) AS voiced_action_movie_jap_eng
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
   keyword AS k,
   movie_companies AS mc,
   movie_info AS mi,
   movie_keyword AS mk,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND t.id = mk.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mc.movie_id = mk.movie_id
AND mi.movie_id = ci.movie_id
AND mi.movie_id = mk.movie_id
AND ci.movie_id = mk.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND k.id = mk.keyword_id
AND ci.note IN ('(as Charles Tamburro)', '(as Ralph Gonzales)', '(as Queen Kong)', '(epk provider)', '(as Jerry Lively)')
AND cn.country_code = '[us]'
AND it.info = 'tech info'
AND k.keyword IN ('action-hero', 'turned-into-baby', 'livestock-car', 'taiji-japan', 'lethal-injection')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%:%' OR mi.info LIKE '%1%')
AND n.gender = 'm'
AND n.name LIKE '%o%'
AND rt.role = 'actor'
AND t.production_year > 1990;",80,/*+  IndexScan(k keyword_pkey) IndexScan(mk keyword_id_movie_keyword) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) IndexScan(it info_type_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexOnlyScan(an person_id_aka_name) IndexScan(chn char_name_pkey) NestLoop(k mk) NestLoop(k mk t) NestLoop(k mk t ci) HashJoin(k mk t ci rt) NestLoop(k mk t ci rt n) NestLoop(k mk t ci rt n mi) NestLoop(k mk t ci rt n mi it) NestLoop(k mk t ci rt n mi it mc) NestLoop(k mk t ci rt n mi it mc cn) NestLoop(k mk t ci rt n mi it mc cn an) NestLoop(k mk t ci rt n mi it mc cn an chn) Leading((((((((((((k mk) t) ci) rt) n) mi) it) mc) cn) an) chn)) */
"SELECT MIN(chn.name) AS voiced_char_name, MIN(n.name) AS voicing_actress_name, MIN(t.title) AS voiced_action_movie_jap_eng
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
   keyword AS k,
   movie_companies AS mc,
   movie_info AS mi,
   movie_keyword AS mk,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND t.id = mk.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mc.movie_id = mk.movie_id
AND mi.movie_id = ci.movie_id
AND mi.movie_id = mk.movie_id
AND ci.movie_id = mk.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND k.id = mk.keyword_id
AND ci.note IN ('(as Charles Tamburro)', '(legal: UK)', '(as Altan)', '(1982-88)', '(clipster)')
AND cn.country_code = '[es]'
AND it.info = 'rentals'
AND k.keyword IN ('weapons-research', 'pow-wow', 'well-of-abraham', 'calcium', 'lew-wasserman')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%4%' OR mi.info LIKE '%9%')
AND n.gender = 'm'
AND n.name LIKE '%e%'
AND rt.role = 'actor'
AND t.production_year > 1990;",80,/*+  IndexScan(k keyword_pkey) IndexScan(mk keyword_id_movie_keyword) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) IndexScan(it info_type_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexOnlyScan(an person_id_aka_name) IndexScan(chn char_name_pkey) NestLoop(k mk) NestLoop(k mk t) NestLoop(k mk t ci) HashJoin(k mk t ci rt) NestLoop(k mk t ci rt n) NestLoop(k mk t ci rt n mi) NestLoop(k mk t ci rt n mi it) NestLoop(k mk t ci rt n mi it mc) NestLoop(k mk t ci rt n mi it mc cn) NestLoop(k mk t ci rt n mi it mc cn an) NestLoop(k mk t ci rt n mi it mc cn an chn) Leading((((((((((((k mk) t) ci) rt) n) mi) it) mc) cn) an) chn)) */
"SELECT MIN(chn.name) AS voiced_char_name, MIN(n.name) AS voicing_actress_name, MIN(t.title) AS voiced_action_movie_jap_eng
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
   keyword AS k,
   movie_companies AS mc,
   movie_info AS mi,
   movie_keyword AS mk,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND t.id = mk.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mc.movie_id = mk.movie_id
AND mi.movie_id = ci.movie_id
AND mi.movie_id = mk.movie_id
AND ci.movie_id = mk.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND k.id = mk.keyword_id
AND ci.note IN ('(as Charles Tamburro)', '(as Picard)', '(ChÃ» Isomura)', '(La jeune baronne)', '(as Abel Asencio)')
AND cn.country_code = '[fr]'
AND it.info = 'trivia'
AND k.keyword IN ('weapons-research', 'pulling-a-finger', 'operetta-singer', 'dying-from-aids', 'hatred-against-gays')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%n%' OR mi.info LIKE '%e%')
AND n.gender = 'm'
AND n.name LIKE '%,%'
AND rt.role = 'actor'
AND t.production_year > 1990;",80,/*+  IndexScan(k keyword_pkey) IndexScan(mk keyword_id_movie_keyword) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) IndexScan(it info_type_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexOnlyScan(an person_id_aka_name) IndexScan(chn char_name_pkey) NestLoop(k mk) NestLoop(k mk t) NestLoop(k mk t ci) HashJoin(k mk t ci rt) NestLoop(k mk t ci rt n) NestLoop(k mk t ci rt n mi) NestLoop(k mk t ci rt n mi it) NestLoop(k mk t ci rt n mi it mc) NestLoop(k mk t ci rt n mi it mc cn) NestLoop(k mk t ci rt n mi it mc cn an) NestLoop(k mk t ci rt n mi it mc cn an chn) Leading((((((((((((k mk) t) ci) rt) n) mi) it) mc) cn) an) chn)) */
"SELECT MIN(chn.name) AS voiced_char_name, MIN(n.name) AS voicing_actress_name, MIN(t.title) AS voiced_action_movie_jap_eng
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
   keyword AS k,
   movie_companies AS mc,
   movie_info AS mi,
   movie_keyword AS mk,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND t.id = mk.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mc.movie_id = mk.movie_id
AND mi.movie_id = ci.movie_id
AND mi.movie_id = mk.movie_id
AND ci.movie_id = mk.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND k.id = mk.keyword_id
AND ci.note IN ('(as Charles Tamburro)', '(as Anton Herbert)', '(as Zach Ruben)', '(as V. Chiglyaev)', '(as Annie Schon)')
AND cn.country_code = '[fr]'
AND it.info = 'weekend gross'
AND k.keyword IN ('weapons-research', 'middle-age-couple', '8th-british-army', 'sumgait', 'microfiche')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%9%' OR mi.info LIKE '%J%')
AND n.gender = 'm'
AND n.name LIKE '%s%'
AND rt.role = 'actor'
AND t.production_year > 1990;",80,/*+  IndexScan(k keyword_pkey) IndexScan(mk keyword_id_movie_keyword) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) IndexScan(it info_type_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexOnlyScan(an person_id_aka_name) IndexScan(chn char_name_pkey) NestLoop(k mk) NestLoop(k mk t) NestLoop(k mk t ci) HashJoin(k mk t ci rt) NestLoop(k mk t ci rt n) NestLoop(k mk t ci rt n mi) NestLoop(k mk t ci rt n mi it) NestLoop(k mk t ci rt n mi it mc) NestLoop(k mk t ci rt n mi it mc cn) NestLoop(k mk t ci rt n mi it mc cn an) NestLoop(k mk t ci rt n mi it mc cn an chn) Leading((((((((((((k mk) t) ci) rt) n) mi) it) mc) cn) an) chn)) */
"SELECT MIN(chn.name) AS voiced_char_name, MIN(n.name) AS voicing_actress_name, MIN(t.title) AS voiced_action_movie_jap_eng
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
   keyword AS k,
   movie_companies AS mc,
   movie_info AS mi,
   movie_keyword AS mk,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND t.id = mk.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mc.movie_id = mk.movie_id
AND mi.movie_id = ci.movie_id
AND mi.movie_id = mk.movie_id
AND ci.movie_id = mk.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND k.id = mk.keyword_id
AND ci.note IN ('(as Charles Tamburro)', '(as Vincent Voss)', '(as Bob Saenz)', '(as Oleg Widow)', '(as Rusty Bolin)')
AND cn.country_code = '[es]'
AND it.info = 'book'
AND k.keyword IN ('2020s', 'debris', 'legal-strategy', 'beslan', 'helix')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%""%' OR mi.info LIKE '%t%')
AND n.gender = 'm'
AND n.name LIKE '%r%'
AND rt.role = 'actor'
AND t.production_year > 1990;",80,/*+  IndexScan(k keyword_pkey) IndexScan(mk keyword_id_movie_keyword) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) IndexScan(it info_type_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexOnlyScan(an person_id_aka_name) IndexScan(chn char_name_pkey) NestLoop(k mk) NestLoop(k mk t) NestLoop(k mk t ci) HashJoin(k mk t ci rt) NestLoop(k mk t ci rt n) NestLoop(k mk t ci rt n mi) NestLoop(k mk t ci rt n mi it) NestLoop(k mk t ci rt n mi it mc) NestLoop(k mk t ci rt n mi it mc cn) NestLoop(k mk t ci rt n mi it mc cn an) NestLoop(k mk t ci rt n mi it mc cn an chn) Leading((((((((((((k mk) t) ci) rt) n) mi) it) mc) cn) an) chn)) */
"SELECT MIN(chn.name) AS voiced_char_name, MIN(n.name) AS voicing_actress_name, MIN(t.title) AS voiced_action_movie_jap_eng
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
   keyword AS k,
   movie_companies AS mc,
   movie_info AS mi,
   movie_keyword AS mk,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND t.id = mk.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mc.movie_id = mk.movie_id
AND mi.movie_id = ci.movie_id
AND mi.movie_id = mk.movie_id
AND ci.movie_id = mk.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND k.id = mk.keyword_id
AND ci.note IN ('(as Charles Tamburro)', '(as Rubbie Tuesday)', '(as Dr. Joe)', '(as Gerald Boyle)', '(band director)')
AND cn.country_code = '[br]'
AND it.info = 'admissions'
AND k.keyword IN ('2020s', 'circus-performer', 'robot-doll', 'dividend-checks', 'philosophy-student')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%,%' OR mi.info LIKE '%,%')
AND n.gender = 'm'
AND n.name LIKE '%,%'
AND rt.role = 'actor'
AND t.production_year > 1990;",80,/*+  IndexScan(k keyword_pkey) IndexScan(mk keyword_id_movie_keyword) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) IndexScan(it info_type_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexOnlyScan(an person_id_aka_name) IndexScan(chn char_name_pkey) NestLoop(k mk) NestLoop(k mk t) NestLoop(k mk t ci) HashJoin(k mk t ci rt) NestLoop(k mk t ci rt n) NestLoop(k mk t ci rt n mi) NestLoop(k mk t ci rt n mi it) NestLoop(k mk t ci rt n mi it mc) NestLoop(k mk t ci rt n mi it mc cn) NestLoop(k mk t ci rt n mi it mc cn an) NestLoop(k mk t ci rt n mi it mc cn an chn) Leading((((((((((((k mk) t) ci) rt) n) mi) it) mc) cn) an) chn)) */
"SELECT MIN(chn.name) AS voiced_char_name, MIN(n.name) AS voicing_actress_name, MIN(t.title) AS voiced_action_movie_jap_eng
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
   keyword AS k,
   movie_companies AS mc,
   movie_info AS mi,
   movie_keyword AS mk,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND t.id = mk.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mc.movie_id = mk.movie_id
AND mi.movie_id = ci.movie_id
AND mi.movie_id = mk.movie_id
AND ci.movie_id = mk.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND k.id = mk.keyword_id
AND ci.note IN ('(as Charles Tamburro)', '(as Gene LaMotte)', '(as H. RuzickovÃ¡)', '(as Maddie Johnson)', '(as Jodee Tochi)')
AND cn.country_code = '[es]'
AND it.info = 'tech info'
AND k.keyword IN ('voice-sampling', 'samba-dance', 'self-defense-force', 'tv-signal', 'secret-ingredient')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%2%' OR mi.info LIKE '%T%')
AND n.gender = 'm'
AND n.name LIKE '%r%'
AND rt.role = 'actor'
AND t.production_year > 1990;",80,/*+  IndexScan(k keyword_pkey) IndexScan(mk keyword_id_movie_keyword) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) IndexScan(it info_type_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexOnlyScan(an person_id_aka_name) IndexScan(chn char_name_pkey) NestLoop(k mk) NestLoop(k mk t) NestLoop(k mk t ci) HashJoin(k mk t ci rt) NestLoop(k mk t ci rt n) NestLoop(k mk t ci rt n mi) NestLoop(k mk t ci rt n mi it) NestLoop(k mk t ci rt n mi it mc) NestLoop(k mk t ci rt n mi it mc cn) NestLoop(k mk t ci rt n mi it mc cn an) NestLoop(k mk t ci rt n mi it mc cn an chn) Leading((((((((((((k mk) t) ci) rt) n) mi) it) mc) cn) an) chn)) */
"SELECT MIN(chn.name) AS voiced_char_name, MIN(n.name) AS voicing_actress_name, MIN(t.title) AS voiced_action_movie_jap_eng
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
   keyword AS k,
   movie_companies AS mc,
   movie_info AS mi,
   movie_keyword AS mk,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND t.id = mk.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mc.movie_id = mk.movie_id
AND mi.movie_id = ci.movie_id
AND mi.movie_id = mk.movie_id
AND ci.movie_id = mk.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND k.id = mk.keyword_id
AND ci.note IN ('(as Charles Tamburro)', '(as Zdena HajdovÃ¡)', '(as Dexter Young)', '(as Todd Schultz)', '(as Mack Reynolds)')
AND cn.country_code = '[fr]'
AND it.info = 'tech info'
AND k.keyword IN ('android', 'affair-with-a-maid', 'red-star', 'hand-cranked', 'sorting-mail')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%P%' OR mi.info LIKE '%m%')
AND n.gender = 'm'
AND n.name LIKE '%h%'
AND rt.role = 'actor'
AND t.production_year > 1990;",80,/*+  IndexScan(k keyword_pkey) IndexScan(mk keyword_id_movie_keyword) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) IndexScan(it info_type_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexOnlyScan(an person_id_aka_name) IndexScan(chn char_name_pkey) NestLoop(k mk) NestLoop(k mk t) NestLoop(k mk t ci) HashJoin(k mk t ci rt) NestLoop(k mk t ci rt n) NestLoop(k mk t ci rt n mi) NestLoop(k mk t ci rt n mi it) NestLoop(k mk t ci rt n mi it mc) NestLoop(k mk t ci rt n mi it mc cn) NestLoop(k mk t ci rt n mi it mc cn an) NestLoop(k mk t ci rt n mi it mc cn an chn) Leading((((((((((((k mk) t) ci) rt) n) mi) it) mc) cn) an) chn)) */
"SELECT MIN(chn.name) AS voiced_char_name, MIN(n.name) AS voicing_actress_name, MIN(t.title) AS voiced_action_movie_jap_eng
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
   keyword AS k,
   movie_companies AS mc,
   movie_info AS mi,
   movie_keyword AS mk,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND t.id = mk.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mc.movie_id = mk.movie_id
AND mi.movie_id = ci.movie_id
AND mi.movie_id = mk.movie_id
AND ci.movie_id = mk.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND k.id = mk.keyword_id
AND ci.note IN ('(as Charles Tamburro)', '(as Joey Boy)', '(as Spencer Logan)', '(as Lalo Noriega)', '(as Jovine)')
AND cn.country_code = '[nl]'
AND it.info = 'adaption'
AND k.keyword IN ('battle', 'dominance', 'oil-reserves', 'regent-university', 'sodomy')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%o%' OR mi.info LIKE '%u%')
AND n.gender = 'm'
AND n.name LIKE '%u%'
AND rt.role = 'actor'
AND t.production_year > 1990;",80,/*+  IndexScan(k keyword_pkey) IndexScan(mk keyword_id_movie_keyword) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) IndexScan(it info_type_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexOnlyScan(an person_id_aka_name) IndexScan(chn char_name_pkey) NestLoop(k mk) NestLoop(k mk t) NestLoop(k mk t ci) HashJoin(k mk t ci rt) NestLoop(k mk t ci rt n) NestLoop(k mk t ci rt n mi) NestLoop(k mk t ci rt n mi it) NestLoop(k mk t ci rt n mi it mc) NestLoop(k mk t ci rt n mi it mc cn) NestLoop(k mk t ci rt n mi it mc cn an) NestLoop(k mk t ci rt n mi it mc cn an chn) Leading((((((((((((k mk) t) ci) rt) n) mi) it) mc) cn) an) chn)) */
"SELECT MIN(chn.name) AS voiced_char_name, MIN(n.name) AS voicing_actress_name, MIN(t.title) AS voiced_action_movie_jap_eng
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
   keyword AS k,
   movie_companies AS mc,
   movie_info AS mi,
   movie_keyword AS mk,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND t.id = mk.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mc.movie_id = mk.movie_id
AND mi.movie_id = ci.movie_id
AND mi.movie_id = mk.movie_id
AND ci.movie_id = mk.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND k.id = mk.keyword_id
AND ci.note IN ('(as Charles Tamburro)', '(as M. Snajdr)', '(as Yanine Bertoli)', '(as Harry LaMont)', '(caterer: Oregon)')
AND cn.country_code = '[gb]'
AND it.info = 'weekend gross'
AND k.keyword IN ('action-hero', 'gang', 'gay-pornography', 'field-glasses', 'threatening-call')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%e%' OR mi.info LIKE '%7%')
AND n.gender = 'm'
AND n.name LIKE '%T%'
AND rt.role = 'actor'
AND t.production_year > 1990;",80,/*+  IndexScan(k keyword_pkey) IndexScan(mk keyword_id_movie_keyword) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) IndexScan(it info_type_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexOnlyScan(an person_id_aka_name) IndexScan(chn char_name_pkey) NestLoop(k mk) NestLoop(k mk t) NestLoop(k mk t ci) HashJoin(k mk t ci rt) NestLoop(k mk t ci rt n) NestLoop(k mk t ci rt n mi) NestLoop(k mk t ci rt n mi it) NestLoop(k mk t ci rt n mi it mc) NestLoop(k mk t ci rt n mi it mc cn) NestLoop(k mk t ci rt n mi it mc cn an) NestLoop(k mk t ci rt n mi it mc cn an chn) Leading((((((((((((k mk) t) ci) rt) n) mi) it) mc) cn) an) chn)) */
"SELECT MIN(chn.name) AS voiced_char_name, MIN(n.name) AS voicing_actress_name, MIN(t.title) AS voiced_action_movie_jap_eng
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
   keyword AS k,
   movie_companies AS mc,
   movie_info AS mi,
   movie_keyword AS mk,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND t.id = mk.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mc.movie_id = mk.movie_id
AND mi.movie_id = ci.movie_id
AND mi.movie_id = mk.movie_id
AND ci.movie_id = mk.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND k.id = mk.keyword_id
AND ci.note IN ('(as Charles Tamburro)', '(as Asiya)', '(as VIA Mirazh)', '(as T.S. Clark)', '(as Jesus GÃ³mez)')
AND cn.country_code = '[br]'
AND it.info = 'weekend gross'
AND k.keyword IN ('weapons-research', 'reference-to-rastus', 'bubble-bath', 'mash-unit', 'looking-pale')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%y%' OR mi.info LIKE '%5%')
AND n.gender = 'm'
AND n.name LIKE '%u%'
AND rt.role = 'actor'
AND t.production_year > 1990;",80,/*+  IndexScan(k keyword_pkey) IndexScan(mk keyword_id_movie_keyword) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) IndexScan(it info_type_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexOnlyScan(an person_id_aka_name) IndexScan(chn char_name_pkey) NestLoop(k mk) NestLoop(k mk t) NestLoop(k mk t ci) HashJoin(k mk t ci rt) NestLoop(k mk t ci rt n) NestLoop(k mk t ci rt n mi) NestLoop(k mk t ci rt n mi it) NestLoop(k mk t ci rt n mi it mc) NestLoop(k mk t ci rt n mi it mc cn) NestLoop(k mk t ci rt n mi it mc cn an) NestLoop(k mk t ci rt n mi it mc cn an chn) Leading((((((((((((k mk) t) ci) rt) n) mi) it) mc) cn) an) chn)) */
"SELECT MIN(chn.name) AS voiced_char_name, MIN(n.name) AS voicing_actress_name, MIN(t.title) AS voiced_action_movie_jap_eng
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
   keyword AS k,
   movie_companies AS mc,
   movie_info AS mi,
   movie_keyword AS mk,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND t.id = mk.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mc.movie_id = mk.movie_id
AND mi.movie_id = ci.movie_id
AND mi.movie_id = mk.movie_id
AND ci.movie_id = mk.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND k.id = mk.keyword_id
AND ci.note IN ('(as Charles Tamburro)', '(as Vera Delaisse)', '(as Gwen Wilkens)', '(as Massimo Volume)', '(as Talla Moret)')
AND cn.country_code = '[nl]'
AND it.info = 'weekend gross'
AND k.keyword IN ('android', 'animated-wolf', 'quality', 'conservationist', 'thompsons-gazelle')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%(%' OR mi.info LIKE '%,%')
AND n.gender = 'm'
AND n.name LIKE '%s%'
AND rt.role = 'actor'
AND t.production_year > 1990;",80,/*+  IndexScan(k keyword_pkey) IndexScan(mk keyword_id_movie_keyword) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) IndexScan(it info_type_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexOnlyScan(an person_id_aka_name) IndexScan(chn char_name_pkey) NestLoop(k mk) NestLoop(k mk t) NestLoop(k mk t ci) HashJoin(k mk t ci rt) NestLoop(k mk t ci rt n) NestLoop(k mk t ci rt n mi) NestLoop(k mk t ci rt n mi it) NestLoop(k mk t ci rt n mi it mc) NestLoop(k mk t ci rt n mi it mc cn) NestLoop(k mk t ci rt n mi it mc cn an) NestLoop(k mk t ci rt n mi it mc cn an chn) Leading((((((((((((k mk) t) ci) rt) n) mi) it) mc) cn) an) chn)) */
"SELECT MIN(chn.name) AS voiced_char_name, MIN(n.name) AS voicing_actress_name, MIN(t.title) AS voiced_action_movie_jap_eng
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
   keyword AS k,
   movie_companies AS mc,
   movie_info AS mi,
   movie_keyword AS mk,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND t.id = mk.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mc.movie_id = mk.movie_id
AND mi.movie_id = ci.movie_id
AND mi.movie_id = mk.movie_id
AND ci.movie_id = mk.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND k.id = mk.keyword_id
AND ci.note IN ('(as Charles Tamburro)', '(Chillin'' Dude)', '(as Ã)', '(as Mark Vincent)', '(as Stuart Noone)')
AND cn.country_code = '[fr]'
AND it.info = 'admissions'
AND k.keyword IN ('battle', 'ragman', 'chilean-australian', 'bar-fire', 'purple-purse')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%c%' OR mi.info LIKE '%)%')
AND n.gender = 'm'
AND n.name LIKE '%s%'
AND rt.role = 'actor'
AND t.production_year > 1990;",80,/*+  IndexScan(k keyword_pkey) IndexScan(mk keyword_id_movie_keyword) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) IndexScan(it info_type_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexOnlyScan(an person_id_aka_name) IndexScan(chn char_name_pkey) NestLoop(k mk) NestLoop(k mk t) NestLoop(k mk t ci) HashJoin(k mk t ci rt) NestLoop(k mk t ci rt n) NestLoop(k mk t ci rt n mi) NestLoop(k mk t ci rt n mi it) NestLoop(k mk t ci rt n mi it mc) NestLoop(k mk t ci rt n mi it mc cn) NestLoop(k mk t ci rt n mi it mc cn an) NestLoop(k mk t ci rt n mi it mc cn an chn) Leading((((((((((((k mk) t) ci) rt) n) mi) it) mc) cn) an) chn)) */
"SELECT MIN(chn.name) AS voiced_char_name, MIN(n.name) AS voicing_actress_name, MIN(t.title) AS voiced_action_movie_jap_eng
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
   keyword AS k,
   movie_companies AS mc,
   movie_info AS mi,
   movie_keyword AS mk,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND t.id = mk.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mc.movie_id = mk.movie_id
AND mi.movie_id = ci.movie_id
AND mi.movie_id = mk.movie_id
AND ci.movie_id = mk.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND k.id = mk.keyword_id
AND ci.note IN ('(voice)', '(Naive Actor)', '(Benjamin Roux)', '(publicist: Spain)', '(2-nd episode)')
AND cn.country_code = '[us]'
AND it.info = 'quotes'
AND k.keyword IN ('general-store', 'evening-class', 'health-fanaticism', 'male-slaps-female', 'giant-moth')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%n%' OR mi.info LIKE '%g%')
AND n.gender = 'm'
AND n.name LIKE '%t%'
AND rt.role = 'actor'
AND t.production_year > 2009;",80,/*+  IndexScan(k keyword_pkey) IndexScan(mk keyword_id_movie_keyword) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) IndexScan(it info_type_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexOnlyScan(an person_id_aka_name) IndexScan(chn char_name_pkey) NestLoop(k mk) NestLoop(k mk t) NestLoop(k mk t ci) HashJoin(k mk t ci rt) NestLoop(k mk t ci rt n) NestLoop(k mk t ci rt n mi) NestLoop(k mk t ci rt n mi it) NestLoop(k mk t ci rt n mi it mc) NestLoop(k mk t ci rt n mi it mc cn) NestLoop(k mk t ci rt n mi it mc cn an) NestLoop(k mk t ci rt n mi it mc cn an chn) Leading((((((((((((k mk) t) ci) rt) n) mi) it) mc) cn) an) chn)) */
"SELECT MIN(chn.name) AS voiced_char_name, MIN(n.name) AS voicing_actress_name, MIN(t.title) AS voiced_action_movie_jap_eng
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
   keyword AS k,
   movie_companies AS mc,
   movie_info AS mi,
   movie_keyword AS mk,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND t.id = mk.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mc.movie_id = mk.movie_id
AND mi.movie_id = ci.movie_id
AND mi.movie_id = mk.movie_id
AND ci.movie_id = mk.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND k.id = mk.keyword_id
AND ci.note IN ('(as Charles Tamburro)', '(as Eddie Zamonte)', '(as Sasha Adler)', '(Number One!)', '(as Victor Koppen)')
AND cn.country_code = '[gb]'
AND it.info = 'adaption'
AND k.keyword IN ('action-hero', 'rainforest', 'goshen-egypt', 'pastry-chef', 'drinking-blood')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%s%' OR mi.info LIKE '%d%')
AND n.gender = 'm'
AND n.name LIKE '%u%'
AND rt.role = 'actor'
AND t.production_year > 1990;",80,/*+  IndexScan(k keyword_pkey) IndexScan(mk keyword_id_movie_keyword) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) IndexScan(it info_type_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexOnlyScan(an person_id_aka_name) IndexScan(chn char_name_pkey) NestLoop(k mk) NestLoop(k mk t) NestLoop(k mk t ci) HashJoin(k mk t ci rt) NestLoop(k mk t ci rt n) NestLoop(k mk t ci rt n mi) NestLoop(k mk t ci rt n mi it) NestLoop(k mk t ci rt n mi it mc) NestLoop(k mk t ci rt n mi it mc cn) NestLoop(k mk t ci rt n mi it mc cn an) NestLoop(k mk t ci rt n mi it mc cn an chn) Leading((((((((((((k mk) t) ci) rt) n) mi) it) mc) cn) an) chn)) */
"SELECT MIN(chn.name) AS voiced_char_name, MIN(n.name) AS voicing_actress_name, MIN(t.title) AS voiced_action_movie_jap_eng
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
   keyword AS k,
   movie_companies AS mc,
   movie_info AS mi,
   movie_keyword AS mk,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND t.id = mk.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mc.movie_id = mk.movie_id
AND mi.movie_id = ci.movie_id
AND mi.movie_id = mk.movie_id
AND ci.movie_id = mk.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND k.id = mk.keyword_id
AND ci.note IN ('(as Charles Tamburro)', '(as Bela Aapa)', '(as Monicka Jaymes)', '(as Todd Roberts)', '(as Pam Jones)')
AND cn.country_code = '[br]'
AND it.info = 'weekend gross'
AND k.keyword IN ('battle', 'tooth', 'tire-track', 'southern-gothic', 'lost-keys')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%1%' OR mi.info LIKE '%$%')
AND n.gender = 'm'
AND n.name LIKE '%u%'
AND rt.role = 'actor'
AND t.production_year > 1990;",80,/*+  IndexScan(k keyword_pkey) IndexScan(mk keyword_id_movie_keyword) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) IndexScan(it info_type_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexOnlyScan(an person_id_aka_name) IndexScan(chn char_name_pkey) NestLoop(k mk) NestLoop(k mk t) NestLoop(k mk t ci) HashJoin(k mk t ci rt) NestLoop(k mk t ci rt n) NestLoop(k mk t ci rt n mi) NestLoop(k mk t ci rt n mi it) NestLoop(k mk t ci rt n mi it mc) NestLoop(k mk t ci rt n mi it mc cn) NestLoop(k mk t ci rt n mi it mc cn an) NestLoop(k mk t ci rt n mi it mc cn an chn) Leading((((((((((((k mk) t) ci) rt) n) mi) it) mc) cn) an) chn)) */
"SELECT MIN(chn.name) AS voiced_char_name, MIN(n.name) AS voicing_actress_name, MIN(t.title) AS voiced_action_movie_jap_eng
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
   keyword AS k,
   movie_companies AS mc,
   movie_info AS mi,
   movie_keyword AS mk,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND t.id = mk.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mc.movie_id = mk.movie_id
AND mi.movie_id = ci.movie_id
AND mi.movie_id = mk.movie_id
AND ci.movie_id = mk.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND k.id = mk.keyword_id
AND ci.note IN ('(as Charles Tamburro)', '(as Karan Grover)', '(as Paula Geerts)', '(as Oleg Stefan)', '(as Greg Stone)')
AND cn.country_code = '[br]'
AND it.info = 'adaption'
AND k.keyword IN ('2020s', 'outback', 'return-from-dead', 'posing-pouch', 'self-help-group')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%0%' OR mi.info LIKE '%:%')
AND n.gender = 'm'
AND n.name LIKE '%a%'
AND rt.role = 'actor'
AND t.production_year > 1990;",80,/*+  IndexScan(k keyword_pkey) IndexScan(mk keyword_id_movie_keyword) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) IndexScan(it info_type_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexOnlyScan(an person_id_aka_name) IndexScan(chn char_name_pkey) NestLoop(k mk) NestLoop(k mk t) NestLoop(k mk t ci) HashJoin(k mk t ci rt) NestLoop(k mk t ci rt n) NestLoop(k mk t ci rt n mi) NestLoop(k mk t ci rt n mi it) NestLoop(k mk t ci rt n mi it mc) NestLoop(k mk t ci rt n mi it mc cn) NestLoop(k mk t ci rt n mi it mc cn an) NestLoop(k mk t ci rt n mi it mc cn an chn) Leading((((((((((((k mk) t) ci) rt) n) mi) it) mc) cn) an) chn)) */
"SELECT MIN(chn.name) AS voiced_char_name, MIN(n.name) AS voicing_actress_name, MIN(t.title) AS voiced_action_movie_jap_eng
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
   keyword AS k,
   movie_companies AS mc,
   movie_info AS mi,
   movie_keyword AS mk,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND t.id = mk.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mc.movie_id = mk.movie_id
AND mi.movie_id = ci.movie_id
AND mi.movie_id = mk.movie_id
AND ci.movie_id = mk.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND k.id = mk.keyword_id
AND ci.note IN ('(as Charles Tamburro)', '(as Franco Cuppini)', '(as Sara Wine)', '(as Edward Norton)', '(as Jerry Harden)')
AND cn.country_code = '[br]'
AND it.info = 'printed media reviews'
AND k.keyword IN ('android', 'dixie', 'teotihuacan', 'gupta-blood', 'hikikomori')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%x%' OR mi.info LIKE '%e%')
AND n.gender = 'm'
AND n.name LIKE '%r%'
AND rt.role = 'actor'
AND t.production_year > 1990;",80,/*+  IndexScan(k keyword_pkey) IndexScan(mk keyword_id_movie_keyword) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) IndexScan(it info_type_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexOnlyScan(an person_id_aka_name) IndexScan(chn char_name_pkey) NestLoop(k mk) NestLoop(k mk t) NestLoop(k mk t ci) HashJoin(k mk t ci rt) NestLoop(k mk t ci rt n) NestLoop(k mk t ci rt n mi) NestLoop(k mk t ci rt n mi it) NestLoop(k mk t ci rt n mi it mc) NestLoop(k mk t ci rt n mi it mc cn) NestLoop(k mk t ci rt n mi it mc cn an) NestLoop(k mk t ci rt n mi it mc cn an chn) Leading((((((((((((k mk) t) ci) rt) n) mi) it) mc) cn) an) chn)) */
"SELECT MIN(chn.name) AS voiced_char_name, MIN(n.name) AS voicing_actress_name, MIN(t.title) AS voiced_action_movie_jap_eng
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
   keyword AS k,
   movie_companies AS mc,
   movie_info AS mi,
   movie_keyword AS mk,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND t.id = mk.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mc.movie_id = mk.movie_id
AND mi.movie_id = ci.movie_id
AND mi.movie_id = mk.movie_id
AND ci.movie_id = mk.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND k.id = mk.keyword_id
AND ci.note IN ('(as Charles Tamburro)', '(legal liaison)', '(as Joan Gelpi)', '(as Danae West)', '(as Fai Ko)')
AND cn.country_code = '[es]'
AND it.info = 'tech info'
AND k.keyword IN ('weapons-research', 'acing-a-test', 'winslow', 'tripping-up-stairs', 'popcorn-making')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%e%' OR mi.info LIKE '%u%')
AND n.gender = 'm'
AND n.name LIKE '%l%'
AND rt.role = 'actor'
AND t.production_year > 1990;",80,/*+  IndexScan(k keyword_pkey) IndexScan(mk keyword_id_movie_keyword) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) IndexScan(it info_type_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexOnlyScan(an person_id_aka_name) IndexScan(chn char_name_pkey) NestLoop(k mk) NestLoop(k mk t) NestLoop(k mk t ci) HashJoin(k mk t ci rt) NestLoop(k mk t ci rt n) NestLoop(k mk t ci rt n mi) NestLoop(k mk t ci rt n mi it) NestLoop(k mk t ci rt n mi it mc) NestLoop(k mk t ci rt n mi it mc cn) NestLoop(k mk t ci rt n mi it mc cn an) NestLoop(k mk t ci rt n mi it mc cn an chn) Leading((((((((((((k mk) t) ci) rt) n) mi) it) mc) cn) an) chn)) */
"SELECT MIN(chn.name) AS voiced_char_name, MIN(n.name) AS voicing_actress_name, MIN(t.title) AS voiced_action_movie_jap_eng
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
   keyword AS k,
   movie_companies AS mc,
   movie_info AS mi,
   movie_keyword AS mk,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND t.id = mk.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mc.movie_id = mk.movie_id
AND mi.movie_id = ci.movie_id
AND mi.movie_id = mk.movie_id
AND ci.movie_id = mk.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND k.id = mk.keyword_id
AND ci.note IN ('(as Charles Tamburro)', '(as Umy Raho)', '(as Jose Juando)', '(website backend)', '(as Ronnie Tavel)')
AND cn.country_code = '[br]'
AND it.info = 'adaption'
AND k.keyword IN ('action-hero', 'locked-in-a-pantry', 'sportscope-series', 'motion', 'five-star-hotel')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%k%' OR mi.info LIKE '%""%')
AND n.gender = 'm'
AND n.name LIKE '%b%'
AND rt.role = 'actor'
AND t.production_year > 1990;",80,/*+  IndexScan(k keyword_pkey) IndexScan(mk keyword_id_movie_keyword) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) IndexScan(it info_type_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexOnlyScan(an person_id_aka_name) IndexScan(chn char_name_pkey) NestLoop(k mk) NestLoop(k mk t) NestLoop(k mk t ci) HashJoin(k mk t ci rt) NestLoop(k mk t ci rt n) NestLoop(k mk t ci rt n mi) NestLoop(k mk t ci rt n mi it) NestLoop(k mk t ci rt n mi it mc) NestLoop(k mk t ci rt n mi it mc cn) NestLoop(k mk t ci rt n mi it mc cn an) NestLoop(k mk t ci rt n mi it mc cn an chn) Leading((((((((((((k mk) t) ci) rt) n) mi) it) mc) cn) an) chn)) */
"SELECT MIN(chn.name) AS voiced_char_name, MIN(n.name) AS voicing_actress_name, MIN(t.title) AS voiced_action_movie_jap_eng
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
   keyword AS k,
   movie_companies AS mc,
   movie_info AS mi,
   movie_keyword AS mk,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND t.id = mk.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mc.movie_id = mk.movie_id
AND mi.movie_id = ci.movie_id
AND mi.movie_id = mk.movie_id
AND ci.movie_id = mk.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND k.id = mk.keyword_id
AND ci.note IN ('(as Charles Tamburro)', '(segment ""Marilyn"")', '(as Lawrence Cole)', '(as Mirabai)', '(as Thomas Jordan)')
AND cn.country_code = '[gb]'
AND it.info = 'printed media reviews'
AND k.keyword IN ('action-hero', 'mail-theft', 'gray-hair', 'search-for-love', 'rome-georgia')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%r%' OR mi.info LIKE '%9%')
AND n.gender = 'm'
AND n.name LIKE '%l%'
AND rt.role = 'actor'
AND t.production_year > 1990;",80,/*+  IndexScan(k keyword_pkey) IndexScan(mk keyword_id_movie_keyword) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) IndexScan(it info_type_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexOnlyScan(an person_id_aka_name) IndexScan(chn char_name_pkey) NestLoop(k mk) NestLoop(k mk t) NestLoop(k mk t ci) HashJoin(k mk t ci rt) NestLoop(k mk t ci rt n) NestLoop(k mk t ci rt n mi) NestLoop(k mk t ci rt n mi it) NestLoop(k mk t ci rt n mi it mc) NestLoop(k mk t ci rt n mi it mc cn) NestLoop(k mk t ci rt n mi it mc cn an) NestLoop(k mk t ci rt n mi it mc cn an chn) Leading((((((((((((k mk) t) ci) rt) n) mi) it) mc) cn) an) chn)) */
"SELECT MIN(chn.name) AS voiced_char_name, MIN(n.name) AS voicing_actress_name, MIN(t.title) AS voiced_action_movie_jap_eng
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
   keyword AS k,
   movie_companies AS mc,
   movie_info AS mi,
   movie_keyword AS mk,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND t.id = mk.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mc.movie_id = mk.movie_id
AND mi.movie_id = ci.movie_id
AND mi.movie_id = mk.movie_id
AND ci.movie_id = mk.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND k.id = mk.keyword_id
AND ci.note IN ('(voice)', '(as Larry Fesendon)', '(as Preeti Gangoly)', '(as Joes Omoruyi)', '(as Jhonmyon Pe)')
AND cn.country_code = '[us]'
AND it.info = 'certificates'
AND k.keyword IN ('gold-rush', 'failing', 'capsule-toy', 'man-from-the-future', 'yuma-arizona')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%S%' OR mi.info LIKE '%a%')
AND n.gender = 'm'
AND n.name LIKE '%,%'
AND rt.role = 'actor'
AND t.production_year > 2009;",80,/*+  IndexScan(k keyword_pkey) IndexScan(mk keyword_id_movie_keyword) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) IndexScan(it info_type_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexOnlyScan(an person_id_aka_name) IndexScan(chn char_name_pkey) NestLoop(k mk) NestLoop(k mk t) NestLoop(k mk t ci) HashJoin(k mk t ci rt) NestLoop(k mk t ci rt n) NestLoop(k mk t ci rt n mi) NestLoop(k mk t ci rt n mi it) NestLoop(k mk t ci rt n mi it mc) NestLoop(k mk t ci rt n mi it mc cn) NestLoop(k mk t ci rt n mi it mc cn an) NestLoop(k mk t ci rt n mi it mc cn an chn) Leading((((((((((((k mk) t) ci) rt) n) mi) it) mc) cn) an) chn)) */
"SELECT MIN(chn.name) AS voiced_char_name, MIN(n.name) AS voicing_actress_name, MIN(t.title) AS voiced_action_movie_jap_eng
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
   keyword AS k,
   movie_companies AS mc,
   movie_info AS mi,
   movie_keyword AS mk,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND t.id = mk.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mc.movie_id = mk.movie_id
AND mi.movie_id = ci.movie_id
AND mi.movie_id = mk.movie_id
AND ci.movie_id = mk.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND k.id = mk.keyword_id
AND ci.note IN ('(as Charles Tamburro)', '(as Sergio Torrigo)', '(file transfer)', '(as Junior Balia)', '(as Glen Ralston)')
AND cn.country_code = '[fr]'
AND it.info = 'tech info'
AND k.keyword IN ('voice-sampling', 'self-destruct', 'appropriation', 'grand-national-race', 'winning-smile')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%7%' OR mi.info LIKE '%m%')
AND n.gender = 'm'
AND n.name LIKE '%T%'
AND rt.role = 'actor'
AND t.production_year > 1990;",80,/*+  IndexScan(k keyword_pkey) IndexScan(mk keyword_id_movie_keyword) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) IndexScan(it info_type_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexOnlyScan(an person_id_aka_name) IndexScan(chn char_name_pkey) NestLoop(k mk) NestLoop(k mk t) NestLoop(k mk t ci) HashJoin(k mk t ci rt) NestLoop(k mk t ci rt n) NestLoop(k mk t ci rt n mi) NestLoop(k mk t ci rt n mi it) NestLoop(k mk t ci rt n mi it mc) NestLoop(k mk t ci rt n mi it mc cn) NestLoop(k mk t ci rt n mi it mc cn an) NestLoop(k mk t ci rt n mi it mc cn an chn) Leading((((((((((((k mk) t) ci) rt) n) mi) it) mc) cn) an) chn)) */
"SELECT MIN(chn.name) AS voiced_char_name, MIN(n.name) AS voicing_actress_name, MIN(t.title) AS voiced_action_movie_jap_eng
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
   keyword AS k,
   movie_companies AS mc,
   movie_info AS mi,
   movie_keyword AS mk,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND t.id = mk.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mc.movie_id = mk.movie_id
AND mi.movie_id = ci.movie_id
AND mi.movie_id = mk.movie_id
AND ci.movie_id = mk.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND k.id = mk.keyword_id
AND ci.note IN ('(as Charles Tamburro)', '(as Henri Thanos)', '(play ""Guilty"")', '(character: Max)', '(Attendant)')
AND cn.country_code = '[fr]'
AND it.info = 'screenplay-teleplay'
AND k.keyword IN ('voice-sampling', 'punched-in-the-back', 'sports-coach', 'murder-for-hire', 'personal-growth')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%r%' OR mi.info LIKE '%f%')
AND n.gender = 'm'
AND n.name LIKE '%u%'
AND rt.role = 'actor'
AND t.production_year > 1990;",80,/*+  IndexScan(k keyword_pkey) IndexScan(mk keyword_id_movie_keyword) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) IndexScan(it info_type_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexOnlyScan(an person_id_aka_name) IndexScan(chn char_name_pkey) NestLoop(k mk) NestLoop(k mk t) NestLoop(k mk t ci) HashJoin(k mk t ci rt) NestLoop(k mk t ci rt n) NestLoop(k mk t ci rt n mi) NestLoop(k mk t ci rt n mi it) NestLoop(k mk t ci rt n mi it mc) NestLoop(k mk t ci rt n mi it mc cn) NestLoop(k mk t ci rt n mi it mc cn an) NestLoop(k mk t ci rt n mi it mc cn an chn) Leading((((((((((((k mk) t) ci) rt) n) mi) it) mc) cn) an) chn)) */
"SELECT MIN(chn.name) AS voiced_char_name, MIN(n.name) AS voicing_actress_name, MIN(t.title) AS voiced_action_movie_jap_eng
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
   keyword AS k,
   movie_companies AS mc,
   movie_info AS mi,
   movie_keyword AS mk,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND t.id = mk.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mc.movie_id = mk.movie_id
AND mi.movie_id = ci.movie_id
AND mi.movie_id = mk.movie_id
AND ci.movie_id = mk.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND k.id = mk.keyword_id
AND ci.note IN ('(as Charles Tamburro)', '(as Alesha Joy)', '(story ""Stadium"")', '(Lab Technician)', '(as Maurie Annesse)')
AND cn.country_code = '[us]'
AND it.info = 'admissions'
AND k.keyword IN ('android', 'nova-japan', 'ruan', 'chicago-piano', 'gun-show')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%8%' OR mi.info LIKE '%8%')
AND n.gender = 'm'
AND n.name LIKE '%C%'
AND rt.role = 'actor'
AND t.production_year > 1990;",80,/*+  IndexScan(k keyword_pkey) IndexScan(mk keyword_id_movie_keyword) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) IndexScan(it info_type_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexOnlyScan(an person_id_aka_name) IndexScan(chn char_name_pkey) NestLoop(k mk) NestLoop(k mk t) NestLoop(k mk t ci) HashJoin(k mk t ci rt) NestLoop(k mk t ci rt n) NestLoop(k mk t ci rt n mi) NestLoop(k mk t ci rt n mi it) NestLoop(k mk t ci rt n mi it mc) NestLoop(k mk t ci rt n mi it mc cn) NestLoop(k mk t ci rt n mi it mc cn an) NestLoop(k mk t ci rt n mi it mc cn an chn) Leading((((((((((((k mk) t) ci) rt) n) mi) it) mc) cn) an) chn)) */
"SELECT MIN(chn.name) AS voiced_char_name, MIN(n.name) AS voicing_actress_name, MIN(t.title) AS voiced_action_movie_jap_eng
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
   keyword AS k,
   movie_companies AS mc,
   movie_info AS mi,
   movie_keyword AS mk,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND t.id = mk.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mc.movie_id = mk.movie_id
AND mi.movie_id = ci.movie_id
AND mi.movie_id = mk.movie_id
AND ci.movie_id = mk.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND k.id = mk.keyword_id
AND ci.note IN ('(as Charles Tamburro)', '(as Kenneth Sprunt)', '(as Lian Amado)', '(as Ignacio Rocha)', '(as Iftakhar)')
AND cn.country_code = '[gb]'
AND it.info = 'weekend gross'
AND k.keyword IN ('2020s', 'alien-soldiers', 'street-girl', 'whip-fight', 'space-age')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%1%' OR mi.info LIKE '%4%')
AND n.gender = 'm'
AND n.name LIKE '%l%'
AND rt.role = 'actor'
AND t.production_year > 1990;",80,/*+  IndexScan(k keyword_pkey) IndexScan(mk keyword_id_movie_keyword) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) IndexScan(it info_type_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexOnlyScan(an person_id_aka_name) IndexScan(chn char_name_pkey) NestLoop(k mk) NestLoop(k mk t) NestLoop(k mk t ci) HashJoin(k mk t ci rt) NestLoop(k mk t ci rt n) NestLoop(k mk t ci rt n mi) NestLoop(k mk t ci rt n mi it) NestLoop(k mk t ci rt n mi it mc) NestLoop(k mk t ci rt n mi it mc cn) NestLoop(k mk t ci rt n mi it mc cn an) NestLoop(k mk t ci rt n mi it mc cn an chn) Leading((((((((((((k mk) t) ci) rt) n) mi) it) mc) cn) an) chn)) */
"SELECT MIN(chn.name) AS voiced_char_name, MIN(n.name) AS voicing_actress_name, MIN(t.title) AS voiced_action_movie_jap_eng
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
   keyword AS k,
   movie_companies AS mc,
   movie_info AS mi,
   movie_keyword AS mk,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND t.id = mk.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mc.movie_id = mk.movie_id
AND mi.movie_id = ci.movie_id
AND mi.movie_id = mk.movie_id
AND ci.movie_id = mk.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND k.id = mk.keyword_id
AND ci.note IN ('(as Charles Tamburro)', '(as Lachelle)', '(as Francis M)', '(as Donna Dare)', '(as Natalia Harris)')
AND cn.country_code = '[us]'
AND it.info = 'budget'
AND k.keyword IN ('weapons-research', 'female-stalker', 'world-trade', 'free-agency', 'alfred-wainwright')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%,%' OR mi.info LIKE '%0%')
AND n.gender = 'm'
AND n.name LIKE '%r%'
AND rt.role = 'actor'
AND t.production_year > 1990;",80,/*+  IndexScan(k keyword_pkey) IndexScan(mk keyword_id_movie_keyword) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) IndexScan(it info_type_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexOnlyScan(an person_id_aka_name) IndexScan(chn char_name_pkey) NestLoop(k mk) NestLoop(k mk t) NestLoop(k mk t ci) HashJoin(k mk t ci rt) NestLoop(k mk t ci rt n) NestLoop(k mk t ci rt n mi) NestLoop(k mk t ci rt n mi it) NestLoop(k mk t ci rt n mi it mc) NestLoop(k mk t ci rt n mi it mc cn) NestLoop(k mk t ci rt n mi it mc cn an) NestLoop(k mk t ci rt n mi it mc cn an chn) Leading((((((((((((k mk) t) ci) rt) n) mi) it) mc) cn) an) chn)) */
"SELECT MIN(chn.name) AS voiced_char_name, MIN(n.name) AS voicing_actress_name, MIN(t.title) AS voiced_action_movie_jap_eng
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
   keyword AS k,
   movie_companies AS mc,
   movie_info AS mi,
   movie_keyword AS mk,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND t.id = mk.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mc.movie_id = mk.movie_id
AND mi.movie_id = ci.movie_id
AND mi.movie_id = mk.movie_id
AND ci.movie_id = mk.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND k.id = mk.keyword_id
AND ci.note IN ('(as Charles Tamburro)', '(as Aase EngstrÃ¸m)', '(as Brane Zavrsan)', '(as Andy Simpkins)', '(as Joerg Ellmer)')
AND cn.country_code = '[es]'
AND it.info = 'printed media reviews'
AND k.keyword IN ('weapons-research', 'theologian', 'gas-station', 'hiding-in-crate', 'macintosh')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%J%' OR mi.info LIKE '%""%')
AND n.gender = 'm'
AND n.name LIKE '%,%'
AND rt.role = 'actor'
AND t.production_year > 1990;",80,/*+  IndexScan(k keyword_pkey) IndexScan(mk keyword_id_movie_keyword) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) IndexScan(it info_type_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexOnlyScan(an person_id_aka_name) IndexScan(chn char_name_pkey) NestLoop(k mk) NestLoop(k mk t) NestLoop(k mk t ci) HashJoin(k mk t ci rt) NestLoop(k mk t ci rt n) NestLoop(k mk t ci rt n mi) NestLoop(k mk t ci rt n mi it) NestLoop(k mk t ci rt n mi it mc) NestLoop(k mk t ci rt n mi it mc cn) NestLoop(k mk t ci rt n mi it mc cn an) NestLoop(k mk t ci rt n mi it mc cn an chn) Leading((((((((((((k mk) t) ci) rt) n) mi) it) mc) cn) an) chn)) */
"SELECT MIN(chn.name) AS voiced_char_name, MIN(n.name) AS voicing_actress_name, MIN(t.title) AS voiced_action_movie_jap_eng
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
   keyword AS k,
   movie_companies AS mc,
   movie_info AS mi,
   movie_keyword AS mk,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND t.id = mk.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mc.movie_id = mk.movie_id
AND mi.movie_id = ci.movie_id
AND mi.movie_id = mk.movie_id
AND ci.movie_id = mk.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND k.id = mk.keyword_id
AND ci.note IN ('(as Charles Tamburro)', '(as Gerald Okuneff)', '(as Marcia I. Wolf)', '(as Dagmar Sowa)', '(as Ito Rebane)')
AND cn.country_code = '[fr]'
AND it.info = 'book'
AND k.keyword IN ('weapons-research', 'space-program', 'magnetism', 'ball-of-wool', 'enemy-occupation')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%o%' OR mi.info LIKE '%.%')
AND n.gender = 'm'
AND n.name LIKE '%b%'
AND rt.role = 'actor'
AND t.production_year > 1990;",80,/*+  IndexScan(k keyword_pkey) IndexScan(mk keyword_id_movie_keyword) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) IndexScan(it info_type_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexOnlyScan(an person_id_aka_name) IndexScan(chn char_name_pkey) NestLoop(k mk) NestLoop(k mk t) NestLoop(k mk t ci) HashJoin(k mk t ci rt) NestLoop(k mk t ci rt n) NestLoop(k mk t ci rt n mi) NestLoop(k mk t ci rt n mi it) NestLoop(k mk t ci rt n mi it mc) NestLoop(k mk t ci rt n mi it mc cn) NestLoop(k mk t ci rt n mi it mc cn an) NestLoop(k mk t ci rt n mi it mc cn an chn) Leading((((((((((((k mk) t) ci) rt) n) mi) it) mc) cn) an) chn)) */
"SELECT MIN(chn.name) AS voiced_char_name, MIN(n.name) AS voicing_actress_name, MIN(t.title) AS voiced_action_movie_jap_eng
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
   keyword AS k,
   movie_companies AS mc,
   movie_info AS mi,
   movie_keyword AS mk,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND t.id = mk.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mc.movie_id = mk.movie_id
AND mi.movie_id = ci.movie_id
AND mi.movie_id = mk.movie_id
AND ci.movie_id = mk.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND k.id = mk.keyword_id
AND ci.note IN ('(as Charles Tamburro)', '(counsel: USA)', '(as Giselle Grimm)', '(as Mike Prosser)', '(as V.Redko)')
AND cn.country_code = '[se]'
AND it.info = 'weekend gross'
AND k.keyword IN ('voice-sampling', 'fire-insurance', 'building-bomb', 'furry', 'dying-child')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%1%' OR mi.info LIKE '%1%')
AND n.gender = 'm'
AND n.name LIKE '%b%'
AND rt.role = 'actor'
AND t.production_year > 1990;",80,/*+  IndexScan(k keyword_pkey) IndexScan(mk keyword_id_movie_keyword) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) IndexScan(it info_type_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexOnlyScan(an person_id_aka_name) IndexScan(chn char_name_pkey) NestLoop(k mk) NestLoop(k mk t) NestLoop(k mk t ci) HashJoin(k mk t ci rt) NestLoop(k mk t ci rt n) NestLoop(k mk t ci rt n mi) NestLoop(k mk t ci rt n mi it) NestLoop(k mk t ci rt n mi it mc) NestLoop(k mk t ci rt n mi it mc cn) NestLoop(k mk t ci rt n mi it mc cn an) NestLoop(k mk t ci rt n mi it mc cn an chn) Leading((((((((((((k mk) t) ci) rt) n) mi) it) mc) cn) an) chn)) */
"SELECT MIN(chn.name) AS voiced_char_name, MIN(n.name) AS voicing_actress_name, MIN(t.title) AS voiced_action_movie_jap_eng
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
   keyword AS k,
   movie_companies AS mc,
   movie_info AS mi,
   movie_keyword AS mk,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND t.id = mk.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mc.movie_id = mk.movie_id
AND mi.movie_id = ci.movie_id
AND mi.movie_id = mk.movie_id
AND ci.movie_id = mk.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND k.id = mk.keyword_id
AND ci.note IN ('(as Charles Tamburro)', '(producer) (197?-?)', '(as Tina Argiro)', '(as Jason Finney)', '(as Clara G. Nieto)')
AND cn.country_code = '[br]'
AND it.info = 'production process protocol'
AND k.keyword IN ('2020s', 'wireless', 'foggy-window', 'bloody-knife', 'year-428')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%o%' OR mi.info LIKE '%4%')
AND n.gender = 'm'
AND n.name LIKE '%.%'
AND rt.role = 'actor'
AND t.production_year > 1990;",80,/*+  IndexScan(k keyword_pkey) IndexScan(mk keyword_id_movie_keyword) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) IndexScan(it info_type_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexOnlyScan(an person_id_aka_name) IndexScan(chn char_name_pkey) NestLoop(k mk) NestLoop(k mk t) NestLoop(k mk t ci) HashJoin(k mk t ci rt) NestLoop(k mk t ci rt n) NestLoop(k mk t ci rt n mi) NestLoop(k mk t ci rt n mi it) NestLoop(k mk t ci rt n mi it mc) NestLoop(k mk t ci rt n mi it mc cn) NestLoop(k mk t ci rt n mi it mc cn an) NestLoop(k mk t ci rt n mi it mc cn an chn) Leading((((((((((((k mk) t) ci) rt) n) mi) it) mc) cn) an) chn)) */
"SELECT MIN(chn.name) AS voiced_char_name, MIN(n.name) AS voicing_actress_name, MIN(t.title) AS voiced_action_movie_jap_eng
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
   keyword AS k,
   movie_companies AS mc,
   movie_info AS mi,
   movie_keyword AS mk,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND t.id = mk.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mc.movie_id = mk.movie_id
AND mi.movie_id = ci.movie_id
AND mi.movie_id = mk.movie_id
AND ci.movie_id = mk.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND k.id = mk.keyword_id
AND ci.note IN ('(as Charles Tamburro)', '(as Dave Hadder)', '(as Tibi)', '(as Fred Epaux)', '(as Deo Directo)')
AND cn.country_code = '[nl]'
AND it.info = 'budget'
AND k.keyword IN ('2020s', 'face-in-plate', 'coffee-drinker', 'head-shaving', 'ethics-department')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%4%' OR mi.info LIKE '%0%')
AND n.gender = 'm'
AND n.name LIKE '%a%'
AND rt.role = 'actor'
AND t.production_year > 1990;",80,/*+  IndexScan(k keyword_pkey) IndexScan(mk keyword_id_movie_keyword) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) IndexScan(it info_type_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexOnlyScan(an person_id_aka_name) IndexScan(chn char_name_pkey) NestLoop(k mk) NestLoop(k mk t) NestLoop(k mk t ci) HashJoin(k mk t ci rt) NestLoop(k mk t ci rt n) NestLoop(k mk t ci rt n mi) NestLoop(k mk t ci rt n mi it) NestLoop(k mk t ci rt n mi it mc) NestLoop(k mk t ci rt n mi it mc cn) NestLoop(k mk t ci rt n mi it mc cn an) NestLoop(k mk t ci rt n mi it mc cn an chn) Leading((((((((((((k mk) t) ci) rt) n) mi) it) mc) cn) an) chn)) */
"SELECT MIN(chn.name) AS voiced_char_name, MIN(n.name) AS voicing_actress_name, MIN(t.title) AS voiced_action_movie_jap_eng
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
   keyword AS k,
   movie_companies AS mc,
   movie_info AS mi,
   movie_keyword AS mk,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND t.id = mk.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mc.movie_id = mk.movie_id
AND mi.movie_id = ci.movie_id
AND mi.movie_id = mk.movie_id
AND ci.movie_id = mk.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND k.id = mk.keyword_id
AND ci.note IN ('(as Charles Tamburro)', '(aged 16)', '(as Stephan Fung)', '(as P. Belair)', '(as Corinne Reboud)')
AND cn.country_code = '[gb]'
AND it.info = 'printed media reviews'
AND k.keyword IN ('voice-sampling', 'male-heir', 'bag', 'cold-water-flat', 'rotozip')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%e%' OR mi.info LIKE '%a%')
AND n.gender = 'm'
AND n.name LIKE '%o%'
AND rt.role = 'actor'
AND t.production_year > 1990;",80,/*+  IndexScan(k keyword_pkey) IndexScan(mk keyword_id_movie_keyword) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) IndexScan(it info_type_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexOnlyScan(an person_id_aka_name) IndexScan(chn char_name_pkey) NestLoop(k mk) NestLoop(k mk t) NestLoop(k mk t ci) HashJoin(k mk t ci rt) NestLoop(k mk t ci rt n) NestLoop(k mk t ci rt n mi) NestLoop(k mk t ci rt n mi it) NestLoop(k mk t ci rt n mi it mc) NestLoop(k mk t ci rt n mi it mc cn) NestLoop(k mk t ci rt n mi it mc cn an) NestLoop(k mk t ci rt n mi it mc cn an chn) Leading((((((((((((k mk) t) ci) rt) n) mi) it) mc) cn) an) chn)) */
"SELECT MIN(chn.name) AS voiced_char_name, MIN(n.name) AS voicing_actress_name, MIN(t.title) AS voiced_action_movie_jap_eng
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
   keyword AS k,
   movie_companies AS mc,
   movie_info AS mi,
   movie_keyword AS mk,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND t.id = mk.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mc.movie_id = mk.movie_id
AND mi.movie_id = ci.movie_id
AND mi.movie_id = mk.movie_id
AND ci.movie_id = mk.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND k.id = mk.keyword_id
AND ci.note IN ('(as Charles Tamburro)', '(as Wang Cheng Li)', '(as Baba Ram Dass)', '(general)', '(as Tracey M. Bass)')
AND cn.country_code = '[br]'
AND it.info = 'trivia'
AND k.keyword IN ('battle', 'giant-chicken', 'consulate', 'lantern-fishing', 'spurious-lawsuit')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%h%' OR mi.info LIKE '%m%')
AND n.gender = 'm'
AND n.name LIKE '%r%'
AND rt.role = 'actor'
AND t.production_year > 1990;",80,/*+  IndexScan(k keyword_pkey) IndexScan(mk keyword_id_movie_keyword) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) IndexScan(it info_type_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexOnlyScan(an person_id_aka_name) IndexScan(chn char_name_pkey) NestLoop(k mk) NestLoop(k mk t) NestLoop(k mk t ci) HashJoin(k mk t ci rt) NestLoop(k mk t ci rt n) NestLoop(k mk t ci rt n mi) NestLoop(k mk t ci rt n mi it) NestLoop(k mk t ci rt n mi it mc) NestLoop(k mk t ci rt n mi it mc cn) NestLoop(k mk t ci rt n mi it mc cn an) NestLoop(k mk t ci rt n mi it mc cn an chn) Leading((((((((((((k mk) t) ci) rt) n) mi) it) mc) cn) an) chn)) */
"SELECT MIN(chn.name) AS voiced_char_name, MIN(n.name) AS voicing_actress_name, MIN(t.title) AS voiced_action_movie_jap_eng
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
   keyword AS k,
   movie_companies AS mc,
   movie_info AS mi,
   movie_keyword AS mk,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND t.id = mk.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mc.movie_id = mk.movie_id
AND mi.movie_id = ci.movie_id
AND mi.movie_id = mk.movie_id
AND ci.movie_id = mk.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND k.id = mk.keyword_id
AND ci.note IN ('(as Charles Tamburro)', '(May 19, 1983)', '(im 2. Teil)', '(day 1)', '(as Gene Anton Jr.)')
AND cn.country_code = '[us]'
AND it.info = 'weekend gross'
AND k.keyword IN ('2020s', 'chemical-lab', 'drunken-indian', 'redone', 'hypnotic-stare')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%9%' OR mi.info LIKE '%p%')
AND n.gender = 'm'
AND n.name LIKE '%s%'
AND rt.role = 'actor'
AND t.production_year > 1990;",80,/*+  IndexScan(k keyword_pkey) IndexScan(mk keyword_id_movie_keyword) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) IndexScan(it info_type_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexOnlyScan(an person_id_aka_name) IndexScan(chn char_name_pkey) NestLoop(k mk) NestLoop(k mk t) NestLoop(k mk t ci) HashJoin(k mk t ci rt) NestLoop(k mk t ci rt n) NestLoop(k mk t ci rt n mi) NestLoop(k mk t ci rt n mi it) NestLoop(k mk t ci rt n mi it mc) NestLoop(k mk t ci rt n mi it mc cn) NestLoop(k mk t ci rt n mi it mc cn an) NestLoop(k mk t ci rt n mi it mc cn an chn) Leading((((((((((((k mk) t) ci) rt) n) mi) it) mc) cn) an) chn)) */
"SELECT MIN(chn.name) AS voiced_char_name, MIN(n.name) AS voicing_actress_name, MIN(t.title) AS voiced_action_movie_jap_eng
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
   keyword AS k,
   movie_companies AS mc,
   movie_info AS mi,
   movie_keyword AS mk,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND t.id = mk.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mc.movie_id = mk.movie_id
AND mi.movie_id = ci.movie_id
AND mi.movie_id = mk.movie_id
AND ci.movie_id = mk.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND k.id = mk.keyword_id
AND ci.note IN ('(as Charles Tamburro)', '(as Bill Thourlby)', '(as Jenny Le Gon)', '(as Tom Drake)', '(tour historian)')
AND cn.country_code = '[fr]'
AND it.info = 'adaption'
AND k.keyword IN ('android', 'obsidian', 'cleansing-ritual', 'tokyo-university', 'exclusive-story')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%0%' OR mi.info LIKE '%8%')
AND n.gender = 'm'
AND n.name LIKE '%,%'
AND rt.role = 'actor'
AND t.production_year > 1990;",80,/*+  IndexScan(k keyword_pkey) IndexScan(mk keyword_id_movie_keyword) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) IndexScan(it info_type_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexOnlyScan(an person_id_aka_name) IndexScan(chn char_name_pkey) NestLoop(k mk) NestLoop(k mk t) NestLoop(k mk t ci) HashJoin(k mk t ci rt) NestLoop(k mk t ci rt n) NestLoop(k mk t ci rt n mi) NestLoop(k mk t ci rt n mi it) NestLoop(k mk t ci rt n mi it mc) NestLoop(k mk t ci rt n mi it mc cn) NestLoop(k mk t ci rt n mi it mc cn an) NestLoop(k mk t ci rt n mi it mc cn an chn) Leading((((((((((((k mk) t) ci) rt) n) mi) it) mc) cn) an) chn)) */
"SELECT MIN(chn.name) AS voiced_char_name, MIN(n.name) AS voicing_actress_name, MIN(t.title) AS voiced_action_movie_jap_eng
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
   keyword AS k,
   movie_companies AS mc,
   movie_info AS mi,
   movie_keyword AS mk,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND t.id = mk.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mc.movie_id = mk.movie_id
AND mi.movie_id = ci.movie_id
AND mi.movie_id = mk.movie_id
AND ci.movie_id = mk.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND k.id = mk.keyword_id
AND ci.note IN ('(as Charles Tamburro)', '(as Yura Yelin)', '(as Sumi Nelson)', '(as Shoffi Jikan)', '(as Michael Ratner)')
AND cn.country_code = '[gb]'
AND it.info = 'book'
AND k.keyword IN ('action-hero', 'computer-chatroom', 'plastic-toy', 'prostitution', 'dumb-asian')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%)%' OR mi.info LIKE '%l%')
AND n.gender = 'm'
AND n.name LIKE '%a%'
AND rt.role = 'actor'
AND t.production_year > 1990;",80,/*+  IndexScan(k keyword_pkey) IndexScan(mk keyword_id_movie_keyword) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) IndexScan(it info_type_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexOnlyScan(an person_id_aka_name) IndexScan(chn char_name_pkey) NestLoop(k mk) NestLoop(k mk t) NestLoop(k mk t ci) HashJoin(k mk t ci rt) NestLoop(k mk t ci rt n) NestLoop(k mk t ci rt n mi) NestLoop(k mk t ci rt n mi it) NestLoop(k mk t ci rt n mi it mc) NestLoop(k mk t ci rt n mi it mc cn) NestLoop(k mk t ci rt n mi it mc cn an) NestLoop(k mk t ci rt n mi it mc cn an chn) Leading((((((((((((k mk) t) ci) rt) n) mi) it) mc) cn) an) chn)) */
"SELECT MIN(chn.name) AS voiced_char_name, MIN(n.name) AS voicing_actress_name, MIN(t.title) AS voiced_action_movie_jap_eng
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
   keyword AS k,
   movie_companies AS mc,
   movie_info AS mi,
   movie_keyword AS mk,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND t.id = mk.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mc.movie_id = mk.movie_id
AND mi.movie_id = ci.movie_id
AND mi.movie_id = mk.movie_id
AND ci.movie_id = mk.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND k.id = mk.keyword_id
AND ci.note IN ('(as Charles Tamburro)', '(accounting intern)', '(as Sarah Lubell)', '(as Katrena Starr)', '(Yes, Minister)')
AND cn.country_code = '[se]'
AND it.info = 'admissions'
AND k.keyword IN ('battle', 'multiplicity', 'angry-dog', 'suggesting-suicide', 'worry-wart')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%8%' OR mi.info LIKE '%n%')
AND n.gender = 'm'
AND n.name LIKE '%s%'
AND rt.role = 'actor'
AND t.production_year > 1990;",80,/*+  IndexScan(k keyword_pkey) IndexScan(mk keyword_id_movie_keyword) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) IndexScan(it info_type_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexOnlyScan(an person_id_aka_name) IndexScan(chn char_name_pkey) NestLoop(k mk) NestLoop(k mk t) NestLoop(k mk t ci) HashJoin(k mk t ci rt) NestLoop(k mk t ci rt n) NestLoop(k mk t ci rt n mi) NestLoop(k mk t ci rt n mi it) NestLoop(k mk t ci rt n mi it mc) NestLoop(k mk t ci rt n mi it mc cn) NestLoop(k mk t ci rt n mi it mc cn an) NestLoop(k mk t ci rt n mi it mc cn an chn) Leading((((((((((((k mk) t) ci) rt) n) mi) it) mc) cn) an) chn)) */
"SELECT MIN(chn.name) AS voiced_char_name, MIN(n.name) AS voicing_actress_name, MIN(t.title) AS voiced_action_movie_jap_eng
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
   keyword AS k,
   movie_companies AS mc,
   movie_info AS mi,
   movie_keyword AS mk,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND t.id = mk.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mc.movie_id = mk.movie_id
AND mi.movie_id = ci.movie_id
AND mi.movie_id = mk.movie_id
AND ci.movie_id = mk.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND k.id = mk.keyword_id
AND ci.note IN ('(as Charles Tamburro)', '(as Samuel Dobbins)', '(3-D designer)', '(film by)', '(as Lajos Dobak)')
AND cn.country_code = '[us]'
AND it.info = 'book'
AND k.keyword IN ('battle', 'precious-metal', 'thrift-shop', 'malmedy', 'based-on-photobook')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%e%' OR mi.info LIKE '%o%')
AND n.gender = 'm'
AND n.name LIKE '%m%'
AND rt.role = 'actor'
AND t.production_year > 1990;",80,/*+  IndexScan(k keyword_pkey) IndexScan(mk keyword_id_movie_keyword) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) IndexScan(it info_type_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexOnlyScan(an person_id_aka_name) IndexScan(chn char_name_pkey) NestLoop(k mk) NestLoop(k mk t) NestLoop(k mk t ci) HashJoin(k mk t ci rt) NestLoop(k mk t ci rt n) NestLoop(k mk t ci rt n mi) NestLoop(k mk t ci rt n mi it) NestLoop(k mk t ci rt n mi it mc) NestLoop(k mk t ci rt n mi it mc cn) NestLoop(k mk t ci rt n mi it mc cn an) NestLoop(k mk t ci rt n mi it mc cn an chn) Leading((((((((((((k mk) t) ci) rt) n) mi) it) mc) cn) an) chn)) */
"SELECT MIN(chn.name) AS voiced_char_name, MIN(n.name) AS voicing_actress_name, MIN(t.title) AS voiced_action_movie_jap_eng
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
   keyword AS k,
   movie_companies AS mc,
   movie_info AS mi,
   movie_keyword AS mk,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND t.id = mk.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mc.movie_id = mk.movie_id
AND mi.movie_id = ci.movie_id
AND mi.movie_id = mk.movie_id
AND ci.movie_id = mk.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND k.id = mk.keyword_id
AND ci.note IN ('(as Charles Tamburro)', '(as Charytin Goico)', '(intro music)', '(Young Father)', '(as Joy Yang)')
AND cn.country_code = '[br]'
AND it.info = 'printed media reviews'
AND k.keyword IN ('weapons-research', 'walking-tree', 'patrice-lumumba', 'bowl-game', 'pesto')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%e%' OR mi.info LIKE '%(%')
AND n.gender = 'm'
AND n.name LIKE '%l%'
AND rt.role = 'actor'
AND t.production_year > 1990;",80,/*+  IndexScan(k keyword_pkey) IndexScan(mk keyword_id_movie_keyword) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) IndexScan(it info_type_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexOnlyScan(an person_id_aka_name) IndexScan(chn char_name_pkey) NestLoop(k mk) NestLoop(k mk t) NestLoop(k mk t ci) HashJoin(k mk t ci rt) NestLoop(k mk t ci rt n) NestLoop(k mk t ci rt n mi) NestLoop(k mk t ci rt n mi it) NestLoop(k mk t ci rt n mi it mc) NestLoop(k mk t ci rt n mi it mc cn) NestLoop(k mk t ci rt n mi it mc cn an) NestLoop(k mk t ci rt n mi it mc cn an chn) Leading((((((((((((k mk) t) ci) rt) n) mi) it) mc) cn) an) chn)) */
"SELECT MIN(chn.name) AS voiced_char_name, MIN(n.name) AS voicing_actress_name, MIN(t.title) AS voiced_action_movie_jap_eng
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
   keyword AS k,
   movie_companies AS mc,
   movie_info AS mi,
   movie_keyword AS mk,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND t.id = mk.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mc.movie_id = mk.movie_id
AND mi.movie_id = ci.movie_id
AND mi.movie_id = mk.movie_id
AND ci.movie_id = mk.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND k.id = mk.keyword_id
AND ci.note IN ('(voice)', '(1985 production)', '(as Phill Carey)', '(as Vica Borg)', '(Organ)')
AND cn.country_code = '[us]'
AND it.info = 'countries'
AND k.keyword IN ('gold-rush', 'ten-cents-a-dance', 'segment-block', 'roman-salute', 'committee-hearing')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%U%' OR mi.info LIKE '%K%')
AND n.gender = 'm'
AND n.name LIKE '%h%'
AND rt.role = 'actor'
AND t.production_year > 2009;",80,/*+  IndexScan(k keyword_pkey) IndexScan(mk keyword_id_movie_keyword) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) IndexScan(it info_type_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexOnlyScan(an person_id_aka_name) IndexScan(chn char_name_pkey) NestLoop(k mk) NestLoop(k mk t) NestLoop(k mk t ci) HashJoin(k mk t ci rt) NestLoop(k mk t ci rt n) NestLoop(k mk t ci rt n mi) NestLoop(k mk t ci rt n mi it) NestLoop(k mk t ci rt n mi it mc) NestLoop(k mk t ci rt n mi it mc cn) NestLoop(k mk t ci rt n mi it mc cn an) NestLoop(k mk t ci rt n mi it mc cn an chn) Leading((((((((((((k mk) t) ci) rt) n) mi) it) mc) cn) an) chn)) */
"SELECT MIN(chn.name) AS voiced_char_name, MIN(n.name) AS voicing_actress_name, MIN(t.title) AS voiced_action_movie_jap_eng
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
   keyword AS k,
   movie_companies AS mc,
   movie_info AS mi,
   movie_keyword AS mk,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND t.id = mk.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mc.movie_id = mk.movie_id
AND mi.movie_id = ci.movie_id
AND mi.movie_id = mk.movie_id
AND ci.movie_id = mk.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND k.id = mk.keyword_id
AND ci.note IN ('(as Charles Tamburro)', '(as Qadir Farookh)', '(as Shwetha Menon)', '(as Adam Bauman)', '(as Vita MavriÃ¨)')
AND cn.country_code = '[fr]'
AND it.info = 'book'
AND k.keyword IN ('weapons-research', 'teenage-alienation', 'breadline', 'tooth-decay', 'jaws-of-life')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%n%' OR mi.info LIKE '%d%')
AND n.gender = 'm'
AND n.name LIKE '%,%'
AND rt.role = 'actor'
AND t.production_year > 1990;",80,/*+  IndexScan(k keyword_pkey) IndexScan(mk keyword_id_movie_keyword) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) IndexScan(it info_type_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexOnlyScan(an person_id_aka_name) IndexScan(chn char_name_pkey) NestLoop(k mk) NestLoop(k mk t) NestLoop(k mk t ci) HashJoin(k mk t ci rt) NestLoop(k mk t ci rt n) NestLoop(k mk t ci rt n mi) NestLoop(k mk t ci rt n mi it) NestLoop(k mk t ci rt n mi it mc) NestLoop(k mk t ci rt n mi it mc cn) NestLoop(k mk t ci rt n mi it mc cn an) NestLoop(k mk t ci rt n mi it mc cn an chn) Leading((((((((((((k mk) t) ci) rt) n) mi) it) mc) cn) an) chn)) */
"SELECT MIN(chn.name) AS voiced_char_name, MIN(n.name) AS voicing_actress_name, MIN(t.title) AS voiced_action_movie_jap_eng
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
   keyword AS k,
   movie_companies AS mc,
   movie_info AS mi,
   movie_keyword AS mk,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND t.id = mk.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mc.movie_id = mk.movie_id
AND mi.movie_id = ci.movie_id
AND mi.movie_id = mk.movie_id
AND ci.movie_id = mk.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND k.id = mk.keyword_id
AND ci.note IN ('(as Charles Tamburro)', '(voice) (as Penn)', '(as Richard Duran)', '(as Hans Deponte)', '(as Caprice Fisher)')
AND cn.country_code = '[es]'
AND it.info = 'tech info'
AND k.keyword IN ('action-hero', 'food-politics', 'detour', 'spectres', 'colored-tuxedo')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%3%' OR mi.info LIKE '%A%')
AND n.gender = 'm'
AND n.name LIKE '%.%'
AND rt.role = 'actor'
AND t.production_year > 1990;",80,/*+  IndexScan(k keyword_pkey) IndexScan(mk keyword_id_movie_keyword) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) IndexScan(it info_type_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexOnlyScan(an person_id_aka_name) IndexScan(chn char_name_pkey) NestLoop(k mk) NestLoop(k mk t) NestLoop(k mk t ci) HashJoin(k mk t ci rt) NestLoop(k mk t ci rt n) NestLoop(k mk t ci rt n mi) NestLoop(k mk t ci rt n mi it) NestLoop(k mk t ci rt n mi it mc) NestLoop(k mk t ci rt n mi it mc cn) NestLoop(k mk t ci rt n mi it mc cn an) NestLoop(k mk t ci rt n mi it mc cn an chn) Leading((((((((((((k mk) t) ci) rt) n) mi) it) mc) cn) an) chn)) */
"SELECT MIN(chn.name) AS voiced_char_name, MIN(n.name) AS voicing_actress_name, MIN(t.title) AS voiced_action_movie_jap_eng
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
   keyword AS k,
   movie_companies AS mc,
   movie_info AS mi,
   movie_keyword AS mk,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND t.id = mk.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mc.movie_id = mk.movie_id
AND mi.movie_id = ci.movie_id
AND mi.movie_id = mk.movie_id
AND ci.movie_id = mk.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND k.id = mk.keyword_id
AND ci.note IN ('(as Charles Tamburro)', '(as I. Olesha)', '(as Imtiaz Bagwan)', '(as Gamaston)', '(as Dorit Lev Ari)')
AND cn.country_code = '[gb]'
AND it.info = 'other literature'
AND k.keyword IN ('weapons-research', 'gumshoe', 'headshop', 'gulzar', 'enthusiast')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%5%' OR mi.info LIKE '%i%')
AND n.gender = 'm'
AND n.name LIKE '%r%'
AND rt.role = 'actor'
AND t.production_year > 1990;",80,/*+  IndexScan(k keyword_pkey) IndexScan(mk keyword_id_movie_keyword) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) IndexScan(it info_type_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexOnlyScan(an person_id_aka_name) IndexScan(chn char_name_pkey) NestLoop(k mk) NestLoop(k mk t) NestLoop(k mk t ci) HashJoin(k mk t ci rt) NestLoop(k mk t ci rt n) NestLoop(k mk t ci rt n mi) NestLoop(k mk t ci rt n mi it) NestLoop(k mk t ci rt n mi it mc) NestLoop(k mk t ci rt n mi it mc cn) NestLoop(k mk t ci rt n mi it mc cn an) NestLoop(k mk t ci rt n mi it mc cn an chn) Leading((((((((((((k mk) t) ci) rt) n) mi) it) mc) cn) an) chn)) */
"SELECT MIN(chn.name) AS voiced_char_name, MIN(n.name) AS voicing_actress_name, MIN(t.title) AS voiced_action_movie_jap_eng
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
   keyword AS k,
   movie_companies AS mc,
   movie_info AS mi,
   movie_keyword AS mk,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND t.id = mk.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mc.movie_id = mk.movie_id
AND mi.movie_id = ci.movie_id
AND mi.movie_id = mk.movie_id
AND ci.movie_id = mk.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND k.id = mk.keyword_id
AND ci.note IN ('(as Charles Tamburro)', '(as Gene Maras)', '(as Neelan Bakashi)', '(as Scot Irish)', '(Munna)')
AND cn.country_code = '[br]'
AND it.info = 'opening weekend'
AND k.keyword IN ('battle', 'disguised-man', 'sailor-suit', 'reference-to-nazis', 'gonzaga')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%b%' OR mi.info LIKE '%A%')
AND n.gender = 'm'
AND n.name LIKE '%a%'
AND rt.role = 'actor'
AND t.production_year > 1990;",80,/*+  IndexScan(k keyword_pkey) IndexScan(mk keyword_id_movie_keyword) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) IndexScan(it info_type_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexOnlyScan(an person_id_aka_name) IndexScan(chn char_name_pkey) NestLoop(k mk) NestLoop(k mk t) NestLoop(k mk t ci) HashJoin(k mk t ci rt) NestLoop(k mk t ci rt n) NestLoop(k mk t ci rt n mi) NestLoop(k mk t ci rt n mi it) NestLoop(k mk t ci rt n mi it mc) NestLoop(k mk t ci rt n mi it mc cn) NestLoop(k mk t ci rt n mi it mc cn an) NestLoop(k mk t ci rt n mi it mc cn an chn) Leading((((((((((((k mk) t) ci) rt) n) mi) it) mc) cn) an) chn)) */
"SELECT MIN(chn.name) AS voiced_char_name, MIN(n.name) AS voicing_actress_name, MIN(t.title) AS voiced_action_movie_jap_eng
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
   keyword AS k,
   movie_companies AS mc,
   movie_info AS mi,
   movie_keyword AS mk,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND t.id = mk.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mc.movie_id = mk.movie_id
AND mi.movie_id = ci.movie_id
AND mi.movie_id = mk.movie_id
AND ci.movie_id = mk.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND k.id = mk.keyword_id
AND ci.note IN ('(as Charles Tamburro)', '(as Stan Fraser)', '(as Lisa Hellwig)', '(as Marjut)', '(as Iron Cobra)')
AND cn.country_code = '[br]'
AND it.info = 'tech info'
AND k.keyword IN ('android', 'buck-rogers', 'tools', 'burning-poem', 'kamalahasan')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%C%' OR mi.info LIKE '%)%')
AND n.gender = 'm'
AND n.name LIKE '%A%'
AND rt.role = 'actor'
AND t.production_year > 1990;",80,/*+  IndexScan(k keyword_pkey) IndexScan(mk keyword_id_movie_keyword) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) IndexScan(it info_type_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexOnlyScan(an person_id_aka_name) IndexScan(chn char_name_pkey) NestLoop(k mk) NestLoop(k mk t) NestLoop(k mk t ci) HashJoin(k mk t ci rt) NestLoop(k mk t ci rt n) NestLoop(k mk t ci rt n mi) NestLoop(k mk t ci rt n mi it) NestLoop(k mk t ci rt n mi it mc) NestLoop(k mk t ci rt n mi it mc cn) NestLoop(k mk t ci rt n mi it mc cn an) NestLoop(k mk t ci rt n mi it mc cn an chn) Leading((((((((((((k mk) t) ci) rt) n) mi) it) mc) cn) an) chn)) */
"SELECT MIN(chn.name) AS voiced_char_name, MIN(n.name) AS voicing_actress_name, MIN(t.title) AS voiced_action_movie_jap_eng
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
   keyword AS k,
   movie_companies AS mc,
   movie_info AS mi,
   movie_keyword AS mk,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND t.id = mk.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mc.movie_id = mk.movie_id
AND mi.movie_id = ci.movie_id
AND mi.movie_id = mk.movie_id
AND ci.movie_id = mk.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND k.id = mk.keyword_id
AND ci.note IN ('(as Charles Tamburro)', '(as A. Tatarskiy)', '(14 episodes 1997-)', '(as Roger Alford)', '(as Ben Weldon)')
AND cn.country_code = '[nl]'
AND it.info = 'rentals'
AND k.keyword IN ('battle', 'guide-animal', 'long-running-tv', 'christian-theme', 'pulsating-image')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%0%' OR mi.info LIKE '%0%')
AND n.gender = 'm'
AND n.name LIKE '%e%'
AND rt.role = 'actor'
AND t.production_year > 1990;",80,/*+  IndexScan(k keyword_pkey) IndexScan(mk keyword_id_movie_keyword) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) IndexScan(it info_type_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexOnlyScan(an person_id_aka_name) IndexScan(chn char_name_pkey) NestLoop(k mk) NestLoop(k mk t) NestLoop(k mk t ci) HashJoin(k mk t ci rt) NestLoop(k mk t ci rt n) NestLoop(k mk t ci rt n mi) NestLoop(k mk t ci rt n mi it) NestLoop(k mk t ci rt n mi it mc) NestLoop(k mk t ci rt n mi it mc cn) NestLoop(k mk t ci rt n mi it mc cn an) NestLoop(k mk t ci rt n mi it mc cn an chn) Leading((((((((((((k mk) t) ci) rt) n) mi) it) mc) cn) an) chn)) */
"SELECT MIN(chn.name) AS voiced_char_name, MIN(n.name) AS voicing_actress_name, MIN(t.title) AS voiced_action_movie_jap_eng
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
   keyword AS k,
   movie_companies AS mc,
   movie_info AS mi,
   movie_keyword AS mk,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND t.id = mk.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mc.movie_id = mk.movie_id
AND mi.movie_id = ci.movie_id
AND mi.movie_id = mk.movie_id
AND ci.movie_id = mk.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND k.id = mk.keyword_id
AND ci.note IN ('(as Charles Tamburro)', '(as S. VrbickÃ¡)', '(as Allan Selwyn)', '(as Mercedes)', '(research staff)')
AND cn.country_code = '[es]'
AND it.info = 'printed media reviews'
AND k.keyword IN ('voice-sampling', 'costa-del-sol-spain', 'compte', 'methane', 'chanel-no.-5')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%,%' OR mi.info LIKE '%r%')
AND n.gender = 'm'
AND n.name LIKE '%u%'
AND rt.role = 'actor'
AND t.production_year > 1990;",80,/*+  IndexScan(k keyword_pkey) IndexScan(mk keyword_id_movie_keyword) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) IndexScan(it info_type_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexOnlyScan(an person_id_aka_name) IndexScan(chn char_name_pkey) NestLoop(k mk) NestLoop(k mk t) NestLoop(k mk t ci) HashJoin(k mk t ci rt) NestLoop(k mk t ci rt n) NestLoop(k mk t ci rt n mi) NestLoop(k mk t ci rt n mi it) NestLoop(k mk t ci rt n mi it mc) NestLoop(k mk t ci rt n mi it mc cn) NestLoop(k mk t ci rt n mi it mc cn an) NestLoop(k mk t ci rt n mi it mc cn an chn) Leading((((((((((((k mk) t) ci) rt) n) mi) it) mc) cn) an) chn)) */
"SELECT MIN(chn.name) AS voiced_char_name, MIN(n.name) AS voicing_actress_name, MIN(t.title) AS voiced_action_movie_jap_eng
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
   keyword AS k,
   movie_companies AS mc,
   movie_info AS mi,
   movie_keyword AS mk,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND t.id = mk.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mc.movie_id = mk.movie_id
AND mi.movie_id = ci.movie_id
AND mi.movie_id = mk.movie_id
AND ci.movie_id = mk.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND k.id = mk.keyword_id
AND ci.note IN ('(as Charles Tamburro)', '(as Karl Lenox)', '(as Luc Gentile)', '(as P.B. Sahani)', '(1992-1995))')
AND cn.country_code = '[fr]'
AND it.info = 'printed media reviews'
AND k.keyword IN ('2020s', 'alternative-school', 'jesuit-priest', 'radiation-victims', 'visitors-room')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%p%' OR mi.info LIKE '%d%')
AND n.gender = 'm'
AND n.name LIKE '%b%'
AND rt.role = 'actor'
AND t.production_year > 1990;",80,/*+  IndexScan(k keyword_pkey) IndexScan(mk keyword_id_movie_keyword) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) IndexScan(it info_type_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexOnlyScan(an person_id_aka_name) IndexScan(chn char_name_pkey) NestLoop(k mk) NestLoop(k mk t) NestLoop(k mk t ci) HashJoin(k mk t ci rt) NestLoop(k mk t ci rt n) NestLoop(k mk t ci rt n mi) NestLoop(k mk t ci rt n mi it) NestLoop(k mk t ci rt n mi it mc) NestLoop(k mk t ci rt n mi it mc cn) NestLoop(k mk t ci rt n mi it mc cn an) NestLoop(k mk t ci rt n mi it mc cn an chn) Leading((((((((((((k mk) t) ci) rt) n) mi) it) mc) cn) an) chn)) */
"SELECT MIN(chn.name) AS voiced_char_name, MIN(n.name) AS voicing_actress_name, MIN(t.title) AS voiced_action_movie_jap_eng
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
   keyword AS k,
   movie_companies AS mc,
   movie_info AS mi,
   movie_keyword AS mk,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND t.id = mk.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mc.movie_id = mk.movie_id
AND mi.movie_id = ci.movie_id
AND mi.movie_id = mk.movie_id
AND ci.movie_id = mk.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND k.id = mk.keyword_id
AND ci.note IN ('(as Charles Tamburro)', '(as J.R.Larrath)', '(as G.Gotovchits)', '(as Robert Blood)', '(as DJ August)')
AND cn.country_code = '[es]'
AND it.info = 'weekend gross'
AND k.keyword IN ('2020s', 'workbook', 'school-integration', 'safety-catch', 'bunny-costume')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%4%' OR mi.info LIKE '%9%')
AND n.gender = 'm'
AND n.name LIKE '%A%'
AND rt.role = 'actor'
AND t.production_year > 1990;",80,/*+  IndexScan(k keyword_pkey) IndexScan(mk keyword_id_movie_keyword) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) IndexScan(it info_type_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexOnlyScan(an person_id_aka_name) IndexScan(chn char_name_pkey) NestLoop(k mk) NestLoop(k mk t) NestLoop(k mk t ci) HashJoin(k mk t ci rt) NestLoop(k mk t ci rt n) NestLoop(k mk t ci rt n mi) NestLoop(k mk t ci rt n mi it) NestLoop(k mk t ci rt n mi it mc) NestLoop(k mk t ci rt n mi it mc cn) NestLoop(k mk t ci rt n mi it mc cn an) NestLoop(k mk t ci rt n mi it mc cn an chn) Leading((((((((((((k mk) t) ci) rt) n) mi) it) mc) cn) an) chn)) */
"SELECT MIN(chn.name) AS voiced_char_name, MIN(n.name) AS voicing_actress_name, MIN(t.title) AS voiced_action_movie_jap_eng
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
   keyword AS k,
   movie_companies AS mc,
   movie_info AS mi,
   movie_keyword AS mk,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND t.id = mk.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mc.movie_id = mk.movie_id
AND mi.movie_id = ci.movie_id
AND mi.movie_id = mk.movie_id
AND ci.movie_id = mk.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND k.id = mk.keyword_id
AND ci.note IN ('(as Charles Tamburro)', '(Cowhand)', '(""What Where"")', '(story ""Cocaine"")', '(as Bin Seung Poon)')
AND cn.country_code = '[es]'
AND it.info = 'production process protocol'
AND k.keyword IN ('android', 'melon', 'fuzzy-navel', 'concert-preparation', 'robert-capa')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%e%' OR mi.info LIKE '%J%')
AND n.gender = 'm'
AND n.name LIKE '%e%'
AND rt.role = 'actor'
AND t.production_year > 1990;",80,/*+  IndexScan(k keyword_pkey) IndexScan(mk keyword_id_movie_keyword) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) IndexScan(it info_type_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexOnlyScan(an person_id_aka_name) IndexScan(chn char_name_pkey) NestLoop(k mk) NestLoop(k mk t) NestLoop(k mk t ci) HashJoin(k mk t ci rt) NestLoop(k mk t ci rt n) NestLoop(k mk t ci rt n mi) NestLoop(k mk t ci rt n mi it) NestLoop(k mk t ci rt n mi it mc) NestLoop(k mk t ci rt n mi it mc cn) NestLoop(k mk t ci rt n mi it mc cn an) NestLoop(k mk t ci rt n mi it mc cn an chn) Leading((((((((((((k mk) t) ci) rt) n) mi) it) mc) cn) an) chn)) */
"SELECT MIN(chn.name) AS voiced_char_name, MIN(n.name) AS voicing_actress_name, MIN(t.title) AS voiced_action_movie_jap_eng
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
   keyword AS k,
   movie_companies AS mc,
   movie_info AS mi,
   movie_keyword AS mk,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND t.id = mk.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mc.movie_id = mk.movie_id
AND mi.movie_id = ci.movie_id
AND mi.movie_id = mk.movie_id
AND ci.movie_id = mk.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND k.id = mk.keyword_id
AND ci.note IN ('(as Charles Tamburro)', '(truck shacker)', '(as D. Andreyev)', '(Andrade)', '(as Georgij Miljar)')
AND cn.country_code = '[se]'
AND it.info = 'book'
AND k.keyword IN ('action-hero', 'cobwebs', 'the-iron-wall', 'tango-singer', 'seducing-a-minor')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%D%' OR mi.info LIKE '%m%')
AND n.gender = 'm'
AND n.name LIKE '%o%'
AND rt.role = 'actor'
AND t.production_year > 1990;",80,/*+  IndexScan(k keyword_pkey) IndexScan(mk keyword_id_movie_keyword) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) IndexScan(it info_type_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexOnlyScan(an person_id_aka_name) IndexScan(chn char_name_pkey) NestLoop(k mk) NestLoop(k mk t) NestLoop(k mk t ci) HashJoin(k mk t ci rt) NestLoop(k mk t ci rt n) NestLoop(k mk t ci rt n mi) NestLoop(k mk t ci rt n mi it) NestLoop(k mk t ci rt n mi it mc) NestLoop(k mk t ci rt n mi it mc cn) NestLoop(k mk t ci rt n mi it mc cn an) NestLoop(k mk t ci rt n mi it mc cn an chn) Leading((((((((((((k mk) t) ci) rt) n) mi) it) mc) cn) an) chn)) */
"SELECT MIN(chn.name) AS voiced_char_name, MIN(n.name) AS voicing_actress_name, MIN(t.title) AS voiced_action_movie_jap_eng
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
   keyword AS k,
   movie_companies AS mc,
   movie_info AS mi,
   movie_keyword AS mk,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND t.id = mk.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mc.movie_id = mk.movie_id
AND mi.movie_id = ci.movie_id
AND mi.movie_id = mk.movie_id
AND ci.movie_id = mk.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND k.id = mk.keyword_id
AND ci.note IN ('(as Charles Tamburro)', '(as Nivia Davis)', '(as Medin)', '(Newspaper Thief)', '(segment ""Wet"")')
AND cn.country_code = '[us]'
AND it.info = 'admissions'
AND k.keyword IN ('voice-sampling', 'frat-boy', 'cochin-india', 'holed-up-in-shack', 'topographical-map')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%3%' OR mi.info LIKE '%S%')
AND n.gender = 'm'
AND n.name LIKE '%o%'
AND rt.role = 'actor'
AND t.production_year > 1990;",80,/*+  IndexScan(k keyword_pkey) IndexScan(mk keyword_id_movie_keyword) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) IndexScan(it info_type_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexOnlyScan(an person_id_aka_name) IndexScan(chn char_name_pkey) NestLoop(k mk) NestLoop(k mk t) NestLoop(k mk t ci) HashJoin(k mk t ci rt) NestLoop(k mk t ci rt n) NestLoop(k mk t ci rt n mi) NestLoop(k mk t ci rt n mi it) NestLoop(k mk t ci rt n mi it mc) NestLoop(k mk t ci rt n mi it mc cn) NestLoop(k mk t ci rt n mi it mc cn an) NestLoop(k mk t ci rt n mi it mc cn an chn) Leading((((((((((((k mk) t) ci) rt) n) mi) it) mc) cn) an) chn)) */
"SELECT MIN(chn.name) AS voiced_char_name, MIN(n.name) AS voicing_actress_name, MIN(t.title) AS voiced_action_movie_jap_eng
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
   keyword AS k,
   movie_companies AS mc,
   movie_info AS mi,
   movie_keyword AS mk,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND t.id = mk.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mc.movie_id = mk.movie_id
AND mi.movie_id = ci.movie_id
AND mi.movie_id = mk.movie_id
AND ci.movie_id = mk.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND k.id = mk.keyword_id
AND ci.note IN ('(as Charles Tamburro)', '(as Buddy Sims)', '(1924)', '(as Annete Montana)', '(Emory)')
AND cn.country_code = '[nl]'
AND it.info = 'novel'
AND k.keyword IN ('action-hero', 'weight-training', 'monster-truck', 'laughing-gas', 'strife')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%:%' OR mi.info LIKE '%1%')
AND n.gender = 'm'
AND n.name LIKE '%a%'
AND rt.role = 'actor'
AND t.production_year > 1990;",80,/*+  IndexScan(k keyword_pkey) IndexScan(mk keyword_id_movie_keyword) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) IndexScan(it info_type_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexOnlyScan(an person_id_aka_name) IndexScan(chn char_name_pkey) NestLoop(k mk) NestLoop(k mk t) NestLoop(k mk t ci) HashJoin(k mk t ci rt) NestLoop(k mk t ci rt n) NestLoop(k mk t ci rt n mi) NestLoop(k mk t ci rt n mi it) NestLoop(k mk t ci rt n mi it mc) NestLoop(k mk t ci rt n mi it mc cn) NestLoop(k mk t ci rt n mi it mc cn an) NestLoop(k mk t ci rt n mi it mc cn an chn) Leading((((((((((((k mk) t) ci) rt) n) mi) it) mc) cn) an) chn)) */
"SELECT MIN(chn.name) AS voiced_char_name, MIN(n.name) AS voicing_actress_name, MIN(t.title) AS voiced_action_movie_jap_eng
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
   keyword AS k,
   movie_companies AS mc,
   movie_info AS mi,
   movie_keyword AS mk,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND t.id = mk.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mc.movie_id = mk.movie_id
AND mi.movie_id = ci.movie_id
AND mi.movie_id = mk.movie_id
AND ci.movie_id = mk.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND k.id = mk.keyword_id
AND ci.note IN ('(as Charles Tamburro)', '(press: Argentina)', '(the robot)', '(Master)', '(as Jay Peterson)')
AND cn.country_code = '[fr]'
AND it.info = 'taglines'
AND k.keyword IN ('weapons-research', 'illegal-fundraising', 'turtle-wax', 'house-of-mirrors', 'forestry')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%h%' OR mi.info LIKE '%e%')
AND n.gender = 'm'
AND n.name LIKE '%r%'
AND rt.role = 'actor'
AND t.production_year > 1990;",80,/*+  IndexScan(k keyword_pkey) IndexScan(mk keyword_id_movie_keyword) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) IndexScan(it info_type_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexOnlyScan(an person_id_aka_name) IndexScan(chn char_name_pkey) NestLoop(k mk) NestLoop(k mk t) NestLoop(k mk t ci) HashJoin(k mk t ci rt) NestLoop(k mk t ci rt n) NestLoop(k mk t ci rt n mi) NestLoop(k mk t ci rt n mi it) NestLoop(k mk t ci rt n mi it mc) NestLoop(k mk t ci rt n mi it mc cn) NestLoop(k mk t ci rt n mi it mc cn an) NestLoop(k mk t ci rt n mi it mc cn an chn) Leading((((((((((((k mk) t) ci) rt) n) mi) it) mc) cn) an) chn)) */
"SELECT MIN(chn.name) AS voiced_char_name, MIN(n.name) AS voicing_actress_name, MIN(t.title) AS voiced_action_movie_jap_eng
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
   keyword AS k,
   movie_companies AS mc,
   movie_info AS mi,
   movie_keyword AS mk,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND t.id = mk.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mc.movie_id = mk.movie_id
AND mi.movie_id = ci.movie_id
AND mi.movie_id = mk.movie_id
AND ci.movie_id = mk.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND k.id = mk.keyword_id
AND ci.note IN ('(as Charles Tamburro)', '(as Mike Lopez)', '(as Erik Hahn)', '(as Billy Dinkle)', '(as Sasa Castura)')
AND cn.country_code = '[fr]'
AND it.info = 'taglines'
AND k.keyword IN ('voice-sampling', 'copping-a-feel', 'hitchhike', 'fiorinal', 'seismograph')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%n%' OR mi.info LIKE '%t%')
AND n.gender = 'm'
AND n.name LIKE '%T%'
AND rt.role = 'actor'
AND t.production_year > 1990;",80,/*+  IndexScan(k keyword_pkey) IndexScan(mk keyword_id_movie_keyword) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) IndexScan(it info_type_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexOnlyScan(an person_id_aka_name) IndexScan(chn char_name_pkey) NestLoop(k mk) NestLoop(k mk t) NestLoop(k mk t ci) HashJoin(k mk t ci rt) NestLoop(k mk t ci rt n) NestLoop(k mk t ci rt n mi) NestLoop(k mk t ci rt n mi it) NestLoop(k mk t ci rt n mi it mc) NestLoop(k mk t ci rt n mi it mc cn) NestLoop(k mk t ci rt n mi it mc cn an) NestLoop(k mk t ci rt n mi it mc cn an chn) Leading((((((((((((k mk) t) ci) rt) n) mi) it) mc) cn) an) chn)) */
"SELECT MIN(chn.name) AS voiced_char_name, MIN(n.name) AS voicing_actress_name, MIN(t.title) AS voiced_action_movie_jap_eng
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
   keyword AS k,
   movie_companies AS mc,
   movie_info AS mi,
   movie_keyword AS mk,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND t.id = mk.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mc.movie_id = mk.movie_id
AND mi.movie_id = ci.movie_id
AND mi.movie_id = mk.movie_id
AND ci.movie_id = mk.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND k.id = mk.keyword_id
AND ci.note IN ('(voice)', '(as Ghazi Twist)', '(as L. Chase)', '(as Yvonne Romaine)', '(as Simon R. Baker)')
AND cn.country_code = '[us]'
AND it.info = 'certificates'
AND k.keyword IN ('shooting-a-woman', 'mute-witness', 'witness-to-sex', 'locked-in-jail', 'condom-express')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%1%' OR mi.info LIKE '%:%')
AND n.gender = 'm'
AND n.name LIKE '%e%'
AND rt.role = 'actor'
AND t.production_year > 2009;",80,/*+  IndexScan(k keyword_pkey) IndexScan(mk keyword_id_movie_keyword) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) IndexScan(it info_type_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexOnlyScan(an person_id_aka_name) IndexScan(chn char_name_pkey) NestLoop(k mk) NestLoop(k mk t) NestLoop(k mk t ci) HashJoin(k mk t ci rt) NestLoop(k mk t ci rt n) NestLoop(k mk t ci rt n mi) NestLoop(k mk t ci rt n mi it) NestLoop(k mk t ci rt n mi it mc) NestLoop(k mk t ci rt n mi it mc cn) NestLoop(k mk t ci rt n mi it mc cn an) NestLoop(k mk t ci rt n mi it mc cn an chn) Leading((((((((((((k mk) t) ci) rt) n) mi) it) mc) cn) an) chn)) */
"SELECT MIN(chn.name) AS voiced_char_name, MIN(n.name) AS voicing_actress_name, MIN(t.title) AS voiced_action_movie_jap_eng
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
   keyword AS k,
   movie_companies AS mc,
   movie_info AS mi,
   movie_keyword AS mk,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND t.id = mk.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mc.movie_id = mk.movie_id
AND mi.movie_id = ci.movie_id
AND mi.movie_id = mk.movie_id
AND ci.movie_id = mk.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND k.id = mk.keyword_id
AND ci.note IN ('(as Charles Tamburro)', '(jewelry by)', '(as Rabbi Ian Pear)', '(as Vanessa Moore)', '(as Emylou Lunar)')
AND cn.country_code = '[us]'
AND it.info = 'printed media reviews'
AND k.keyword IN ('battle', 'plate-in-the-head', 'meat-tricks', 'meat-chopper', 'israeli-embassy')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%s%' OR mi.info LIKE '%t%')
AND n.gender = 'm'
AND n.name LIKE '%T%'
AND rt.role = 'actor'
AND t.production_year > 1990;",80,/*+  IndexScan(k keyword_pkey) IndexScan(mk keyword_id_movie_keyword) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) IndexScan(it info_type_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexOnlyScan(an person_id_aka_name) IndexScan(chn char_name_pkey) NestLoop(k mk) NestLoop(k mk t) NestLoop(k mk t ci) HashJoin(k mk t ci rt) NestLoop(k mk t ci rt n) NestLoop(k mk t ci rt n mi) NestLoop(k mk t ci rt n mi it) NestLoop(k mk t ci rt n mi it mc) NestLoop(k mk t ci rt n mi it mc cn) NestLoop(k mk t ci rt n mi it mc cn an) NestLoop(k mk t ci rt n mi it mc cn an chn) Leading((((((((((((k mk) t) ci) rt) n) mi) it) mc) cn) an) chn)) */
"SELECT MIN(chn.name) AS voiced_char_name, MIN(n.name) AS voicing_actress_name, MIN(t.title) AS voiced_action_movie_jap_eng
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
   keyword AS k,
   movie_companies AS mc,
   movie_info AS mi,
   movie_keyword AS mk,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND t.id = mk.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mc.movie_id = mk.movie_id
AND mi.movie_id = ci.movie_id
AND mi.movie_id = mk.movie_id
AND ci.movie_id = mk.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND k.id = mk.keyword_id
AND ci.note IN ('(as Charles Tamburro)', '(stone mason)', '(creator) (2009-)', '(as Al Edmundson)', '(as Paul Boivert)')
AND cn.country_code = '[se]'
AND it.info = 'book'
AND k.keyword IN ('2020s', 'glenn-miller', 'field-of-wheat', 'foosball-table', 'friday-night')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%a%' OR mi.info LIKE '%J%')
AND n.gender = 'm'
AND n.name LIKE '%A%'
AND rt.role = 'actor'
AND t.production_year > 1990;",80,/*+  IndexScan(k keyword_pkey) IndexScan(mk keyword_id_movie_keyword) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) IndexScan(it info_type_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexOnlyScan(an person_id_aka_name) IndexScan(chn char_name_pkey) NestLoop(k mk) NestLoop(k mk t) NestLoop(k mk t ci) HashJoin(k mk t ci rt) NestLoop(k mk t ci rt n) NestLoop(k mk t ci rt n mi) NestLoop(k mk t ci rt n mi it) NestLoop(k mk t ci rt n mi it mc) NestLoop(k mk t ci rt n mi it mc cn) NestLoop(k mk t ci rt n mi it mc cn an) NestLoop(k mk t ci rt n mi it mc cn an chn) Leading((((((((((((k mk) t) ci) rt) n) mi) it) mc) cn) an) chn)) */
"SELECT MIN(chn.name) AS voiced_char_name, MIN(n.name) AS voicing_actress_name, MIN(t.title) AS voiced_action_movie_jap_eng
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
   keyword AS k,
   movie_companies AS mc,
   movie_info AS mi,
   movie_keyword AS mk,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND t.id = mk.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mc.movie_id = mk.movie_id
AND mi.movie_id = ci.movie_id
AND mi.movie_id = mk.movie_id
AND ci.movie_id = mk.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND k.id = mk.keyword_id
AND ci.note IN ('(voice)', '(as Keej Mullen)', '(assistant curator)', '(as Daniel McGrew)', '(as Erol Emerle)')
AND cn.country_code = '[us]'
AND it.info = 'certificates'
AND k.keyword IN ('paddock', 'melting-genitalia', 'abstinence', 'late-for-work', 'hypo')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%1%' OR mi.info LIKE '%1%')
AND n.gender = 'm'
AND n.name LIKE '%f%'
AND rt.role = 'actor'
AND t.production_year > 2009;",80,/*+  IndexScan(k keyword_pkey) IndexScan(mk keyword_id_movie_keyword) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) IndexScan(it info_type_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexOnlyScan(an person_id_aka_name) IndexScan(chn char_name_pkey) NestLoop(k mk) NestLoop(k mk t) NestLoop(k mk t ci) HashJoin(k mk t ci rt) NestLoop(k mk t ci rt n) NestLoop(k mk t ci rt n mi) NestLoop(k mk t ci rt n mi it) NestLoop(k mk t ci rt n mi it mc) NestLoop(k mk t ci rt n mi it mc cn) NestLoop(k mk t ci rt n mi it mc cn an) NestLoop(k mk t ci rt n mi it mc cn an chn) Leading((((((((((((k mk) t) ci) rt) n) mi) it) mc) cn) an) chn)) */
"SELECT MIN(chn.name) AS voiced_char_name, MIN(n.name) AS voicing_actress_name, MIN(t.title) AS voiced_action_movie_jap_eng
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
   keyword AS k,
   movie_companies AS mc,
   movie_info AS mi,
   movie_keyword AS mk,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND t.id = mk.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mc.movie_id = mk.movie_id
AND mi.movie_id = ci.movie_id
AND mi.movie_id = mk.movie_id
AND ci.movie_id = mk.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND k.id = mk.keyword_id
AND ci.note IN ('(as Charles Tamburro)', '(data logger)', '(as Luis Navarro)', '(as Scot Irish)', '(M16A4)')
AND cn.country_code = '[gb]'
AND it.info = 'opening weekend'
AND k.keyword IN ('2020s', 'unnecessary-surgery', 'rebuilding-team', 'barrel-racing', 'sequence-shot')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%)%' OR mi.info LIKE '%,%')
AND n.gender = 'm'
AND n.name LIKE '%r%'
AND rt.role = 'actor'
AND t.production_year > 1990;",80,/*+  IndexScan(k keyword_pkey) IndexScan(mk keyword_id_movie_keyword) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) IndexScan(it info_type_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexOnlyScan(an person_id_aka_name) IndexScan(chn char_name_pkey) NestLoop(k mk) NestLoop(k mk t) NestLoop(k mk t ci) HashJoin(k mk t ci rt) NestLoop(k mk t ci rt n) NestLoop(k mk t ci rt n mi) NestLoop(k mk t ci rt n mi it) NestLoop(k mk t ci rt n mi it mc) NestLoop(k mk t ci rt n mi it mc cn) NestLoop(k mk t ci rt n mi it mc cn an) NestLoop(k mk t ci rt n mi it mc cn an chn) Leading((((((((((((k mk) t) ci) rt) n) mi) it) mc) cn) an) chn)) */
"SELECT MIN(chn.name) AS voiced_char_name, MIN(n.name) AS voicing_actress_name, MIN(t.title) AS voiced_action_movie_jap_eng
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
   keyword AS k,
   movie_companies AS mc,
   movie_info AS mi,
   movie_keyword AS mk,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND t.id = mk.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mc.movie_id = mk.movie_id
AND mi.movie_id = ci.movie_id
AND mi.movie_id = mk.movie_id
AND ci.movie_id = mk.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND k.id = mk.keyword_id
AND ci.note IN ('(as Charles Tamburro)', '(as Budd Stout)', '(fence master)', '(as Ben Salisbury)', '(as Ben Gordon)')
AND cn.country_code = '[fr]'
AND it.info = 'novel'
AND k.keyword IN ('2020s', 'hokianga', 'flip-phone', 'sandpoint', 'polka-dot-dress')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%k%' OR mi.info LIKE '%R%')
AND n.gender = 'm'
AND n.name LIKE '%b%'
AND rt.role = 'actor'
AND t.production_year > 1990;",80,/*+  IndexScan(k keyword_pkey) IndexScan(mk keyword_id_movie_keyword) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) IndexScan(it info_type_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexOnlyScan(an person_id_aka_name) IndexScan(chn char_name_pkey) NestLoop(k mk) NestLoop(k mk t) NestLoop(k mk t ci) HashJoin(k mk t ci rt) NestLoop(k mk t ci rt n) NestLoop(k mk t ci rt n mi) NestLoop(k mk t ci rt n mi it) NestLoop(k mk t ci rt n mi it mc) NestLoop(k mk t ci rt n mi it mc cn) NestLoop(k mk t ci rt n mi it mc cn an) NestLoop(k mk t ci rt n mi it mc cn an chn) Leading((((((((((((k mk) t) ci) rt) n) mi) it) mc) cn) an) chn)) */
"SELECT MIN(chn.name) AS voiced_char_name, MIN(n.name) AS voicing_actress_name, MIN(t.title) AS voiced_action_movie_jap_eng
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
   keyword AS k,
   movie_companies AS mc,
   movie_info AS mi,
   movie_keyword AS mk,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND t.id = mk.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mc.movie_id = mk.movie_id
AND mi.movie_id = ci.movie_id
AND mi.movie_id = mk.movie_id
AND ci.movie_id = mk.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND k.id = mk.keyword_id
AND ci.note IN ('(as Charles Tamburro)', '(as Tony Amirati)', '(Mandira Salon)', '(as Trey Farely)', '(as Geoff Landis)')
AND cn.country_code = '[gb]'
AND it.info = 'tech info'
AND k.keyword IN ('android', 'postman', 'spitting-into-soup', 'older-woman', 'devon-england')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%d%' OR mi.info LIKE '%w%')
AND n.gender = 'm'
AND n.name LIKE '%m%'
AND rt.role = 'actor'
AND t.production_year > 1990;",80,/*+  IndexScan(k keyword_pkey) IndexScan(mk keyword_id_movie_keyword) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) IndexScan(it info_type_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexOnlyScan(an person_id_aka_name) IndexScan(chn char_name_pkey) NestLoop(k mk) NestLoop(k mk t) NestLoop(k mk t ci) HashJoin(k mk t ci rt) NestLoop(k mk t ci rt n) NestLoop(k mk t ci rt n mi) NestLoop(k mk t ci rt n mi it) NestLoop(k mk t ci rt n mi it mc) NestLoop(k mk t ci rt n mi it mc cn) NestLoop(k mk t ci rt n mi it mc cn an) NestLoop(k mk t ci rt n mi it mc cn an chn) Leading((((((((((((k mk) t) ci) rt) n) mi) it) mc) cn) an) chn)) */
"SELECT MIN(chn.name) AS voiced_char_name, MIN(n.name) AS voicing_actress_name, MIN(t.title) AS voiced_action_movie_jap_eng
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
   keyword AS k,
   movie_companies AS mc,
   movie_info AS mi,
   movie_keyword AS mk,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND t.id = mk.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mc.movie_id = mk.movie_id
AND mi.movie_id = ci.movie_id
AND mi.movie_id = mk.movie_id
AND ci.movie_id = mk.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND k.id = mk.keyword_id
AND ci.note IN ('(as Charles Tamburro)', '(as KrÃ¼melchen)', '(as Neffe)', '(as James Sezchuan)', '(as Michele Marian)')
AND cn.country_code = '[fr]'
AND it.info = 'adaption'
AND k.keyword IN ('action-hero', 'female-cook', 'chemical-pollution', 'panzer', 'child-criminal')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%i%' OR mi.info LIKE '%3%')
AND n.gender = 'm'
AND n.name LIKE '%b%'
AND rt.role = 'actor'
AND t.production_year > 1990;",80,/*+  IndexScan(k keyword_pkey) IndexScan(mk keyword_id_movie_keyword) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) IndexScan(it info_type_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexOnlyScan(an person_id_aka_name) IndexScan(chn char_name_pkey) NestLoop(k mk) NestLoop(k mk t) NestLoop(k mk t ci) HashJoin(k mk t ci rt) NestLoop(k mk t ci rt n) NestLoop(k mk t ci rt n mi) NestLoop(k mk t ci rt n mi it) NestLoop(k mk t ci rt n mi it mc) NestLoop(k mk t ci rt n mi it mc cn) NestLoop(k mk t ci rt n mi it mc cn an) NestLoop(k mk t ci rt n mi it mc cn an chn) Leading((((((((((((k mk) t) ci) rt) n) mi) it) mc) cn) an) chn)) */
"SELECT MIN(chn.name) AS voiced_char_name, MIN(n.name) AS voicing_actress_name, MIN(t.title) AS voiced_action_movie_jap_eng
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
   keyword AS k,
   movie_companies AS mc,
   movie_info AS mi,
   movie_keyword AS mk,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND t.id = mk.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mc.movie_id = mk.movie_id
AND mi.movie_id = ci.movie_id
AND mi.movie_id = mk.movie_id
AND ci.movie_id = mk.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND k.id = mk.keyword_id
AND ci.note IN ('(as Charles Tamburro)', '(""Voltaire"")', '(as Nicoli Lemeni)', '(as Kolya Pogodin)', '(as Peter Colburn)')
AND cn.country_code = '[gb]'
AND it.info = 'trivia'
AND k.keyword IN ('voice-sampling', 'scaffidi', 'ancient-battle', '2500s', 'clanger')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%t%' OR mi.info LIKE '%t%')
AND n.gender = 'm'
AND n.name LIKE '%s%'
AND rt.role = 'actor'
AND t.production_year > 1990;",80,/*+  IndexScan(k keyword_pkey) IndexScan(mk keyword_id_movie_keyword) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) IndexScan(it info_type_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexOnlyScan(an person_id_aka_name) IndexScan(chn char_name_pkey) NestLoop(k mk) NestLoop(k mk t) NestLoop(k mk t ci) HashJoin(k mk t ci rt) NestLoop(k mk t ci rt n) NestLoop(k mk t ci rt n mi) NestLoop(k mk t ci rt n mi it) NestLoop(k mk t ci rt n mi it mc) NestLoop(k mk t ci rt n mi it mc cn) NestLoop(k mk t ci rt n mi it mc cn an) NestLoop(k mk t ci rt n mi it mc cn an chn) Leading((((((((((((k mk) t) ci) rt) n) mi) it) mc) cn) an) chn)) */
"SELECT MIN(chn.name) AS voiced_char_name, MIN(n.name) AS voicing_actress_name, MIN(t.title) AS voiced_action_movie_jap_eng
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
   keyword AS k,
   movie_companies AS mc,
   movie_info AS mi,
   movie_keyword AS mk,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND t.id = mk.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mc.movie_id = mk.movie_id
AND mi.movie_id = ci.movie_id
AND mi.movie_id = mk.movie_id
AND ci.movie_id = mk.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND k.id = mk.keyword_id
AND ci.note IN ('(voice)', '(as Kylie Richman)', '(as KeÃ©ry Panni)', '(as L. Obrazumova)', '(Rasta)')
AND cn.country_code = '[us]'
AND it.info = 'certificates'
AND k.keyword IN ('liar''s-dice', 'plane-construction', 'driving', 'charity-work', 'chuquicamata-chile')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%K%' OR mi.info LIKE '%8%')
AND n.gender = 'm'
AND n.name LIKE '%R%'
AND rt.role = 'actor'
AND t.production_year > 2009;",80,/*+  IndexScan(k keyword_pkey) IndexScan(mk keyword_id_movie_keyword) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) IndexScan(it info_type_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexOnlyScan(an person_id_aka_name) IndexScan(chn char_name_pkey) NestLoop(k mk) NestLoop(k mk t) NestLoop(k mk t ci) HashJoin(k mk t ci rt) NestLoop(k mk t ci rt n) NestLoop(k mk t ci rt n mi) NestLoop(k mk t ci rt n mi it) NestLoop(k mk t ci rt n mi it mc) NestLoop(k mk t ci rt n mi it mc cn) NestLoop(k mk t ci rt n mi it mc cn an) NestLoop(k mk t ci rt n mi it mc cn an chn) Leading((((((((((((k mk) t) ci) rt) n) mi) it) mc) cn) an) chn)) */
"SELECT MIN(chn.name) AS voiced_char_name, MIN(n.name) AS voicing_actress_name, MIN(t.title) AS voiced_action_movie_jap_eng
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
   keyword AS k,
   movie_companies AS mc,
   movie_info AS mi,
   movie_keyword AS mk,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND t.id = mk.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mc.movie_id = mk.movie_id
AND mi.movie_id = ci.movie_id
AND mi.movie_id = mk.movie_id
AND ci.movie_id = mk.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND k.id = mk.keyword_id
AND ci.note IN ('(voice)', '(as Gelin Vicente)', '(as Mike Luckras)', '(as Linda Vroom)', '(as Dhawan)')
AND cn.country_code = '[us]'
AND it.info = 'countries'
AND k.keyword IN ('prairie', 'boy-driving-a-car', 'merrill-lynch', 'mexico-city', 'back')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%K%' OR mi.info LIKE '%K%')
AND n.gender = 'm'
AND n.name LIKE '%R%'
AND rt.role = 'actor'
AND t.production_year > 2009;",80,/*+  IndexScan(k keyword_pkey) IndexScan(mk keyword_id_movie_keyword) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) IndexScan(it info_type_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexOnlyScan(an person_id_aka_name) IndexScan(chn char_name_pkey) NestLoop(k mk) NestLoop(k mk t) NestLoop(k mk t ci) HashJoin(k mk t ci rt) NestLoop(k mk t ci rt n) NestLoop(k mk t ci rt n mi) NestLoop(k mk t ci rt n mi it) NestLoop(k mk t ci rt n mi it mc) NestLoop(k mk t ci rt n mi it mc cn) NestLoop(k mk t ci rt n mi it mc cn an) NestLoop(k mk t ci rt n mi it mc cn an chn) Leading((((((((((((k mk) t) ci) rt) n) mi) it) mc) cn) an) chn)) */
"SELECT MIN(chn.name) AS voiced_char_name, MIN(n.name) AS voicing_actress_name, MIN(t.title) AS voiced_action_movie_jap_eng
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
   keyword AS k,
   movie_companies AS mc,
   movie_info AS mi,
   movie_keyword AS mk,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND t.id = mk.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mc.movie_id = mk.movie_id
AND mi.movie_id = ci.movie_id
AND mi.movie_id = mk.movie_id
AND ci.movie_id = mk.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND k.id = mk.keyword_id
AND ci.note IN ('(credit only)', '(as GÃ¼nter Burger)', '(as Wu Dajiang)', '(as Tom Gulliver)', '(as Jade East)')
AND cn.country_code = '[nl]'
AND it.info = 'certificates'
AND k.keyword IN ('explosion', 'cuban-politics', 'burst-water-pipe', 'common-sense', 'solophobia')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%1%' OR mi.info LIKE '%h%')
AND n.gender = 'm'
AND n.name LIKE '%s%'
AND rt.role = 'actor'
AND t.production_year > 2009;",80,/*+  IndexScan(k keyword_pkey) IndexScan(mk keyword_id_movie_keyword) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) IndexScan(it info_type_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexOnlyScan(an person_id_aka_name) IndexScan(chn char_name_pkey) NestLoop(k mk) NestLoop(k mk t) NestLoop(k mk t ci) HashJoin(k mk t ci rt) NestLoop(k mk t ci rt n) NestLoop(k mk t ci rt n mi) NestLoop(k mk t ci rt n mi it) NestLoop(k mk t ci rt n mi it mc) NestLoop(k mk t ci rt n mi it mc cn) NestLoop(k mk t ci rt n mi it mc cn an) NestLoop(k mk t ci rt n mi it mc cn an chn) Leading((((((((((((k mk) t) ci) rt) n) mi) it) mc) cn) an) chn)) */
"SELECT MIN(chn.name) AS voiced_char_name, MIN(n.name) AS voicing_actress_name, MIN(t.title) AS voiced_action_movie_jap_eng
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
   keyword AS k,
   movie_companies AS mc,
   movie_info AS mi,
   movie_keyword AS mk,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND t.id = mk.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mc.movie_id = mk.movie_id
AND mi.movie_id = ci.movie_id
AND mi.movie_id = mk.movie_id
AND ci.movie_id = mk.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND k.id = mk.keyword_id
AND ci.note IN ('(as Charles Tamburro)', '(as MA3)', '(as Erik Tesch)', '(as Tsung-Hwa Liu)', '(as Mervin Curag)')
AND cn.country_code = '[gb]'
AND it.info = 'tech info'
AND k.keyword IN ('weapons-research', 'seaside-california', 'four-aces', 'homerun', 'war-satire')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%7%' OR mi.info LIKE '%F%')
AND n.gender = 'm'
AND n.name LIKE '%o%'
AND rt.role = 'actor'
AND t.production_year > 1990;",80,/*+  IndexScan(k keyword_pkey) IndexScan(mk keyword_id_movie_keyword) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) IndexScan(it info_type_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexOnlyScan(an person_id_aka_name) IndexScan(chn char_name_pkey) NestLoop(k mk) NestLoop(k mk t) NestLoop(k mk t ci) HashJoin(k mk t ci rt) NestLoop(k mk t ci rt n) NestLoop(k mk t ci rt n mi) NestLoop(k mk t ci rt n mi it) NestLoop(k mk t ci rt n mi it mc) NestLoop(k mk t ci rt n mi it mc cn) NestLoop(k mk t ci rt n mi it mc cn an) NestLoop(k mk t ci rt n mi it mc cn an chn) Leading((((((((((((k mk) t) ci) rt) n) mi) it) mc) cn) an) chn)) */
"SELECT MIN(chn.name) AS voiced_char_name, MIN(n.name) AS voicing_actress_name, MIN(t.title) AS voiced_action_movie_jap_eng
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
   keyword AS k,
   movie_companies AS mc,
   movie_info AS mi,
   movie_keyword AS mk,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND t.id = mk.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mc.movie_id = mk.movie_id
AND mi.movie_id = ci.movie_id
AND mi.movie_id = mk.movie_id
AND ci.movie_id = mk.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND k.id = mk.keyword_id
AND ci.note IN ('(as Charles Tamburro)', '(as Shadia Amen)', '(as Julia Schuler)', '(Gandhi''s P.A.)', '(during Boer War)')
AND cn.country_code = '[nl]'
AND it.info = 'weekend gross'
AND k.keyword IN ('battle', 'recklessness', 'oasis', 'making-of', 'woodcut')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%l%' OR mi.info LIKE '%A%')
AND n.gender = 'm'
AND n.name LIKE '%h%'
AND rt.role = 'actor'
AND t.production_year > 1990;",80,/*+  IndexScan(k keyword_pkey) IndexScan(mk keyword_id_movie_keyword) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) IndexScan(it info_type_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexOnlyScan(an person_id_aka_name) IndexScan(chn char_name_pkey) NestLoop(k mk) NestLoop(k mk t) NestLoop(k mk t ci) HashJoin(k mk t ci rt) NestLoop(k mk t ci rt n) NestLoop(k mk t ci rt n mi) NestLoop(k mk t ci rt n mi it) NestLoop(k mk t ci rt n mi it mc) NestLoop(k mk t ci rt n mi it mc cn) NestLoop(k mk t ci rt n mi it mc cn an) NestLoop(k mk t ci rt n mi it mc cn an chn) Leading((((((((((((k mk) t) ci) rt) n) mi) it) mc) cn) an) chn)) */
"SELECT MIN(chn.name) AS voiced_char_name, MIN(n.name) AS voicing_actress_name, MIN(t.title) AS voiced_action_movie_jap_eng
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
   keyword AS k,
   movie_companies AS mc,
   movie_info AS mi,
   movie_keyword AS mk,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND t.id = mk.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mc.movie_id = mk.movie_id
AND mi.movie_id = ci.movie_id
AND mi.movie_id = mk.movie_id
AND ci.movie_id = mk.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND k.id = mk.keyword_id
AND ci.note IN ('(as Charles Tamburro)', '(as Mark Gibbons)', '(as Pete Atasanoff)', '(as Diogo Dias)', '(as One Man Army)')
AND cn.country_code = '[gb]'
AND it.info = 'opening weekend'
AND k.keyword IN ('voice-sampling', 'serving-god', 'boiler', 'first-time-actor', 'olympic-games-2008')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%,%' OR mi.info LIKE '%r%')
AND n.gender = 'm'
AND n.name LIKE '%C%'
AND rt.role = 'actor'
AND t.production_year > 1990;",80,/*+  IndexScan(k keyword_pkey) IndexScan(mk keyword_id_movie_keyword) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) IndexScan(it info_type_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexOnlyScan(an person_id_aka_name) IndexScan(chn char_name_pkey) NestLoop(k mk) NestLoop(k mk t) NestLoop(k mk t ci) HashJoin(k mk t ci rt) NestLoop(k mk t ci rt n) NestLoop(k mk t ci rt n mi) NestLoop(k mk t ci rt n mi it) NestLoop(k mk t ci rt n mi it mc) NestLoop(k mk t ci rt n mi it mc cn) NestLoop(k mk t ci rt n mi it mc cn an) NestLoop(k mk t ci rt n mi it mc cn an chn) Leading((((((((((((k mk) t) ci) rt) n) mi) it) mc) cn) an) chn)) */
"SELECT MIN(chn.name) AS voiced_char_name, MIN(n.name) AS voicing_actress_name, MIN(t.title) AS voiced_action_movie_jap_eng
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
   keyword AS k,
   movie_companies AS mc,
   movie_info AS mi,
   movie_keyword AS mk,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND t.id = mk.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mc.movie_id = mk.movie_id
AND mi.movie_id = ci.movie_id
AND mi.movie_id = mk.movie_id
AND ci.movie_id = mk.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND k.id = mk.keyword_id
AND ci.note IN ('(as Charles Tamburro)', '(as Danny Majzlik)', '(self)', '(as Dean Gary)', '(as Eric A. Payne)')
AND cn.country_code = '[nl]'
AND it.info = 'trivia'
AND k.keyword IN ('battle', 'nfl', 'loss-of-powers', 'magnetic-mine', 'nerve-damage')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%R%' OR mi.info LIKE '%''%')
AND n.gender = 'm'
AND n.name LIKE '%o%'
AND rt.role = 'actor'
AND t.production_year > 1990;",80,/*+  IndexScan(k keyword_pkey) IndexScan(mk keyword_id_movie_keyword) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) IndexScan(it info_type_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexOnlyScan(an person_id_aka_name) IndexScan(chn char_name_pkey) NestLoop(k mk) NestLoop(k mk t) NestLoop(k mk t ci) HashJoin(k mk t ci rt) NestLoop(k mk t ci rt n) NestLoop(k mk t ci rt n mi) NestLoop(k mk t ci rt n mi it) NestLoop(k mk t ci rt n mi it mc) NestLoop(k mk t ci rt n mi it mc cn) NestLoop(k mk t ci rt n mi it mc cn an) NestLoop(k mk t ci rt n mi it mc cn an chn) Leading((((((((((((k mk) t) ci) rt) n) mi) it) mc) cn) an) chn)) */
"SELECT MIN(chn.name) AS voiced_char_name, MIN(n.name) AS voicing_actress_name, MIN(t.title) AS voiced_action_movie_jap_eng
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
   keyword AS k,
   movie_companies AS mc,
   movie_info AS mi,
   movie_keyword AS mk,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND t.id = mk.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mc.movie_id = mk.movie_id
AND mi.movie_id = ci.movie_id
AND mi.movie_id = mk.movie_id
AND ci.movie_id = mk.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND k.id = mk.keyword_id
AND ci.note IN ('(as Charles Tamburro)', '(as Beth O.)', '(producer: YLE FST)', '(as S. Kharitonova)', '(as Bill Roudi)')
AND cn.country_code = '[nl]'
AND it.info = 'screenplay-teleplay'
AND k.keyword IN ('2020s', 'young-alien', 'pipa', 'crafting-table', 'paralyzed')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%a%' OR mi.info LIKE '%e%')
AND n.gender = 'm'
AND n.name LIKE '%r%'
AND rt.role = 'actor'
AND t.production_year > 1990;",80,/*+  IndexScan(k keyword_pkey) IndexScan(mk keyword_id_movie_keyword) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) IndexScan(it info_type_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexOnlyScan(an person_id_aka_name) IndexScan(chn char_name_pkey) NestLoop(k mk) NestLoop(k mk t) NestLoop(k mk t ci) HashJoin(k mk t ci rt) NestLoop(k mk t ci rt n) NestLoop(k mk t ci rt n mi) NestLoop(k mk t ci rt n mi it) NestLoop(k mk t ci rt n mi it mc) NestLoop(k mk t ci rt n mi it mc cn) NestLoop(k mk t ci rt n mi it mc cn an) NestLoop(k mk t ci rt n mi it mc cn an chn) Leading((((((((((((k mk) t) ci) rt) n) mi) it) mc) cn) an) chn)) */
"SELECT MIN(chn.name) AS voiced_char_name, MIN(n.name) AS voicing_actress_name, MIN(t.title) AS voiced_action_movie_jap_eng
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
   keyword AS k,
   movie_companies AS mc,
   movie_info AS mi,
   movie_keyword AS mk,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND t.id = mk.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mc.movie_id = mk.movie_id
AND mi.movie_id = ci.movie_id
AND mi.movie_id = mk.movie_id
AND ci.movie_id = mk.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND k.id = mk.keyword_id
AND ci.note IN ('(as Charles Tamburro)', '(as Blaine Fairman)', '(as Mio)', '(as Marcy Blasgen)', '(as Dawn Billings)')
AND cn.country_code = '[us]'
AND it.info = 'weekend gross'
AND k.keyword IN ('action-hero', 'black-lion-hospital', 'shirt-tag', 'show-trial', 'year-1901')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%t%' OR mi.info LIKE '%)%')
AND n.gender = 'm'
AND n.name LIKE '%m%'
AND rt.role = 'actor'
AND t.production_year > 1990;",80,/*+  IndexScan(k keyword_pkey) IndexScan(mk keyword_id_movie_keyword) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) IndexScan(it info_type_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexOnlyScan(an person_id_aka_name) IndexScan(chn char_name_pkey) NestLoop(k mk) NestLoop(k mk t) NestLoop(k mk t ci) HashJoin(k mk t ci rt) NestLoop(k mk t ci rt n) NestLoop(k mk t ci rt n mi) NestLoop(k mk t ci rt n mi it) NestLoop(k mk t ci rt n mi it mc) NestLoop(k mk t ci rt n mi it mc cn) NestLoop(k mk t ci rt n mi it mc cn an) NestLoop(k mk t ci rt n mi it mc cn an chn) Leading((((((((((((k mk) t) ci) rt) n) mi) it) mc) cn) an) chn)) */
"SELECT MIN(chn.name) AS voiced_char_name, MIN(n.name) AS voicing_actress_name, MIN(t.title) AS voiced_action_movie_jap_eng
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
   keyword AS k,
   movie_companies AS mc,
   movie_info AS mi,
   movie_keyword AS mk,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND t.id = mk.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mc.movie_id = mk.movie_id
AND mi.movie_id = ci.movie_id
AND mi.movie_id = mk.movie_id
AND ci.movie_id = mk.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND k.id = mk.keyword_id
AND ci.note IN ('(as Charles Tamburro)', '(Pinky''s dad)', '(as Bill Brown)', '(as Lalette Reder)', '(as Chiu Tsang Hei)')
AND cn.country_code = '[us]'
AND it.info = 'printed media reviews'
AND k.keyword IN ('2020s', 'male-feet-in-socks', 'lang', 'burnt-tongue', 'bisexuality')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%r%' OR mi.info LIKE '%M%')
AND n.gender = 'm'
AND n.name LIKE '%T%'
AND rt.role = 'actor'
AND t.production_year > 1990;",80,/*+  IndexScan(k keyword_pkey) IndexScan(mk keyword_id_movie_keyword) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) IndexScan(it info_type_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexOnlyScan(an person_id_aka_name) IndexScan(chn char_name_pkey) NestLoop(k mk) NestLoop(k mk t) NestLoop(k mk t ci) HashJoin(k mk t ci rt) NestLoop(k mk t ci rt n) NestLoop(k mk t ci rt n mi) NestLoop(k mk t ci rt n mi it) NestLoop(k mk t ci rt n mi it mc) NestLoop(k mk t ci rt n mi it mc cn) NestLoop(k mk t ci rt n mi it mc cn an) NestLoop(k mk t ci rt n mi it mc cn an chn) Leading((((((((((((k mk) t) ci) rt) n) mi) it) mc) cn) an) chn)) */
"SELECT MIN(chn.name) AS voiced_char_name, MIN(n.name) AS voicing_actress_name, MIN(t.title) AS voiced_action_movie_jap_eng
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
   keyword AS k,
   movie_companies AS mc,
   movie_info AS mi,
   movie_keyword AS mk,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND t.id = mk.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mc.movie_id = mk.movie_id
AND mi.movie_id = ci.movie_id
AND mi.movie_id = mk.movie_id
AND ci.movie_id = mk.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND k.id = mk.keyword_id
AND ci.note IN ('(as Charles Tamburro)', '(as E. von Jordan)', '(as Housin Yassin)', '(as Themba Teinton)', '(as Jan Schade)')
AND cn.country_code = '[es]'
AND it.info = 'tech info'
AND k.keyword IN ('voice-sampling', 'theatrical-investor', 'hip-waders', 'planning-funeral', 'elizabeth-short')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%5%' OR mi.info LIKE '%M%')
AND n.gender = 'm'
AND n.name LIKE '%C%'
AND rt.role = 'actor'
AND t.production_year > 1990;",80,/*+  IndexScan(k keyword_pkey) IndexScan(mk keyword_id_movie_keyword) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) IndexScan(it info_type_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexOnlyScan(an person_id_aka_name) IndexScan(chn char_name_pkey) NestLoop(k mk) NestLoop(k mk t) NestLoop(k mk t ci) HashJoin(k mk t ci rt) NestLoop(k mk t ci rt n) NestLoop(k mk t ci rt n mi) NestLoop(k mk t ci rt n mi it) NestLoop(k mk t ci rt n mi it mc) NestLoop(k mk t ci rt n mi it mc cn) NestLoop(k mk t ci rt n mi it mc cn an) NestLoop(k mk t ci rt n mi it mc cn an chn) Leading((((((((((((k mk) t) ci) rt) n) mi) it) mc) cn) an) chn)) */
"SELECT MIN(chn.name) AS voiced_char_name, MIN(n.name) AS voicing_actress_name, MIN(t.title) AS voiced_action_movie_jap_eng
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
   keyword AS k,
   movie_companies AS mc,
   movie_info AS mi,
   movie_keyword AS mk,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND t.id = mk.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mc.movie_id = mk.movie_id
AND mi.movie_id = ci.movie_id
AND mi.movie_id = mk.movie_id
AND ci.movie_id = mk.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND k.id = mk.keyword_id
AND ci.note IN ('(as Charles Tamburro)', '(as Butch Cavel)', '(Wade''s Son)', '(as p.herrmann)', '(as Global.Kryner)')
AND cn.country_code = '[se]'
AND it.info = 'budget'
AND k.keyword IN ('voice-sampling', 'spurned-lover', 'djinn', 'repeated-event', 'face-cream')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%0%' OR mi.info LIKE '%0%')
AND n.gender = 'm'
AND n.name LIKE '%,%'
AND rt.role = 'actor'
AND t.production_year > 1990;",80,/*+  IndexScan(k keyword_pkey) IndexScan(mk keyword_id_movie_keyword) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) IndexScan(it info_type_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexOnlyScan(an person_id_aka_name) IndexScan(chn char_name_pkey) NestLoop(k mk) NestLoop(k mk t) NestLoop(k mk t ci) HashJoin(k mk t ci rt) NestLoop(k mk t ci rt n) NestLoop(k mk t ci rt n mi) NestLoop(k mk t ci rt n mi it) NestLoop(k mk t ci rt n mi it mc) NestLoop(k mk t ci rt n mi it mc cn) NestLoop(k mk t ci rt n mi it mc cn an) NestLoop(k mk t ci rt n mi it mc cn an chn) Leading((((((((((((k mk) t) ci) rt) n) mi) it) mc) cn) an) chn)) */
"SELECT MIN(chn.name) AS voiced_char_name, MIN(n.name) AS voicing_actress_name, MIN(t.title) AS voiced_action_movie_jap_eng
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
   keyword AS k,
   movie_companies AS mc,
   movie_info AS mi,
   movie_keyword AS mk,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND t.id = mk.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mc.movie_id = mk.movie_id
AND mi.movie_id = ci.movie_id
AND mi.movie_id = mk.movie_id
AND ci.movie_id = mk.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND k.id = mk.keyword_id
AND ci.note IN ('(as Charles Tamburro)', '(as Emma SjÃ¶berg)', '(as Murray Saffron)', '(as Philip Selway)', '(as Josefin Nyberg)')
AND cn.country_code = '[gb]'
AND it.info = 'weekend gross'
AND k.keyword IN ('android', 'free-trade', 'skink', 'distrust', 'patent-rights')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%n%' OR mi.info LIKE '%1%')
AND n.gender = 'm'
AND n.name LIKE '%e%'
AND rt.role = 'actor'
AND t.production_year > 1990;",80,/*+  IndexScan(k keyword_pkey) IndexScan(mk keyword_id_movie_keyword) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) IndexScan(it info_type_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexOnlyScan(an person_id_aka_name) IndexScan(chn char_name_pkey) NestLoop(k mk) NestLoop(k mk t) NestLoop(k mk t ci) HashJoin(k mk t ci rt) NestLoop(k mk t ci rt n) NestLoop(k mk t ci rt n mi) NestLoop(k mk t ci rt n mi it) NestLoop(k mk t ci rt n mi it mc) NestLoop(k mk t ci rt n mi it mc cn) NestLoop(k mk t ci rt n mi it mc cn an) NestLoop(k mk t ci rt n mi it mc cn an chn) Leading((((((((((((k mk) t) ci) rt) n) mi) it) mc) cn) an) chn)) */
"SELECT MIN(chn.name) AS voiced_char_name, MIN(n.name) AS voicing_actress_name, MIN(t.title) AS voiced_action_movie_jap_eng
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
   keyword AS k,
   movie_companies AS mc,
   movie_info AS mi,
   movie_keyword AS mk,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND t.id = mk.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mc.movie_id = mk.movie_id
AND mi.movie_id = ci.movie_id
AND mi.movie_id = mk.movie_id
AND ci.movie_id = mk.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND k.id = mk.keyword_id
AND ci.note IN ('(as Charles Tamburro)', '(as RarÃ® FÃ´setto)', '(as George Bange)', '(as Bob Balhatchet)', '(as The 2 Marks)')
AND cn.country_code = '[nl]'
AND it.info = 'trivia'
AND k.keyword IN ('action-hero', 'commercial-trade', 'sepoy-rebellion', 'new-york-accent', 'beachwear')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%m%' OR mi.info LIKE '%n%')
AND n.gender = 'm'
AND n.name LIKE '%.%'
AND rt.role = 'actor'
AND t.production_year > 1990;",80,/*+  IndexScan(k keyword_pkey) IndexScan(mk keyword_id_movie_keyword) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) IndexScan(it info_type_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexOnlyScan(an person_id_aka_name) IndexScan(chn char_name_pkey) NestLoop(k mk) NestLoop(k mk t) NestLoop(k mk t ci) HashJoin(k mk t ci rt) NestLoop(k mk t ci rt n) NestLoop(k mk t ci rt n mi) NestLoop(k mk t ci rt n mi it) NestLoop(k mk t ci rt n mi it mc) NestLoop(k mk t ci rt n mi it mc cn) NestLoop(k mk t ci rt n mi it mc cn an) NestLoop(k mk t ci rt n mi it mc cn an chn) Leading((((((((((((k mk) t) ci) rt) n) mi) it) mc) cn) an) chn)) */
"SELECT MIN(chn.name) AS voiced_char_name, MIN(n.name) AS voicing_actress_name, MIN(t.title) AS voiced_action_movie_jap_eng
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
   keyword AS k,
   movie_companies AS mc,
   movie_info AS mi,
   movie_keyword AS mk,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND t.id = mk.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mc.movie_id = mk.movie_id
AND mi.movie_id = ci.movie_id
AND mi.movie_id = mk.movie_id
AND ci.movie_id = mk.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND k.id = mk.keyword_id
AND ci.note IN ('(as Charles Tamburro)', '(book ""Aszantka"")', '(as George Karan)', '(as Mike Nichols)', '(as Rhida Jebali)')
AND cn.country_code = '[us]'
AND it.info = 'opening weekend'
AND k.keyword IN ('voice-sampling', 'fantasy-episode', 'asian-history', 'mountain-king', 'outsider-artist')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%7%' OR mi.info LIKE '%1%')
AND n.gender = 'm'
AND n.name LIKE '%.%'
AND rt.role = 'actor'
AND t.production_year > 1990;",80,/*+  IndexScan(k keyword_pkey) IndexScan(mk keyword_id_movie_keyword) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) IndexScan(it info_type_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexOnlyScan(an person_id_aka_name) IndexScan(chn char_name_pkey) NestLoop(k mk) NestLoop(k mk t) NestLoop(k mk t ci) HashJoin(k mk t ci rt) NestLoop(k mk t ci rt n) NestLoop(k mk t ci rt n mi) NestLoop(k mk t ci rt n mi it) NestLoop(k mk t ci rt n mi it mc) NestLoop(k mk t ci rt n mi it mc cn) NestLoop(k mk t ci rt n mi it mc cn an) NestLoop(k mk t ci rt n mi it mc cn an chn) Leading((((((((((((k mk) t) ci) rt) n) mi) it) mc) cn) an) chn)) */
"SELECT MIN(chn.name) AS voiced_char_name, MIN(n.name) AS voicing_actress_name, MIN(t.title) AS voiced_action_movie_jap_eng
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
   keyword AS k,
   movie_companies AS mc,
   movie_info AS mi,
   movie_keyword AS mk,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND t.id = mk.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mc.movie_id = mk.movie_id
AND mi.movie_id = ci.movie_id
AND mi.movie_id = mk.movie_id
AND ci.movie_id = mk.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND k.id = mk.keyword_id
AND ci.note IN ('(as Charles Tamburro)', '(as Leo Lenoir)', '(as Ivan De Landa)', '(as Vijay Chander)', '(as David Parker)')
AND cn.country_code = '[fr]'
AND it.info = 'novel'
AND k.keyword IN ('action-hero', 'broadway-dancer', 'women''s-washroom', 'singing-girl', 'vat-of-acid')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%""%' OR mi.info LIKE '%a%')
AND n.gender = 'm'
AND n.name LIKE '%.%'
AND rt.role = 'actor'
AND t.production_year > 1990;",80,/*+  IndexScan(k keyword_pkey) IndexScan(mk keyword_id_movie_keyword) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) IndexScan(it info_type_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexOnlyScan(an person_id_aka_name) IndexScan(chn char_name_pkey) NestLoop(k mk) NestLoop(k mk t) NestLoop(k mk t ci) HashJoin(k mk t ci rt) NestLoop(k mk t ci rt n) NestLoop(k mk t ci rt n mi) NestLoop(k mk t ci rt n mi it) NestLoop(k mk t ci rt n mi it mc) NestLoop(k mk t ci rt n mi it mc cn) NestLoop(k mk t ci rt n mi it mc cn an) NestLoop(k mk t ci rt n mi it mc cn an chn) Leading((((((((((((k mk) t) ci) rt) n) mi) it) mc) cn) an) chn)) */
"SELECT MIN(chn.name) AS voiced_char_name, MIN(n.name) AS voicing_actress_name, MIN(t.title) AS voiced_action_movie_jap_eng
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
   keyword AS k,
   movie_companies AS mc,
   movie_info AS mi,
   movie_keyword AS mk,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND t.id = mk.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mc.movie_id = mk.movie_id
AND mi.movie_id = ci.movie_id
AND mi.movie_id = mk.movie_id
AND ci.movie_id = mk.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND k.id = mk.keyword_id
AND ci.note IN ('(as Charles Tamburro)', '(as Majken WexÃ¸)', '(as Michael Morse)', '(as Paul Lousteau)', '(as Cindy McKay)')
AND cn.country_code = '[br]'
AND it.info = 'weekend gross'
AND k.keyword IN ('android', 'rings-swing', 'plethora', 'saddle-shop', 'plastic-roll')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%5%' OR mi.info LIKE '%s%')
AND n.gender = 'm'
AND n.name LIKE '%T%'
AND rt.role = 'actor'
AND t.production_year > 1990;",80,/*+  IndexScan(k keyword_pkey) IndexScan(mk keyword_id_movie_keyword) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) IndexScan(it info_type_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexOnlyScan(an person_id_aka_name) IndexScan(chn char_name_pkey) NestLoop(k mk) NestLoop(k mk t) NestLoop(k mk t ci) HashJoin(k mk t ci rt) NestLoop(k mk t ci rt n) NestLoop(k mk t ci rt n mi) NestLoop(k mk t ci rt n mi it) NestLoop(k mk t ci rt n mi it mc) NestLoop(k mk t ci rt n mi it mc cn) NestLoop(k mk t ci rt n mi it mc cn an) NestLoop(k mk t ci rt n mi it mc cn an chn) Leading((((((((((((k mk) t) ci) rt) n) mi) it) mc) cn) an) chn)) */
"SELECT MIN(chn.name) AS voiced_char_name, MIN(n.name) AS voicing_actress_name, MIN(t.title) AS voiced_action_movie_jap_eng
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
   keyword AS k,
   movie_companies AS mc,
   movie_info AS mi,
   movie_keyword AS mk,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND t.id = mk.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mc.movie_id = mk.movie_id
AND mi.movie_id = ci.movie_id
AND mi.movie_id = mk.movie_id
AND ci.movie_id = mk.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND k.id = mk.keyword_id
AND ci.note IN ('(as Charles Tamburro)', '(as Mike Badalucco)', '(as Doug Stewart)', '(as Saundarya)', '(as Ãgnes Zsiros)')
AND cn.country_code = '[nl]'
AND it.info = 'adaption'
AND k.keyword IN ('battle', 'grand-prize', 'female-porn', 'shohreh-aghdashloo', 'laughing-mask')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%i%' OR mi.info LIKE '%8%')
AND n.gender = 'm'
AND n.name LIKE '%A%'
AND rt.role = 'actor'
AND t.production_year > 1990;",80,/*+  IndexScan(k keyword_pkey) IndexScan(mk keyword_id_movie_keyword) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) IndexScan(it info_type_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexOnlyScan(an person_id_aka_name) IndexScan(chn char_name_pkey) NestLoop(k mk) NestLoop(k mk t) NestLoop(k mk t ci) HashJoin(k mk t ci rt) NestLoop(k mk t ci rt n) NestLoop(k mk t ci rt n mi) NestLoop(k mk t ci rt n mi it) NestLoop(k mk t ci rt n mi it mc) NestLoop(k mk t ci rt n mi it mc cn) NestLoop(k mk t ci rt n mi it mc cn an) NestLoop(k mk t ci rt n mi it mc cn an chn) Leading((((((((((((k mk) t) ci) rt) n) mi) it) mc) cn) an) chn)) */
"SELECT MIN(chn.name) AS voiced_char_name, MIN(n.name) AS voicing_actress_name, MIN(t.title) AS voiced_action_movie_jap_eng
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
   keyword AS k,
   movie_companies AS mc,
   movie_info AS mi,
   movie_keyword AS mk,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND t.id = mk.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mc.movie_id = mk.movie_id
AND mi.movie_id = ci.movie_id
AND mi.movie_id = mk.movie_id
AND ci.movie_id = mk.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND k.id = mk.keyword_id
AND ci.note IN ('(as Charles Tamburro)', '(as Mac Williams)', '(as Rene Dupeyron)', '(as Tom Lane)', '(as Victor Stone)')
AND cn.country_code = '[br]'
AND it.info = 'printed media reviews'
AND k.keyword IN ('action-hero', 'coeds', 'quiche', 'ratman', 'huge-celebration')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%n%' OR mi.info LIKE '%r%')
AND n.gender = 'm'
AND n.name LIKE '%u%'
AND rt.role = 'actor'
AND t.production_year > 1990;",80,/*+  IndexScan(k keyword_pkey) IndexScan(mk keyword_id_movie_keyword) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) IndexScan(it info_type_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexOnlyScan(an person_id_aka_name) IndexScan(chn char_name_pkey) NestLoop(k mk) NestLoop(k mk t) NestLoop(k mk t ci) HashJoin(k mk t ci rt) NestLoop(k mk t ci rt n) NestLoop(k mk t ci rt n mi) NestLoop(k mk t ci rt n mi it) NestLoop(k mk t ci rt n mi it mc) NestLoop(k mk t ci rt n mi it mc cn) NestLoop(k mk t ci rt n mi it mc cn an) NestLoop(k mk t ci rt n mi it mc cn an chn) Leading((((((((((((k mk) t) ci) rt) n) mi) it) mc) cn) an) chn)) */
"SELECT MIN(chn.name) AS voiced_char_name, MIN(n.name) AS voicing_actress_name, MIN(t.title) AS voiced_action_movie_jap_eng
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
   keyword AS k,
   movie_companies AS mc,
   movie_info AS mi,
   movie_keyword AS mk,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND t.id = mk.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mc.movie_id = mk.movie_id
AND mi.movie_id = ci.movie_id
AND mi.movie_id = mk.movie_id
AND ci.movie_id = mk.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND k.id = mk.keyword_id
AND ci.note IN ('(as Charles Tamburro)', '(as Jennifer S)', '(as Britney Jade)', '(as editor)', '(as Cris Calvente)')
AND cn.country_code = '[us]'
AND it.info = 'opening weekend'
AND k.keyword IN ('action-hero', 'post-communism', 'summer-home', 'single-guy', 'royal-jelly')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%0%' OR mi.info LIKE '%S%')
AND n.gender = 'm'
AND n.name LIKE '%T%'
AND rt.role = 'actor'
AND t.production_year > 1990;",80,/*+  IndexScan(k keyword_pkey) IndexScan(mk keyword_id_movie_keyword) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) IndexScan(it info_type_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexOnlyScan(an person_id_aka_name) IndexScan(chn char_name_pkey) NestLoop(k mk) NestLoop(k mk t) NestLoop(k mk t ci) HashJoin(k mk t ci rt) NestLoop(k mk t ci rt n) NestLoop(k mk t ci rt n mi) NestLoop(k mk t ci rt n mi it) NestLoop(k mk t ci rt n mi it mc) NestLoop(k mk t ci rt n mi it mc cn) NestLoop(k mk t ci rt n mi it mc cn an) NestLoop(k mk t ci rt n mi it mc cn an chn) Leading((((((((((((k mk) t) ci) rt) n) mi) it) mc) cn) an) chn)) */
"SELECT MIN(chn.name) AS voiced_char_name, MIN(n.name) AS voicing_actress_name, MIN(t.title) AS voiced_action_movie_jap_eng
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
   keyword AS k,
   movie_companies AS mc,
   movie_info AS mi,
   movie_keyword AS mk,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND t.id = mk.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mc.movie_id = mk.movie_id
AND mi.movie_id = ci.movie_id
AND mi.movie_id = mk.movie_id
AND ci.movie_id = mk.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND k.id = mk.keyword_id
AND ci.note IN ('(as Charles Tamburro)', '(as Tacho Riera)', '(barricade)', '(as Loucious Louis)', '(as Cock''d Gunns)')
AND cn.country_code = '[gb]'
AND it.info = 'admissions'
AND k.keyword IN ('2020s', 'snot', 'mustard-plaster', 'mgm-studios', 'champ-de-mars-paris')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%c%' OR mi.info LIKE '%r%')
AND n.gender = 'm'
AND n.name LIKE '%a%'
AND rt.role = 'actor'
AND t.production_year > 1990;",80,/*+  IndexScan(k keyword_pkey) IndexScan(mk keyword_id_movie_keyword) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) IndexScan(it info_type_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexOnlyScan(an person_id_aka_name) IndexScan(chn char_name_pkey) NestLoop(k mk) NestLoop(k mk t) NestLoop(k mk t ci) HashJoin(k mk t ci rt) NestLoop(k mk t ci rt n) NestLoop(k mk t ci rt n mi) NestLoop(k mk t ci rt n mi it) NestLoop(k mk t ci rt n mi it mc) NestLoop(k mk t ci rt n mi it mc cn) NestLoop(k mk t ci rt n mi it mc cn an) NestLoop(k mk t ci rt n mi it mc cn an chn) Leading((((((((((((k mk) t) ci) rt) n) mi) it) mc) cn) an) chn)) */
"SELECT MIN(chn.name) AS voiced_char_name, MIN(n.name) AS voicing_actress_name, MIN(t.title) AS voiced_action_movie_jap_eng
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
   keyword AS k,
   movie_companies AS mc,
   movie_info AS mi,
   movie_keyword AS mk,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND t.id = mk.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mc.movie_id = mk.movie_id
AND mi.movie_id = ci.movie_id
AND mi.movie_id = mk.movie_id
AND ci.movie_id = mk.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND k.id = mk.keyword_id
AND ci.note IN ('(as Charles Tamburro)', '(as Victor Clavijo)', '(as Kim Casey)', '(as P.H. Vazak)', '(as Kamel Bouakkaz)')
AND cn.country_code = '[fr]'
AND it.info = 'printed media reviews'
AND k.keyword IN ('weapons-research', 'cloud-seeding', 'mark-of-the-beast', 'cheltenham-england', 'strange-happening')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%.%' OR mi.info LIKE '%9%')
AND n.gender = 'm'
AND n.name LIKE '%m%'
AND rt.role = 'actor'
AND t.production_year > 1990;",80,/*+  IndexScan(k keyword_pkey) IndexScan(mk keyword_id_movie_keyword) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) IndexScan(it info_type_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexOnlyScan(an person_id_aka_name) IndexScan(chn char_name_pkey) NestLoop(k mk) NestLoop(k mk t) NestLoop(k mk t ci) HashJoin(k mk t ci rt) NestLoop(k mk t ci rt n) NestLoop(k mk t ci rt n mi) NestLoop(k mk t ci rt n mi it) NestLoop(k mk t ci rt n mi it mc) NestLoop(k mk t ci rt n mi it mc cn) NestLoop(k mk t ci rt n mi it mc cn an) NestLoop(k mk t ci rt n mi it mc cn an chn) Leading((((((((((((k mk) t) ci) rt) n) mi) it) mc) cn) an) chn)) */
"SELECT MIN(chn.name) AS voiced_char_name, MIN(n.name) AS voicing_actress_name, MIN(t.title) AS voiced_action_movie_jap_eng
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
   keyword AS k,
   movie_companies AS mc,
   movie_info AS mi,
   movie_keyword AS mk,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND t.id = mk.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mc.movie_id = mk.movie_id
AND mi.movie_id = ci.movie_id
AND mi.movie_id = mk.movie_id
AND ci.movie_id = mk.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND k.id = mk.keyword_id
AND ci.note IN ('(as Charles Tamburro)', '(Special Features)', '(as Vakila Maan)', '(as Rita Tobin)', '(as Vadim Tsalatti)')
AND cn.country_code = '[se]'
AND it.info = 'tech info'
AND k.keyword IN ('battle', 'texarkana-arkansas', 'roman-10th-legion', 'plastic-pool', 'bloody-sunday')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%s%' OR mi.info LIKE '%r%')
AND n.gender = 'm'
AND n.name LIKE '%a%'
AND rt.role = 'actor'
AND t.production_year > 1990;",80,/*+  IndexScan(k keyword_pkey) IndexScan(mk keyword_id_movie_keyword) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) IndexScan(it info_type_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexOnlyScan(an person_id_aka_name) IndexScan(chn char_name_pkey) NestLoop(k mk) NestLoop(k mk t) NestLoop(k mk t ci) HashJoin(k mk t ci rt) NestLoop(k mk t ci rt n) NestLoop(k mk t ci rt n mi) NestLoop(k mk t ci rt n mi it) NestLoop(k mk t ci rt n mi it mc) NestLoop(k mk t ci rt n mi it mc cn) NestLoop(k mk t ci rt n mi it mc cn an) NestLoop(k mk t ci rt n mi it mc cn an chn) Leading((((((((((((k mk) t) ci) rt) n) mi) it) mc) cn) an) chn)) */
"SELECT MIN(chn.name) AS voiced_char_name, MIN(n.name) AS voicing_actress_name, MIN(t.title) AS voiced_action_movie_jap_eng
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
   keyword AS k,
   movie_companies AS mc,
   movie_info AS mi,
   movie_keyword AS mk,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND t.id = mk.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mc.movie_id = mk.movie_id
AND mi.movie_id = ci.movie_id
AND mi.movie_id = mk.movie_id
AND ci.movie_id = mk.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND k.id = mk.keyword_id
AND ci.note IN ('(voice)', '(drummer 1989-)', '(as Alex Bogas)', '(as William Sorrel)', '(as Tamie Logan)')
AND cn.country_code = '[us]'
AND it.info = 'countries'
AND k.keyword IN ('buffalo-hunter', 'cheetah', 'billfold', 'carcassone-france', 'tarzana-california')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%S%' OR mi.info LIKE '%A%')
AND n.gender = 'm'
AND n.name LIKE '%f%'
AND rt.role = 'actor'
AND t.production_year > 2009;",80,/*+  IndexScan(k keyword_pkey) IndexScan(mk keyword_id_movie_keyword) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) IndexScan(it info_type_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexOnlyScan(an person_id_aka_name) IndexScan(chn char_name_pkey) NestLoop(k mk) NestLoop(k mk t) NestLoop(k mk t ci) HashJoin(k mk t ci rt) NestLoop(k mk t ci rt n) NestLoop(k mk t ci rt n mi) NestLoop(k mk t ci rt n mi it) NestLoop(k mk t ci rt n mi it mc) NestLoop(k mk t ci rt n mi it mc cn) NestLoop(k mk t ci rt n mi it mc cn an) NestLoop(k mk t ci rt n mi it mc cn an chn) Leading((((((((((((k mk) t) ci) rt) n) mi) it) mc) cn) an) chn)) */
"SELECT MIN(chn.name) AS voiced_char_name, MIN(n.name) AS voicing_actress_name, MIN(t.title) AS voiced_action_movie_jap_eng
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
   keyword AS k,
   movie_companies AS mc,
   movie_info AS mi,
   movie_keyword AS mk,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND t.id = mk.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mc.movie_id = mk.movie_id
AND mi.movie_id = ci.movie_id
AND mi.movie_id = mk.movie_id
AND ci.movie_id = mk.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND k.id = mk.keyword_id
AND ci.note IN ('(as Charles Tamburro)', '(as Jeffrey Levine)', '(as John Eldrege)', '(co-designer)', '(as Pun Chi-Wai)')
AND cn.country_code = '[fr]'
AND it.info = 'trivia'
AND k.keyword IN ('battle', 'year-1356', 'polar-cap', 'boy-frontal-nudity', 'langenberg-germany')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%r%' OR mi.info LIKE '%n%')
AND n.gender = 'm'
AND n.name LIKE '%u%'
AND rt.role = 'actor'
AND t.production_year > 1990;",80,/*+  IndexScan(k keyword_pkey) IndexScan(mk keyword_id_movie_keyword) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) IndexScan(it info_type_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexOnlyScan(an person_id_aka_name) IndexScan(chn char_name_pkey) NestLoop(k mk) NestLoop(k mk t) NestLoop(k mk t ci) HashJoin(k mk t ci rt) NestLoop(k mk t ci rt n) NestLoop(k mk t ci rt n mi) NestLoop(k mk t ci rt n mi it) NestLoop(k mk t ci rt n mi it mc) NestLoop(k mk t ci rt n mi it mc cn) NestLoop(k mk t ci rt n mi it mc cn an) NestLoop(k mk t ci rt n mi it mc cn an chn) Leading((((((((((((k mk) t) ci) rt) n) mi) it) mc) cn) an) chn)) */
"SELECT MIN(chn.name) AS voiced_char_name, MIN(n.name) AS voicing_actress_name, MIN(t.title) AS voiced_action_movie_jap_eng
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
   keyword AS k,
   movie_companies AS mc,
   movie_info AS mi,
   movie_keyword AS mk,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND t.id = mk.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mc.movie_id = mk.movie_id
AND mi.movie_id = ci.movie_id
AND mi.movie_id = mk.movie_id
AND ci.movie_id = mk.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND k.id = mk.keyword_id
AND ci.note IN ('(as Charles Tamburro)', '(as Saturna Barrio)', '(assistant support)', '(as Susane)', '(boomerang thrower)')
AND cn.country_code = '[nl]'
AND it.info = 'opening weekend'
AND k.keyword IN ('battle', 'yokel', 'land-grab', 'rescue-squad', 'sex-in-hallway')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%(%' OR mi.info LIKE '%1%')
AND n.gender = 'm'
AND n.name LIKE '%,%'
AND rt.role = 'actor'
AND t.production_year > 1990;",80,/*+  IndexScan(k keyword_pkey) IndexScan(mk keyword_id_movie_keyword) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) IndexScan(it info_type_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexOnlyScan(an person_id_aka_name) IndexScan(chn char_name_pkey) NestLoop(k mk) NestLoop(k mk t) NestLoop(k mk t ci) HashJoin(k mk t ci rt) NestLoop(k mk t ci rt n) NestLoop(k mk t ci rt n mi) NestLoop(k mk t ci rt n mi it) NestLoop(k mk t ci rt n mi it mc) NestLoop(k mk t ci rt n mi it mc cn) NestLoop(k mk t ci rt n mi it mc cn an) NestLoop(k mk t ci rt n mi it mc cn an chn) Leading((((((((((((k mk) t) ci) rt) n) mi) it) mc) cn) an) chn)) */
"SELECT MIN(chn.name) AS voiced_char_name, MIN(n.name) AS voicing_actress_name, MIN(t.title) AS voiced_action_movie_jap_eng
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
   keyword AS k,
   movie_companies AS mc,
   movie_info AS mi,
   movie_keyword AS mk,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND t.id = mk.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mc.movie_id = mk.movie_id
AND mi.movie_id = ci.movie_id
AND mi.movie_id = mk.movie_id
AND ci.movie_id = mk.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND k.id = mk.keyword_id
AND ci.note IN ('(as Charles Tamburro)', '(as Ling Jie)', '(ballet: teacher)', '(as Miss Donovan)', '(as Barbara Multer)')
AND cn.country_code = '[us]'
AND it.info = 'book'
AND k.keyword IN ('weapons-research', 'gold-plate', 'ex-boyfriend', 'racial-epithet', 'judicial-error')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%e%' OR mi.info LIKE '%a%')
AND n.gender = 'm'
AND n.name LIKE '%a%'
AND rt.role = 'actor'
AND t.production_year > 1990;",80,/*+  IndexScan(k keyword_pkey) IndexScan(mk keyword_id_movie_keyword) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) IndexScan(it info_type_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexOnlyScan(an person_id_aka_name) IndexScan(chn char_name_pkey) NestLoop(k mk) NestLoop(k mk t) NestLoop(k mk t ci) HashJoin(k mk t ci rt) NestLoop(k mk t ci rt n) NestLoop(k mk t ci rt n mi) NestLoop(k mk t ci rt n mi it) NestLoop(k mk t ci rt n mi it mc) NestLoop(k mk t ci rt n mi it mc cn) NestLoop(k mk t ci rt n mi it mc cn an) NestLoop(k mk t ci rt n mi it mc cn an chn) Leading((((((((((((k mk) t) ci) rt) n) mi) it) mc) cn) an) chn)) */
"SELECT MIN(chn.name) AS voiced_char_name, MIN(n.name) AS voicing_actress_name, MIN(t.title) AS voiced_action_movie_jap_eng
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
   keyword AS k,
   movie_companies AS mc,
   movie_info AS mi,
   movie_keyword AS mk,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND t.id = mk.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mc.movie_id = mk.movie_id
AND mi.movie_id = ci.movie_id
AND mi.movie_id = mk.movie_id
AND ci.movie_id = mk.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND k.id = mk.keyword_id
AND ci.note IN ('(as Charles Tamburro)', '(as Neva J. Howell)', '(Landlord''s Wife)', '(as John Kostrey)', '(Pigi)')
AND cn.country_code = '[gb]'
AND it.info = 'other literature'
AND k.keyword IN ('battle', 'violent-man', 'radio-store', 'abandoned-bunker', 'cybersting')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%M%' OR mi.info LIKE '%l%')
AND n.gender = 'm'
AND n.name LIKE '%b%'
AND rt.role = 'actor'
AND t.production_year > 1990;",80,/*+  IndexScan(k keyword_pkey) IndexScan(mk keyword_id_movie_keyword) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) IndexScan(it info_type_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexOnlyScan(an person_id_aka_name) IndexScan(chn char_name_pkey) NestLoop(k mk) NestLoop(k mk t) NestLoop(k mk t ci) HashJoin(k mk t ci rt) NestLoop(k mk t ci rt n) NestLoop(k mk t ci rt n mi) NestLoop(k mk t ci rt n mi it) NestLoop(k mk t ci rt n mi it mc) NestLoop(k mk t ci rt n mi it mc cn) NestLoop(k mk t ci rt n mi it mc cn an) NestLoop(k mk t ci rt n mi it mc cn an chn) Leading((((((((((((k mk) t) ci) rt) n) mi) it) mc) cn) an) chn)) */
"SELECT MIN(chn.name) AS voiced_char_name, MIN(n.name) AS voicing_actress_name, MIN(t.title) AS voiced_action_movie_jap_eng
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
   keyword AS k,
   movie_companies AS mc,
   movie_info AS mi,
   movie_keyword AS mk,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND t.id = mk.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mc.movie_id = mk.movie_id
AND mi.movie_id = ci.movie_id
AND mi.movie_id = mk.movie_id
AND ci.movie_id = mk.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND k.id = mk.keyword_id
AND ci.note IN ('(as Charles Tamburro)', '(as Anthony Neate)', '(as Yvette Harper)', '(play ""Nice Girl"")', '(as Gene Cernan)')
AND cn.country_code = '[se]'
AND it.info = 'taglines'
AND k.keyword IN ('voice-sampling', 'offensiveness', 'crude-humour', 'beanstalk', 'the-inspector')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%I%' OR mi.info LIKE '%s%')
AND n.gender = 'm'
AND n.name LIKE '%r%'
AND rt.role = 'actor'
AND t.production_year > 1990;",80,/*+  IndexScan(k keyword_pkey) IndexScan(mk keyword_id_movie_keyword) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) IndexScan(it info_type_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexOnlyScan(an person_id_aka_name) IndexScan(chn char_name_pkey) NestLoop(k mk) NestLoop(k mk t) NestLoop(k mk t ci) HashJoin(k mk t ci rt) NestLoop(k mk t ci rt n) NestLoop(k mk t ci rt n mi) NestLoop(k mk t ci rt n mi it) NestLoop(k mk t ci rt n mi it mc) NestLoop(k mk t ci rt n mi it mc cn) NestLoop(k mk t ci rt n mi it mc cn an) NestLoop(k mk t ci rt n mi it mc cn an chn) Leading((((((((((((k mk) t) ci) rt) n) mi) it) mc) cn) an) chn)) */
"SELECT MIN(chn.name) AS voiced_char_name, MIN(n.name) AS voicing_actress_name, MIN(t.title) AS voiced_action_movie_jap_eng
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
   keyword AS k,
   movie_companies AS mc,
   movie_info AS mi,
   movie_keyword AS mk,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND t.id = mk.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mc.movie_id = mk.movie_id
AND mi.movie_id = ci.movie_id
AND mi.movie_id = mk.movie_id
AND ci.movie_id = mk.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND k.id = mk.keyword_id
AND ci.note IN ('(as Charles Tamburro)', '(as Shi Ma Shan)', '(as Shane Haworth)', '(as Valeria Rosini)', '(as Nancy Nelson)')
AND cn.country_code = '[se]'
AND it.info = 'book'
AND k.keyword IN ('weapons-research', 'gun-licking', 'babylon', 'two-cylinder-pump', 'trumpet')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%k%' OR mi.info LIKE '%T%')
AND n.gender = 'm'
AND n.name LIKE '%a%'
AND rt.role = 'actor'
AND t.production_year > 1990;",80,/*+  IndexScan(k keyword_pkey) IndexScan(mk keyword_id_movie_keyword) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) IndexScan(it info_type_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexOnlyScan(an person_id_aka_name) IndexScan(chn char_name_pkey) NestLoop(k mk) NestLoop(k mk t) NestLoop(k mk t ci) HashJoin(k mk t ci rt) NestLoop(k mk t ci rt n) NestLoop(k mk t ci rt n mi) NestLoop(k mk t ci rt n mi it) NestLoop(k mk t ci rt n mi it mc) NestLoop(k mk t ci rt n mi it mc cn) NestLoop(k mk t ci rt n mi it mc cn an) NestLoop(k mk t ci rt n mi it mc cn an chn) Leading((((((((((((k mk) t) ci) rt) n) mi) it) mc) cn) an) chn)) */
"SELECT MIN(chn.name) AS voiced_char_name, MIN(n.name) AS voicing_actress_name, MIN(t.title) AS voiced_action_movie_jap_eng
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
   keyword AS k,
   movie_companies AS mc,
   movie_info AS mi,
   movie_keyword AS mk,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND t.id = mk.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mc.movie_id = mk.movie_id
AND mi.movie_id = ci.movie_id
AND mi.movie_id = mk.movie_id
AND ci.movie_id = mk.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND k.id = mk.keyword_id
AND ci.note IN ('(as Charles Tamburro)', '(as Stephen Chong)', '(as Nikita Rykunov)', '(as Sidney Lassick)', '(as Carl Foster)')
AND cn.country_code = '[us]'
AND it.info = 'printed media reviews'
AND k.keyword IN ('battle', 'want-ad', 'classroom', 'mullein', 'execution-date')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%M%' OR mi.info LIKE '%t%')
AND n.gender = 'm'
AND n.name LIKE '%.%'
AND rt.role = 'actor'
AND t.production_year > 1990;",80,/*+  IndexScan(k keyword_pkey) IndexScan(mk keyword_id_movie_keyword) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) IndexScan(it info_type_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexOnlyScan(an person_id_aka_name) IndexScan(chn char_name_pkey) NestLoop(k mk) NestLoop(k mk t) NestLoop(k mk t ci) HashJoin(k mk t ci rt) NestLoop(k mk t ci rt n) NestLoop(k mk t ci rt n mi) NestLoop(k mk t ci rt n mi it) NestLoop(k mk t ci rt n mi it mc) NestLoop(k mk t ci rt n mi it mc cn) NestLoop(k mk t ci rt n mi it mc cn an) NestLoop(k mk t ci rt n mi it mc cn an chn) Leading((((((((((((k mk) t) ci) rt) n) mi) it) mc) cn) an) chn)) */
"SELECT MIN(chn.name) AS voiced_char_name, MIN(n.name) AS voicing_actress_name, MIN(t.title) AS voiced_action_movie_jap_eng
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
   keyword AS k,
   movie_companies AS mc,
   movie_info AS mi,
   movie_keyword AS mk,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND t.id = mk.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mc.movie_id = mk.movie_id
AND mi.movie_id = ci.movie_id
AND mi.movie_id = mk.movie_id
AND ci.movie_id = mk.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND k.id = mk.keyword_id
AND ci.note IN ('(as Charles Tamburro)', '(as Khurshed Khan)', '(as Eva Zora)', '(screenplay) (1972)', '(as Manuel Matos)')
AND cn.country_code = '[fr]'
AND it.info = 'printed media reviews'
AND k.keyword IN ('android', 'child-crime', 'tasmania', 'skinny', 'rio-grande')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%4%' OR mi.info LIKE '%w%')
AND n.gender = 'm'
AND n.name LIKE '%m%'
AND rt.role = 'actor'
AND t.production_year > 1990;",80,/*+  IndexScan(k keyword_pkey) IndexScan(mk keyword_id_movie_keyword) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) IndexScan(it info_type_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexOnlyScan(an person_id_aka_name) IndexScan(chn char_name_pkey) NestLoop(k mk) NestLoop(k mk t) NestLoop(k mk t ci) HashJoin(k mk t ci rt) NestLoop(k mk t ci rt n) NestLoop(k mk t ci rt n mi) NestLoop(k mk t ci rt n mi it) NestLoop(k mk t ci rt n mi it mc) NestLoop(k mk t ci rt n mi it mc cn) NestLoop(k mk t ci rt n mi it mc cn an) NestLoop(k mk t ci rt n mi it mc cn an chn) Leading((((((((((((k mk) t) ci) rt) n) mi) it) mc) cn) an) chn)) */
"SELECT MIN(chn.name) AS voiced_char_name, MIN(n.name) AS voicing_actress_name, MIN(t.title) AS voiced_action_movie_jap_eng
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
   keyword AS k,
   movie_companies AS mc,
   movie_info AS mi,
   movie_keyword AS mk,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND t.id = mk.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mc.movie_id = mk.movie_id
AND mi.movie_id = ci.movie_id
AND mi.movie_id = mk.movie_id
AND ci.movie_id = mk.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND k.id = mk.keyword_id
AND ci.note IN ('(as Charles Tamburro)', '(as Anthony De Lan)', '(as W. Ackva)', '(as Betti Segal)', '(character: Robin)')
AND cn.country_code = '[es]'
AND it.info = 'adaption'
AND k.keyword IN ('battle', 'father-thomas', 'life-long-dream', 'distance-in-title', 'sentenced-to-hang')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%f%' OR mi.info LIKE '%s%')
AND n.gender = 'm'
AND n.name LIKE '%r%'
AND rt.role = 'actor'
AND t.production_year > 1990;",80,/*+  IndexScan(k keyword_pkey) IndexScan(mk keyword_id_movie_keyword) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) IndexScan(it info_type_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexOnlyScan(an person_id_aka_name) IndexScan(chn char_name_pkey) NestLoop(k mk) NestLoop(k mk t) NestLoop(k mk t ci) HashJoin(k mk t ci rt) NestLoop(k mk t ci rt n) NestLoop(k mk t ci rt n mi) NestLoop(k mk t ci rt n mi it) NestLoop(k mk t ci rt n mi it mc) NestLoop(k mk t ci rt n mi it mc cn) NestLoop(k mk t ci rt n mi it mc cn an) NestLoop(k mk t ci rt n mi it mc cn an chn) Leading((((((((((((k mk) t) ci) rt) n) mi) it) mc) cn) an) chn)) */
"SELECT MIN(chn.name) AS voiced_char_name, MIN(n.name) AS voicing_actress_name, MIN(t.title) AS voiced_action_movie_jap_eng
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
   keyword AS k,
   movie_companies AS mc,
   movie_info AS mi,
   movie_keyword AS mk,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND t.id = mk.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mc.movie_id = mk.movie_id
AND mi.movie_id = ci.movie_id
AND mi.movie_id = mk.movie_id
AND ci.movie_id = mk.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND k.id = mk.keyword_id
AND ci.note IN ('(as Charles Tamburro)', '(as Tom Gunderson)', '(script recorder)', '(as Alex II)', '(talent searcher)')
AND cn.country_code = '[fr]'
AND it.info = 'admissions'
AND k.keyword IN ('battle', 'rag-picker', 'latter-day', 'scared-people', 'chocolate-icing')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%7%' OR mi.info LIKE '%0%')
AND n.gender = 'm'
AND n.name LIKE '%C%'
AND rt.role = 'actor'
AND t.production_year > 1990;",80,/*+  IndexScan(k keyword_pkey) IndexScan(mk keyword_id_movie_keyword) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) IndexScan(it info_type_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexOnlyScan(an person_id_aka_name) IndexScan(chn char_name_pkey) NestLoop(k mk) NestLoop(k mk t) NestLoop(k mk t ci) HashJoin(k mk t ci rt) NestLoop(k mk t ci rt n) NestLoop(k mk t ci rt n mi) NestLoop(k mk t ci rt n mi it) NestLoop(k mk t ci rt n mi it mc) NestLoop(k mk t ci rt n mi it mc cn) NestLoop(k mk t ci rt n mi it mc cn an) NestLoop(k mk t ci rt n mi it mc cn an chn) Leading((((((((((((k mk) t) ci) rt) n) mi) it) mc) cn) an) chn)) */
"SELECT MIN(chn.name) AS voiced_char_name, MIN(n.name) AS voicing_actress_name, MIN(t.title) AS voiced_action_movie_jap_eng
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
   keyword AS k,
   movie_companies AS mc,
   movie_info AS mi,
   movie_keyword AS mk,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND t.id = mk.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mc.movie_id = mk.movie_id
AND mi.movie_id = ci.movie_id
AND mi.movie_id = mk.movie_id
AND ci.movie_id = mk.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND k.id = mk.keyword_id
AND ci.note IN ('(voice)', '(as Joe-B)', '(as Noel Torren)', '(as Dr Ross Stein)', '(as Wendy Slick)')
AND cn.country_code = '[us]'
AND it.info = 'countries'
AND k.keyword IN ('hanging', '1911-38-super', 'ex-nobleman', 'self-search', 'genetic-code')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%K%' OR mi.info LIKE '%U%')
AND n.gender = 'm'
AND n.name LIKE '%R%'
AND rt.role = 'actor'
AND t.production_year > 2009;",80,/*+  IndexScan(k keyword_pkey) IndexScan(mk keyword_id_movie_keyword) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) IndexScan(it info_type_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexOnlyScan(an person_id_aka_name) IndexScan(chn char_name_pkey) NestLoop(k mk) NestLoop(k mk t) NestLoop(k mk t ci) HashJoin(k mk t ci rt) NestLoop(k mk t ci rt n) NestLoop(k mk t ci rt n mi) NestLoop(k mk t ci rt n mi it) NestLoop(k mk t ci rt n mi it mc) NestLoop(k mk t ci rt n mi it mc cn) NestLoop(k mk t ci rt n mi it mc cn an) NestLoop(k mk t ci rt n mi it mc cn an chn) Leading((((((((((((k mk) t) ci) rt) n) mi) it) mc) cn) an) chn)) */
"SELECT MIN(chn.name) AS voiced_char_name, MIN(n.name) AS voicing_actress_name, MIN(t.title) AS voiced_action_movie_jap_eng
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
   keyword AS k,
   movie_companies AS mc,
   movie_info AS mi,
   movie_keyword AS mk,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND t.id = mk.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mc.movie_id = mk.movie_id
AND mi.movie_id = ci.movie_id
AND mi.movie_id = mk.movie_id
AND ci.movie_id = mk.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND k.id = mk.keyword_id
AND ci.note IN ('(as Charles Tamburro)', '(as Tanya Larivier)', '(as Bob Clampett)', '(as MÃ¢ku NÃ®ruson)', '(certified angel)')
AND cn.country_code = '[br]'
AND it.info = 'opening weekend'
AND k.keyword IN ('weapons-research', 'emotional-breakdown', 'frog-imitation', 'organism', 'list-making')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%$%' OR mi.info LIKE '%7%')
AND n.gender = 'm'
AND n.name LIKE '%r%'
AND rt.role = 'actor'
AND t.production_year > 1990;",80,/*+  IndexScan(k keyword_pkey) IndexScan(mk keyword_id_movie_keyword) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) IndexScan(it info_type_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexOnlyScan(an person_id_aka_name) IndexScan(chn char_name_pkey) NestLoop(k mk) NestLoop(k mk t) NestLoop(k mk t ci) HashJoin(k mk t ci rt) NestLoop(k mk t ci rt n) NestLoop(k mk t ci rt n mi) NestLoop(k mk t ci rt n mi it) NestLoop(k mk t ci rt n mi it mc) NestLoop(k mk t ci rt n mi it mc cn) NestLoop(k mk t ci rt n mi it mc cn an) NestLoop(k mk t ci rt n mi it mc cn an chn) Leading((((((((((((k mk) t) ci) rt) n) mi) it) mc) cn) an) chn)) */
"SELECT MIN(chn.name) AS voiced_char_name, MIN(n.name) AS voicing_actress_name, MIN(t.title) AS voiced_action_movie_jap_eng
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
   keyword AS k,
   movie_companies AS mc,
   movie_info AS mi,
   movie_keyword AS mk,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND t.id = mk.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mc.movie_id = mk.movie_id
AND mi.movie_id = ci.movie_id
AND mi.movie_id = mk.movie_id
AND ci.movie_id = mk.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND k.id = mk.keyword_id
AND ci.note IN ('(as Charles Tamburro)', '(as John Contardo)', '(as MercÃ¨ Camins)', '(as Zarah McKenzie)', '(as Billy Benedict)')
AND cn.country_code = '[gb]'
AND it.info = 'tech info'
AND k.keyword IN ('voice-sampling', 'appartment-mailbox', 'false-advertisement', 'marked-deck', 'peaceful-revolution')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%P%' OR mi.info LIKE '%3%')
AND n.gender = 'm'
AND n.name LIKE '%e%'
AND rt.role = 'actor'
AND t.production_year > 1990;",80,/*+  IndexScan(k keyword_pkey) IndexScan(mk keyword_id_movie_keyword) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) IndexScan(it info_type_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexOnlyScan(an person_id_aka_name) IndexScan(chn char_name_pkey) NestLoop(k mk) NestLoop(k mk t) NestLoop(k mk t ci) HashJoin(k mk t ci rt) NestLoop(k mk t ci rt n) NestLoop(k mk t ci rt n mi) NestLoop(k mk t ci rt n mi it) NestLoop(k mk t ci rt n mi it mc) NestLoop(k mk t ci rt n mi it mc cn) NestLoop(k mk t ci rt n mi it mc cn an) NestLoop(k mk t ci rt n mi it mc cn an chn) Leading((((((((((((k mk) t) ci) rt) n) mi) it) mc) cn) an) chn)) */
"SELECT MIN(chn.name) AS voiced_char_name, MIN(n.name) AS voicing_actress_name, MIN(t.title) AS voiced_action_movie_jap_eng
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
   keyword AS k,
   movie_companies AS mc,
   movie_info AS mi,
   movie_keyword AS mk,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND t.id = mk.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mc.movie_id = mk.movie_id
AND mi.movie_id = ci.movie_id
AND mi.movie_id = mk.movie_id
AND ci.movie_id = mk.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND k.id = mk.keyword_id
AND ci.note IN ('(as Charles Tamburro)', '(as Sreehari Nanu)', '(as J. KrejcikovÃ¡)', '(unit nurse: Italy)', '(as Graham Blicq)')
AND cn.country_code = '[es]'
AND it.info = 'novel'
AND k.keyword IN ('weapons-research', 'fallen-idol', 'pork-sausage', 'pulp-fiction', 'gnome')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%m%' OR mi.info LIKE '%1%')
AND n.gender = 'm'
AND n.name LIKE '%r%'
AND rt.role = 'actor'
AND t.production_year > 1990;",80,/*+  IndexScan(k keyword_pkey) IndexScan(mk keyword_id_movie_keyword) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) IndexScan(it info_type_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexOnlyScan(an person_id_aka_name) IndexScan(chn char_name_pkey) NestLoop(k mk) NestLoop(k mk t) NestLoop(k mk t ci) HashJoin(k mk t ci rt) NestLoop(k mk t ci rt n) NestLoop(k mk t ci rt n mi) NestLoop(k mk t ci rt n mi it) NestLoop(k mk t ci rt n mi it mc) NestLoop(k mk t ci rt n mi it mc cn) NestLoop(k mk t ci rt n mi it mc cn an) NestLoop(k mk t ci rt n mi it mc cn an chn) Leading((((((((((((k mk) t) ci) rt) n) mi) it) mc) cn) an) chn)) */
"SELECT MIN(chn.name) AS voiced_char_name, MIN(n.name) AS voicing_actress_name, MIN(t.title) AS voiced_action_movie_jap_eng
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
   keyword AS k,
   movie_companies AS mc,
   movie_info AS mi,
   movie_keyword AS mk,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND t.id = mk.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mc.movie_id = mk.movie_id
AND mi.movie_id = ci.movie_id
AND mi.movie_id = mk.movie_id
AND ci.movie_id = mk.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND k.id = mk.keyword_id
AND ci.note IN ('(as Charles Tamburro)', '(as Vic Gabijon)', '(as Taffarel)', '(as Chris ''SWAT'')', '(as Carla M. Roley)')
AND cn.country_code = '[fr]'
AND it.info = 'tech info'
AND k.keyword IN ('battle', 'retail-business', 'hidden-meaning', 'oriental-woman', 'revolt')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%o%' OR mi.info LIKE '%n%')
AND n.gender = 'm'
AND n.name LIKE '%,%'
AND rt.role = 'actor'
AND t.production_year > 1990;",80,/*+  IndexScan(k keyword_pkey) IndexScan(mk keyword_id_movie_keyword) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) IndexScan(it info_type_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexOnlyScan(an person_id_aka_name) IndexScan(chn char_name_pkey) NestLoop(k mk) NestLoop(k mk t) NestLoop(k mk t ci) HashJoin(k mk t ci rt) NestLoop(k mk t ci rt n) NestLoop(k mk t ci rt n mi) NestLoop(k mk t ci rt n mi it) NestLoop(k mk t ci rt n mi it mc) NestLoop(k mk t ci rt n mi it mc cn) NestLoop(k mk t ci rt n mi it mc cn an) NestLoop(k mk t ci rt n mi it mc cn an chn) Leading((((((((((((k mk) t) ci) rt) n) mi) it) mc) cn) an) chn)) */
"SELECT MIN(chn.name) AS voiced_char_name, MIN(n.name) AS voicing_actress_name, MIN(t.title) AS voiced_action_movie_jap_eng
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
   keyword AS k,
   movie_companies AS mc,
   movie_info AS mi,
   movie_keyword AS mk,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND t.id = mk.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mc.movie_id = mk.movie_id
AND mi.movie_id = ci.movie_id
AND mi.movie_id = mk.movie_id
AND ci.movie_id = mk.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND k.id = mk.keyword_id
AND ci.note IN ('(as Charles Tamburro)', '(as Logan Aria)', '(HÃ©rodiade)', '(as Miss Elizabeth)', '(as Kenneth Mok)')
AND cn.country_code = '[fr]'
AND it.info = 'printed media reviews'
AND k.keyword IN ('action-hero', 'threshold', 'christmas-food', 'pre-adolescent', 'condoning-suicide')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%9%' OR mi.info LIKE '%n%')
AND n.gender = 'm'
AND n.name LIKE '%r%'
AND rt.role = 'actor'
AND t.production_year > 1990;",80,/*+  IndexScan(k keyword_pkey) IndexScan(mk keyword_id_movie_keyword) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) IndexScan(it info_type_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexOnlyScan(an person_id_aka_name) IndexScan(chn char_name_pkey) NestLoop(k mk) NestLoop(k mk t) NestLoop(k mk t ci) HashJoin(k mk t ci rt) NestLoop(k mk t ci rt n) NestLoop(k mk t ci rt n mi) NestLoop(k mk t ci rt n mi it) NestLoop(k mk t ci rt n mi it mc) NestLoop(k mk t ci rt n mi it mc cn) NestLoop(k mk t ci rt n mi it mc cn an) NestLoop(k mk t ci rt n mi it mc cn an chn) Leading((((((((((((k mk) t) ci) rt) n) mi) it) mc) cn) an) chn)) */
"SELECT MIN(chn.name) AS voiced_char_name, MIN(n.name) AS voicing_actress_name, MIN(t.title) AS voiced_action_movie_jap_eng
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
   keyword AS k,
   movie_companies AS mc,
   movie_info AS mi,
   movie_keyword AS mk,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND t.id = mk.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mc.movie_id = mk.movie_id
AND mi.movie_id = ci.movie_id
AND mi.movie_id = mk.movie_id
AND ci.movie_id = mk.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND k.id = mk.keyword_id
AND ci.note IN ('(as Charles Tamburro)', '(as Daniel MartÃ­n)', '(as Law San)', '(as Doug Moxon)', '(as Tasha Joseph)')
AND cn.country_code = '[br]'
AND it.info = 'adaption'
AND k.keyword IN ('weapons-research', 'fiction-magazine', 'female-taxi-driver', 'stagedoor-man', 'craftsman')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%r%' OR mi.info LIKE '%a%')
AND n.gender = 'm'
AND n.name LIKE '%C%'
AND rt.role = 'actor'
AND t.production_year > 1990;",80,/*+  IndexScan(k keyword_pkey) IndexScan(mk keyword_id_movie_keyword) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) IndexScan(it info_type_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexOnlyScan(an person_id_aka_name) IndexScan(chn char_name_pkey) NestLoop(k mk) NestLoop(k mk t) NestLoop(k mk t ci) HashJoin(k mk t ci rt) NestLoop(k mk t ci rt n) NestLoop(k mk t ci rt n mi) NestLoop(k mk t ci rt n mi it) NestLoop(k mk t ci rt n mi it mc) NestLoop(k mk t ci rt n mi it mc cn) NestLoop(k mk t ci rt n mi it mc cn an) NestLoop(k mk t ci rt n mi it mc cn an chn) Leading((((((((((((k mk) t) ci) rt) n) mi) it) mc) cn) an) chn)) */
"SELECT MIN(chn.name) AS voiced_char_name, MIN(n.name) AS voicing_actress_name, MIN(t.title) AS voiced_action_movie_jap_eng
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
   keyword AS k,
   movie_companies AS mc,
   movie_info AS mi,
   movie_keyword AS mk,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND t.id = mk.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mc.movie_id = mk.movie_id
AND mi.movie_id = ci.movie_id
AND mi.movie_id = mk.movie_id
AND ci.movie_id = mk.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND k.id = mk.keyword_id
AND ci.note IN ('(as Charles Tamburro)', '(as Muska Babitzin)', '(as Tich Saunders)', '(Celo)', '(as Miller Scott)')
AND cn.country_code = '[nl]'
AND it.info = 'weekend gross'
AND k.keyword IN ('action-hero', 'phytoplankton', 'home-life', 'family-in-a-car', 'cargo-ship')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%)%' OR mi.info LIKE '%4%')
AND n.gender = 'm'
AND n.name LIKE '%r%'
AND rt.role = 'actor'
AND t.production_year > 1990;",80,/*+  IndexScan(k keyword_pkey) IndexScan(mk keyword_id_movie_keyword) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) IndexScan(it info_type_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexOnlyScan(an person_id_aka_name) IndexScan(chn char_name_pkey) NestLoop(k mk) NestLoop(k mk t) NestLoop(k mk t ci) HashJoin(k mk t ci rt) NestLoop(k mk t ci rt n) NestLoop(k mk t ci rt n mi) NestLoop(k mk t ci rt n mi it) NestLoop(k mk t ci rt n mi it mc) NestLoop(k mk t ci rt n mi it mc cn) NestLoop(k mk t ci rt n mi it mc cn an) NestLoop(k mk t ci rt n mi it mc cn an chn) Leading((((((((((((k mk) t) ci) rt) n) mi) it) mc) cn) an) chn)) */
"SELECT MIN(chn.name) AS voiced_char_name, MIN(n.name) AS voicing_actress_name, MIN(t.title) AS voiced_action_movie_jap_eng
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
   keyword AS k,
   movie_companies AS mc,
   movie_info AS mi,
   movie_keyword AS mk,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND t.id = mk.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mc.movie_id = mk.movie_id
AND mi.movie_id = ci.movie_id
AND mi.movie_id = mk.movie_id
AND ci.movie_id = mk.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND k.id = mk.keyword_id
AND ci.note IN ('(voice)', '(as Dr. Gary Cohan)', '(as Spence Wil Dee)', '(as Darth Shiavo)', '(as Desi DeAngelo)')
AND cn.country_code = '[us]'
AND it.info = 'certificates'
AND k.keyword IN ('injury', 'atonement', 'spork', 'eastern-canada', 'mouth-spray')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%e%' OR mi.info LIKE '%m%')
AND n.gender = 'm'
AND n.name LIKE '%,%'
AND rt.role = 'actor'
AND t.production_year > 2009;",80,/*+  IndexScan(k keyword_pkey) IndexScan(mk keyword_id_movie_keyword) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) IndexScan(it info_type_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexOnlyScan(an person_id_aka_name) IndexScan(chn char_name_pkey) NestLoop(k mk) NestLoop(k mk t) NestLoop(k mk t ci) HashJoin(k mk t ci rt) NestLoop(k mk t ci rt n) NestLoop(k mk t ci rt n mi) NestLoop(k mk t ci rt n mi it) NestLoop(k mk t ci rt n mi it mc) NestLoop(k mk t ci rt n mi it mc cn) NestLoop(k mk t ci rt n mi it mc cn an) NestLoop(k mk t ci rt n mi it mc cn an chn) Leading((((((((((((k mk) t) ci) rt) n) mi) it) mc) cn) an) chn)) */
"SELECT MIN(chn.name) AS voiced_char_name, MIN(n.name) AS voicing_actress_name, MIN(t.title) AS voiced_action_movie_jap_eng
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
   keyword AS k,
   movie_companies AS mc,
   movie_info AS mi,
   movie_keyword AS mk,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND t.id = mk.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mc.movie_id = mk.movie_id
AND mi.movie_id = ci.movie_id
AND mi.movie_id = mk.movie_id
AND ci.movie_id = mk.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND k.id = mk.keyword_id
AND ci.note IN ('(as Charles Tamburro)', '(as Cha Son Wu)', '(as Ed Jupp)', '(Q&A video)', '(as Zhang Jingchu)')
AND cn.country_code = '[se]'
AND it.info = 'weekend gross'
AND k.keyword IN ('voice-sampling', 'dalarna-sweden', 'based-on-folk-tale', 'lamb-of-god', 'buzz-droid')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%(%' OR mi.info LIKE '%)%')
AND n.gender = 'm'
AND n.name LIKE '%l%'
AND rt.role = 'actor'
AND t.production_year > 1990;",80,/*+  IndexScan(k keyword_pkey) IndexScan(mk keyword_id_movie_keyword) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) IndexScan(it info_type_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexOnlyScan(an person_id_aka_name) IndexScan(chn char_name_pkey) NestLoop(k mk) NestLoop(k mk t) NestLoop(k mk t ci) HashJoin(k mk t ci rt) NestLoop(k mk t ci rt n) NestLoop(k mk t ci rt n mi) NestLoop(k mk t ci rt n mi it) NestLoop(k mk t ci rt n mi it mc) NestLoop(k mk t ci rt n mi it mc cn) NestLoop(k mk t ci rt n mi it mc cn an) NestLoop(k mk t ci rt n mi it mc cn an chn) Leading((((((((((((k mk) t) ci) rt) n) mi) it) mc) cn) an) chn)) */
"SELECT MIN(chn.name) AS voiced_char_name, MIN(n.name) AS voicing_actress_name, MIN(t.title) AS voiced_action_movie_jap_eng
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
   keyword AS k,
   movie_companies AS mc,
   movie_info AS mi,
   movie_keyword AS mk,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND t.id = mk.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mc.movie_id = mk.movie_id
AND mi.movie_id = ci.movie_id
AND mi.movie_id = mk.movie_id
AND ci.movie_id = mk.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND k.id = mk.keyword_id
AND ci.note IN ('(as Charles Tamburro)', '(as S. Sokolovic)', '(clothes: Menudo)', '(as Mancow Muller)', '(as Mel Zwyer)')
AND cn.country_code = '[nl]'
AND it.info = 'tech info'
AND k.keyword IN ('weapons-research', 'scratched-inside', 'blood-legion', 'political-club', 'miniature-oscar')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%s%' OR mi.info LIKE '%n%')
AND n.gender = 'm'
AND n.name LIKE '%h%'
AND rt.role = 'actor'
AND t.production_year > 1990;",80,/*+  IndexScan(k keyword_pkey) IndexScan(mk keyword_id_movie_keyword) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) IndexScan(it info_type_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexOnlyScan(an person_id_aka_name) IndexScan(chn char_name_pkey) NestLoop(k mk) NestLoop(k mk t) NestLoop(k mk t ci) HashJoin(k mk t ci rt) NestLoop(k mk t ci rt n) NestLoop(k mk t ci rt n mi) NestLoop(k mk t ci rt n mi it) NestLoop(k mk t ci rt n mi it mc) NestLoop(k mk t ci rt n mi it mc cn) NestLoop(k mk t ci rt n mi it mc cn an) NestLoop(k mk t ci rt n mi it mc cn an chn) Leading((((((((((((k mk) t) ci) rt) n) mi) it) mc) cn) an) chn)) */
"SELECT MIN(chn.name) AS voiced_char_name, MIN(n.name) AS voicing_actress_name, MIN(t.title) AS voiced_action_movie_jap_eng
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
   keyword AS k,
   movie_companies AS mc,
   movie_info AS mi,
   movie_keyword AS mk,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND t.id = mk.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mc.movie_id = mk.movie_id
AND mi.movie_id = ci.movie_id
AND mi.movie_id = mk.movie_id
AND ci.movie_id = mk.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND k.id = mk.keyword_id
AND ci.note IN ('(as Charles Tamburro)', '(as ADG)', '(as James LeGros)', '(as Lanny A. Horn)', '(as June Nardsley)')
AND cn.country_code = '[fr]'
AND it.info = 'rentals'
AND k.keyword IN ('battle', 'peter-the-great', 'anniversary-card', 'debt-of-gratitude', 'blow-up-doll')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%8%' OR mi.info LIKE '%8%')
AND n.gender = 'm'
AND n.name LIKE '%m%'
AND rt.role = 'actor'
AND t.production_year > 1990;",80,/*+  IndexScan(k keyword_pkey) IndexScan(mk keyword_id_movie_keyword) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) IndexScan(it info_type_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexOnlyScan(an person_id_aka_name) IndexScan(chn char_name_pkey) NestLoop(k mk) NestLoop(k mk t) NestLoop(k mk t ci) HashJoin(k mk t ci rt) NestLoop(k mk t ci rt n) NestLoop(k mk t ci rt n mi) NestLoop(k mk t ci rt n mi it) NestLoop(k mk t ci rt n mi it mc) NestLoop(k mk t ci rt n mi it mc cn) NestLoop(k mk t ci rt n mi it mc cn an) NestLoop(k mk t ci rt n mi it mc cn an chn) Leading((((((((((((k mk) t) ci) rt) n) mi) it) mc) cn) an) chn)) */
"SELECT MIN(chn.name) AS voiced_char_name, MIN(n.name) AS voicing_actress_name, MIN(t.title) AS voiced_action_movie_jap_eng
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
   keyword AS k,
   movie_companies AS mc,
   movie_info AS mi,
   movie_keyword AS mk,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND t.id = mk.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mc.movie_id = mk.movie_id
AND mi.movie_id = ci.movie_id
AND mi.movie_id = mk.movie_id
AND ci.movie_id = mk.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND k.id = mk.keyword_id
AND ci.note IN ('(voice)', '(as Misty Lynn)', '(as Jasmyne)', '(file transfer)', '(as Charles Stine)')
AND cn.country_code = '[us]'
AND it.info = 'countries'
AND k.keyword IN ('church', 'fictional-quiz-show', 'hyderabad-india', 'mutineer', 'yacht-racing')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%K%' OR mi.info LIKE '%U%')
AND n.gender = 'm'
AND n.name LIKE '%R%'
AND rt.role = 'actor'
AND t.production_year > 2009;",80,/*+  IndexScan(k keyword_pkey) IndexScan(mk keyword_id_movie_keyword) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) IndexScan(it info_type_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexOnlyScan(an person_id_aka_name) IndexScan(chn char_name_pkey) NestLoop(k mk) NestLoop(k mk t) NestLoop(k mk t ci) HashJoin(k mk t ci rt) NestLoop(k mk t ci rt n) NestLoop(k mk t ci rt n mi) NestLoop(k mk t ci rt n mi it) NestLoop(k mk t ci rt n mi it mc) NestLoop(k mk t ci rt n mi it mc cn) NestLoop(k mk t ci rt n mi it mc cn an) NestLoop(k mk t ci rt n mi it mc cn an chn) Leading((((((((((((k mk) t) ci) rt) n) mi) it) mc) cn) an) chn)) */
"SELECT MIN(chn.name) AS voiced_char_name, MIN(n.name) AS voicing_actress_name, MIN(t.title) AS voiced_action_movie_jap_eng
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
   keyword AS k,
   movie_companies AS mc,
   movie_info AS mi,
   movie_keyword AS mk,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND t.id = mk.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mc.movie_id = mk.movie_id
AND mi.movie_id = ci.movie_id
AND mi.movie_id = mk.movie_id
AND ci.movie_id = mk.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND k.id = mk.keyword_id
AND ci.note IN ('(as Charles Tamburro)', '(as Rowan Floyd)', '(as Frank Devol)', '(interim producer)', '(as Rolf Wouters)')
AND cn.country_code = '[gb]'
AND it.info = 'filming dates'
AND k.keyword IN ('weapons-research', 'piano-poetry', 'football-quiz', 'portuguese-theatre', 'new-jack')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%8%' OR mi.info LIKE '%r%')
AND n.gender = 'm'
AND n.name LIKE '%r%'
AND rt.role = 'actor'
AND t.production_year > 1990;",80,/*+  IndexScan(k keyword_pkey) IndexScan(mk keyword_id_movie_keyword) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) IndexScan(it info_type_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexOnlyScan(an person_id_aka_name) IndexScan(chn char_name_pkey) NestLoop(k mk) NestLoop(k mk t) NestLoop(k mk t ci) HashJoin(k mk t ci rt) NestLoop(k mk t ci rt n) NestLoop(k mk t ci rt n mi) NestLoop(k mk t ci rt n mi it) NestLoop(k mk t ci rt n mi it mc) NestLoop(k mk t ci rt n mi it mc cn) NestLoop(k mk t ci rt n mi it mc cn an) NestLoop(k mk t ci rt n mi it mc cn an chn) Leading((((((((((((k mk) t) ci) rt) n) mi) it) mc) cn) an) chn)) */
"SELECT MIN(chn.name) AS voiced_char_name, MIN(n.name) AS voicing_actress_name, MIN(t.title) AS voiced_action_movie_jap_eng
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
   keyword AS k,
   movie_companies AS mc,
   movie_info AS mi,
   movie_keyword AS mk,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND t.id = mk.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mc.movie_id = mk.movie_id
AND mi.movie_id = ci.movie_id
AND mi.movie_id = mk.movie_id
AND ci.movie_id = mk.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND k.id = mk.keyword_id
AND ci.note IN ('(as Charles Tamburro)', '(stand-in: Lori)', '(hmi operator: 5K)', '(as Inge Silonik)', '(as VenÃ© Arcoraci)')
AND cn.country_code = '[fr]'
AND it.info = 'screenplay-teleplay'
AND k.keyword IN ('android', 'obliquity', 'loss-of-army-buddy', 'talking-rock', 'paraguay')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%t%' OR mi.info LIKE '%d%')
AND n.gender = 'm'
AND n.name LIKE '%s%'
AND rt.role = 'actor'
AND t.production_year > 1990;",80,/*+  IndexScan(k keyword_pkey) IndexScan(mk keyword_id_movie_keyword) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) IndexScan(it info_type_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexOnlyScan(an person_id_aka_name) IndexScan(chn char_name_pkey) NestLoop(k mk) NestLoop(k mk t) NestLoop(k mk t ci) HashJoin(k mk t ci rt) NestLoop(k mk t ci rt n) NestLoop(k mk t ci rt n mi) NestLoop(k mk t ci rt n mi it) NestLoop(k mk t ci rt n mi it mc) NestLoop(k mk t ci rt n mi it mc cn) NestLoop(k mk t ci rt n mi it mc cn an) NestLoop(k mk t ci rt n mi it mc cn an chn) Leading((((((((((((k mk) t) ci) rt) n) mi) it) mc) cn) an) chn)) */
"SELECT MIN(chn.name) AS voiced_char_name, MIN(n.name) AS voicing_actress_name, MIN(t.title) AS voiced_action_movie_jap_eng
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
   keyword AS k,
   movie_companies AS mc,
   movie_info AS mi,
   movie_keyword AS mk,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND t.id = mk.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mc.movie_id = mk.movie_id
AND mi.movie_id = ci.movie_id
AND mi.movie_id = mk.movie_id
AND ci.movie_id = mk.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND k.id = mk.keyword_id
AND ci.note IN ('(voice)', '(as Dave Boneywell)', '(as Ron Walden)', '(as Kay Hartrey)', '(as Gordon Lam)')
AND cn.country_code = '[us]'
AND it.info = 'quotes'
AND k.keyword IN ('murder', 'blood-on-back', 'norwegian-accent', 'kim-coles', 'canned-pineapple')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%.%' OR mi.info LIKE '%m%')
AND n.gender = 'm'
AND n.name LIKE '%R%'
AND rt.role = 'actor'
AND t.production_year > 2009;",80,/*+  IndexScan(k keyword_pkey) IndexScan(mk keyword_id_movie_keyword) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) IndexScan(it info_type_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexOnlyScan(an person_id_aka_name) IndexScan(chn char_name_pkey) NestLoop(k mk) NestLoop(k mk t) NestLoop(k mk t ci) HashJoin(k mk t ci rt) NestLoop(k mk t ci rt n) NestLoop(k mk t ci rt n mi) NestLoop(k mk t ci rt n mi it) NestLoop(k mk t ci rt n mi it mc) NestLoop(k mk t ci rt n mi it mc cn) NestLoop(k mk t ci rt n mi it mc cn an) NestLoop(k mk t ci rt n mi it mc cn an chn) Leading((((((((((((k mk) t) ci) rt) n) mi) it) mc) cn) an) chn)) */
"SELECT MIN(chn.name) AS voiced_char_name, MIN(n.name) AS voicing_actress_name, MIN(t.title) AS voiced_action_movie_jap_eng
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
   keyword AS k,
   movie_companies AS mc,
   movie_info AS mi,
   movie_keyword AS mk,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND t.id = mk.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mc.movie_id = mk.movie_id
AND mi.movie_id = ci.movie_id
AND mi.movie_id = mk.movie_id
AND ci.movie_id = mk.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND k.id = mk.keyword_id
AND ci.note IN ('(as Charles Tamburro)', '(as Tony Ling)', '(as Crystal Ashley)', '(as Becky Bowles)', '(as Maja Hendrickx)')
AND cn.country_code = '[nl]'
AND it.info = 'printed media reviews'
AND k.keyword IN ('weapons-research', 'third-person', 'separated-brothers', 'limb-in-traction', 'temporary-visa')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%¥%' OR mi.info LIKE '%1%')
AND n.gender = 'm'
AND n.name LIKE '%r%'
AND rt.role = 'actor'
AND t.production_year > 1990;",80,/*+  IndexScan(k keyword_pkey) IndexScan(mk keyword_id_movie_keyword) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) IndexScan(it info_type_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexOnlyScan(an person_id_aka_name) IndexScan(chn char_name_pkey) NestLoop(k mk) NestLoop(k mk t) NestLoop(k mk t ci) HashJoin(k mk t ci rt) NestLoop(k mk t ci rt n) NestLoop(k mk t ci rt n mi) NestLoop(k mk t ci rt n mi it) NestLoop(k mk t ci rt n mi it mc) NestLoop(k mk t ci rt n mi it mc cn) NestLoop(k mk t ci rt n mi it mc cn an) NestLoop(k mk t ci rt n mi it mc cn an chn) Leading((((((((((((k mk) t) ci) rt) n) mi) it) mc) cn) an) chn)) */
"SELECT MIN(chn.name) AS voiced_char_name, MIN(n.name) AS voicing_actress_name, MIN(t.title) AS voiced_action_movie_jap_eng
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
   keyword AS k,
   movie_companies AS mc,
   movie_info AS mi,
   movie_keyword AS mk,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND t.id = mk.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mc.movie_id = mk.movie_id
AND mi.movie_id = ci.movie_id
AND mi.movie_id = mk.movie_id
AND ci.movie_id = mk.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND k.id = mk.keyword_id
AND ci.note IN ('(as Charles Tamburro)', '(as Persia)', '(as Albert Garrat)', '(segment ""Revenge"")', '(as Lenka Erdos)')
AND cn.country_code = '[fr]'
AND it.info = 'other literature'
AND k.keyword IN ('2020s', 'turned-into-a-wolf', 'pagan-subtext', 'english-opera', 'power-cosmic')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%u%' OR mi.info LIKE '%c%')
AND n.gender = 'm'
AND n.name LIKE '%r%'
AND rt.role = 'actor'
AND t.production_year > 1990;",80,/*+  IndexScan(k keyword_pkey) IndexScan(mk keyword_id_movie_keyword) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) IndexScan(it info_type_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexOnlyScan(an person_id_aka_name) IndexScan(chn char_name_pkey) NestLoop(k mk) NestLoop(k mk t) NestLoop(k mk t ci) HashJoin(k mk t ci rt) NestLoop(k mk t ci rt n) NestLoop(k mk t ci rt n mi) NestLoop(k mk t ci rt n mi it) NestLoop(k mk t ci rt n mi it mc) NestLoop(k mk t ci rt n mi it mc cn) NestLoop(k mk t ci rt n mi it mc cn an) NestLoop(k mk t ci rt n mi it mc cn an chn) Leading((((((((((((k mk) t) ci) rt) n) mi) it) mc) cn) an) chn)) */
"SELECT MIN(chn.name) AS voiced_char_name, MIN(n.name) AS voicing_actress_name, MIN(t.title) AS voiced_action_movie_jap_eng
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
   keyword AS k,
   movie_companies AS mc,
   movie_info AS mi,
   movie_keyword AS mk,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND t.id = mk.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mc.movie_id = mk.movie_id
AND mi.movie_id = ci.movie_id
AND mi.movie_id = mk.movie_id
AND ci.movie_id = mk.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND k.id = mk.keyword_id
AND ci.note IN ('(as Charles Tamburro)', '(as Rafael Puello)', '(as Bonnie)', '(runner) (2000)', '(as Lana Semil)')
AND cn.country_code = '[us]'
AND it.info = 'printed media reviews'
AND k.keyword IN ('voice-sampling', 'cyma-zarghami', 'lucky-pen', 'male-bathing-female', 'converts')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%i%' OR mi.info LIKE '%M%')
AND n.gender = 'm'
AND n.name LIKE '%u%'
AND rt.role = 'actor'
AND t.production_year > 1990;",80,/*+  IndexScan(k keyword_pkey) IndexScan(mk keyword_id_movie_keyword) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) IndexScan(it info_type_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexOnlyScan(an person_id_aka_name) IndexScan(chn char_name_pkey) NestLoop(k mk) NestLoop(k mk t) NestLoop(k mk t ci) HashJoin(k mk t ci rt) NestLoop(k mk t ci rt n) NestLoop(k mk t ci rt n mi) NestLoop(k mk t ci rt n mi it) NestLoop(k mk t ci rt n mi it mc) NestLoop(k mk t ci rt n mi it mc cn) NestLoop(k mk t ci rt n mi it mc cn an) NestLoop(k mk t ci rt n mi it mc cn an chn) Leading((((((((((((k mk) t) ci) rt) n) mi) it) mc) cn) an) chn)) */
"SELECT MIN(chn.name) AS voiced_char_name, MIN(n.name) AS voicing_actress_name, MIN(t.title) AS voiced_action_movie_jap_eng
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
   keyword AS k,
   movie_companies AS mc,
   movie_info AS mi,
   movie_keyword AS mk,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND t.id = mk.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mc.movie_id = mk.movie_id
AND mi.movie_id = ci.movie_id
AND mi.movie_id = mk.movie_id
AND ci.movie_id = mk.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND k.id = mk.keyword_id
AND ci.note IN ('(as Charles Tamburro)', '(as Behroz)', '(as La Tyia Benson)', '(as Sun Tin Ha)', '(as Frank McCloud)')
AND cn.country_code = '[us]'
AND it.info = 'other literature'
AND k.keyword IN ('action-hero', 'twenty-something', 'saugerties-new-york', 'self-transcendence', 'poor-painter')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%e%' OR mi.info LIKE '%i%')
AND n.gender = 'm'
AND n.name LIKE '%o%'
AND rt.role = 'actor'
AND t.production_year > 1990;",80,/*+  IndexScan(k keyword_pkey) IndexScan(mk keyword_id_movie_keyword) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) IndexScan(it info_type_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexOnlyScan(an person_id_aka_name) IndexScan(chn char_name_pkey) NestLoop(k mk) NestLoop(k mk t) NestLoop(k mk t ci) HashJoin(k mk t ci rt) NestLoop(k mk t ci rt n) NestLoop(k mk t ci rt n mi) NestLoop(k mk t ci rt n mi it) NestLoop(k mk t ci rt n mi it mc) NestLoop(k mk t ci rt n mi it mc cn) NestLoop(k mk t ci rt n mi it mc cn an) NestLoop(k mk t ci rt n mi it mc cn an chn) Leading((((((((((((k mk) t) ci) rt) n) mi) it) mc) cn) an) chn)) */
"SELECT MIN(chn.name) AS voiced_char_name, MIN(n.name) AS voicing_actress_name, MIN(t.title) AS voiced_action_movie_jap_eng
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
   keyword AS k,
   movie_companies AS mc,
   movie_info AS mi,
   movie_keyword AS mk,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND t.id = mk.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mc.movie_id = mk.movie_id
AND mi.movie_id = ci.movie_id
AND mi.movie_id = mk.movie_id
AND ci.movie_id = mk.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND k.id = mk.keyword_id
AND ci.note IN ('(as Charles Tamburro)', '(as Guylaine PÃ©an)', '(as PO2 Rodel Puno)', '(as Greg Finn)', '(as Rodrigo Ricio)')
AND cn.country_code = '[fr]'
AND it.info = 'weekend gross'
AND k.keyword IN ('weapons-research', 'ground-crew', 'barmaid-costume', 'son-kisses-father', 'granite-block')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%(%' OR mi.info LIKE '%2%')
AND n.gender = 'm'
AND n.name LIKE '%s%'
AND rt.role = 'actor'
AND t.production_year > 1990;",80,/*+  IndexScan(k keyword_pkey) IndexScan(mk keyword_id_movie_keyword) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) IndexScan(it info_type_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexOnlyScan(an person_id_aka_name) IndexScan(chn char_name_pkey) NestLoop(k mk) NestLoop(k mk t) NestLoop(k mk t ci) HashJoin(k mk t ci rt) NestLoop(k mk t ci rt n) NestLoop(k mk t ci rt n mi) NestLoop(k mk t ci rt n mi it) NestLoop(k mk t ci rt n mi it mc) NestLoop(k mk t ci rt n mi it mc cn) NestLoop(k mk t ci rt n mi it mc cn an) NestLoop(k mk t ci rt n mi it mc cn an chn) Leading((((((((((((k mk) t) ci) rt) n) mi) it) mc) cn) an) chn)) */
"SELECT MIN(chn.name) AS voiced_char_name, MIN(n.name) AS voicing_actress_name, MIN(t.title) AS voiced_action_movie_jap_eng
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
   keyword AS k,
   movie_companies AS mc,
   movie_info AS mi,
   movie_keyword AS mk,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND t.id = mk.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mc.movie_id = mk.movie_id
AND mi.movie_id = ci.movie_id
AND mi.movie_id = mk.movie_id
AND ci.movie_id = mk.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND k.id = mk.keyword_id
AND ci.note IN ('(as Charles Tamburro)', '(as Betty Waldron)', '(as Max Maxwell)', '(as Margo Reymundo)', '(as Nicole Dudalia)')
AND cn.country_code = '[us]'
AND it.info = 'tech info'
AND k.keyword IN ('battle', 'linoleum', 'kurds', 'monsey-new-york', 'cuddling')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%M%' OR mi.info LIKE '%m%')
AND n.gender = 'm'
AND n.name LIKE '%a%'
AND rt.role = 'actor'
AND t.production_year > 1990;",80,/*+  IndexScan(k keyword_pkey) IndexScan(mk keyword_id_movie_keyword) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) IndexScan(it info_type_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexOnlyScan(an person_id_aka_name) IndexScan(chn char_name_pkey) NestLoop(k mk) NestLoop(k mk t) NestLoop(k mk t ci) HashJoin(k mk t ci rt) NestLoop(k mk t ci rt n) NestLoop(k mk t ci rt n mi) NestLoop(k mk t ci rt n mi it) NestLoop(k mk t ci rt n mi it mc) NestLoop(k mk t ci rt n mi it mc cn) NestLoop(k mk t ci rt n mi it mc cn an) NestLoop(k mk t ci rt n mi it mc cn an chn) Leading((((((((((((k mk) t) ci) rt) n) mi) it) mc) cn) an) chn)) */
"SELECT MIN(chn.name) AS voiced_char_name, MIN(n.name) AS voicing_actress_name, MIN(t.title) AS voiced_action_movie_jap_eng
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
   keyword AS k,
   movie_companies AS mc,
   movie_info AS mi,
   movie_keyword AS mk,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND t.id = mk.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mc.movie_id = mk.movie_id
AND mi.movie_id = ci.movie_id
AND mi.movie_id = mk.movie_id
AND ci.movie_id = mk.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND k.id = mk.keyword_id
AND ci.note IN ('(as Charles Tamburro)', '(as Kalani Lei)', '(Security)', '(as Yael Tzalka)', '(as Dr. Vera Rubin)')
AND cn.country_code = '[se]'
AND it.info = 'tech info'
AND k.keyword IN ('battle', 'atomic-weed', 'mass-spectrometer', 'licking-a-wall', 'armenian-terrorism')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%A%' OR mi.info LIKE '%l%')
AND n.gender = 'm'
AND n.name LIKE '%,%'
AND rt.role = 'actor'
AND t.production_year > 1990;",80,/*+  IndexScan(k keyword_pkey) IndexScan(mk keyword_id_movie_keyword) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) IndexScan(it info_type_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexOnlyScan(an person_id_aka_name) IndexScan(chn char_name_pkey) NestLoop(k mk) NestLoop(k mk t) NestLoop(k mk t ci) HashJoin(k mk t ci rt) NestLoop(k mk t ci rt n) NestLoop(k mk t ci rt n mi) NestLoop(k mk t ci rt n mi it) NestLoop(k mk t ci rt n mi it mc) NestLoop(k mk t ci rt n mi it mc cn) NestLoop(k mk t ci rt n mi it mc cn an) NestLoop(k mk t ci rt n mi it mc cn an chn) Leading((((((((((((k mk) t) ci) rt) n) mi) it) mc) cn) an) chn)) */
"SELECT MIN(chn.name) AS voiced_char_name, MIN(n.name) AS voicing_actress_name, MIN(t.title) AS voiced_action_movie_jap_eng
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
   keyword AS k,
   movie_companies AS mc,
   movie_info AS mi,
   movie_keyword AS mk,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND t.id = mk.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mc.movie_id = mk.movie_id
AND mi.movie_id = ci.movie_id
AND mi.movie_id = mk.movie_id
AND ci.movie_id = mk.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND k.id = mk.keyword_id
AND ci.note IN ('(voice)', '(as Freddy Pompeii)', '(as Kandee Licks)', '(outreach producer)', '(as Martin Rackham)')
AND cn.country_code = '[us]'
AND it.info = 'countries'
AND k.keyword IN ('church', 'brass-band', 'leopard-skin', 'garden-rake', 'torino')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%A%' OR mi.info LIKE '%A%')
AND n.gender = 'm'
AND n.name LIKE '%e%'
AND rt.role = 'actor'
AND t.production_year > 2009;",80,/*+  IndexScan(k keyword_pkey) IndexScan(mk keyword_id_movie_keyword) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) IndexScan(it info_type_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexOnlyScan(an person_id_aka_name) IndexScan(chn char_name_pkey) NestLoop(k mk) NestLoop(k mk t) NestLoop(k mk t ci) HashJoin(k mk t ci rt) NestLoop(k mk t ci rt n) NestLoop(k mk t ci rt n mi) NestLoop(k mk t ci rt n mi it) NestLoop(k mk t ci rt n mi it mc) NestLoop(k mk t ci rt n mi it mc cn) NestLoop(k mk t ci rt n mi it mc cn an) NestLoop(k mk t ci rt n mi it mc cn an chn) Leading((((((((((((k mk) t) ci) rt) n) mi) it) mc) cn) an) chn)) */
"SELECT MIN(chn.name) AS voiced_char_name, MIN(n.name) AS voicing_actress_name, MIN(t.title) AS voiced_action_movie_jap_eng
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
   keyword AS k,
   movie_companies AS mc,
   movie_info AS mi,
   movie_keyword AS mk,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND t.id = mk.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mc.movie_id = mk.movie_id
AND mi.movie_id = ci.movie_id
AND mi.movie_id = mk.movie_id
AND ci.movie_id = mk.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND k.id = mk.keyword_id
AND ci.note IN ('(as Charles Tamburro)', '(as Joanna Park)', '(as Halda Alice)', '(as V. Doronin)', '(as Shelly Kudrov)')
AND cn.country_code = '[us]'
AND it.info = 'tech info'
AND k.keyword IN ('action-hero', 'horse-drawn-cart', 'distance-running', 'khmer-rouge', 'sci-fi-convention')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%m%' OR mi.info LIKE '%F%')
AND n.gender = 'm'
AND n.name LIKE '%b%'
AND rt.role = 'actor'
AND t.production_year > 1990;",80,/*+  IndexScan(k keyword_pkey) IndexScan(mk keyword_id_movie_keyword) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) IndexScan(it info_type_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexOnlyScan(an person_id_aka_name) IndexScan(chn char_name_pkey) NestLoop(k mk) NestLoop(k mk t) NestLoop(k mk t ci) HashJoin(k mk t ci rt) NestLoop(k mk t ci rt n) NestLoop(k mk t ci rt n mi) NestLoop(k mk t ci rt n mi it) NestLoop(k mk t ci rt n mi it mc) NestLoop(k mk t ci rt n mi it mc cn) NestLoop(k mk t ci rt n mi it mc cn an) NestLoop(k mk t ci rt n mi it mc cn an chn) Leading((((((((((((k mk) t) ci) rt) n) mi) it) mc) cn) an) chn)) */
"SELECT MIN(chn.name) AS voiced_char_name, MIN(n.name) AS voicing_actress_name, MIN(t.title) AS voiced_action_movie_jap_eng
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
   keyword AS k,
   movie_companies AS mc,
   movie_info AS mi,
   movie_keyword AS mk,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND t.id = mk.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mc.movie_id = mk.movie_id
AND mi.movie_id = ci.movie_id
AND mi.movie_id = mk.movie_id
AND ci.movie_id = mk.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND k.id = mk.keyword_id
AND ci.note IN ('(as Charles Tamburro)', '(as George Arthur)', '(as San Pestonji)', '(as Koel)', '(as April Chapple)')
AND cn.country_code = '[fr]'
AND it.info = 'other literature'
AND k.keyword IN ('battle', 'behind-the-line', 'loss-of-reality', 'movie-investor', 'pretend-yarmulke')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%9%' OR mi.info LIKE '%F%')
AND n.gender = 'm'
AND n.name LIKE '%h%'
AND rt.role = 'actor'
AND t.production_year > 1990;",80,/*+  IndexScan(k keyword_pkey) IndexScan(mk keyword_id_movie_keyword) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) IndexScan(it info_type_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexOnlyScan(an person_id_aka_name) IndexScan(chn char_name_pkey) NestLoop(k mk) NestLoop(k mk t) NestLoop(k mk t ci) HashJoin(k mk t ci rt) NestLoop(k mk t ci rt n) NestLoop(k mk t ci rt n mi) NestLoop(k mk t ci rt n mi it) NestLoop(k mk t ci rt n mi it mc) NestLoop(k mk t ci rt n mi it mc cn) NestLoop(k mk t ci rt n mi it mc cn an) NestLoop(k mk t ci rt n mi it mc cn an chn) Leading((((((((((((k mk) t) ci) rt) n) mi) it) mc) cn) an) chn)) */
"SELECT MIN(chn.name) AS voiced_char_name, MIN(n.name) AS voicing_actress_name, MIN(t.title) AS voiced_action_movie_jap_eng
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
   keyword AS k,
   movie_companies AS mc,
   movie_info AS mi,
   movie_keyword AS mk,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND t.id = mk.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mc.movie_id = mk.movie_id
AND mi.movie_id = ci.movie_id
AND mi.movie_id = mk.movie_id
AND ci.movie_id = mk.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND k.id = mk.keyword_id
AND ci.note IN ('(as Charles Tamburro)', '(as Norma Nelson)', '(as Hermann Marc)', '(as Bryan Hayes)', '(as J. Semotan)')
AND cn.country_code = '[nl]'
AND it.info = 'tech info'
AND k.keyword IN ('action-hero', 'bird-migration', 'hospital-bed', 'glass-repair-truck', 'time-twin')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%M%' OR mi.info LIKE '%M%')
AND n.gender = 'm'
AND n.name LIKE '%u%'
AND rt.role = 'actor'
AND t.production_year > 1990;",80,/*+  IndexScan(k keyword_pkey) IndexScan(mk keyword_id_movie_keyword) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) IndexScan(it info_type_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexOnlyScan(an person_id_aka_name) IndexScan(chn char_name_pkey) NestLoop(k mk) NestLoop(k mk t) NestLoop(k mk t ci) HashJoin(k mk t ci rt) NestLoop(k mk t ci rt n) NestLoop(k mk t ci rt n mi) NestLoop(k mk t ci rt n mi it) NestLoop(k mk t ci rt n mi it mc) NestLoop(k mk t ci rt n mi it mc cn) NestLoop(k mk t ci rt n mi it mc cn an) NestLoop(k mk t ci rt n mi it mc cn an chn) Leading((((((((((((k mk) t) ci) rt) n) mi) it) mc) cn) an) chn)) */
"SELECT MIN(chn.name) AS voiced_char_name, MIN(n.name) AS voicing_actress_name, MIN(t.title) AS voiced_action_movie_jap_eng
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
   keyword AS k,
   movie_companies AS mc,
   movie_info AS mi,
   movie_keyword AS mk,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND t.id = mk.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mc.movie_id = mk.movie_id
AND mi.movie_id = ci.movie_id
AND mi.movie_id = mk.movie_id
AND ci.movie_id = mk.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND k.id = mk.keyword_id
AND ci.note IN ('(as Charles Tamburro)', '(as Neil Almebor)', '(as Rika Schwarz)', '(rider)', '(as Jemma)')
AND cn.country_code = '[nl]'
AND it.info = 'weekend gross'
AND k.keyword IN ('action-hero', 'high-dynamic-range', 'oriental-music', 'food-basket', 'western-norway')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%O%' OR mi.info LIKE '%c%')
AND n.gender = 'm'
AND n.name LIKE '%u%'
AND rt.role = 'actor'
AND t.production_year > 1990;",80,/*+  IndexScan(k keyword_pkey) IndexScan(mk keyword_id_movie_keyword) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) IndexScan(it info_type_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexOnlyScan(an person_id_aka_name) IndexScan(chn char_name_pkey) NestLoop(k mk) NestLoop(k mk t) NestLoop(k mk t ci) HashJoin(k mk t ci rt) NestLoop(k mk t ci rt n) NestLoop(k mk t ci rt n mi) NestLoop(k mk t ci rt n mi it) NestLoop(k mk t ci rt n mi it mc) NestLoop(k mk t ci rt n mi it mc cn) NestLoop(k mk t ci rt n mi it mc cn an) NestLoop(k mk t ci rt n mi it mc cn an chn) Leading((((((((((((k mk) t) ci) rt) n) mi) it) mc) cn) an) chn)) */
"SELECT MIN(chn.name) AS voiced_char_name, MIN(n.name) AS voicing_actress_name, MIN(t.title) AS voiced_action_movie_jap_eng
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
   keyword AS k,
   movie_companies AS mc,
   movie_info AS mi,
   movie_keyword AS mk,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND t.id = mk.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mc.movie_id = mk.movie_id
AND mi.movie_id = ci.movie_id
AND mi.movie_id = mk.movie_id
AND ci.movie_id = mk.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND k.id = mk.keyword_id
AND ci.note IN ('(as Charles Tamburro)', '(chef: TV Dinners)', '(as G. Peradze)', '(as Mc. Mohan)', '(as Carolyn Graig)')
AND cn.country_code = '[us]'
AND it.info = 'production process protocol'
AND k.keyword IN ('android', 'zÃ³calo-mexico-city', 'colt-revolver', 'drunk-during-dinner', 'long-title')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%y%' OR mi.info LIKE '%.%')
AND n.gender = 'm'
AND n.name LIKE '%r%'
AND rt.role = 'actor'
AND t.production_year > 1990;",80,/*+  IndexScan(k keyword_pkey) IndexScan(mk keyword_id_movie_keyword) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) IndexScan(it info_type_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexOnlyScan(an person_id_aka_name) IndexScan(chn char_name_pkey) NestLoop(k mk) NestLoop(k mk t) NestLoop(k mk t ci) HashJoin(k mk t ci rt) NestLoop(k mk t ci rt n) NestLoop(k mk t ci rt n mi) NestLoop(k mk t ci rt n mi it) NestLoop(k mk t ci rt n mi it mc) NestLoop(k mk t ci rt n mi it mc cn) NestLoop(k mk t ci rt n mi it mc cn an) NestLoop(k mk t ci rt n mi it mc cn an chn) Leading((((((((((((k mk) t) ci) rt) n) mi) it) mc) cn) an) chn)) */
"SELECT MIN(chn.name) AS voiced_char_name, MIN(n.name) AS voicing_actress_name, MIN(t.title) AS voiced_action_movie_jap_eng
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
   keyword AS k,
   movie_companies AS mc,
   movie_info AS mi,
   movie_keyword AS mk,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND t.id = mk.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mc.movie_id = mk.movie_id
AND mi.movie_id = ci.movie_id
AND mi.movie_id = mk.movie_id
AND ci.movie_id = mk.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND k.id = mk.keyword_id
AND ci.note IN ('(as Charles Tamburro)', '(as Melinda Ramos)', '(accounting runner)', '(as Jaume Mallofre)', '(as Kwai Yuen)')
AND cn.country_code = '[fr]'
AND it.info = 'tech info'
AND k.keyword IN ('battle', 'georges-moustaki', 'reference-to-enron', 'eindhoven', 'book-publisher')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%M%' OR mi.info LIKE '%3%')
AND n.gender = 'm'
AND n.name LIKE '%T%'
AND rt.role = 'actor'
AND t.production_year > 1990;",80,/*+  IndexScan(k keyword_pkey) IndexScan(mk keyword_id_movie_keyword) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) IndexScan(it info_type_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexOnlyScan(an person_id_aka_name) IndexScan(chn char_name_pkey) NestLoop(k mk) NestLoop(k mk t) NestLoop(k mk t ci) HashJoin(k mk t ci rt) NestLoop(k mk t ci rt n) NestLoop(k mk t ci rt n mi) NestLoop(k mk t ci rt n mi it) NestLoop(k mk t ci rt n mi it mc) NestLoop(k mk t ci rt n mi it mc cn) NestLoop(k mk t ci rt n mi it mc cn an) NestLoop(k mk t ci rt n mi it mc cn an chn) Leading((((((((((((k mk) t) ci) rt) n) mi) it) mc) cn) an) chn)) */
"SELECT MIN(chn.name) AS voiced_char_name, MIN(n.name) AS voicing_actress_name, MIN(t.title) AS voiced_action_movie_jap_eng
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
   keyword AS k,
   movie_companies AS mc,
   movie_info AS mi,
   movie_keyword AS mk,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND t.id = mk.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mc.movie_id = mk.movie_id
AND mi.movie_id = ci.movie_id
AND mi.movie_id = mk.movie_id
AND ci.movie_id = mk.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND k.id = mk.keyword_id
AND ci.note IN ('(as Charles Tamburro)', '(as Sonik Omi)', '(promo animator)', '(football intern)', '(as Teyyub Axundov)')
AND cn.country_code = '[br]'
AND it.info = 'weekend gross'
AND k.keyword IN ('action-hero', 'soprano-saxophone', 'alien-infection', 'high-action-combat', 'no-soliciting-sign')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%1%' OR mi.info LIKE '%t%')
AND n.gender = 'm'
AND n.name LIKE '%,%'
AND rt.role = 'actor'
AND t.production_year > 1990;",80,/*+  IndexScan(k keyword_pkey) IndexScan(mk keyword_id_movie_keyword) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) IndexScan(it info_type_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexOnlyScan(an person_id_aka_name) IndexScan(chn char_name_pkey) NestLoop(k mk) NestLoop(k mk t) NestLoop(k mk t ci) HashJoin(k mk t ci rt) NestLoop(k mk t ci rt n) NestLoop(k mk t ci rt n mi) NestLoop(k mk t ci rt n mi it) NestLoop(k mk t ci rt n mi it mc) NestLoop(k mk t ci rt n mi it mc cn) NestLoop(k mk t ci rt n mi it mc cn an) NestLoop(k mk t ci rt n mi it mc cn an chn) Leading((((((((((((k mk) t) ci) rt) n) mi) it) mc) cn) an) chn)) */
"SELECT MIN(chn.name) AS voiced_char_name, MIN(n.name) AS voicing_actress_name, MIN(t.title) AS voiced_action_movie_jap_eng
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
   keyword AS k,
   movie_companies AS mc,
   movie_info AS mi,
   movie_keyword AS mk,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND t.id = mk.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mc.movie_id = mk.movie_id
AND mi.movie_id = ci.movie_id
AND mi.movie_id = mk.movie_id
AND ci.movie_id = mk.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND k.id = mk.keyword_id
AND ci.note IN ('(as Charles Tamburro)', '(as V. Dukler)', '(1959-1967)', '(as Tim Mitchell)', '(as James M.Brady)')
AND cn.country_code = '[fr]'
AND it.info = 'printed media reviews'
AND k.keyword IN ('battle', 'wishes', 'byzantine-empire', 'stolen-artwork', 'lack-of-oxygen')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%e%' OR mi.info LIKE '%M%')
AND n.gender = 'm'
AND n.name LIKE '%.%'
AND rt.role = 'actor'
AND t.production_year > 1990;",80,/*+  IndexScan(k keyword_pkey) IndexScan(mk keyword_id_movie_keyword) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) IndexScan(it info_type_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexOnlyScan(an person_id_aka_name) IndexScan(chn char_name_pkey) NestLoop(k mk) NestLoop(k mk t) NestLoop(k mk t ci) HashJoin(k mk t ci rt) NestLoop(k mk t ci rt n) NestLoop(k mk t ci rt n mi) NestLoop(k mk t ci rt n mi it) NestLoop(k mk t ci rt n mi it mc) NestLoop(k mk t ci rt n mi it mc cn) NestLoop(k mk t ci rt n mi it mc cn an) NestLoop(k mk t ci rt n mi it mc cn an chn) Leading((((((((((((k mk) t) ci) rt) n) mi) it) mc) cn) an) chn)) */
"SELECT MIN(chn.name) AS voiced_char_name, MIN(n.name) AS voicing_actress_name, MIN(t.title) AS voiced_action_movie_jap_eng
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
   keyword AS k,
   movie_companies AS mc,
   movie_info AS mi,
   movie_keyword AS mk,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND t.id = mk.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mc.movie_id = mk.movie_id
AND mi.movie_id = ci.movie_id
AND mi.movie_id = mk.movie_id
AND ci.movie_id = mk.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND k.id = mk.keyword_id
AND ci.note IN ('(as Charles Tamburro)', '(as Andy Warren)', '(as Victor Flynn)', '(as Raidar MÃ¼ller)', '(as Shabona Hunter)')
AND cn.country_code = '[br]'
AND it.info = 'printed media reviews'
AND k.keyword IN ('2020s', 'lumber-baron', 'secret-from-fiancÃ©', 'shotgun-guard', 'struggling-actress')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%t%' OR mi.info LIKE '%i%')
AND n.gender = 'm'
AND n.name LIKE '%r%'
AND rt.role = 'actor'
AND t.production_year > 1990;",80,/*+  IndexScan(k keyword_pkey) IndexScan(mk keyword_id_movie_keyword) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) IndexScan(it info_type_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexOnlyScan(an person_id_aka_name) IndexScan(chn char_name_pkey) NestLoop(k mk) NestLoop(k mk t) NestLoop(k mk t ci) HashJoin(k mk t ci rt) NestLoop(k mk t ci rt n) NestLoop(k mk t ci rt n mi) NestLoop(k mk t ci rt n mi it) NestLoop(k mk t ci rt n mi it mc) NestLoop(k mk t ci rt n mi it mc cn) NestLoop(k mk t ci rt n mi it mc cn an) NestLoop(k mk t ci rt n mi it mc cn an chn) Leading((((((((((((k mk) t) ci) rt) n) mi) it) mc) cn) an) chn)) */
"SELECT MIN(chn.name) AS voiced_char_name, MIN(n.name) AS voicing_actress_name, MIN(t.title) AS voiced_action_movie_jap_eng
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
   keyword AS k,
   movie_companies AS mc,
   movie_info AS mi,
   movie_keyword AS mk,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND t.id = mk.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mc.movie_id = mk.movie_id
AND mi.movie_id = ci.movie_id
AND mi.movie_id = mk.movie_id
AND ci.movie_id = mk.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND k.id = mk.keyword_id
AND ci.note IN ('(as Charles Tamburro)', '(as Ann C. Johnson)', '(dancer)', '(as Helene Mahieu)', '(stand-in: Cody)')
AND cn.country_code = '[br]'
AND it.info = 'trivia'
AND k.keyword IN ('voice-sampling', 'whiskey-runner', 'gang-summit', 'print-services', 'tarkovsky')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%i%' OR mi.info LIKE '%n%')
AND n.gender = 'm'
AND n.name LIKE '%s%'
AND rt.role = 'actor'
AND t.production_year > 1990;",80,/*+  IndexScan(k keyword_pkey) IndexScan(mk keyword_id_movie_keyword) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) IndexScan(it info_type_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexOnlyScan(an person_id_aka_name) IndexScan(chn char_name_pkey) NestLoop(k mk) NestLoop(k mk t) NestLoop(k mk t ci) HashJoin(k mk t ci rt) NestLoop(k mk t ci rt n) NestLoop(k mk t ci rt n mi) NestLoop(k mk t ci rt n mi it) NestLoop(k mk t ci rt n mi it mc) NestLoop(k mk t ci rt n mi it mc cn) NestLoop(k mk t ci rt n mi it mc cn an) NestLoop(k mk t ci rt n mi it mc cn an chn) Leading((((((((((((k mk) t) ci) rt) n) mi) it) mc) cn) an) chn)) */
"SELECT MIN(chn.name) AS voiced_char_name, MIN(n.name) AS voicing_actress_name, MIN(t.title) AS voiced_action_movie_jap_eng
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
   keyword AS k,
   movie_companies AS mc,
   movie_info AS mi,
   movie_keyword AS mk,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND t.id = mk.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mc.movie_id = mk.movie_id
AND mi.movie_id = ci.movie_id
AND mi.movie_id = mk.movie_id
AND ci.movie_id = mk.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND k.id = mk.keyword_id
AND ci.note IN ('(as Charles Tamburro)', '(as Ignacio BruÃ±a)', '(as Cindy McCain)', '(bear double)', '(as Winfried Klaus)')
AND cn.country_code = '[se]'
AND it.info = 'printed media reviews'
AND k.keyword IN ('android', 'poster-art', 'christmas-episode', 'covered-in-tar', 'lactate-threshold')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%u%' OR mi.info LIKE '%.%')
AND n.gender = 'm'
AND n.name LIKE '%o%'
AND rt.role = 'actor'
AND t.production_year > 1990;",80,/*+  IndexScan(k keyword_pkey) IndexScan(mk keyword_id_movie_keyword) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) IndexScan(it info_type_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexOnlyScan(an person_id_aka_name) IndexScan(chn char_name_pkey) NestLoop(k mk) NestLoop(k mk t) NestLoop(k mk t ci) HashJoin(k mk t ci rt) NestLoop(k mk t ci rt n) NestLoop(k mk t ci rt n mi) NestLoop(k mk t ci rt n mi it) NestLoop(k mk t ci rt n mi it mc) NestLoop(k mk t ci rt n mi it mc cn) NestLoop(k mk t ci rt n mi it mc cn an) NestLoop(k mk t ci rt n mi it mc cn an chn) Leading((((((((((((k mk) t) ci) rt) n) mi) it) mc) cn) an) chn)) */
"SELECT MIN(chn.name) AS voiced_char_name, MIN(n.name) AS voicing_actress_name, MIN(t.title) AS voiced_action_movie_jap_eng
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
   keyword AS k,
   movie_companies AS mc,
   movie_info AS mi,
   movie_keyword AS mk,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND t.id = mk.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mc.movie_id = mk.movie_id
AND mi.movie_id = ci.movie_id
AND mi.movie_id = mk.movie_id
AND ci.movie_id = mk.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND k.id = mk.keyword_id
AND ci.note IN ('(as Charles Tamburro)', '(as Andrew Cheng)', '(as Carter Dickson)', '(as Dash Nastos)', '(as Paru Silios)')
AND cn.country_code = '[gb]'
AND it.info = 'opening weekend'
AND k.keyword IN ('2020s', 'smoking-in-a-car', 'toupet', 'jamaican-culture', 'alien-intelligence')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%,%' OR mi.info LIKE '%b%')
AND n.gender = 'm'
AND n.name LIKE '%T%'
AND rt.role = 'actor'
AND t.production_year > 1990;",80,/*+  IndexScan(k keyword_pkey) IndexScan(mk keyword_id_movie_keyword) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) IndexScan(it info_type_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexOnlyScan(an person_id_aka_name) IndexScan(chn char_name_pkey) NestLoop(k mk) NestLoop(k mk t) NestLoop(k mk t ci) HashJoin(k mk t ci rt) NestLoop(k mk t ci rt n) NestLoop(k mk t ci rt n mi) NestLoop(k mk t ci rt n mi it) NestLoop(k mk t ci rt n mi it mc) NestLoop(k mk t ci rt n mi it mc cn) NestLoop(k mk t ci rt n mi it mc cn an) NestLoop(k mk t ci rt n mi it mc cn an chn) Leading((((((((((((k mk) t) ci) rt) n) mi) it) mc) cn) an) chn)) */
"SELECT MIN(chn.name) AS voiced_char_name, MIN(n.name) AS voicing_actress_name, MIN(t.title) AS voiced_action_movie_jap_eng
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
   keyword AS k,
   movie_companies AS mc,
   movie_info AS mi,
   movie_keyword AS mk,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND t.id = mk.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mc.movie_id = mk.movie_id
AND mi.movie_id = ci.movie_id
AND mi.movie_id = mk.movie_id
AND ci.movie_id = mk.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND k.id = mk.keyword_id
AND ci.note IN ('(as Charles Tamburro)', '(as Bruno Bossio)', '(as Kris D. Lofton)', '(as Bill Aylward)', '(Japanese liaison)')
AND cn.country_code = '[es]'
AND it.info = 'trivia'
AND k.keyword IN ('weapons-research', 'vietnamese-woman', 'search-for-son', 'flyswatter', 'sandpiper')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%e%' OR mi.info LIKE '%J%')
AND n.gender = 'm'
AND n.name LIKE '%r%'
AND rt.role = 'actor'
AND t.production_year > 1990;",80,/*+  IndexScan(k keyword_pkey) IndexScan(mk keyword_id_movie_keyword) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) IndexScan(it info_type_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexOnlyScan(an person_id_aka_name) IndexScan(chn char_name_pkey) NestLoop(k mk) NestLoop(k mk t) NestLoop(k mk t ci) HashJoin(k mk t ci rt) NestLoop(k mk t ci rt n) NestLoop(k mk t ci rt n mi) NestLoop(k mk t ci rt n mi it) NestLoop(k mk t ci rt n mi it mc) NestLoop(k mk t ci rt n mi it mc cn) NestLoop(k mk t ci rt n mi it mc cn an) NestLoop(k mk t ci rt n mi it mc cn an chn) Leading((((((((((((k mk) t) ci) rt) n) mi) it) mc) cn) an) chn)) */
"SELECT MIN(chn.name) AS voiced_char_name, MIN(n.name) AS voicing_actress_name, MIN(t.title) AS voiced_action_movie_jap_eng
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
   keyword AS k,
   movie_companies AS mc,
   movie_info AS mi,
   movie_keyword AS mk,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND t.id = mk.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mc.movie_id = mk.movie_id
AND mi.movie_id = ci.movie_id
AND mi.movie_id = mk.movie_id
AND ci.movie_id = mk.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND k.id = mk.keyword_id
AND ci.note IN ('(as Charles Tamburro)', '(as Dominic Young)', '(as I Yu)', '(as J.M. Henry)', '(as Boris)')
AND cn.country_code = '[fr]'
AND it.info = 'trivia'
AND k.keyword IN ('2020s', 'viral-video', 'everglades', 'uno-floag', 'drift-nets')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%i%' OR mi.info LIKE '%v%')
AND n.gender = 'm'
AND n.name LIKE '%o%'
AND rt.role = 'actor'
AND t.production_year > 1990;",80,/*+  IndexScan(k keyword_pkey) IndexScan(mk keyword_id_movie_keyword) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) IndexScan(it info_type_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexOnlyScan(an person_id_aka_name) IndexScan(chn char_name_pkey) NestLoop(k mk) NestLoop(k mk t) NestLoop(k mk t ci) HashJoin(k mk t ci rt) NestLoop(k mk t ci rt n) NestLoop(k mk t ci rt n mi) NestLoop(k mk t ci rt n mi it) NestLoop(k mk t ci rt n mi it mc) NestLoop(k mk t ci rt n mi it mc cn) NestLoop(k mk t ci rt n mi it mc cn an) NestLoop(k mk t ci rt n mi it mc cn an chn) Leading((((((((((((k mk) t) ci) rt) n) mi) it) mc) cn) an) chn)) */
"SELECT MIN(chn.name) AS voiced_char_name, MIN(n.name) AS voicing_actress_name, MIN(t.title) AS voiced_action_movie_jap_eng
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
   keyword AS k,
   movie_companies AS mc,
   movie_info AS mi,
   movie_keyword AS mk,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND t.id = mk.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mc.movie_id = mk.movie_id
AND mi.movie_id = ci.movie_id
AND mi.movie_id = mk.movie_id
AND ci.movie_id = mk.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND k.id = mk.keyword_id
AND ci.note IN ('(as Charles Tamburro)', '(as Lotta Leggs)', '(as Coleen Winton)', '(as D. Knalb)', '(as Sir John Smith)')
AND cn.country_code = '[us]'
AND it.info = 'adaption'
AND k.keyword IN ('action-hero', 'funky-music', 'polynesian-music', 'lost-mine', 'muslim-social')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%.%' OR mi.info LIKE '%r%')
AND n.gender = 'm'
AND n.name LIKE '%h%'
AND rt.role = 'actor'
AND t.production_year > 1990;",80,/*+  IndexScan(k keyword_pkey) IndexScan(mk keyword_id_movie_keyword) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) IndexScan(it info_type_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexOnlyScan(an person_id_aka_name) IndexScan(chn char_name_pkey) NestLoop(k mk) NestLoop(k mk t) NestLoop(k mk t ci) HashJoin(k mk t ci rt) NestLoop(k mk t ci rt n) NestLoop(k mk t ci rt n mi) NestLoop(k mk t ci rt n mi it) NestLoop(k mk t ci rt n mi it mc) NestLoop(k mk t ci rt n mi it mc cn) NestLoop(k mk t ci rt n mi it mc cn an) NestLoop(k mk t ci rt n mi it mc cn an chn) Leading((((((((((((k mk) t) ci) rt) n) mi) it) mc) cn) an) chn)) */
"SELECT MIN(chn.name) AS voiced_char_name, MIN(n.name) AS voicing_actress_name, MIN(t.title) AS voiced_action_movie_jap_eng
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
   keyword AS k,
   movie_companies AS mc,
   movie_info AS mi,
   movie_keyword AS mk,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND t.id = mk.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mc.movie_id = mk.movie_id
AND mi.movie_id = ci.movie_id
AND mi.movie_id = mk.movie_id
AND ci.movie_id = mk.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND k.id = mk.keyword_id
AND ci.note IN ('(as Charles Tamburro)', '(as Mitsu Kurokawa)', '(enemy planner)', '(world designer)', '(as Doug Jenson)')
AND cn.country_code = '[se]'
AND it.info = 'admissions'
AND k.keyword IN ('2020s', 'american-gangster', 'strega-italy', 'arrow-in-leg', 'fire-tower')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%0%' OR mi.info LIKE '%)%')
AND n.gender = 'm'
AND n.name LIKE '%l%'
AND rt.role = 'actor'
AND t.production_year > 1990;",80,/*+  IndexScan(k keyword_pkey) IndexScan(mk keyword_id_movie_keyword) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) IndexScan(it info_type_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexOnlyScan(an person_id_aka_name) IndexScan(chn char_name_pkey) NestLoop(k mk) NestLoop(k mk t) NestLoop(k mk t ci) HashJoin(k mk t ci rt) NestLoop(k mk t ci rt n) NestLoop(k mk t ci rt n mi) NestLoop(k mk t ci rt n mi it) NestLoop(k mk t ci rt n mi it mc) NestLoop(k mk t ci rt n mi it mc cn) NestLoop(k mk t ci rt n mi it mc cn an) NestLoop(k mk t ci rt n mi it mc cn an chn) Leading((((((((((((k mk) t) ci) rt) n) mi) it) mc) cn) an) chn)) */
"SELECT MIN(chn.name) AS voiced_char_name, MIN(n.name) AS voicing_actress_name, MIN(t.title) AS voiced_action_movie_jap_eng
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
   keyword AS k,
   movie_companies AS mc,
   movie_info AS mi,
   movie_keyword AS mk,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND t.id = mk.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mc.movie_id = mk.movie_id
AND mi.movie_id = ci.movie_id
AND mi.movie_id = mk.movie_id
AND ci.movie_id = mk.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND k.id = mk.keyword_id
AND ci.note IN ('(as Charles Tamburro)', '(segment ""Blaze"")', '(team Jay-Z)', '(as Shamar Drew)', '(as Jonathan Quan)')
AND cn.country_code = '[nl]'
AND it.info = 'production process protocol'
AND k.keyword IN ('android', 'ecstasy', 'hexagon', 'former-outlaw', 'hair-growth-tonic')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%a%' OR mi.info LIKE '%e%')
AND n.gender = 'm'
AND n.name LIKE '%o%'
AND rt.role = 'actor'
AND t.production_year > 1990;",80,/*+  IndexScan(k keyword_pkey) IndexScan(mk keyword_id_movie_keyword) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) IndexScan(it info_type_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexOnlyScan(an person_id_aka_name) IndexScan(chn char_name_pkey) NestLoop(k mk) NestLoop(k mk t) NestLoop(k mk t ci) HashJoin(k mk t ci rt) NestLoop(k mk t ci rt n) NestLoop(k mk t ci rt n mi) NestLoop(k mk t ci rt n mi it) NestLoop(k mk t ci rt n mi it mc) NestLoop(k mk t ci rt n mi it mc cn) NestLoop(k mk t ci rt n mi it mc cn an) NestLoop(k mk t ci rt n mi it mc cn an chn) Leading((((((((((((k mk) t) ci) rt) n) mi) it) mc) cn) an) chn)) */
"SELECT MIN(chn.name) AS voiced_char_name, MIN(n.name) AS voicing_actress_name, MIN(t.title) AS voiced_action_movie_jap_eng
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
   keyword AS k,
   movie_companies AS mc,
   movie_info AS mi,
   movie_keyword AS mk,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND t.id = mk.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mc.movie_id = mk.movie_id
AND mi.movie_id = ci.movie_id
AND mi.movie_id = mk.movie_id
AND ci.movie_id = mk.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND k.id = mk.keyword_id
AND ci.note IN ('(as Charles Tamburro)', '(as Karin Tepper)', '(as Cristal Clear)', '(as E. Solyakov)', '(as PatÃ© de FuÃ¡)')
AND cn.country_code = '[es]'
AND it.info = 'admissions'
AND k.keyword IN ('action-hero', 'neighborhood-party', 'u-haul-trailier', 'western-union', 'lovers-lane')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%7%' OR mi.info LIKE '%3%')
AND n.gender = 'm'
AND n.name LIKE '%C%'
AND rt.role = 'actor'
AND t.production_year > 1990;",80,/*+  IndexScan(k keyword_pkey) IndexScan(mk keyword_id_movie_keyword) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) IndexScan(it info_type_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexOnlyScan(an person_id_aka_name) IndexScan(chn char_name_pkey) NestLoop(k mk) NestLoop(k mk t) NestLoop(k mk t ci) HashJoin(k mk t ci rt) NestLoop(k mk t ci rt n) NestLoop(k mk t ci rt n mi) NestLoop(k mk t ci rt n mi it) NestLoop(k mk t ci rt n mi it mc) NestLoop(k mk t ci rt n mi it mc cn) NestLoop(k mk t ci rt n mi it mc cn an) NestLoop(k mk t ci rt n mi it mc cn an chn) Leading((((((((((((k mk) t) ci) rt) n) mi) it) mc) cn) an) chn)) */
"SELECT MIN(chn.name) AS voiced_char_name, MIN(n.name) AS voicing_actress_name, MIN(t.title) AS voiced_action_movie_jap_eng
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
   keyword AS k,
   movie_companies AS mc,
   movie_info AS mi,
   movie_keyword AS mk,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND t.id = mk.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mc.movie_id = mk.movie_id
AND mi.movie_id = ci.movie_id
AND mi.movie_id = mk.movie_id
AND ci.movie_id = mk.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND k.id = mk.keyword_id
AND ci.note IN ('(as Charles Tamburro)', '(as Erol Cantali)', '(as Master Bibhu)', '(as Reyna Brito)', '(press attache)')
AND cn.country_code = '[fr]'
AND it.info = 'trivia'
AND k.keyword IN ('weapons-research', 'babylonia', 'chinook', 'eating-soap', 'harvester')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%s%' OR mi.info LIKE '%)%')
AND n.gender = 'm'
AND n.name LIKE '%o%'
AND rt.role = 'actor'
AND t.production_year > 1990;",80,/*+  IndexScan(k keyword_pkey) IndexScan(mk keyword_id_movie_keyword) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) IndexScan(it info_type_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexOnlyScan(an person_id_aka_name) IndexScan(chn char_name_pkey) NestLoop(k mk) NestLoop(k mk t) NestLoop(k mk t ci) HashJoin(k mk t ci rt) NestLoop(k mk t ci rt n) NestLoop(k mk t ci rt n mi) NestLoop(k mk t ci rt n mi it) NestLoop(k mk t ci rt n mi it mc) NestLoop(k mk t ci rt n mi it mc cn) NestLoop(k mk t ci rt n mi it mc cn an) NestLoop(k mk t ci rt n mi it mc cn an chn) Leading((((((((((((k mk) t) ci) rt) n) mi) it) mc) cn) an) chn)) */
"SELECT MIN(chn.name) AS voiced_char_name, MIN(n.name) AS voicing_actress_name, MIN(t.title) AS voiced_action_movie_jap_eng
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
   keyword AS k,
   movie_companies AS mc,
   movie_info AS mi,
   movie_keyword AS mk,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND t.id = mk.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mc.movie_id = mk.movie_id
AND mi.movie_id = ci.movie_id
AND mi.movie_id = mk.movie_id
AND ci.movie_id = mk.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND k.id = mk.keyword_id
AND ci.note IN ('(as Charles Tamburro)', '(as K.S.T.)', '(as Joey D. Viera)', '(as Z. Zoricic)', '(as Cactus Hogle)')
AND cn.country_code = '[br]'
AND it.info = 'adaption'
AND k.keyword IN ('android', 'middletown-ohio', 'missile-launch', 'part-of-tetralogy', 'cheryl-crawford')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%0%' OR mi.info LIKE '%1%')
AND n.gender = 'm'
AND n.name LIKE '%,%'
AND rt.role = 'actor'
AND t.production_year > 1990;",80,/*+  IndexScan(k keyword_pkey) IndexScan(mk keyword_id_movie_keyword) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) IndexScan(it info_type_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexOnlyScan(an person_id_aka_name) IndexScan(chn char_name_pkey) NestLoop(k mk) NestLoop(k mk t) NestLoop(k mk t ci) HashJoin(k mk t ci rt) NestLoop(k mk t ci rt n) NestLoop(k mk t ci rt n mi) NestLoop(k mk t ci rt n mi it) NestLoop(k mk t ci rt n mi it mc) NestLoop(k mk t ci rt n mi it mc cn) NestLoop(k mk t ci rt n mi it mc cn an) NestLoop(k mk t ci rt n mi it mc cn an chn) Leading((((((((((((k mk) t) ci) rt) n) mi) it) mc) cn) an) chn)) */
"SELECT MIN(chn.name) AS voiced_char_name, MIN(n.name) AS voicing_actress_name, MIN(t.title) AS voiced_action_movie_jap_eng
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
   keyword AS k,
   movie_companies AS mc,
   movie_info AS mi,
   movie_keyword AS mk,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND t.id = mk.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mc.movie_id = mk.movie_id
AND mi.movie_id = ci.movie_id
AND mi.movie_id = mk.movie_id
AND ci.movie_id = mk.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND k.id = mk.keyword_id
AND ci.note IN ('(as Charles Tamburro)', '(as Stephen Solar)', '(as Lemon)', '(as Frank Telfer)', '(as K. Irani)')
AND cn.country_code = '[fr]'
AND it.info = 'opening weekend'
AND k.keyword IN ('2020s', 'rise-and-fall', 'house-construction', 'comanche-tribe', 'bathing-in-lake')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%,%' OR mi.info LIKE '%9%')
AND n.gender = 'm'
AND n.name LIKE '%e%'
AND rt.role = 'actor'
AND t.production_year > 1990;",80,/*+  IndexScan(k keyword_pkey) IndexScan(mk keyword_id_movie_keyword) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) IndexScan(it info_type_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexOnlyScan(an person_id_aka_name) IndexScan(chn char_name_pkey) NestLoop(k mk) NestLoop(k mk t) NestLoop(k mk t ci) HashJoin(k mk t ci rt) NestLoop(k mk t ci rt n) NestLoop(k mk t ci rt n mi) NestLoop(k mk t ci rt n mi it) NestLoop(k mk t ci rt n mi it mc) NestLoop(k mk t ci rt n mi it mc cn) NestLoop(k mk t ci rt n mi it mc cn an) NestLoop(k mk t ci rt n mi it mc cn an chn) Leading((((((((((((k mk) t) ci) rt) n) mi) it) mc) cn) an) chn)) */
"SELECT MIN(chn.name) AS voiced_char_name, MIN(n.name) AS voicing_actress_name, MIN(t.title) AS voiced_action_movie_jap_eng
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
   keyword AS k,
   movie_companies AS mc,
   movie_info AS mi,
   movie_keyword AS mk,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND t.id = mk.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mc.movie_id = mk.movie_id
AND mi.movie_id = ci.movie_id
AND mi.movie_id = mk.movie_id
AND ci.movie_id = mk.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND k.id = mk.keyword_id
AND ci.note IN ('(as Charles Tamburro)', '(as Charles Wilson)', '(as August Warwick)', '(as Dr Peter Guest)', '(as Alain Frerot)')
AND cn.country_code = '[br]'
AND it.info = 'admissions'
AND k.keyword IN ('action-hero', 'carrot', 'white-feather', 'suicide-pill', 'zoning-regulations')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%i%' OR mi.info LIKE '%7%')
AND n.gender = 'm'
AND n.name LIKE '%r%'
AND rt.role = 'actor'
AND t.production_year > 1990;",80,/*+  IndexScan(k keyword_pkey) IndexScan(mk keyword_id_movie_keyword) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) IndexScan(it info_type_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexOnlyScan(an person_id_aka_name) IndexScan(chn char_name_pkey) NestLoop(k mk) NestLoop(k mk t) NestLoop(k mk t ci) HashJoin(k mk t ci rt) NestLoop(k mk t ci rt n) NestLoop(k mk t ci rt n mi) NestLoop(k mk t ci rt n mi it) NestLoop(k mk t ci rt n mi it mc) NestLoop(k mk t ci rt n mi it mc cn) NestLoop(k mk t ci rt n mi it mc cn an) NestLoop(k mk t ci rt n mi it mc cn an chn) Leading((((((((((((k mk) t) ci) rt) n) mi) it) mc) cn) an) chn)) */
"SELECT MIN(chn.name) AS voiced_char_name, MIN(n.name) AS voicing_actress_name, MIN(t.title) AS voiced_action_movie_jap_eng
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
   keyword AS k,
   movie_companies AS mc,
   movie_info AS mi,
   movie_keyword AS mk,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND t.id = mk.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mc.movie_id = mk.movie_id
AND mi.movie_id = ci.movie_id
AND mi.movie_id = mk.movie_id
AND ci.movie_id = mk.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND k.id = mk.keyword_id
AND ci.note IN ('(as Charles Tamburro)', '(as Charlie Barnes)', '(remix)', '(as Kandaswami)', '(as Mark Labett)')
AND cn.country_code = '[fr]'
AND it.info = 'printed media reviews'
AND k.keyword IN ('android', 'bleacher-seat', 'sit-on-cactus', 'dance-performance', 'virtual-fantasy')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%3%' OR mi.info LIKE '%d%')
AND n.gender = 'm'
AND n.name LIKE '%e%'
AND rt.role = 'actor'
AND t.production_year > 1990;",80,/*+  IndexScan(k keyword_pkey) IndexScan(mk keyword_id_movie_keyword) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) IndexScan(it info_type_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexOnlyScan(an person_id_aka_name) IndexScan(chn char_name_pkey) NestLoop(k mk) NestLoop(k mk t) NestLoop(k mk t ci) HashJoin(k mk t ci rt) NestLoop(k mk t ci rt n) NestLoop(k mk t ci rt n mi) NestLoop(k mk t ci rt n mi it) NestLoop(k mk t ci rt n mi it mc) NestLoop(k mk t ci rt n mi it mc cn) NestLoop(k mk t ci rt n mi it mc cn an) NestLoop(k mk t ci rt n mi it mc cn an chn) Leading((((((((((((k mk) t) ci) rt) n) mi) it) mc) cn) an) chn)) */
"SELECT MIN(chn.name) AS voiced_char_name, MIN(n.name) AS voicing_actress_name, MIN(t.title) AS voiced_action_movie_jap_eng
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
   keyword AS k,
   movie_companies AS mc,
   movie_info AS mi,
   movie_keyword AS mk,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND t.id = mk.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mc.movie_id = mk.movie_id
AND mi.movie_id = ci.movie_id
AND mi.movie_id = mk.movie_id
AND ci.movie_id = mk.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND k.id = mk.keyword_id
AND ci.note IN ('(as Charles Tamburro)', '(as ClÃ¡udia Leite)', '(as T. Rossi)', '(as Nick Dawnay)', '(as Andre Charise)')
AND cn.country_code = '[gb]'
AND it.info = 'book'
AND k.keyword IN ('action-hero', 'flaming-lips', 'money-in-mail', 'cartoon-cheetah', 'based-on-journal')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%a%' OR mi.info LIKE '%u%')
AND n.gender = 'm'
AND n.name LIKE '%a%'
AND rt.role = 'actor'
AND t.production_year > 1990;",80,/*+  IndexScan(k keyword_pkey) IndexScan(mk keyword_id_movie_keyword) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) IndexScan(it info_type_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexOnlyScan(an person_id_aka_name) IndexScan(chn char_name_pkey) NestLoop(k mk) NestLoop(k mk t) NestLoop(k mk t ci) HashJoin(k mk t ci rt) NestLoop(k mk t ci rt n) NestLoop(k mk t ci rt n mi) NestLoop(k mk t ci rt n mi it) NestLoop(k mk t ci rt n mi it mc) NestLoop(k mk t ci rt n mi it mc cn) NestLoop(k mk t ci rt n mi it mc cn an) NestLoop(k mk t ci rt n mi it mc cn an chn) Leading((((((((((((k mk) t) ci) rt) n) mi) it) mc) cn) an) chn)) */
"SELECT MIN(chn.name) AS voiced_char_name, MIN(n.name) AS voicing_actress_name, MIN(t.title) AS voiced_action_movie_jap_eng
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
   keyword AS k,
   movie_companies AS mc,
   movie_info AS mi,
   movie_keyword AS mk,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND t.id = mk.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mc.movie_id = mk.movie_id
AND mi.movie_id = ci.movie_id
AND mi.movie_id = mk.movie_id
AND ci.movie_id = mk.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND k.id = mk.keyword_id
AND ci.note IN ('(as Charles Tamburro)', '(wicker worker)', '(as Rami Hauberger)', '(as Naji Gabbai)', '(as Anthony Greepy)')
AND cn.country_code = '[nl]'
AND it.info = 'tech info'
AND k.keyword IN ('voice-sampling', 'saffron', 'electric-switch', 'iron-triangle', 'bobbed-hair')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%i%' OR mi.info LIKE '%r%')
AND n.gender = 'm'
AND n.name LIKE '%l%'
AND rt.role = 'actor'
AND t.production_year > 1990;",80,/*+  IndexScan(k keyword_pkey) IndexScan(mk keyword_id_movie_keyword) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) IndexScan(it info_type_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexOnlyScan(an person_id_aka_name) IndexScan(chn char_name_pkey) NestLoop(k mk) NestLoop(k mk t) NestLoop(k mk t ci) HashJoin(k mk t ci rt) NestLoop(k mk t ci rt n) NestLoop(k mk t ci rt n mi) NestLoop(k mk t ci rt n mi it) NestLoop(k mk t ci rt n mi it mc) NestLoop(k mk t ci rt n mi it mc cn) NestLoop(k mk t ci rt n mi it mc cn an) NestLoop(k mk t ci rt n mi it mc cn an chn) Leading((((((((((((k mk) t) ci) rt) n) mi) it) mc) cn) an) chn)) */
"SELECT MIN(chn.name) AS voiced_char_name, MIN(n.name) AS voicing_actress_name, MIN(t.title) AS voiced_action_movie_jap_eng
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
   keyword AS k,
   movie_companies AS mc,
   movie_info AS mi,
   movie_keyword AS mk,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND t.id = mk.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mc.movie_id = mk.movie_id
AND mi.movie_id = ci.movie_id
AND mi.movie_id = mk.movie_id
AND ci.movie_id = mk.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND k.id = mk.keyword_id
AND ci.note IN ('(as Charles Tamburro)', '(as Ninalyn)', '(????-2004)', '(as Donna Aubert)', '(as Philly Howell)')
AND cn.country_code = '[se]'
AND it.info = 'printed media reviews'
AND k.keyword IN ('weapons-research', '1-year-old', 'hammock', 'the-flintstones', 'rain-slicker')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%w%' OR mi.info LIKE '%s%')
AND n.gender = 'm'
AND n.name LIKE '%,%'
AND rt.role = 'actor'
AND t.production_year > 1990;",80,/*+  IndexScan(k keyword_pkey) IndexScan(mk keyword_id_movie_keyword) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) IndexScan(it info_type_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexOnlyScan(an person_id_aka_name) IndexScan(chn char_name_pkey) NestLoop(k mk) NestLoop(k mk t) NestLoop(k mk t ci) HashJoin(k mk t ci rt) NestLoop(k mk t ci rt n) NestLoop(k mk t ci rt n mi) NestLoop(k mk t ci rt n mi it) NestLoop(k mk t ci rt n mi it mc) NestLoop(k mk t ci rt n mi it mc cn) NestLoop(k mk t ci rt n mi it mc cn an) NestLoop(k mk t ci rt n mi it mc cn an chn) Leading((((((((((((k mk) t) ci) rt) n) mi) it) mc) cn) an) chn)) */
"SELECT MIN(chn.name) AS voiced_char_name, MIN(n.name) AS voicing_actress_name, MIN(t.title) AS voiced_action_movie_jap_eng
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
   keyword AS k,
   movie_companies AS mc,
   movie_info AS mi,
   movie_keyword AS mk,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND t.id = mk.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mc.movie_id = mk.movie_id
AND mi.movie_id = ci.movie_id
AND mi.movie_id = mk.movie_id
AND ci.movie_id = mk.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND k.id = mk.keyword_id
AND ci.note IN ('(as Charles Tamburro)', '(as Baby Griffin)', '(as Helen McKellar)', '(as Nora Morgan)', '(owner''s wife)')
AND cn.country_code = '[es]'
AND it.info = 'screenplay-teleplay'
AND k.keyword IN ('2020s', 'prequel-and-sequel', 'school-killing', 'tornado', 'extradition-law')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%e%' OR mi.info LIKE '%B%')
AND n.gender = 'm'
AND n.name LIKE '%h%'
AND rt.role = 'actor'
AND t.production_year > 1990;",80,/*+  IndexScan(k keyword_pkey) IndexScan(mk keyword_id_movie_keyword) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) IndexScan(it info_type_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexOnlyScan(an person_id_aka_name) IndexScan(chn char_name_pkey) NestLoop(k mk) NestLoop(k mk t) NestLoop(k mk t ci) HashJoin(k mk t ci rt) NestLoop(k mk t ci rt n) NestLoop(k mk t ci rt n mi) NestLoop(k mk t ci rt n mi it) NestLoop(k mk t ci rt n mi it mc) NestLoop(k mk t ci rt n mi it mc cn) NestLoop(k mk t ci rt n mi it mc cn an) NestLoop(k mk t ci rt n mi it mc cn an chn) Leading((((((((((((k mk) t) ci) rt) n) mi) it) mc) cn) an) chn)) */
"SELECT MIN(chn.name) AS voiced_char_name, MIN(n.name) AS voicing_actress_name, MIN(t.title) AS voiced_action_movie_jap_eng
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
   keyword AS k,
   movie_companies AS mc,
   movie_info AS mi,
   movie_keyword AS mk,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND t.id = mk.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mc.movie_id = mk.movie_id
AND mi.movie_id = ci.movie_id
AND mi.movie_id = mk.movie_id
AND ci.movie_id = mk.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND k.id = mk.keyword_id
AND ci.note IN ('(as Charles Tamburro)', '(producer) (1982-)', '(as Henri Darbrey)', '(as Charna)', '(open-faced dane)')
AND cn.country_code = '[gb]'
AND it.info = 'adaption'
AND k.keyword IN ('battle', 'combat-team', 'airmail', 'ramraiding', 'atomic-weapons')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%J%' OR mi.info LIKE '%0%')
AND n.gender = 'm'
AND n.name LIKE '%a%'
AND rt.role = 'actor'
AND t.production_year > 1990;",80,/*+  IndexScan(k keyword_pkey) IndexScan(mk keyword_id_movie_keyword) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) IndexScan(it info_type_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexOnlyScan(an person_id_aka_name) IndexScan(chn char_name_pkey) NestLoop(k mk) NestLoop(k mk t) NestLoop(k mk t ci) HashJoin(k mk t ci rt) NestLoop(k mk t ci rt n) NestLoop(k mk t ci rt n mi) NestLoop(k mk t ci rt n mi it) NestLoop(k mk t ci rt n mi it mc) NestLoop(k mk t ci rt n mi it mc cn) NestLoop(k mk t ci rt n mi it mc cn an) NestLoop(k mk t ci rt n mi it mc cn an chn) Leading((((((((((((k mk) t) ci) rt) n) mi) it) mc) cn) an) chn)) */
"SELECT MIN(chn.name) AS voiced_char_name, MIN(n.name) AS voicing_actress_name, MIN(t.title) AS voiced_action_movie_jap_eng
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
   keyword AS k,
   movie_companies AS mc,
   movie_info AS mi,
   movie_keyword AS mk,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND t.id = mk.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mc.movie_id = mk.movie_id
AND mi.movie_id = ci.movie_id
AND mi.movie_id = mk.movie_id
AND ci.movie_id = mk.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND k.id = mk.keyword_id
AND ci.note IN ('(as Charles Tamburro)', '(as Mike Wise)', '(as Al Morgenstern)', '(as J.J. Clark)', '(as Nico Papatakis)')
AND cn.country_code = '[br]'
AND it.info = 'filming dates'
AND k.keyword IN ('android', 'simple-life', 'hyrophobia', 'islamic-mythology', 'talking-pigs-head')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%c%' OR mi.info LIKE '%c%')
AND n.gender = 'm'
AND n.name LIKE '%A%'
AND rt.role = 'actor'
AND t.production_year > 1990;",80,/*+  IndexScan(k keyword_pkey) IndexScan(mk keyword_id_movie_keyword) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) IndexScan(it info_type_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexOnlyScan(an person_id_aka_name) IndexScan(chn char_name_pkey) NestLoop(k mk) NestLoop(k mk t) NestLoop(k mk t ci) HashJoin(k mk t ci rt) NestLoop(k mk t ci rt n) NestLoop(k mk t ci rt n mi) NestLoop(k mk t ci rt n mi it) NestLoop(k mk t ci rt n mi it mc) NestLoop(k mk t ci rt n mi it mc cn) NestLoop(k mk t ci rt n mi it mc cn an) NestLoop(k mk t ci rt n mi it mc cn an chn) Leading((((((((((((k mk) t) ci) rt) n) mi) it) mc) cn) an) chn)) */
"SELECT MIN(chn.name) AS voiced_char_name, MIN(n.name) AS voicing_actress_name, MIN(t.title) AS voiced_action_movie_jap_eng
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
   keyword AS k,
   movie_companies AS mc,
   movie_info AS mi,
   movie_keyword AS mk,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND t.id = mk.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mc.movie_id = mk.movie_id
AND mi.movie_id = ci.movie_id
AND mi.movie_id = mk.movie_id
AND ci.movie_id = mk.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND k.id = mk.keyword_id
AND ci.note IN ('(as Charles Tamburro)', '(Co-Star)', '(as Joann Pankow)', '(as Dr. Alan Lane)', '(as Gianbarta)')
AND cn.country_code = '[es]'
AND it.info = 'printed media reviews'
AND k.keyword IN ('android', 'weber-and-fields', 'beguinage', 'unexpected-kiss', 'land-registry')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%""%' OR mi.info LIKE '%d%')
AND n.gender = 'm'
AND n.name LIKE '%,%'
AND rt.role = 'actor'
AND t.production_year > 1990;",80,/*+  IndexScan(k keyword_pkey) IndexScan(mk keyword_id_movie_keyword) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) IndexScan(it info_type_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexOnlyScan(an person_id_aka_name) IndexScan(chn char_name_pkey) NestLoop(k mk) NestLoop(k mk t) NestLoop(k mk t ci) HashJoin(k mk t ci rt) NestLoop(k mk t ci rt n) NestLoop(k mk t ci rt n mi) NestLoop(k mk t ci rt n mi it) NestLoop(k mk t ci rt n mi it mc) NestLoop(k mk t ci rt n mi it mc cn) NestLoop(k mk t ci rt n mi it mc cn an) NestLoop(k mk t ci rt n mi it mc cn an chn) Leading((((((((((((k mk) t) ci) rt) n) mi) it) mc) cn) an) chn)) */
"SELECT MIN(chn.name) AS voiced_char_name, MIN(n.name) AS voicing_actress_name, MIN(t.title) AS voiced_action_movie_jap_eng
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
   keyword AS k,
   movie_companies AS mc,
   movie_info AS mi,
   movie_keyword AS mk,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND t.id = mk.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mc.movie_id = mk.movie_id
AND mi.movie_id = ci.movie_id
AND mi.movie_id = mk.movie_id
AND ci.movie_id = mk.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND k.id = mk.keyword_id
AND ci.note IN ('(voice)', '(ages 10-13)', '(as Charlie Cork)', '(as Jonny Soster)', '(as Rajoo)')
AND cn.country_code = '[us]'
AND it.info = 'certificates'
AND k.keyword IN ('river', 'judo-class', 'm1117-guardian-asv', 'big-bend-texas', 'ice')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%d%' OR mi.info LIKE '%1%')
AND n.gender = 'm'
AND n.name LIKE '%f%'
AND rt.role = 'actor'
AND t.production_year > 2009;",80,/*+  IndexScan(k keyword_pkey) IndexScan(mk keyword_id_movie_keyword) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) IndexScan(it info_type_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexOnlyScan(an person_id_aka_name) IndexScan(chn char_name_pkey) NestLoop(k mk) NestLoop(k mk t) NestLoop(k mk t ci) HashJoin(k mk t ci rt) NestLoop(k mk t ci rt n) NestLoop(k mk t ci rt n mi) NestLoop(k mk t ci rt n mi it) NestLoop(k mk t ci rt n mi it mc) NestLoop(k mk t ci rt n mi it mc cn) NestLoop(k mk t ci rt n mi it mc cn an) NestLoop(k mk t ci rt n mi it mc cn an chn) Leading((((((((((((k mk) t) ci) rt) n) mi) it) mc) cn) an) chn)) */
"SELECT MIN(chn.name) AS voiced_char_name, MIN(n.name) AS voicing_actress_name, MIN(t.title) AS voiced_action_movie_jap_eng
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
   keyword AS k,
   movie_companies AS mc,
   movie_info AS mi,
   movie_keyword AS mk,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND t.id = mk.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mc.movie_id = mk.movie_id
AND mi.movie_id = ci.movie_id
AND mi.movie_id = mk.movie_id
AND ci.movie_id = mk.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND k.id = mk.keyword_id
AND ci.note IN ('(voice)', '(as Harry Refn)', '(as Swaroop Dutt)', '(In Audience)', '(as MÃ¼fid Kiper)')
AND cn.country_code = '[us]'
AND it.info = 'certificates'
AND k.keyword IN ('injury', 'farm-aid-2', 'lamb-skin', 'exercising', 'hajji')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%1%' OR mi.info LIKE '%:%')
AND n.gender = 'm'
AND n.name LIKE '%i%'
AND rt.role = 'actor'
AND t.production_year > 2009;",80,/*+  IndexScan(k keyword_pkey) IndexScan(mk keyword_id_movie_keyword) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) IndexScan(it info_type_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexOnlyScan(an person_id_aka_name) IndexScan(chn char_name_pkey) NestLoop(k mk) NestLoop(k mk t) NestLoop(k mk t ci) HashJoin(k mk t ci rt) NestLoop(k mk t ci rt n) NestLoop(k mk t ci rt n mi) NestLoop(k mk t ci rt n mi it) NestLoop(k mk t ci rt n mi it mc) NestLoop(k mk t ci rt n mi it mc cn) NestLoop(k mk t ci rt n mi it mc cn an) NestLoop(k mk t ci rt n mi it mc cn an chn) Leading((((((((((((k mk) t) ci) rt) n) mi) it) mc) cn) an) chn)) */
"SELECT MIN(chn.name) AS voiced_char_name, MIN(n.name) AS voicing_actress_name, MIN(t.title) AS voiced_action_movie_jap_eng
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
   keyword AS k,
   movie_companies AS mc,
   movie_info AS mi,
   movie_keyword AS mk,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND t.id = mk.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mc.movie_id = mk.movie_id
AND mi.movie_id = ci.movie_id
AND mi.movie_id = mk.movie_id
AND ci.movie_id = mk.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND k.id = mk.keyword_id
AND ci.note IN ('(as Charles Tamburro)', '(Mother of Mike)', '(as Ezio Cristiani)', '(as Hugh Arden)', '(as Ned Vukovich)')
AND cn.country_code = '[us]'
AND it.info = 'rentals'
AND k.keyword IN ('battle', 'tunnel-builder', 'community-media', 'disco-bar', 'weapon-collection')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%9%' OR mi.info LIKE '%0%')
AND n.gender = 'm'
AND n.name LIKE '%l%'
AND rt.role = 'actor'
AND t.production_year > 1990;",80,/*+  IndexScan(k keyword_pkey) IndexScan(mk keyword_id_movie_keyword) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) IndexScan(it info_type_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexOnlyScan(an person_id_aka_name) IndexScan(chn char_name_pkey) NestLoop(k mk) NestLoop(k mk t) NestLoop(k mk t ci) HashJoin(k mk t ci rt) NestLoop(k mk t ci rt n) NestLoop(k mk t ci rt n mi) NestLoop(k mk t ci rt n mi it) NestLoop(k mk t ci rt n mi it mc) NestLoop(k mk t ci rt n mi it mc cn) NestLoop(k mk t ci rt n mi it mc cn an) NestLoop(k mk t ci rt n mi it mc cn an chn) Leading((((((((((((k mk) t) ci) rt) n) mi) it) mc) cn) an) chn)) */
"SELECT MIN(chn.name) AS voiced_char_name, MIN(n.name) AS voicing_actress_name, MIN(t.title) AS voiced_action_movie_jap_eng
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
   keyword AS k,
   movie_companies AS mc,
   movie_info AS mi,
   movie_keyword AS mk,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND t.id = mk.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mc.movie_id = mk.movie_id
AND mi.movie_id = ci.movie_id
AND mi.movie_id = mk.movie_id
AND ci.movie_id = mk.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND k.id = mk.keyword_id
AND ci.note IN ('(as Charles Tamburro)', '(as Andrea Moore)', '(as Marissa Davis)', '(as Olga Marceau)', '(as Stanislav)')
AND cn.country_code = '[fr]'
AND it.info = 'tech info'
AND k.keyword IN ('android', 'finger-puppet', 'brega', 'leather-queen', 'year-1600')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%T%' OR mi.info LIKE '%T%')
AND n.gender = 'm'
AND n.name LIKE '%C%'
AND rt.role = 'actor'
AND t.production_year > 1990;",80,/*+  IndexScan(k keyword_pkey) IndexScan(mk keyword_id_movie_keyword) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) IndexScan(it info_type_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexOnlyScan(an person_id_aka_name) IndexScan(chn char_name_pkey) NestLoop(k mk) NestLoop(k mk t) NestLoop(k mk t ci) HashJoin(k mk t ci rt) NestLoop(k mk t ci rt n) NestLoop(k mk t ci rt n mi) NestLoop(k mk t ci rt n mi it) NestLoop(k mk t ci rt n mi it mc) NestLoop(k mk t ci rt n mi it mc cn) NestLoop(k mk t ci rt n mi it mc cn an) NestLoop(k mk t ci rt n mi it mc cn an chn) Leading((((((((((((k mk) t) ci) rt) n) mi) it) mc) cn) an) chn)) */
"SELECT MIN(chn.name) AS voiced_char_name, MIN(n.name) AS voicing_actress_name, MIN(t.title) AS voiced_action_movie_jap_eng
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
   keyword AS k,
   movie_companies AS mc,
   movie_info AS mi,
   movie_keyword AS mk,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND t.id = mk.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mc.movie_id = mk.movie_id
AND mi.movie_id = ci.movie_id
AND mi.movie_id = mk.movie_id
AND ci.movie_id = mk.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND k.id = mk.keyword_id
AND ci.note IN ('(as Charles Tamburro)', '(as Tiffany Miles)', '(as Dave Hemstead)', '(as Surendra)', '(as Mark Jeffries)')
AND cn.country_code = '[fr]'
AND it.info = 'trivia'
AND k.keyword IN ('action-hero', 'emotional-healing', 'traffic-jam', 'pete-billac', 'roman-koenig')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%r%' OR mi.info LIKE '%e%')
AND n.gender = 'm'
AND n.name LIKE '%A%'
AND rt.role = 'actor'
AND t.production_year > 1990;",80,/*+  IndexScan(k keyword_pkey) IndexScan(mk keyword_id_movie_keyword) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) IndexScan(it info_type_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexOnlyScan(an person_id_aka_name) IndexScan(chn char_name_pkey) NestLoop(k mk) NestLoop(k mk t) NestLoop(k mk t ci) HashJoin(k mk t ci rt) NestLoop(k mk t ci rt n) NestLoop(k mk t ci rt n mi) NestLoop(k mk t ci rt n mi it) NestLoop(k mk t ci rt n mi it mc) NestLoop(k mk t ci rt n mi it mc cn) NestLoop(k mk t ci rt n mi it mc cn an) NestLoop(k mk t ci rt n mi it mc cn an chn) Leading((((((((((((k mk) t) ci) rt) n) mi) it) mc) cn) an) chn)) */
"SELECT MIN(chn.name) AS voiced_char_name, MIN(n.name) AS voicing_actress_name, MIN(t.title) AS voiced_action_movie_jap_eng
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
   keyword AS k,
   movie_companies AS mc,
   movie_info AS mi,
   movie_keyword AS mk,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND t.id = mk.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mc.movie_id = mk.movie_id
AND mi.movie_id = ci.movie_id
AND mi.movie_id = mk.movie_id
AND ci.movie_id = mk.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND k.id = mk.keyword_id
AND ci.note IN ('(as Charles Tamburro)', '(screen data)', '(as Aastha)', '(as Bajrus Mijaku)', '(as Jack Reilly)')
AND cn.country_code = '[fr]'
AND it.info = 'opening weekend'
AND k.keyword IN ('2020s', 'fast-and-furious', 'ramayana', 'sousaphome', 'buttered-butt')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%$%' OR mi.info LIKE '%6%')
AND n.gender = 'm'
AND n.name LIKE '%A%'
AND rt.role = 'actor'
AND t.production_year > 1990;",80,/*+  IndexScan(k keyword_pkey) IndexScan(mk keyword_id_movie_keyword) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) IndexScan(it info_type_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexOnlyScan(an person_id_aka_name) IndexScan(chn char_name_pkey) NestLoop(k mk) NestLoop(k mk t) NestLoop(k mk t ci) HashJoin(k mk t ci rt) NestLoop(k mk t ci rt n) NestLoop(k mk t ci rt n mi) NestLoop(k mk t ci rt n mi it) NestLoop(k mk t ci rt n mi it mc) NestLoop(k mk t ci rt n mi it mc cn) NestLoop(k mk t ci rt n mi it mc cn an) NestLoop(k mk t ci rt n mi it mc cn an chn) Leading((((((((((((k mk) t) ci) rt) n) mi) it) mc) cn) an) chn)) */
"SELECT MIN(chn.name) AS voiced_char_name, MIN(n.name) AS voicing_actress_name, MIN(t.title) AS voiced_action_movie_jap_eng
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
   keyword AS k,
   movie_companies AS mc,
   movie_info AS mi,
   movie_keyword AS mk,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND t.id = mk.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mc.movie_id = mk.movie_id
AND mi.movie_id = ci.movie_id
AND mi.movie_id = mk.movie_id
AND ci.movie_id = mk.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND k.id = mk.keyword_id
AND ci.note IN ('(as Charles Tamburro)', '(as Agustin Contel)', '(eQ assistant)', '(as Riccardo Tarci)', '(as Elena Buhaci)')
AND cn.country_code = '[nl]'
AND it.info = 'adaption'
AND k.keyword IN ('action-hero', 'sea-wall', 'airplane-engine', 'selling-tv', 'gay-action-hero')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%f%' OR mi.info LIKE '%y%')
AND n.gender = 'm'
AND n.name LIKE '%.%'
AND rt.role = 'actor'
AND t.production_year > 1990;",80,/*+  IndexScan(k keyword_pkey) IndexScan(mk keyword_id_movie_keyword) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) IndexScan(it info_type_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexOnlyScan(an person_id_aka_name) IndexScan(chn char_name_pkey) NestLoop(k mk) NestLoop(k mk t) NestLoop(k mk t ci) HashJoin(k mk t ci rt) NestLoop(k mk t ci rt n) NestLoop(k mk t ci rt n mi) NestLoop(k mk t ci rt n mi it) NestLoop(k mk t ci rt n mi it mc) NestLoop(k mk t ci rt n mi it mc cn) NestLoop(k mk t ci rt n mi it mc cn an) NestLoop(k mk t ci rt n mi it mc cn an chn) Leading((((((((((((k mk) t) ci) rt) n) mi) it) mc) cn) an) chn)) */
"SELECT MIN(chn.name) AS voiced_char_name, MIN(n.name) AS voicing_actress_name, MIN(t.title) AS voiced_action_movie_jap_eng
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
   keyword AS k,
   movie_companies AS mc,
   movie_info AS mi,
   movie_keyword AS mk,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND t.id = mk.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mc.movie_id = mk.movie_id
AND mi.movie_id = ci.movie_id
AND mi.movie_id = mk.movie_id
AND ci.movie_id = mk.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND k.id = mk.keyword_id
AND ci.note IN ('(as Charles Tamburro)', '(as Curtis Scott)', '(as Lem Pelayo)', '(theme song)', '(Patsy''s Sister)')
AND cn.country_code = '[es]'
AND it.info = 'trivia'
AND k.keyword IN ('weapons-research', 'boy', 'eisner-award', 'jewish-studies', 'alone-in-house')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%i%' OR mi.info LIKE '%.%')
AND n.gender = 'm'
AND n.name LIKE '%h%'
AND rt.role = 'actor'
AND t.production_year > 1990;",80,/*+  IndexScan(k keyword_pkey) IndexScan(mk keyword_id_movie_keyword) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) IndexScan(it info_type_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexOnlyScan(an person_id_aka_name) IndexScan(chn char_name_pkey) NestLoop(k mk) NestLoop(k mk t) NestLoop(k mk t ci) HashJoin(k mk t ci rt) NestLoop(k mk t ci rt n) NestLoop(k mk t ci rt n mi) NestLoop(k mk t ci rt n mi it) NestLoop(k mk t ci rt n mi it mc) NestLoop(k mk t ci rt n mi it mc cn) NestLoop(k mk t ci rt n mi it mc cn an) NestLoop(k mk t ci rt n mi it mc cn an chn) Leading((((((((((((k mk) t) ci) rt) n) mi) it) mc) cn) an) chn)) */
"SELECT MIN(chn.name) AS voiced_char_name, MIN(n.name) AS voicing_actress_name, MIN(t.title) AS voiced_action_movie_jap_eng
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
   keyword AS k,
   movie_companies AS mc,
   movie_info AS mi,
   movie_keyword AS mk,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND t.id = mk.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mc.movie_id = mk.movie_id
AND mi.movie_id = ci.movie_id
AND mi.movie_id = mk.movie_id
AND ci.movie_id = mk.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND k.id = mk.keyword_id
AND ci.note IN ('(as Charles Tamburro)', '(as Lesa Donai)', '(as Kirsti Bourne)', '(as Bob Cosci)', '(as Luis Noguiera)')
AND cn.country_code = '[es]'
AND it.info = 'trivia'
AND k.keyword IN ('android', 'brewery-worker', 'tb-test', 'hydrotherapy', 'carp')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%t%' OR mi.info LIKE '%d%')
AND n.gender = 'm'
AND n.name LIKE '%r%'
AND rt.role = 'actor'
AND t.production_year > 1990;",80,/*+  IndexScan(k keyword_pkey) IndexScan(mk keyword_id_movie_keyword) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) IndexScan(it info_type_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexOnlyScan(an person_id_aka_name) IndexScan(chn char_name_pkey) NestLoop(k mk) NestLoop(k mk t) NestLoop(k mk t ci) HashJoin(k mk t ci rt) NestLoop(k mk t ci rt n) NestLoop(k mk t ci rt n mi) NestLoop(k mk t ci rt n mi it) NestLoop(k mk t ci rt n mi it mc) NestLoop(k mk t ci rt n mi it mc cn) NestLoop(k mk t ci rt n mi it mc cn an) NestLoop(k mk t ci rt n mi it mc cn an chn) Leading((((((((((((k mk) t) ci) rt) n) mi) it) mc) cn) an) chn)) */
"SELECT MIN(chn.name) AS voiced_char_name, MIN(n.name) AS voicing_actress_name, MIN(t.title) AS voiced_action_movie_jap_eng
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
   keyword AS k,
   movie_companies AS mc,
   movie_info AS mi,
   movie_keyword AS mk,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND t.id = mk.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mc.movie_id = mk.movie_id
AND mi.movie_id = ci.movie_id
AND mi.movie_id = mk.movie_id
AND ci.movie_id = mk.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND k.id = mk.keyword_id
AND ci.note IN ('(as Charles Tamburro)', '(as Agnetha)', '(as Lucerito)', '(as Eli Avivi)', '(as Susan Kay)')
AND cn.country_code = '[nl]'
AND it.info = 'book'
AND k.keyword IN ('weapons-research', 'skinny-dipping', 'gnu-software', 'sanctimony', 'rudy-rooster')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%9%' OR mi.info LIKE '%t%')
AND n.gender = 'm'
AND n.name LIKE '%r%'
AND rt.role = 'actor'
AND t.production_year > 1990;",80,/*+  IndexScan(k keyword_pkey) IndexScan(mk keyword_id_movie_keyword) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) IndexScan(it info_type_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexOnlyScan(an person_id_aka_name) IndexScan(chn char_name_pkey) NestLoop(k mk) NestLoop(k mk t) NestLoop(k mk t ci) HashJoin(k mk t ci rt) NestLoop(k mk t ci rt n) NestLoop(k mk t ci rt n mi) NestLoop(k mk t ci rt n mi it) NestLoop(k mk t ci rt n mi it mc) NestLoop(k mk t ci rt n mi it mc cn) NestLoop(k mk t ci rt n mi it mc cn an) NestLoop(k mk t ci rt n mi it mc cn an chn) Leading((((((((((((k mk) t) ci) rt) n) mi) it) mc) cn) an) chn)) */
"SELECT MIN(chn.name) AS voiced_char_name, MIN(n.name) AS voicing_actress_name, MIN(t.title) AS voiced_action_movie_jap_eng
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
   keyword AS k,
   movie_companies AS mc,
   movie_info AS mi,
   movie_keyword AS mk,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND t.id = mk.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mc.movie_id = mk.movie_id
AND mi.movie_id = ci.movie_id
AND mi.movie_id = mk.movie_id
AND ci.movie_id = mk.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND k.id = mk.keyword_id
AND ci.note IN ('(as Charles Tamburro)', '(as Richard Doyon)', '(as V. Ananina)', '(as Mehandi Raza)', '(as GÃ¼nter Pohl)')
AND cn.country_code = '[es]'
AND it.info = 'screenplay-teleplay'
AND k.keyword IN ('weapons-research', 'moat', 'mining-village', 'ejaculation-on-face', 'soissons-france')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%i%' OR mi.info LIKE '%.%')
AND n.gender = 'm'
AND n.name LIKE '%A%'
AND rt.role = 'actor'
AND t.production_year > 1990;",80,/*+  IndexScan(k keyword_pkey) IndexScan(mk keyword_id_movie_keyword) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) IndexScan(it info_type_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexOnlyScan(an person_id_aka_name) IndexScan(chn char_name_pkey) NestLoop(k mk) NestLoop(k mk t) NestLoop(k mk t ci) HashJoin(k mk t ci rt) NestLoop(k mk t ci rt n) NestLoop(k mk t ci rt n mi) NestLoop(k mk t ci rt n mi it) NestLoop(k mk t ci rt n mi it mc) NestLoop(k mk t ci rt n mi it mc cn) NestLoop(k mk t ci rt n mi it mc cn an) NestLoop(k mk t ci rt n mi it mc cn an chn) Leading((((((((((((k mk) t) ci) rt) n) mi) it) mc) cn) an) chn)) */
"SELECT MIN(chn.name) AS voiced_char_name, MIN(n.name) AS voicing_actress_name, MIN(t.title) AS voiced_action_movie_jap_eng
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
   keyword AS k,
   movie_companies AS mc,
   movie_info AS mi,
   movie_keyword AS mk,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND t.id = mk.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mc.movie_id = mk.movie_id
AND mi.movie_id = ci.movie_id
AND mi.movie_id = mk.movie_id
AND ci.movie_id = mk.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND k.id = mk.keyword_id
AND ci.note IN ('(as Charles Tamburro)', '(as Inma Cuevas)', '(as Lobo Carrasco)', '(D-vision operator)', '(as @blaudiablogan)')
AND cn.country_code = '[us]'
AND it.info = 'opening weekend'
AND k.keyword IN ('battle', 'ship-sinking', 'loriot', 'neptune-the-planet', 'belleville')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%(%' OR mi.info LIKE '%S%')
AND n.gender = 'm'
AND n.name LIKE '%C%'
AND rt.role = 'actor'
AND t.production_year > 1990;",80,/*+  IndexScan(k keyword_pkey) IndexScan(mk keyword_id_movie_keyword) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) IndexScan(it info_type_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexOnlyScan(an person_id_aka_name) IndexScan(chn char_name_pkey) NestLoop(k mk) NestLoop(k mk t) NestLoop(k mk t ci) HashJoin(k mk t ci rt) NestLoop(k mk t ci rt n) NestLoop(k mk t ci rt n mi) NestLoop(k mk t ci rt n mi it) NestLoop(k mk t ci rt n mi it mc) NestLoop(k mk t ci rt n mi it mc cn) NestLoop(k mk t ci rt n mi it mc cn an) NestLoop(k mk t ci rt n mi it mc cn an chn) Leading((((((((((((k mk) t) ci) rt) n) mi) it) mc) cn) an) chn)) */
"SELECT MIN(chn.name) AS voiced_char_name, MIN(n.name) AS voicing_actress_name, MIN(t.title) AS voiced_action_movie_jap_eng
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
   keyword AS k,
   movie_companies AS mc,
   movie_info AS mi,
   movie_keyword AS mk,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND t.id = mk.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mc.movie_id = mk.movie_id
AND mi.movie_id = ci.movie_id
AND mi.movie_id = mk.movie_id
AND ci.movie_id = mk.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND k.id = mk.keyword_id
AND ci.note IN ('(as Charles Tamburro)', '(as Karla Olivares)', '(computer imaging)', '(as Manfred Bradke)', '(as Louis LeRay)')
AND cn.country_code = '[se]'
AND it.info = 'printed media reviews'
AND k.keyword IN ('action-hero', 'post-communism', 'kazakhstan', 'platte-city-iowa', 'neighbour')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%a%' OR mi.info LIKE '%9%')
AND n.gender = 'm'
AND n.name LIKE '%r%'
AND rt.role = 'actor'
AND t.production_year > 1990;",80,/*+  IndexScan(k keyword_pkey) IndexScan(mk keyword_id_movie_keyword) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) IndexScan(it info_type_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexOnlyScan(an person_id_aka_name) IndexScan(chn char_name_pkey) NestLoop(k mk) NestLoop(k mk t) NestLoop(k mk t ci) HashJoin(k mk t ci rt) NestLoop(k mk t ci rt n) NestLoop(k mk t ci rt n mi) NestLoop(k mk t ci rt n mi it) NestLoop(k mk t ci rt n mi it mc) NestLoop(k mk t ci rt n mi it mc cn) NestLoop(k mk t ci rt n mi it mc cn an) NestLoop(k mk t ci rt n mi it mc cn an chn) Leading((((((((((((k mk) t) ci) rt) n) mi) it) mc) cn) an) chn)) */
"SELECT MIN(chn.name) AS voiced_char_name, MIN(n.name) AS voicing_actress_name, MIN(t.title) AS voiced_action_movie_jap_eng
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
   keyword AS k,
   movie_companies AS mc,
   movie_info AS mi,
   movie_keyword AS mk,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND t.id = mk.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mc.movie_id = mk.movie_id
AND mi.movie_id = ci.movie_id
AND mi.movie_id = mk.movie_id
AND ci.movie_id = mk.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND k.id = mk.keyword_id
AND ci.note IN ('(voice)', '(as Jim Frawley)', '(as Sandra Grose)', '(1999-2003)', '(as Preston Pratt)')
AND cn.country_code = '[us]'
AND it.info = 'certificates'
AND k.keyword IN ('gun-shot', 'ironworker', 'mazda', 'playing-with-a-dog', 'stick-figure')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%r%' OR mi.info LIKE '%8%')
AND n.gender = 'm'
AND n.name LIKE '%R%'
AND rt.role = 'actor'
AND t.production_year > 2009;",80,/*+  IndexScan(k keyword_pkey) IndexScan(mk keyword_id_movie_keyword) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) IndexScan(it info_type_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexOnlyScan(an person_id_aka_name) IndexScan(chn char_name_pkey) NestLoop(k mk) NestLoop(k mk t) NestLoop(k mk t ci) HashJoin(k mk t ci rt) NestLoop(k mk t ci rt n) NestLoop(k mk t ci rt n mi) NestLoop(k mk t ci rt n mi it) NestLoop(k mk t ci rt n mi it mc) NestLoop(k mk t ci rt n mi it mc cn) NestLoop(k mk t ci rt n mi it mc cn an) NestLoop(k mk t ci rt n mi it mc cn an chn) Leading((((((((((((k mk) t) ci) rt) n) mi) it) mc) cn) an) chn)) */
"SELECT MIN(chn.name) AS voiced_char_name, MIN(n.name) AS voicing_actress_name, MIN(t.title) AS voiced_action_movie_jap_eng
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
   keyword AS k,
   movie_companies AS mc,
   movie_info AS mi,
   movie_keyword AS mk,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND t.id = mk.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mc.movie_id = mk.movie_id
AND mi.movie_id = ci.movie_id
AND mi.movie_id = mk.movie_id
AND ci.movie_id = mk.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND k.id = mk.keyword_id
AND ci.note IN ('(as Charles Tamburro)', '(as Andre Georget)', '(as Buboy Tan)', '(as Vega)', '(as Amanda Dickson)')
AND cn.country_code = '[fr]'
AND it.info = 'novel'
AND k.keyword IN ('voice-sampling', 'blind-father', 'spit-in-eye', 'broadway-producer', 'night-rocket-launch')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%k%' OR mi.info LIKE '%r%')
AND n.gender = 'm'
AND n.name LIKE '%b%'
AND rt.role = 'actor'
AND t.production_year > 1990;",80,/*+  IndexScan(k keyword_pkey) IndexScan(mk keyword_id_movie_keyword) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) IndexScan(it info_type_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexOnlyScan(an person_id_aka_name) IndexScan(chn char_name_pkey) NestLoop(k mk) NestLoop(k mk t) NestLoop(k mk t ci) HashJoin(k mk t ci rt) NestLoop(k mk t ci rt n) NestLoop(k mk t ci rt n mi) NestLoop(k mk t ci rt n mi it) NestLoop(k mk t ci rt n mi it mc) NestLoop(k mk t ci rt n mi it mc cn) NestLoop(k mk t ci rt n mi it mc cn an) NestLoop(k mk t ci rt n mi it mc cn an chn) Leading((((((((((((k mk) t) ci) rt) n) mi) it) mc) cn) an) chn)) */
"SELECT MIN(chn.name) AS voiced_char_name, MIN(n.name) AS voicing_actress_name, MIN(t.title) AS voiced_action_movie_jap_eng
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
   keyword AS k,
   movie_companies AS mc,
   movie_info AS mi,
   movie_keyword AS mk,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND t.id = mk.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mc.movie_id = mk.movie_id
AND mi.movie_id = ci.movie_id
AND mi.movie_id = mk.movie_id
AND ci.movie_id = mk.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND k.id = mk.keyword_id
AND ci.note IN ('(as Charles Tamburro)', '(as D. Korzh)', '(on-set builder)', '(as Selena Walters)', '(as Kavi)')
AND cn.country_code = '[es]'
AND it.info = 'novel'
AND k.keyword IN ('android', 'tchaikovsky', 'game-boy', 'granite-tablet', 'butterfly-wings')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%R%' OR mi.info LIKE '%r%')
AND n.gender = 'm'
AND n.name LIKE '%a%'
AND rt.role = 'actor'
AND t.production_year > 1990;",80,/*+  IndexScan(k keyword_pkey) IndexScan(mk keyword_id_movie_keyword) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) IndexScan(it info_type_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexOnlyScan(an person_id_aka_name) IndexScan(chn char_name_pkey) NestLoop(k mk) NestLoop(k mk t) NestLoop(k mk t ci) HashJoin(k mk t ci rt) NestLoop(k mk t ci rt n) NestLoop(k mk t ci rt n mi) NestLoop(k mk t ci rt n mi it) NestLoop(k mk t ci rt n mi it mc) NestLoop(k mk t ci rt n mi it mc cn) NestLoop(k mk t ci rt n mi it mc cn an) NestLoop(k mk t ci rt n mi it mc cn an chn) Leading((((((((((((k mk) t) ci) rt) n) mi) it) mc) cn) an) chn)) */
"SELECT MIN(chn.name) AS voiced_char_name, MIN(n.name) AS voicing_actress_name, MIN(t.title) AS voiced_action_movie_jap_eng
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
   keyword AS k,
   movie_companies AS mc,
   movie_info AS mi,
   movie_keyword AS mk,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND t.id = mk.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mc.movie_id = mk.movie_id
AND mi.movie_id = ci.movie_id
AND mi.movie_id = mk.movie_id
AND ci.movie_id = mk.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND k.id = mk.keyword_id
AND ci.note IN ('(as Charles Tamburro)', '(as Jhon Huston)', '(accountant) (1998)', '(as Leelamisra)', '(helmsman)')
AND cn.country_code = '[nl]'
AND it.info = 'taglines'
AND k.keyword IN ('action-hero', 'open-casket', 'fight-on-train-roof', 'sexy-woman', 'cartier-watch')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%h%' OR mi.info LIKE '%s%')
AND n.gender = 'm'
AND n.name LIKE '%C%'
AND rt.role = 'actor'
AND t.production_year > 1990;",80,/*+  IndexScan(k keyword_pkey) IndexScan(mk keyword_id_movie_keyword) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) IndexScan(it info_type_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexOnlyScan(an person_id_aka_name) IndexScan(chn char_name_pkey) NestLoop(k mk) NestLoop(k mk t) NestLoop(k mk t ci) HashJoin(k mk t ci rt) NestLoop(k mk t ci rt n) NestLoop(k mk t ci rt n mi) NestLoop(k mk t ci rt n mi it) NestLoop(k mk t ci rt n mi it mc) NestLoop(k mk t ci rt n mi it mc cn) NestLoop(k mk t ci rt n mi it mc cn an) NestLoop(k mk t ci rt n mi it mc cn an chn) Leading((((((((((((k mk) t) ci) rt) n) mi) it) mc) cn) an) chn)) */
"SELECT MIN(chn.name) AS voiced_char_name, MIN(n.name) AS voicing_actress_name, MIN(t.title) AS voiced_action_movie_jap_eng
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
   keyword AS k,
   movie_companies AS mc,
   movie_info AS mi,
   movie_keyword AS mk,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND t.id = mk.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mc.movie_id = mk.movie_id
AND mi.movie_id = ci.movie_id
AND mi.movie_id = mk.movie_id
AND ci.movie_id = mk.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND k.id = mk.keyword_id
AND ci.note IN ('(as Charles Tamburro)', '(as Lev Grossman)', '(as Tamara Jackson)', '(as Buddy Windrush)', '(as T. Klotz)')
AND cn.country_code = '[fr]'
AND it.info = 'tech info'
AND k.keyword IN ('battle', 'in-flight-magazine', 'sajuaro-cactus', 'invisible-children', 'shadow-on-wall')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%C%' OR mi.info LIKE '%P%')
AND n.gender = 'm'
AND n.name LIKE '%a%'
AND rt.role = 'actor'
AND t.production_year > 1990;",80,/*+  IndexScan(k keyword_pkey) IndexScan(mk keyword_id_movie_keyword) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) IndexScan(it info_type_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexOnlyScan(an person_id_aka_name) IndexScan(chn char_name_pkey) NestLoop(k mk) NestLoop(k mk t) NestLoop(k mk t ci) HashJoin(k mk t ci rt) NestLoop(k mk t ci rt n) NestLoop(k mk t ci rt n mi) NestLoop(k mk t ci rt n mi it) NestLoop(k mk t ci rt n mi it mc) NestLoop(k mk t ci rt n mi it mc cn) NestLoop(k mk t ci rt n mi it mc cn an) NestLoop(k mk t ci rt n mi it mc cn an chn) Leading((((((((((((k mk) t) ci) rt) n) mi) it) mc) cn) an) chn)) */
"SELECT MIN(chn.name) AS voiced_char_name, MIN(n.name) AS voicing_actress_name, MIN(t.title) AS voiced_action_movie_jap_eng
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
   keyword AS k,
   movie_companies AS mc,
   movie_info AS mi,
   movie_keyword AS mk,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND t.id = mk.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mc.movie_id = mk.movie_id
AND mi.movie_id = ci.movie_id
AND mi.movie_id = mk.movie_id
AND ci.movie_id = mk.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND k.id = mk.keyword_id
AND ci.note IN ('(as Charles Tamburro)', '(as Donnal Ward)', '(as A.C. De Guia)', '(segment ""Pearl"")', '(Soda Shop Girl)')
AND cn.country_code = '[se]'
AND it.info = 'tech info'
AND k.keyword IN ('action-hero', 'atoll', 'calotropis', 'mace-spray', 'key-impression')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%3%' OR mi.info LIKE '%5%')
AND n.gender = 'm'
AND n.name LIKE '%r%'
AND rt.role = 'actor'
AND t.production_year > 1990;",80,/*+  IndexScan(k keyword_pkey) IndexScan(mk keyword_id_movie_keyword) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) IndexScan(it info_type_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexOnlyScan(an person_id_aka_name) IndexScan(chn char_name_pkey) NestLoop(k mk) NestLoop(k mk t) NestLoop(k mk t ci) HashJoin(k mk t ci rt) NestLoop(k mk t ci rt n) NestLoop(k mk t ci rt n mi) NestLoop(k mk t ci rt n mi it) NestLoop(k mk t ci rt n mi it mc) NestLoop(k mk t ci rt n mi it mc cn) NestLoop(k mk t ci rt n mi it mc cn an) NestLoop(k mk t ci rt n mi it mc cn an chn) Leading((((((((((((k mk) t) ci) rt) n) mi) it) mc) cn) an) chn)) */
"SELECT MIN(chn.name) AS voiced_char_name, MIN(n.name) AS voicing_actress_name, MIN(t.title) AS voiced_action_movie_jap_eng
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
   keyword AS k,
   movie_companies AS mc,
   movie_info AS mi,
   movie_keyword AS mk,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND t.id = mk.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mc.movie_id = mk.movie_id
AND mi.movie_id = ci.movie_id
AND mi.movie_id = mk.movie_id
AND ci.movie_id = mk.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND k.id = mk.keyword_id
AND ci.note IN ('(as Charles Tamburro)', '(as Perle Walter)', '(8 aÃ±os)', '(as Judyh)', '(as Eric Yang)')
AND cn.country_code = '[br]'
AND it.info = 'novel'
AND k.keyword IN ('battle', 'adding-machine', 'self-kidnap', 'gun-telescope', 'moonshine')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%9%' OR mi.info LIKE '%B%')
AND n.gender = 'm'
AND n.name LIKE '%T%'
AND rt.role = 'actor'
AND t.production_year > 1990;",80,/*+  IndexScan(k keyword_pkey) IndexScan(mk keyword_id_movie_keyword) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) IndexScan(it info_type_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexOnlyScan(an person_id_aka_name) IndexScan(chn char_name_pkey) NestLoop(k mk) NestLoop(k mk t) NestLoop(k mk t ci) HashJoin(k mk t ci rt) NestLoop(k mk t ci rt n) NestLoop(k mk t ci rt n mi) NestLoop(k mk t ci rt n mi it) NestLoop(k mk t ci rt n mi it mc) NestLoop(k mk t ci rt n mi it mc cn) NestLoop(k mk t ci rt n mi it mc cn an) NestLoop(k mk t ci rt n mi it mc cn an chn) Leading((((((((((((k mk) t) ci) rt) n) mi) it) mc) cn) an) chn)) */
"SELECT MIN(chn.name) AS voiced_char_name, MIN(n.name) AS voicing_actress_name, MIN(t.title) AS voiced_action_movie_jap_eng
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
   keyword AS k,
   movie_companies AS mc,
   movie_info AS mi,
   movie_keyword AS mk,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND t.id = mk.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mc.movie_id = mk.movie_id
AND mi.movie_id = ci.movie_id
AND mi.movie_id = mk.movie_id
AND ci.movie_id = mk.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND k.id = mk.keyword_id
AND ci.note IN ('(as Charles Tamburro)', '(as A. Trotsenko)', '(as Manikandan)', '(as Hilton Allen)', '(as Brian Koch)')
AND cn.country_code = '[fr]'
AND it.info = 'rentals'
AND k.keyword IN ('voice-sampling', 'aclu', 'asking-for-a-job', 'tooth-gap', 'french-navy')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%K%' OR mi.info LIKE '%U%')
AND n.gender = 'm'
AND n.name LIKE '%e%'
AND rt.role = 'actor'
AND t.production_year > 1990;",80,/*+  IndexScan(k keyword_pkey) IndexScan(mk keyword_id_movie_keyword) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) IndexScan(it info_type_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexOnlyScan(an person_id_aka_name) IndexScan(chn char_name_pkey) NestLoop(k mk) NestLoop(k mk t) NestLoop(k mk t ci) HashJoin(k mk t ci rt) NestLoop(k mk t ci rt n) NestLoop(k mk t ci rt n mi) NestLoop(k mk t ci rt n mi it) NestLoop(k mk t ci rt n mi it mc) NestLoop(k mk t ci rt n mi it mc cn) NestLoop(k mk t ci rt n mi it mc cn an) NestLoop(k mk t ci rt n mi it mc cn an chn) Leading((((((((((((k mk) t) ci) rt) n) mi) it) mc) cn) an) chn)) */
"SELECT MIN(chn.name) AS voiced_char_name, MIN(n.name) AS voicing_actress_name, MIN(t.title) AS voiced_action_movie_jap_eng
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
   keyword AS k,
   movie_companies AS mc,
   movie_info AS mi,
   movie_keyword AS mk,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND t.id = mk.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mc.movie_id = mk.movie_id
AND mi.movie_id = ci.movie_id
AND mi.movie_id = mk.movie_id
AND ci.movie_id = mk.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND k.id = mk.keyword_id
AND ci.note IN ('(as Charles Tamburro)', '(as Fernando)', '(as Jesse Dunn)', '(as Daniel Brucker)', '(as Wolf)')
AND cn.country_code = '[nl]'
AND it.info = 'opening weekend'
AND k.keyword IN ('action-hero', 'girl-nudity', 'glass-painting', 'green-tights', 'midnight-launch')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%)%' OR mi.info LIKE '%)%')
AND n.gender = 'm'
AND n.name LIKE '%r%'
AND rt.role = 'actor'
AND t.production_year > 1990;",80,/*+  IndexScan(k keyword_pkey) IndexScan(mk keyword_id_movie_keyword) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) IndexScan(it info_type_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexOnlyScan(an person_id_aka_name) IndexScan(chn char_name_pkey) NestLoop(k mk) NestLoop(k mk t) NestLoop(k mk t ci) HashJoin(k mk t ci rt) NestLoop(k mk t ci rt n) NestLoop(k mk t ci rt n mi) NestLoop(k mk t ci rt n mi it) NestLoop(k mk t ci rt n mi it mc) NestLoop(k mk t ci rt n mi it mc cn) NestLoop(k mk t ci rt n mi it mc cn an) NestLoop(k mk t ci rt n mi it mc cn an chn) Leading((((((((((((k mk) t) ci) rt) n) mi) it) mc) cn) an) chn)) */
"SELECT MIN(chn.name) AS voiced_char_name, MIN(n.name) AS voicing_actress_name, MIN(t.title) AS voiced_action_movie_jap_eng
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
   keyword AS k,
   movie_companies AS mc,
   movie_info AS mi,
   movie_keyword AS mk,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND t.id = mk.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mc.movie_id = mk.movie_id
AND mi.movie_id = ci.movie_id
AND mi.movie_id = mk.movie_id
AND ci.movie_id = mk.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND k.id = mk.keyword_id
AND ci.note IN ('(as Charles Tamburro)', '(as Manel Huerga)', '(as Shawn Hlookoff)', '(as Risal)', '(as Iris Schmit)')
AND cn.country_code = '[es]'
AND it.info = 'printed media reviews'
AND k.keyword IN ('weapons-research', 'hunting-ground', 'simulcast', 'indian-girl', 'magic-apple')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%i%' OR mi.info LIKE '%6%')
AND n.gender = 'm'
AND n.name LIKE '%r%'
AND rt.role = 'actor'
AND t.production_year > 1990;",80,/*+  IndexScan(k keyword_pkey) IndexScan(mk keyword_id_movie_keyword) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) IndexScan(it info_type_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexOnlyScan(an person_id_aka_name) IndexScan(chn char_name_pkey) NestLoop(k mk) NestLoop(k mk t) NestLoop(k mk t ci) HashJoin(k mk t ci rt) NestLoop(k mk t ci rt n) NestLoop(k mk t ci rt n mi) NestLoop(k mk t ci rt n mi it) NestLoop(k mk t ci rt n mi it mc) NestLoop(k mk t ci rt n mi it mc cn) NestLoop(k mk t ci rt n mi it mc cn an) NestLoop(k mk t ci rt n mi it mc cn an chn) Leading((((((((((((k mk) t) ci) rt) n) mi) it) mc) cn) an) chn)) */
"SELECT MIN(chn.name) AS voiced_char_name, MIN(n.name) AS voicing_actress_name, MIN(t.title) AS voiced_action_movie_jap_eng
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
   keyword AS k,
   movie_companies AS mc,
   movie_info AS mi,
   movie_keyword AS mk,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND t.id = mk.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mc.movie_id = mk.movie_id
AND mi.movie_id = ci.movie_id
AND mi.movie_id = mk.movie_id
AND ci.movie_id = mk.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND k.id = mk.keyword_id
AND ci.note IN ('(as Charles Tamburro)', '(Provokateur)', '(as James Mallora)', '(as Roberto Luke)', '(as Dipika)')
AND cn.country_code = '[us]'
AND it.info = 'budget'
AND k.keyword IN ('2020s', 'reciprocity', 'men''s-restroom', 'female-victims', 'john-cage')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%$%' OR mi.info LIKE '%0%')
AND n.gender = 'm'
AND n.name LIKE '%a%'
AND rt.role = 'actor'
AND t.production_year > 1990;",80,/*+  IndexScan(k keyword_pkey) IndexScan(mk keyword_id_movie_keyword) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) IndexScan(it info_type_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexOnlyScan(an person_id_aka_name) IndexScan(chn char_name_pkey) NestLoop(k mk) NestLoop(k mk t) NestLoop(k mk t ci) HashJoin(k mk t ci rt) NestLoop(k mk t ci rt n) NestLoop(k mk t ci rt n mi) NestLoop(k mk t ci rt n mi it) NestLoop(k mk t ci rt n mi it mc) NestLoop(k mk t ci rt n mi it mc cn) NestLoop(k mk t ci rt n mi it mc cn an) NestLoop(k mk t ci rt n mi it mc cn an chn) Leading((((((((((((k mk) t) ci) rt) n) mi) it) mc) cn) an) chn)) */
"SELECT MIN(chn.name) AS voiced_char_name, MIN(n.name) AS voicing_actress_name, MIN(t.title) AS voiced_action_movie_jap_eng
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
   keyword AS k,
   movie_companies AS mc,
   movie_info AS mi,
   movie_keyword AS mk,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND t.id = mk.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mc.movie_id = mk.movie_id
AND mi.movie_id = ci.movie_id
AND mi.movie_id = mk.movie_id
AND ci.movie_id = mk.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND k.id = mk.keyword_id
AND ci.note IN ('(as Charles Tamburro)', '(as Art Stewart)', '(as Soluna)', '(as Maggie Li)', '(as Luanne Ponce)')
AND cn.country_code = '[se]'
AND it.info = 'novel'
AND k.keyword IN ('android', 'raising-money', 'british-colonial', 'trust-company', 'killed-with-a-bomb')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%9%' OR mi.info LIKE '%r%')
AND n.gender = 'm'
AND n.name LIKE '%a%'
AND rt.role = 'actor'
AND t.production_year > 1990;",80,/*+  IndexScan(k keyword_pkey) IndexScan(mk keyword_id_movie_keyword) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) IndexScan(it info_type_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexOnlyScan(an person_id_aka_name) IndexScan(chn char_name_pkey) NestLoop(k mk) NestLoop(k mk t) NestLoop(k mk t ci) HashJoin(k mk t ci rt) NestLoop(k mk t ci rt n) NestLoop(k mk t ci rt n mi) NestLoop(k mk t ci rt n mi it) NestLoop(k mk t ci rt n mi it mc) NestLoop(k mk t ci rt n mi it mc cn) NestLoop(k mk t ci rt n mi it mc cn an) NestLoop(k mk t ci rt n mi it mc cn an chn) Leading((((((((((((k mk) t) ci) rt) n) mi) it) mc) cn) an) chn)) */
"SELECT MIN(chn.name) AS voiced_char_name, MIN(n.name) AS voicing_actress_name, MIN(t.title) AS voiced_action_movie_jap_eng
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
   keyword AS k,
   movie_companies AS mc,
   movie_info AS mi,
   movie_keyword AS mk,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND t.id = mk.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mc.movie_id = mk.movie_id
AND mi.movie_id = ci.movie_id
AND mi.movie_id = mk.movie_id
AND ci.movie_id = mk.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND k.id = mk.keyword_id
AND ci.note IN ('(as Charles Tamburro)', '(as Kenneth Gamble)', '(as Kay Hartrey)', '(help movies)', '(as Donald Hebb)')
AND cn.country_code = '[us]'
AND it.info = 'printed media reviews'
AND k.keyword IN ('action-hero', 'peace-symbol', 'island-fortress', 'sacristan', 'thrown-out-naked')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%1%' OR mi.info LIKE '%i%')
AND n.gender = 'm'
AND n.name LIKE '%.%'
AND rt.role = 'actor'
AND t.production_year > 1990;",80,/*+  IndexScan(k keyword_pkey) IndexScan(mk keyword_id_movie_keyword) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) IndexScan(it info_type_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexOnlyScan(an person_id_aka_name) IndexScan(chn char_name_pkey) NestLoop(k mk) NestLoop(k mk t) NestLoop(k mk t ci) HashJoin(k mk t ci rt) NestLoop(k mk t ci rt n) NestLoop(k mk t ci rt n mi) NestLoop(k mk t ci rt n mi it) NestLoop(k mk t ci rt n mi it mc) NestLoop(k mk t ci rt n mi it mc cn) NestLoop(k mk t ci rt n mi it mc cn an) NestLoop(k mk t ci rt n mi it mc cn an chn) Leading((((((((((((k mk) t) ci) rt) n) mi) it) mc) cn) an) chn)) */
"SELECT MIN(chn.name) AS voiced_char_name, MIN(n.name) AS voicing_actress_name, MIN(t.title) AS voiced_action_movie_jap_eng
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
   keyword AS k,
   movie_companies AS mc,
   movie_info AS mi,
   movie_keyword AS mk,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND t.id = mk.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mc.movie_id = mk.movie_id
AND mi.movie_id = ci.movie_id
AND mi.movie_id = mk.movie_id
AND ci.movie_id = mk.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND k.id = mk.keyword_id
AND ci.note IN ('(as Charles Tamburro)', '(Drug mailer)', '(as LuÃ­s Carrondo)', '(as Carlton Crane)', '(as Dr Tracy Hall)')
AND cn.country_code = '[es]'
AND it.info = 'tech info'
AND k.keyword IN ('voice-sampling', 'moisture', 'shared-secret', 'breaking-down-gate', 'brooklyn-navy-yard')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%O%' OR mi.info LIKE '%5%')
AND n.gender = 'm'
AND n.name LIKE '%m%'
AND rt.role = 'actor'
AND t.production_year > 1990;",80,/*+  IndexScan(k keyword_pkey) IndexScan(mk keyword_id_movie_keyword) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) IndexScan(it info_type_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexOnlyScan(an person_id_aka_name) IndexScan(chn char_name_pkey) NestLoop(k mk) NestLoop(k mk t) NestLoop(k mk t ci) HashJoin(k mk t ci rt) NestLoop(k mk t ci rt n) NestLoop(k mk t ci rt n mi) NestLoop(k mk t ci rt n mi it) NestLoop(k mk t ci rt n mi it mc) NestLoop(k mk t ci rt n mi it mc cn) NestLoop(k mk t ci rt n mi it mc cn an) NestLoop(k mk t ci rt n mi it mc cn an chn) Leading((((((((((((k mk) t) ci) rt) n) mi) it) mc) cn) an) chn)) */
"SELECT MIN(chn.name) AS voiced_char_name, MIN(n.name) AS voicing_actress_name, MIN(t.title) AS voiced_action_movie_jap_eng
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
   keyword AS k,
   movie_companies AS mc,
   movie_info AS mi,
   movie_keyword AS mk,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND t.id = mk.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mc.movie_id = mk.movie_id
AND mi.movie_id = ci.movie_id
AND mi.movie_id = mk.movie_id
AND ci.movie_id = mk.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND k.id = mk.keyword_id
AND ci.note IN ('(as Charles Tamburro)', '(as Abigail)', '(novel ""High Cage"")', '(chef) (2002-)', '(as Jay Downs)')
AND cn.country_code = '[gb]'
AND it.info = 'printed media reviews'
AND k.keyword IN ('2020s', 'pass', 'ankle-splint', 'mortgage-payment', 'contemporary-music')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%d%' OR mi.info LIKE '%e%')
AND n.gender = 'm'
AND n.name LIKE '%e%'
AND rt.role = 'actor'
AND t.production_year > 1990;",80,/*+  IndexScan(k keyword_pkey) IndexScan(mk keyword_id_movie_keyword) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) IndexScan(it info_type_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexOnlyScan(an person_id_aka_name) IndexScan(chn char_name_pkey) NestLoop(k mk) NestLoop(k mk t) NestLoop(k mk t ci) HashJoin(k mk t ci rt) NestLoop(k mk t ci rt n) NestLoop(k mk t ci rt n mi) NestLoop(k mk t ci rt n mi it) NestLoop(k mk t ci rt n mi it mc) NestLoop(k mk t ci rt n mi it mc cn) NestLoop(k mk t ci rt n mi it mc cn an) NestLoop(k mk t ci rt n mi it mc cn an chn) Leading((((((((((((k mk) t) ci) rt) n) mi) it) mc) cn) an) chn)) */
"SELECT MIN(chn.name) AS voiced_char_name, MIN(n.name) AS voicing_actress_name, MIN(t.title) AS voiced_action_movie_jap_eng
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
   keyword AS k,
   movie_companies AS mc,
   movie_info AS mi,
   movie_keyword AS mk,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND t.id = mk.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mc.movie_id = mk.movie_id
AND mi.movie_id = ci.movie_id
AND mi.movie_id = mk.movie_id
AND ci.movie_id = mk.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND k.id = mk.keyword_id
AND ci.note IN ('(as Charles Tamburro)', '(as Bob Birnbaum)', '(as Angel LaMonica)', '(as Jeremy Killick)', '(play ""Tamten"")')
AND cn.country_code = '[es]'
AND it.info = 'printed media reviews'
AND k.keyword IN ('android', 'schizo', 'cranston-auditorium', 'cheap-hiroshi', 'bubble-wrap')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%m%' OR mi.info LIKE '%6%')
AND n.gender = 'm'
AND n.name LIKE '%l%'
AND rt.role = 'actor'
AND t.production_year > 1990;",80,/*+  IndexScan(k keyword_pkey) IndexScan(mk keyword_id_movie_keyword) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) IndexScan(it info_type_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexOnlyScan(an person_id_aka_name) IndexScan(chn char_name_pkey) NestLoop(k mk) NestLoop(k mk t) NestLoop(k mk t ci) HashJoin(k mk t ci rt) NestLoop(k mk t ci rt n) NestLoop(k mk t ci rt n mi) NestLoop(k mk t ci rt n mi it) NestLoop(k mk t ci rt n mi it mc) NestLoop(k mk t ci rt n mi it mc cn) NestLoop(k mk t ci rt n mi it mc cn an) NestLoop(k mk t ci rt n mi it mc cn an chn) Leading((((((((((((k mk) t) ci) rt) n) mi) it) mc) cn) an) chn)) */
"SELECT MIN(chn.name) AS voiced_char_name, MIN(n.name) AS voicing_actress_name, MIN(t.title) AS voiced_action_movie_jap_eng
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
   keyword AS k,
   movie_companies AS mc,
   movie_info AS mi,
   movie_keyword AS mk,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND t.id = mk.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mc.movie_id = mk.movie_id
AND mi.movie_id = ci.movie_id
AND mi.movie_id = mk.movie_id
AND ci.movie_id = mk.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND k.id = mk.keyword_id
AND ci.note IN ('(as Charles Tamburro)', '(as Sarah S. Lopez)', '(as Lui Mananzala)', '(as FÃ¼sÃ¼n UÃ§ar)', '(as Yuk-wan Wong)')
AND cn.country_code = '[se]'
AND it.info = 'tech info'
AND k.keyword IN ('2020s', 'nature-photography', 'anti-war', 'island-empire', 'sex-in-hospital')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%m%' OR mi.info LIKE '%m%')
AND n.gender = 'm'
AND n.name LIKE '%r%'
AND rt.role = 'actor'
AND t.production_year > 1990;",80,/*+  IndexScan(k keyword_pkey) IndexScan(mk keyword_id_movie_keyword) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) IndexScan(it info_type_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexOnlyScan(an person_id_aka_name) IndexScan(chn char_name_pkey) NestLoop(k mk) NestLoop(k mk t) NestLoop(k mk t ci) HashJoin(k mk t ci rt) NestLoop(k mk t ci rt n) NestLoop(k mk t ci rt n mi) NestLoop(k mk t ci rt n mi it) NestLoop(k mk t ci rt n mi it mc) NestLoop(k mk t ci rt n mi it mc cn) NestLoop(k mk t ci rt n mi it mc cn an) NestLoop(k mk t ci rt n mi it mc cn an chn) Leading((((((((((((k mk) t) ci) rt) n) mi) it) mc) cn) an) chn)) */
"SELECT MIN(chn.name) AS voiced_char_name, MIN(n.name) AS voicing_actress_name, MIN(t.title) AS voiced_action_movie_jap_eng
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
   keyword AS k,
   movie_companies AS mc,
   movie_info AS mi,
   movie_keyword AS mk,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND t.id = mk.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mc.movie_id = mk.movie_id
AND mi.movie_id = ci.movie_id
AND mi.movie_id = mk.movie_id
AND ci.movie_id = mk.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND k.id = mk.keyword_id
AND ci.note IN ('(as Charles Tamburro)', '(as Edmund Ho)', '(as Rebeka Jordan)', '(as Jo Kern)', '(as Ãun LajÃ§i)')
AND cn.country_code = '[nl]'
AND it.info = 'production process protocol'
AND k.keyword IN ('battle', 'nude-with-glasses', 'hauling-business', 'vaulted-roof', 'stalactites')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%,%' OR mi.info LIKE '%,%')
AND n.gender = 'm'
AND n.name LIKE '%r%'
AND rt.role = 'actor'
AND t.production_year > 1990;",80,/*+  IndexScan(k keyword_pkey) IndexScan(mk keyword_id_movie_keyword) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) IndexScan(it info_type_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexOnlyScan(an person_id_aka_name) IndexScan(chn char_name_pkey) NestLoop(k mk) NestLoop(k mk t) NestLoop(k mk t ci) HashJoin(k mk t ci rt) NestLoop(k mk t ci rt n) NestLoop(k mk t ci rt n mi) NestLoop(k mk t ci rt n mi it) NestLoop(k mk t ci rt n mi it mc) NestLoop(k mk t ci rt n mi it mc cn) NestLoop(k mk t ci rt n mi it mc cn an) NestLoop(k mk t ci rt n mi it mc cn an chn) Leading((((((((((((k mk) t) ci) rt) n) mi) it) mc) cn) an) chn)) */
"SELECT MIN(chn.name) AS voiced_char_name, MIN(n.name) AS voicing_actress_name, MIN(t.title) AS voiced_action_movie_jap_eng
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
   keyword AS k,
   movie_companies AS mc,
   movie_info AS mi,
   movie_keyword AS mk,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND t.id = mk.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mc.movie_id = mk.movie_id
AND mi.movie_id = ci.movie_id
AND mi.movie_id = mk.movie_id
AND ci.movie_id = mk.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND k.id = mk.keyword_id
AND ci.note IN ('(as Charles Tamburro)', '(as R. Gaylor)', '(as David MacMahon)', '(Sakura''s father)', '(as Fred Ongleo)')
AND cn.country_code = '[fr]'
AND it.info = 'screenplay-teleplay'
AND k.keyword IN ('weapons-research', 'interdisciplinary', 'michoacan', 'no-story', 'bobo-the-elephant')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%y%' OR mi.info LIKE '%y%')
AND n.gender = 'm'
AND n.name LIKE '%a%'
AND rt.role = 'actor'
AND t.production_year > 1990;",80,/*+  IndexScan(k keyword_pkey) IndexScan(mk keyword_id_movie_keyword) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) IndexScan(it info_type_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexOnlyScan(an person_id_aka_name) IndexScan(chn char_name_pkey) NestLoop(k mk) NestLoop(k mk t) NestLoop(k mk t ci) HashJoin(k mk t ci rt) NestLoop(k mk t ci rt n) NestLoop(k mk t ci rt n mi) NestLoop(k mk t ci rt n mi it) NestLoop(k mk t ci rt n mi it mc) NestLoop(k mk t ci rt n mi it mc cn) NestLoop(k mk t ci rt n mi it mc cn an) NestLoop(k mk t ci rt n mi it mc cn an chn) Leading((((((((((((k mk) t) ci) rt) n) mi) it) mc) cn) an) chn)) */
"SELECT MIN(chn.name) AS voiced_char_name, MIN(n.name) AS voicing_actress_name, MIN(t.title) AS voiced_action_movie_jap_eng
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
   keyword AS k,
   movie_companies AS mc,
   movie_info AS mi,
   movie_keyword AS mk,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND t.id = mk.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mc.movie_id = mk.movie_id
AND mi.movie_id = ci.movie_id
AND mi.movie_id = mk.movie_id
AND ci.movie_id = mk.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND k.id = mk.keyword_id
AND ci.note IN ('(as Charles Tamburro)', '(1990-2004)', '(as Piti Espanyol)', '(as Thomas Jackson)', '(as Kolya Valeyev)')
AND cn.country_code = '[es]'
AND it.info = 'adaption'
AND k.keyword IN ('android', 'maupassant', 'chevalin', 'tattoo-artist', 'final-episode')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%,%' OR mi.info LIKE '%r%')
AND n.gender = 'm'
AND n.name LIKE '%m%'
AND rt.role = 'actor'
AND t.production_year > 1990;",80,/*+  IndexScan(k keyword_pkey) IndexScan(mk keyword_id_movie_keyword) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) IndexScan(it info_type_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexOnlyScan(an person_id_aka_name) IndexScan(chn char_name_pkey) NestLoop(k mk) NestLoop(k mk t) NestLoop(k mk t ci) HashJoin(k mk t ci rt) NestLoop(k mk t ci rt n) NestLoop(k mk t ci rt n mi) NestLoop(k mk t ci rt n mi it) NestLoop(k mk t ci rt n mi it mc) NestLoop(k mk t ci rt n mi it mc cn) NestLoop(k mk t ci rt n mi it mc cn an) NestLoop(k mk t ci rt n mi it mc cn an chn) Leading((((((((((((k mk) t) ci) rt) n) mi) it) mc) cn) an) chn)) */
"SELECT MIN(chn.name) AS voiced_char_name, MIN(n.name) AS voicing_actress_name, MIN(t.title) AS voiced_action_movie_jap_eng
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
   keyword AS k,
   movie_companies AS mc,
   movie_info AS mi,
   movie_keyword AS mk,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND t.id = mk.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mc.movie_id = mk.movie_id
AND mi.movie_id = ci.movie_id
AND mi.movie_id = mk.movie_id
AND ci.movie_id = mk.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND k.id = mk.keyword_id
AND ci.note IN ('(as Charles Tamburro)', '(as Gilbert Ferro)', '(as L. Garnitsa)', '(as Gani Nofiu)', '(as Rhet Romero)')
AND cn.country_code = '[se]'
AND it.info = 'weekend gross'
AND k.keyword IN ('weapons-research', 'traffic-warden', 'working-wife', 'rolling-stones', 'fake-penis')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%U%' OR mi.info LIKE '%(%')
AND n.gender = 'm'
AND n.name LIKE '%r%'
AND rt.role = 'actor'
AND t.production_year > 1990;",80,/*+  IndexScan(k keyword_pkey) IndexScan(mk keyword_id_movie_keyword) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) IndexScan(it info_type_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexOnlyScan(an person_id_aka_name) IndexScan(chn char_name_pkey) NestLoop(k mk) NestLoop(k mk t) NestLoop(k mk t ci) HashJoin(k mk t ci rt) NestLoop(k mk t ci rt n) NestLoop(k mk t ci rt n mi) NestLoop(k mk t ci rt n mi it) NestLoop(k mk t ci rt n mi it mc) NestLoop(k mk t ci rt n mi it mc cn) NestLoop(k mk t ci rt n mi it mc cn an) NestLoop(k mk t ci rt n mi it mc cn an chn) Leading((((((((((((k mk) t) ci) rt) n) mi) it) mc) cn) an) chn)) */
"SELECT MIN(chn.name) AS voiced_char_name, MIN(n.name) AS voicing_actress_name, MIN(t.title) AS voiced_action_movie_jap_eng
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
   keyword AS k,
   movie_companies AS mc,
   movie_info AS mi,
   movie_keyword AS mk,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND t.id = mk.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mc.movie_id = mk.movie_id
AND mi.movie_id = ci.movie_id
AND mi.movie_id = mk.movie_id
AND ci.movie_id = mk.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND k.id = mk.keyword_id
AND ci.note IN ('(as Charles Tamburro)', '(as Menessier)', '(as Raam: Laxman)', '(as Lilliana)', '(as Selecter)')
AND cn.country_code = '[br]'
AND it.info = 'adaption'
AND k.keyword IN ('weapons-research', 'soul-transmigration', 'pop-stars', 'pay-cut', 'pierced-lip')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%4%' OR mi.info LIKE '%0%')
AND n.gender = 'm'
AND n.name LIKE '%T%'
AND rt.role = 'actor'
AND t.production_year > 1990;",80,/*+  IndexScan(k keyword_pkey) IndexScan(mk keyword_id_movie_keyword) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) IndexScan(it info_type_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexOnlyScan(an person_id_aka_name) IndexScan(chn char_name_pkey) NestLoop(k mk) NestLoop(k mk t) NestLoop(k mk t ci) HashJoin(k mk t ci rt) NestLoop(k mk t ci rt n) NestLoop(k mk t ci rt n mi) NestLoop(k mk t ci rt n mi it) NestLoop(k mk t ci rt n mi it mc) NestLoop(k mk t ci rt n mi it mc cn) NestLoop(k mk t ci rt n mi it mc cn an) NestLoop(k mk t ci rt n mi it mc cn an chn) Leading((((((((((((k mk) t) ci) rt) n) mi) it) mc) cn) an) chn)) */
"SELECT MIN(chn.name) AS voiced_char_name, MIN(n.name) AS voicing_actress_name, MIN(t.title) AS voiced_action_movie_jap_eng
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
   keyword AS k,
   movie_companies AS mc,
   movie_info AS mi,
   movie_keyword AS mk,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND t.id = mk.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mc.movie_id = mk.movie_id
AND mi.movie_id = ci.movie_id
AND mi.movie_id = mk.movie_id
AND ci.movie_id = mk.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND k.id = mk.keyword_id
AND ci.note IN ('(as Charles Tamburro)', '(as Chin Pey)', '(as Vlado Perkovic)', '(as James Hutton)', '(as Georges Peclet)')
AND cn.country_code = '[es]'
AND it.info = 'adaption'
AND k.keyword IN ('battle', 'bonfire-night', 'napoleonic-conquest', 'dennis-the-menace', 'monocle')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%m%' OR mi.info LIKE '%r%')
AND n.gender = 'm'
AND n.name LIKE '%b%'
AND rt.role = 'actor'
AND t.production_year > 1990;",80,/*+  IndexScan(k keyword_pkey) IndexScan(mk keyword_id_movie_keyword) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) IndexScan(it info_type_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexOnlyScan(an person_id_aka_name) IndexScan(chn char_name_pkey) NestLoop(k mk) NestLoop(k mk t) NestLoop(k mk t ci) HashJoin(k mk t ci rt) NestLoop(k mk t ci rt n) NestLoop(k mk t ci rt n mi) NestLoop(k mk t ci rt n mi it) NestLoop(k mk t ci rt n mi it mc) NestLoop(k mk t ci rt n mi it mc cn) NestLoop(k mk t ci rt n mi it mc cn an) NestLoop(k mk t ci rt n mi it mc cn an chn) Leading((((((((((((k mk) t) ci) rt) n) mi) it) mc) cn) an) chn)) */
"SELECT MIN(chn.name) AS voiced_char_name, MIN(n.name) AS voicing_actress_name, MIN(t.title) AS voiced_action_movie_jap_eng
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
   keyword AS k,
   movie_companies AS mc,
   movie_info AS mi,
   movie_keyword AS mk,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND t.id = mk.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mc.movie_id = mk.movie_id
AND mi.movie_id = ci.movie_id
AND mi.movie_id = mk.movie_id
AND ci.movie_id = mk.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND k.id = mk.keyword_id
AND ci.note IN ('(as Charles Tamburro)', '(as Marin Abram)', '(as Martin Circus)', '(as Jim Richards)', '(barrister)')
AND cn.country_code = '[us]'
AND it.info = 'tech info'
AND k.keyword IN ('action-hero', 'cinecittÃ ', 'chariot-battle', 'spiritual-power', 'acute-insomnia')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%3%' OR mi.info LIKE '%3%')
AND n.gender = 'm'
AND n.name LIKE '%l%'
AND rt.role = 'actor'
AND t.production_year > 1990;",80,/*+  IndexScan(k keyword_pkey) IndexScan(mk keyword_id_movie_keyword) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) IndexScan(it info_type_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexOnlyScan(an person_id_aka_name) IndexScan(chn char_name_pkey) NestLoop(k mk) NestLoop(k mk t) NestLoop(k mk t ci) HashJoin(k mk t ci rt) NestLoop(k mk t ci rt n) NestLoop(k mk t ci rt n mi) NestLoop(k mk t ci rt n mi it) NestLoop(k mk t ci rt n mi it mc) NestLoop(k mk t ci rt n mi it mc cn) NestLoop(k mk t ci rt n mi it mc cn an) NestLoop(k mk t ci rt n mi it mc cn an chn) Leading((((((((((((k mk) t) ci) rt) n) mi) it) mc) cn) an) chn)) */
"SELECT MIN(chn.name) AS voiced_char_name, MIN(n.name) AS voicing_actress_name, MIN(t.title) AS voiced_action_movie_jap_eng
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
   keyword AS k,
   movie_companies AS mc,
   movie_info AS mi,
   movie_keyword AS mk,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND t.id = mk.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mc.movie_id = mk.movie_id
AND mi.movie_id = ci.movie_id
AND mi.movie_id = mk.movie_id
AND ci.movie_id = mk.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND k.id = mk.keyword_id
AND ci.note IN ('(as Charles Tamburro)', '(as A. Poddubinsky)', '(as Chris Watts)', '(as Kate McClaine)', '(menu producer)')
AND cn.country_code = '[se]'
AND it.info = 'adaption'
AND k.keyword IN ('weapons-research', 'saatchi-and-saatchi', 'spiked-hair', 'alma-tunnel', 'undersea-monster')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%o%' OR mi.info LIKE '%,%')
AND n.gender = 'm'
AND n.name LIKE '%h%'
AND rt.role = 'actor'
AND t.production_year > 1990;",80,/*+  IndexScan(k keyword_pkey) IndexScan(mk keyword_id_movie_keyword) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) IndexScan(it info_type_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexOnlyScan(an person_id_aka_name) IndexScan(chn char_name_pkey) NestLoop(k mk) NestLoop(k mk t) NestLoop(k mk t ci) HashJoin(k mk t ci rt) NestLoop(k mk t ci rt n) NestLoop(k mk t ci rt n mi) NestLoop(k mk t ci rt n mi it) NestLoop(k mk t ci rt n mi it mc) NestLoop(k mk t ci rt n mi it mc cn) NestLoop(k mk t ci rt n mi it mc cn an) NestLoop(k mk t ci rt n mi it mc cn an chn) Leading((((((((((((k mk) t) ci) rt) n) mi) it) mc) cn) an) chn)) */
"SELECT MIN(chn.name) AS voiced_char_name, MIN(n.name) AS voicing_actress_name, MIN(t.title) AS voiced_action_movie_jap_eng
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
   keyword AS k,
   movie_companies AS mc,
   movie_info AS mi,
   movie_keyword AS mk,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND t.id = mk.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mc.movie_id = mk.movie_id
AND mi.movie_id = ci.movie_id
AND mi.movie_id = mk.movie_id
AND ci.movie_id = mk.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND k.id = mk.keyword_id
AND ci.note IN ('(as Charles Tamburro)', '(as h.kraemmer)', '(as Rose Han)', '(as Leopold Nowak)', '(as Ashley Nelson)')
AND cn.country_code = '[br]'
AND it.info = 'trivia'
AND k.keyword IN ('weapons-research', 'ripped-earlobe', 'pro-surfer', 'eye-socket', 'forced-vomiting')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%W%' OR mi.info LIKE '%n%')
AND n.gender = 'm'
AND n.name LIKE '%h%'
AND rt.role = 'actor'
AND t.production_year > 1990;",80,/*+  IndexScan(k keyword_pkey) IndexScan(mk keyword_id_movie_keyword) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) IndexScan(it info_type_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexOnlyScan(an person_id_aka_name) IndexScan(chn char_name_pkey) NestLoop(k mk) NestLoop(k mk t) NestLoop(k mk t ci) HashJoin(k mk t ci rt) NestLoop(k mk t ci rt n) NestLoop(k mk t ci rt n mi) NestLoop(k mk t ci rt n mi it) NestLoop(k mk t ci rt n mi it mc) NestLoop(k mk t ci rt n mi it mc cn) NestLoop(k mk t ci rt n mi it mc cn an) NestLoop(k mk t ci rt n mi it mc cn an chn) Leading((((((((((((k mk) t) ci) rt) n) mi) it) mc) cn) an) chn)) */
"SELECT MIN(chn.name) AS voiced_char_name, MIN(n.name) AS voicing_actress_name, MIN(t.title) AS voiced_action_movie_jap_eng
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
   keyword AS k,
   movie_companies AS mc,
   movie_info AS mi,
   movie_keyword AS mk,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND t.id = mk.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mc.movie_id = mk.movie_id
AND mi.movie_id = ci.movie_id
AND mi.movie_id = mk.movie_id
AND ci.movie_id = mk.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND k.id = mk.keyword_id
AND ci.note IN ('(as Charles Tamburro)', '(as Eian)', '(as RenÃ© Gui)', '(Animal Tamer)', '(Nigerian Version)')
AND cn.country_code = '[us]'
AND it.info = 'taglines'
AND k.keyword IN ('android', 'sex-joke', 'defying-gravity', 'ravenna-italy', 'polar-ice-cap')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%T%' OR mi.info LIKE '%r%')
AND n.gender = 'm'
AND n.name LIKE '%T%'
AND rt.role = 'actor'
AND t.production_year > 1990;",80,/*+  IndexScan(k keyword_pkey) IndexScan(mk keyword_id_movie_keyword) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) IndexScan(it info_type_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexOnlyScan(an person_id_aka_name) IndexScan(chn char_name_pkey) NestLoop(k mk) NestLoop(k mk t) NestLoop(k mk t ci) HashJoin(k mk t ci rt) NestLoop(k mk t ci rt n) NestLoop(k mk t ci rt n mi) NestLoop(k mk t ci rt n mi it) NestLoop(k mk t ci rt n mi it mc) NestLoop(k mk t ci rt n mi it mc cn) NestLoop(k mk t ci rt n mi it mc cn an) NestLoop(k mk t ci rt n mi it mc cn an chn) Leading((((((((((((k mk) t) ci) rt) n) mi) it) mc) cn) an) chn)) */
"SELECT MIN(chn.name) AS voiced_char_name, MIN(n.name) AS voicing_actress_name, MIN(t.title) AS voiced_action_movie_jap_eng
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
   keyword AS k,
   movie_companies AS mc,
   movie_info AS mi,
   movie_keyword AS mk,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND t.id = mk.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mc.movie_id = mk.movie_id
AND mi.movie_id = ci.movie_id
AND mi.movie_id = mk.movie_id
AND ci.movie_id = mk.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND k.id = mk.keyword_id
AND ci.note IN ('(as Charles Tamburro)', '(as Maggi Yule)', '(as Ibnu Djamil)', '(as Kelly Horwich)', '(as Dalcourt)')
AND cn.country_code = '[gb]'
AND it.info = 'taglines'
AND k.keyword IN ('weapons-research', 'vertical-sports', 'standing-on-toilet', 'dragon-lady', 'judicial-error')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%n%' OR mi.info LIKE '%s%')
AND n.gender = 'm'
AND n.name LIKE '%.%'
AND rt.role = 'actor'
AND t.production_year > 1990;",80,/*+  IndexScan(k keyword_pkey) IndexScan(mk keyword_id_movie_keyword) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) IndexScan(it info_type_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexOnlyScan(an person_id_aka_name) IndexScan(chn char_name_pkey) NestLoop(k mk) NestLoop(k mk t) NestLoop(k mk t ci) HashJoin(k mk t ci rt) NestLoop(k mk t ci rt n) NestLoop(k mk t ci rt n mi) NestLoop(k mk t ci rt n mi it) NestLoop(k mk t ci rt n mi it mc) NestLoop(k mk t ci rt n mi it mc cn) NestLoop(k mk t ci rt n mi it mc cn an) NestLoop(k mk t ci rt n mi it mc cn an chn) Leading((((((((((((k mk) t) ci) rt) n) mi) it) mc) cn) an) chn)) */
"SELECT MIN(chn.name) AS voiced_char_name, MIN(n.name) AS voicing_actress_name, MIN(t.title) AS voiced_action_movie_jap_eng
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
   keyword AS k,
   movie_companies AS mc,
   movie_info AS mi,
   movie_keyword AS mk,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND t.id = mk.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mc.movie_id = mk.movie_id
AND mi.movie_id = ci.movie_id
AND mi.movie_id = mk.movie_id
AND ci.movie_id = mk.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND k.id = mk.keyword_id
AND ci.note IN ('(as Charles Tamburro)', '(as Villen Novak)', '(Foreigner)', '(as Syd van Rood)', '(as Zoltan Szakal)')
AND cn.country_code = '[se]'
AND it.info = 'production process protocol'
AND k.keyword IN ('battle', 'muslim-brotherhood', 'damp-child', 'trapeze', 'sicilian-parliament')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%a%' OR mi.info LIKE '%)%')
AND n.gender = 'm'
AND n.name LIKE '%m%'
AND rt.role = 'actor'
AND t.production_year > 1990;",80,/*+  IndexScan(k keyword_pkey) IndexScan(mk keyword_id_movie_keyword) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) IndexScan(it info_type_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexOnlyScan(an person_id_aka_name) IndexScan(chn char_name_pkey) NestLoop(k mk) NestLoop(k mk t) NestLoop(k mk t ci) HashJoin(k mk t ci rt) NestLoop(k mk t ci rt n) NestLoop(k mk t ci rt n mi) NestLoop(k mk t ci rt n mi it) NestLoop(k mk t ci rt n mi it mc) NestLoop(k mk t ci rt n mi it mc cn) NestLoop(k mk t ci rt n mi it mc cn an) NestLoop(k mk t ci rt n mi it mc cn an chn) Leading((((((((((((k mk) t) ci) rt) n) mi) it) mc) cn) an) chn)) */
"SELECT MIN(chn.name) AS voiced_char_name, MIN(n.name) AS voicing_actress_name, MIN(t.title) AS voiced_action_movie_jap_eng
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
   keyword AS k,
   movie_companies AS mc,
   movie_info AS mi,
   movie_keyword AS mk,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND t.id = mk.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mc.movie_id = mk.movie_id
AND mi.movie_id = ci.movie_id
AND mi.movie_id = mk.movie_id
AND ci.movie_id = mk.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND k.id = mk.keyword_id
AND ci.note IN ('(as Charles Tamburro)', '(as Bev Wowchuk)', '(as Julien Hussey)', '(femme)', '(as Reuben Rose)')
AND cn.country_code = '[fr]'
AND it.info = 'other literature'
AND k.keyword IN ('android', 'icefall', 'sperbowl-xli', 'anaphrodisiac', 'golan-heights')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%i%' OR mi.info LIKE '%i%')
AND n.gender = 'm'
AND n.name LIKE '%C%'
AND rt.role = 'actor'
AND t.production_year > 1990;",80,/*+  IndexScan(k keyword_pkey) IndexScan(mk keyword_id_movie_keyword) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) IndexScan(it info_type_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexOnlyScan(an person_id_aka_name) IndexScan(chn char_name_pkey) NestLoop(k mk) NestLoop(k mk t) NestLoop(k mk t ci) HashJoin(k mk t ci rt) NestLoop(k mk t ci rt n) NestLoop(k mk t ci rt n mi) NestLoop(k mk t ci rt n mi it) NestLoop(k mk t ci rt n mi it mc) NestLoop(k mk t ci rt n mi it mc cn) NestLoop(k mk t ci rt n mi it mc cn an) NestLoop(k mk t ci rt n mi it mc cn an chn) Leading((((((((((((k mk) t) ci) rt) n) mi) it) mc) cn) an) chn)) */
