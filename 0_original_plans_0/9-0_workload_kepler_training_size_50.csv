query,plan_id,plan_content
"SELECT MIN(an.name) AS alternative_name, MIN(chn.name) AS character_name, MIN(t.title) AS movie
FROM aka_name AS an,
 char_name AS chn,
 cast_info AS ci,
 company_name AS cn,
 movie_companies AS mc,
 name AS n,
 role_type AS rt,
 title AS t
WHERE ci.movie_id = t.id
 AND t.id = mc.movie_id
 AND ci.movie_id = mc.movie_id
 AND mc.company_id = cn.id
 AND ci.role_id = rt.id
 AND n.id = ci.person_id
 AND chn.id = ci.person_role_id
 AND an.person_id = n.id
 AND an.person_id = ci.person_id
AND ci.note IN ('(uncredited)', '(as Tieh Han)', '(camera-ship pilot)', '(as Rainer Uhlig)', '(Poison)')
AND cn.country_code = '[nl]'
AND mc.note IS NOT NULL 
AND (mc.note LIKE '%V%' OR mc.note LIKE '%(%')
AND n.gender = 'm'
AND n.name LIKE '%p%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1945 AND 2010;",294,/*+  SeqScan(t) SeqScan(mc) SeqScan(cn) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(an person_id_aka_name) IndexScan(chn char_name_pkey) HashJoin(mc cn) HashJoin(t mc cn) NestLoop(t mc cn ci) HashJoin(t mc cn ci rt) NestLoop(t mc cn ci rt n) NestLoop(t mc cn ci rt n an) NestLoop(t mc cn ci rt n an chn) Leading(((((((t (mc cn)) ci) rt) n) an) chn)) */
"SELECT MIN(an.name) AS alternative_name, MIN(chn.name) AS character_name, MIN(t.title) AS movie
FROM aka_name AS an,
 char_name AS chn,
 cast_info AS ci,
 company_name AS cn,
 movie_companies AS mc,
 name AS n,
 role_type AS rt,
 title AS t
WHERE ci.movie_id = t.id
 AND t.id = mc.movie_id
 AND ci.movie_id = mc.movie_id
 AND mc.company_id = cn.id
 AND ci.role_id = rt.id
 AND n.id = ci.person_id
 AND chn.id = ci.person_role_id
 AND an.person_id = n.id
 AND an.person_id = ci.person_id
AND ci.note IN ('(voice)', '(as Sue Peahl)', '(as Diane Moseley)', '(as Beam SouarÃ©)', '(as Nico Abad)')
AND cn.country_code = '[us]'
AND mc.note IS NOT NULL 
AND (mc.note LIKE '%)%' OR mc.note LIKE '%7%')
AND n.gender = 'm'
AND n.name LIKE '%,%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1980 AND 2020;",5,/*+  SeqScan(ci) SeqScan(an) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexScan(t title_pkey) IndexScan(chn char_name_pkey) HashJoin(ci an) HashJoin(ci an rt) NestLoop(ci an rt n) NestLoop(ci an rt n mc) NestLoop(ci an rt n mc cn) NestLoop(ci an rt n mc cn t) NestLoop(ci an rt n mc cn t chn) Leading((((((((ci an) rt) n) mc) cn) t) chn)) */
"SELECT MIN(an.name) AS alternative_name, MIN(chn.name) AS character_name, MIN(t.title) AS movie
FROM aka_name AS an,
 char_name AS chn,
 cast_info AS ci,
 company_name AS cn,
 movie_companies AS mc,
 name AS n,
 role_type AS rt,
 title AS t
WHERE ci.movie_id = t.id
 AND t.id = mc.movie_id
 AND ci.movie_id = mc.movie_id
 AND mc.company_id = cn.id
 AND ci.role_id = rt.id
 AND n.id = ci.person_id
 AND chn.id = ci.person_role_id
 AND an.person_id = n.id
 AND an.person_id = ci.person_id
AND ci.note IN ('(as Nigel Humphries)', '(as John Tenorio)', '(as Henry Gordon)', '(segment Authority)', '(the Weasel)')
AND cn.country_code = '[us]'
AND mc.note IS NOT NULL 
AND (mc.note LIKE '%)%' OR mc.note LIKE '%d%')
AND n.gender = 'm'
AND n.name LIKE '%i%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1973 AND 2002;",294,/*+  SeqScan(t) SeqScan(mc) SeqScan(cn) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(an person_id_aka_name) IndexScan(chn char_name_pkey) HashJoin(mc cn) HashJoin(t mc cn) NestLoop(t mc cn ci) HashJoin(t mc cn ci rt) NestLoop(t mc cn ci rt n) NestLoop(t mc cn ci rt n an) NestLoop(t mc cn ci rt n an chn) Leading(((((((t (mc cn)) ci) rt) n) an) chn)) */
"SELECT MIN(an.name) AS alternative_name, MIN(chn.name) AS character_name, MIN(t.title) AS movie
FROM aka_name AS an,
 char_name AS chn,
 cast_info AS ci,
 company_name AS cn,
 movie_companies AS mc,
 name AS n,
 role_type AS rt,
 title AS t
WHERE ci.movie_id = t.id
 AND t.id = mc.movie_id
 AND ci.movie_id = mc.movie_id
 AND mc.company_id = cn.id
 AND ci.role_id = rt.id
 AND n.id = ci.person_id
 AND chn.id = ci.person_role_id
 AND an.person_id = n.id
 AND an.person_id = ci.person_id
AND ci.note IN ('(as Denis Bracini)', '(as Rita Smyth)', '(Conlon''s henchman)', '(as David G. March)', '(as Steven Hawksby)')
AND cn.country_code = '[lv]'
AND mc.note IS NOT NULL 
AND (mc.note LIKE '%d%' OR mc.note LIKE '%0%')
AND n.gender = 'm'
AND n.name LIKE '%B%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 2009 AND 2019;",5,/*+  SeqScan(ci) SeqScan(an) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexScan(t title_pkey) IndexScan(chn char_name_pkey) HashJoin(ci an) HashJoin(ci an rt) NestLoop(ci an rt n) NestLoop(ci an rt n mc) NestLoop(ci an rt n mc cn) NestLoop(ci an rt n mc cn t) NestLoop(ci an rt n mc cn t chn) Leading((((((((ci an) rt) n) mc) cn) t) chn)) */
"SELECT MIN(an.name) AS alternative_name, MIN(chn.name) AS character_name, MIN(t.title) AS movie
FROM aka_name AS an,
 char_name AS chn,
 cast_info AS ci,
 company_name AS cn,
 movie_companies AS mc,
 name AS n,
 role_type AS rt,
 title AS t
WHERE ci.movie_id = t.id
 AND t.id = mc.movie_id
 AND ci.movie_id = mc.movie_id
 AND mc.company_id = cn.id
 AND ci.role_id = rt.id
 AND n.id = ci.person_id
 AND chn.id = ci.person_role_id
 AND an.person_id = n.id
 AND an.person_id = ci.person_id
AND ci.note IN ('(as Bill Daydodge)', '(as Gen Mitamura)', '(as Lao Yuk-Ting)', '(as Joseph Ison)', '(as Katie McClain)')
AND cn.country_code = '[de]'
AND mc.note IS NOT NULL 
AND (mc.note LIKE '%9%' OR mc.note LIKE '%e%')
AND n.gender = 'm'
AND n.name LIKE '%B%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1948 AND 2012;",76,/*+  SeqScan(mc) SeqScan(cn) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) IndexScan(n name_pkey) IndexScan(an person_id_aka_name) SeqScan(rt) IndexScan(chn char_name_pkey) HashJoin(mc cn) NestLoop(mc cn t) NestLoop(mc cn t ci) NestLoop(mc cn t ci n) NestLoop(mc cn t ci n an) HashJoin(mc cn t ci n an rt) NestLoop(mc cn t ci n an rt chn) Leading((((((((mc cn) t) ci) n) an) rt) chn)) */
"SELECT MIN(an.name) AS alternative_name, MIN(chn.name) AS character_name, MIN(t.title) AS movie
FROM aka_name AS an,
 char_name AS chn,
 cast_info AS ci,
 company_name AS cn,
 movie_companies AS mc,
 name AS n,
 role_type AS rt,
 title AS t
WHERE ci.movie_id = t.id
 AND t.id = mc.movie_id
 AND ci.movie_id = mc.movie_id
 AND mc.company_id = cn.id
 AND ci.role_id = rt.id
 AND n.id = ci.person_id
 AND chn.id = ci.person_role_id
 AND an.person_id = n.id
 AND an.person_id = ci.person_id
AND ci.note IN ('(archive footage) (uncredited)', '(novel ""A Esmorga"")', '(novel Das Kind)', '(as Richard Bollo)', '(as Tim Wakefield)')
AND cn.country_code = '[mx]'
AND mc.note IS NOT NULL 
AND (mc.note LIKE '%)%' OR mc.note LIKE '%)%')
AND n.gender = 'm'
AND n.name LIKE '%n%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1894 AND 2006;",294,/*+  SeqScan(t) SeqScan(mc) SeqScan(cn) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(an person_id_aka_name) IndexScan(chn char_name_pkey) HashJoin(mc cn) HashJoin(t mc cn) NestLoop(t mc cn ci) HashJoin(t mc cn ci rt) NestLoop(t mc cn ci rt n) NestLoop(t mc cn ci rt n an) NestLoop(t mc cn ci rt n an chn) Leading(((((((t (mc cn)) ci) rt) n) an) chn)) */
"SELECT MIN(an.name) AS alternative_name, MIN(chn.name) AS character_name, MIN(t.title) AS movie
FROM aka_name AS an,
 char_name AS chn,
 cast_info AS ci,
 company_name AS cn,
 movie_companies AS mc,
 name AS n,
 role_type AS rt,
 title AS t
WHERE ci.movie_id = t.id
 AND t.id = mc.movie_id
 AND ci.movie_id = mc.movie_id
 AND mc.company_id = cn.id
 AND ci.role_id = rt.id
 AND n.id = ci.person_id
 AND chn.id = ci.person_role_id
 AND an.person_id = n.id
 AND an.person_id = ci.person_id
AND ci.note IN ('(as Arthur Robinson)', '(as Ken Stevens)', '(as Tom Dwhite)', '(as Clayton Landy)', '(clown blanc)')
AND cn.country_code = '[us]'
AND mc.note IS NOT NULL 
AND (mc.note LIKE '%r%' OR mc.note LIKE '%y%')
AND n.gender = 'm'
AND n.name LIKE '%A%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 2009 AND 2016;",5,/*+  SeqScan(ci) SeqScan(an) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexScan(t title_pkey) IndexScan(chn char_name_pkey) HashJoin(ci an) HashJoin(ci an rt) NestLoop(ci an rt n) NestLoop(ci an rt n mc) NestLoop(ci an rt n mc cn) NestLoop(ci an rt n mc cn t) NestLoop(ci an rt n mc cn t chn) Leading((((((((ci an) rt) n) mc) cn) t) chn)) */
"SELECT MIN(an.name) AS alternative_name, MIN(chn.name) AS character_name, MIN(t.title) AS movie
FROM aka_name AS an,
 char_name AS chn,
 cast_info AS ci,
 company_name AS cn,
 movie_companies AS mc,
 name AS n,
 role_type AS rt,
 title AS t
WHERE ci.movie_id = t.id
 AND t.id = mc.movie_id
 AND ci.movie_id = mc.movie_id
 AND mc.company_id = cn.id
 AND ci.role_id = rt.id
 AND n.id = ci.person_id
 AND chn.id = ci.person_role_id
 AND an.person_id = n.id
 AND an.person_id = ci.person_id
AND ci.note IN ('(uncredited)', '(as A. Brooks)', '(as Sindi Rome)', '(as JB Meijers)', '(as Bly Straube)')
AND cn.country_code = '[us]'
AND mc.note IS NOT NULL 
AND (mc.note LIKE '%2%' OR mc.note LIKE '%0%')
AND n.gender = 'm'
AND n.name LIKE '%o%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1949 AND 2017;",294,/*+  SeqScan(t) SeqScan(mc) SeqScan(cn) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(an person_id_aka_name) IndexScan(chn char_name_pkey) HashJoin(mc cn) HashJoin(t mc cn) NestLoop(t mc cn ci) HashJoin(t mc cn ci rt) NestLoop(t mc cn ci rt n) NestLoop(t mc cn ci rt n an) NestLoop(t mc cn ci rt n an chn) Leading(((((((t (mc cn)) ci) rt) n) an) chn)) */
"SELECT MIN(an.name) AS alternative_name, MIN(chn.name) AS character_name, MIN(t.title) AS movie
FROM aka_name AS an,
 char_name AS chn,
 cast_info AS ci,
 company_name AS cn,
 movie_companies AS mc,
 name AS n,
 role_type AS rt,
 title AS t
WHERE ci.movie_id = t.id
 AND t.id = mc.movie_id
 AND ci.movie_id = mc.movie_id
 AND mc.company_id = cn.id
 AND ci.role_id = rt.id
 AND n.id = ci.person_id
 AND chn.id = ci.person_role_id
 AND an.person_id = n.id
 AND an.person_id = ci.person_id
AND ci.note IN ('(uncredited)', '(as Pam)', '(as Kevin Graves)', '(as Allen Marlowe)', '(as Carrie Wallace)')
AND cn.country_code = '[us]'
AND mc.note IS NOT NULL 
AND (mc.note LIKE '%d%' OR mc.note LIKE '%w%')
AND n.gender = 'm'
AND n.name LIKE '%R%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1904 AND 2012;",294,/*+  SeqScan(t) SeqScan(mc) SeqScan(cn) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(an person_id_aka_name) IndexScan(chn char_name_pkey) HashJoin(mc cn) HashJoin(t mc cn) NestLoop(t mc cn ci) HashJoin(t mc cn ci rt) NestLoop(t mc cn ci rt n) NestLoop(t mc cn ci rt n an) NestLoop(t mc cn ci rt n an chn) Leading(((((((t (mc cn)) ci) rt) n) an) chn)) */
"SELECT MIN(an.name) AS alternative_name, MIN(chn.name) AS character_name, MIN(t.title) AS movie
FROM aka_name AS an,
 char_name AS chn,
 cast_info AS ci,
 company_name AS cn,
 movie_companies AS mc,
 name AS n,
 role_type AS rt,
 title AS t
WHERE ci.movie_id = t.id
 AND t.id = mc.movie_id
 AND ci.movie_id = mc.movie_id
 AND mc.company_id = cn.id
 AND ci.role_id = rt.id
 AND n.id = ci.person_id
 AND chn.id = ci.person_role_id
 AND an.person_id = n.id
 AND an.person_id = ci.person_id
AND ci.note IN ('(uncredited)', '(as M. Prando)', '(Kristi Myst)', '(as Bob W. Davis)', '(as Dr. Doug Weir)')
AND cn.country_code = '[us]'
AND mc.note IS NOT NULL 
AND (mc.note LIKE '%2%' OR mc.note LIKE '%d%')
AND n.gender = 'm'
AND n.name LIKE '%R%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1945 AND 2013;",76,/*+  SeqScan(mc) SeqScan(cn) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) IndexScan(n name_pkey) IndexScan(an person_id_aka_name) SeqScan(rt) IndexScan(chn char_name_pkey) HashJoin(mc cn) NestLoop(mc cn t) NestLoop(mc cn t ci) NestLoop(mc cn t ci n) NestLoop(mc cn t ci n an) HashJoin(mc cn t ci n an rt) NestLoop(mc cn t ci n an rt chn) Leading((((((((mc cn) t) ci) n) an) rt) chn)) */
"SELECT MIN(an.name) AS alternative_name, MIN(chn.name) AS character_name, MIN(t.title) AS movie
FROM aka_name AS an,
 char_name AS chn,
 cast_info AS ci,
 company_name AS cn,
 movie_companies AS mc,
 name AS n,
 role_type AS rt,
 title AS t
WHERE ci.movie_id = t.id
 AND t.id = mc.movie_id
 AND ci.movie_id = mc.movie_id
 AND mc.company_id = cn.id
 AND ci.role_id = rt.id
 AND n.id = ci.person_id
 AND chn.id = ci.person_role_id
 AND an.person_id = n.id
 AND an.person_id = ci.person_id
AND ci.note IN ('(as The Rodik Twins)', '(''Nana'')', '(as Jim)', '(as Maggie Stuart)', '(prize team 2)')
AND cn.country_code = '[us]'
AND mc.note IS NOT NULL 
AND (mc.note LIKE '%)%' OR mc.note LIKE '%(%')
AND n.gender = 'f'
AND n.name LIKE '%,%'
AND rt.role = 'actress'
AND t.production_year BETWEEN 1912 AND 1971;",5,/*+  SeqScan(ci) SeqScan(an) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexScan(t title_pkey) IndexScan(chn char_name_pkey) HashJoin(ci an) HashJoin(ci an rt) NestLoop(ci an rt n) NestLoop(ci an rt n mc) NestLoop(ci an rt n mc cn) NestLoop(ci an rt n mc cn t) NestLoop(ci an rt n mc cn t chn) Leading((((((((ci an) rt) n) mc) cn) t) chn)) */
"SELECT MIN(an.name) AS alternative_name, MIN(chn.name) AS character_name, MIN(t.title) AS movie
FROM aka_name AS an,
 char_name AS chn,
 cast_info AS ci,
 company_name AS cn,
 movie_companies AS mc,
 name AS n,
 role_type AS rt,
 title AS t
WHERE ci.movie_id = t.id
 AND t.id = mc.movie_id
 AND ci.movie_id = mc.movie_id
 AND mc.company_id = cn.id
 AND ci.role_id = rt.id
 AND n.id = ci.person_id
 AND chn.id = ci.person_role_id
 AND an.person_id = n.id
 AND an.person_id = ci.person_id
AND ci.note IN ('(uncredited)', '(pilot: P-51)', '(as Zhou Bo)', '(as Layla Sheyir)', '(as Richard Tufeld)')
AND cn.country_code = '[us]'
AND mc.note IS NOT NULL 
AND (mc.note LIKE '%)%' OR mc.note LIKE '%)%')
AND n.gender = 'f'
AND n.name LIKE '%b%'
AND rt.role = 'actress'
AND t.production_year BETWEEN 1901 AND 1965;",294,/*+  SeqScan(t) SeqScan(mc) SeqScan(cn) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(an person_id_aka_name) IndexScan(chn char_name_pkey) HashJoin(mc cn) HashJoin(t mc cn) NestLoop(t mc cn ci) HashJoin(t mc cn ci rt) NestLoop(t mc cn ci rt n) NestLoop(t mc cn ci rt n an) NestLoop(t mc cn ci rt n an chn) Leading(((((((t (mc cn)) ci) rt) n) an) chn)) */
"SELECT MIN(an.name) AS alternative_name, MIN(chn.name) AS character_name, MIN(t.title) AS movie
FROM aka_name AS an,
 char_name AS chn,
 cast_info AS ci,
 company_name AS cn,
 movie_companies AS mc,
 name AS n,
 role_type AS rt,
 title AS t
WHERE ci.movie_id = t.id
 AND t.id = mc.movie_id
 AND ci.movie_id = mc.movie_id
 AND mc.company_id = cn.id
 AND ci.role_id = rt.id
 AND n.id = ci.person_id
 AND chn.id = ci.person_role_id
 AND an.person_id = n.id
 AND an.person_id = ci.person_id
AND ci.note IN ('(as Rommy)', '(as Keiji Kosonoy)', '(as Toxie)', '(as Ellis)', '(as Hans Lucas)')
AND cn.country_code = '[de]'
AND mc.note IS NOT NULL 
AND (mc.note LIKE '%?%' OR mc.note LIKE '%?%')
AND n.gender = 'f'
AND n.name LIKE '%R%'
AND rt.role = 'actress'
AND t.production_year BETWEEN 1971 AND 1982;",5,/*+  SeqScan(ci) SeqScan(an) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexScan(t title_pkey) IndexScan(chn char_name_pkey) HashJoin(ci an) HashJoin(ci an rt) NestLoop(ci an rt n) NestLoop(ci an rt n mc) NestLoop(ci an rt n mc cn) NestLoop(ci an rt n mc cn t) NestLoop(ci an rt n mc cn t chn) Leading((((((((ci an) rt) n) mc) cn) t) chn)) */
"SELECT MIN(an.name) AS alternative_name, MIN(chn.name) AS character_name, MIN(t.title) AS movie
FROM aka_name AS an,
 char_name AS chn,
 cast_info AS ci,
 company_name AS cn,
 movie_companies AS mc,
 name AS n,
 role_type AS rt,
 title AS t
WHERE ci.movie_id = t.id
 AND t.id = mc.movie_id
 AND ci.movie_id = mc.movie_id
 AND mc.company_id = cn.id
 AND ci.role_id = rt.id
 AND n.id = ci.person_id
 AND chn.id = ci.person_role_id
 AND an.person_id = n.id
 AND an.person_id = ci.person_id
AND ci.note IN ('(uncredited)', '(as AndrÃ© Gower)', '(as Phil Battley)', '(as Merrit Yonka)', '(as Robert Boatman)')
AND cn.country_code = '[gb]'
AND mc.note IS NOT NULL 
AND (mc.note LIKE '%)%' OR mc.note LIKE '%)%')
AND n.gender = 'm'
AND n.name LIKE '%e%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1921 AND 1953;",76,/*+  SeqScan(mc) SeqScan(cn) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) IndexScan(n name_pkey) IndexScan(an person_id_aka_name) SeqScan(rt) IndexScan(chn char_name_pkey) HashJoin(mc cn) NestLoop(mc cn t) NestLoop(mc cn t ci) NestLoop(mc cn t ci n) NestLoop(mc cn t ci n an) HashJoin(mc cn t ci n an rt) NestLoop(mc cn t ci n an rt chn) Leading((((((((mc cn) t) ci) n) an) rt) chn)) */
"SELECT MIN(an.name) AS alternative_name, MIN(chn.name) AS character_name, MIN(t.title) AS movie
FROM aka_name AS an,
 char_name AS chn,
 cast_info AS ci,
 company_name AS cn,
 movie_companies AS mc,
 name AS n,
 role_type AS rt,
 title AS t
WHERE ci.movie_id = t.id
 AND t.id = mc.movie_id
 AND ci.movie_id = mc.movie_id
 AND mc.company_id = cn.id
 AND ci.role_id = rt.id
 AND n.id = ci.person_id
 AND chn.id = ci.person_role_id
 AND an.person_id = n.id
 AND an.person_id = ci.person_id
AND ci.note IN ('(segment ""Yvan Attal"")', '(news consultant)', '(as Irving Lazar)', '(as Frank H. Clark)', '(as Cliff Stine)')
AND cn.country_code = '[us]'
AND mc.note IS NOT NULL 
AND (mc.note LIKE '%i%' OR mc.note LIKE '%a%')
AND n.gender = 'f'
AND n.name LIKE '%e%'
AND rt.role = 'actress'
AND t.production_year BETWEEN 1927 AND 2014;",5,/*+  SeqScan(ci) SeqScan(an) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexScan(t title_pkey) IndexScan(chn char_name_pkey) HashJoin(ci an) HashJoin(ci an rt) NestLoop(ci an rt n) NestLoop(ci an rt n mc) NestLoop(ci an rt n mc cn) NestLoop(ci an rt n mc cn t) NestLoop(ci an rt n mc cn t chn) Leading((((((((ci an) rt) n) mc) cn) t) chn)) */
"SELECT MIN(an.name) AS alternative_name, MIN(chn.name) AS character_name, MIN(t.title) AS movie
FROM aka_name AS an,
 char_name AS chn,
 cast_info AS ci,
 company_name AS cn,
 movie_companies AS mc,
 name AS n,
 role_type AS rt,
 title AS t
WHERE ci.movie_id = t.id
 AND t.id = mc.movie_id
 AND ci.movie_id = mc.movie_id
 AND mc.company_id = cn.id
 AND ci.role_id = rt.id
 AND n.id = ci.person_id
 AND chn.id = ci.person_role_id
 AND an.person_id = n.id
 AND an.person_id = ci.person_id
AND ci.note IN ('(uncredited)', '(tiger handler)', '(as Yura Zhukov)', '(as Alvaro Morte)', '(as Flavio Fabrini)')
AND cn.country_code = '[us]'
AND mc.note IS NOT NULL 
AND (mc.note LIKE '%(%' OR mc.note LIKE '%)%')
AND n.gender = 'm'
AND n.name LIKE '%A%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1894 AND 1947;",5,/*+  SeqScan(ci) SeqScan(an) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexScan(t title_pkey) IndexScan(chn char_name_pkey) HashJoin(ci an) HashJoin(ci an rt) NestLoop(ci an rt n) NestLoop(ci an rt n mc) NestLoop(ci an rt n mc cn) NestLoop(ci an rt n mc cn t) NestLoop(ci an rt n mc cn t chn) Leading((((((((ci an) rt) n) mc) cn) t) chn)) */
"SELECT MIN(an.name) AS alternative_name, MIN(chn.name) AS character_name, MIN(t.title) AS movie
FROM aka_name AS an,
 char_name AS chn,
 cast_info AS ci,
 company_name AS cn,
 movie_companies AS mc,
 name AS n,
 role_type AS rt,
 title AS t
WHERE ci.movie_id = t.id
 AND t.id = mc.movie_id
 AND ci.movie_id = mc.movie_id
 AND mc.company_id = cn.id
 AND ci.role_id = rt.id
 AND n.id = ci.person_id
 AND chn.id = ci.person_role_id
 AND an.person_id = n.id
 AND an.person_id = ci.person_id
AND ci.note IN ('(as Donald Dillaway)', '(as MC Green)', '(as Andy Yuncken)', '(as Debi Thompson)', '(Uncle)')
AND cn.country_code = '[us]'
AND mc.note IS NOT NULL 
AND (mc.note LIKE '%e%' OR mc.note LIKE '%i%')
AND n.gender = 'm'
AND n.name LIKE '%l%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1915 AND 1965;",5,/*+  SeqScan(ci) SeqScan(an) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexScan(t title_pkey) IndexScan(chn char_name_pkey) HashJoin(ci an) HashJoin(ci an rt) NestLoop(ci an rt n) NestLoop(ci an rt n mc) NestLoop(ci an rt n mc cn) NestLoop(ci an rt n mc cn t) NestLoop(ci an rt n mc cn t chn) Leading((((((((ci an) rt) n) mc) cn) t) chn)) */
"SELECT MIN(an.name) AS alternative_name, MIN(chn.name) AS character_name, MIN(t.title) AS movie
FROM aka_name AS an,
 char_name AS chn,
 cast_info AS ci,
 company_name AS cn,
 movie_companies AS mc,
 name AS n,
 role_type AS rt,
 title AS t
WHERE ci.movie_id = t.id
 AND t.id = mc.movie_id
 AND ci.movie_id = mc.movie_id
 AND mc.company_id = cn.id
 AND ci.role_id = rt.id
 AND n.id = ci.person_id
 AND chn.id = ci.person_role_id
 AND an.person_id = n.id
 AND an.person_id = ci.person_id
AND ci.note IN ('(as Evalina Fernandez)', '(editor: web)', '(loop group leader)', '(as Lulu Chang)', '(as J.E.N. Cooper)')
AND cn.country_code = '[fr]'
AND mc.note IS NOT NULL 
AND (mc.note LIKE '%c%' OR mc.note LIKE '%h%')
AND n.gender = 'f'
AND n.name LIKE '%e%'
AND rt.role = 'actress'
AND t.production_year BETWEEN 1952 AND 2019;",5,/*+  SeqScan(ci) SeqScan(an) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexScan(t title_pkey) IndexScan(chn char_name_pkey) HashJoin(ci an) HashJoin(ci an rt) NestLoop(ci an rt n) NestLoop(ci an rt n mc) NestLoop(ci an rt n mc cn) NestLoop(ci an rt n mc cn t) NestLoop(ci an rt n mc cn t chn) Leading((((((((ci an) rt) n) mc) cn) t) chn)) */
"SELECT MIN(an.name) AS alternative_name, MIN(chn.name) AS character_name, MIN(t.title) AS movie
FROM aka_name AS an,
 char_name AS chn,
 cast_info AS ci,
 company_name AS cn,
 movie_companies AS mc,
 name AS n,
 role_type AS rt,
 title AS t
WHERE ci.movie_id = t.id
 AND t.id = mc.movie_id
 AND ci.movie_id = mc.movie_id
 AND mc.company_id = cn.id
 AND ci.role_id = rt.id
 AND n.id = ci.person_id
 AND chn.id = ci.person_role_id
 AND an.person_id = n.id
 AND an.person_id = ci.person_id
AND ci.note IN ('(uncredited)', '(as Oliver Skene)', '(Amit & Shankar)', '(as J. Potocki)', '(as Black Shadow)')
AND cn.country_code = '[nl]'
AND mc.note IS NOT NULL 
AND (mc.note LIKE '%a%' OR mc.note LIKE '%l%')
AND n.gender = 'm'
AND n.name LIKE '%y%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1931 AND 2017;",5,/*+  SeqScan(ci) SeqScan(an) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexScan(t title_pkey) IndexScan(chn char_name_pkey) HashJoin(ci an) HashJoin(ci an rt) NestLoop(ci an rt n) NestLoop(ci an rt n mc) NestLoop(ci an rt n mc cn) NestLoop(ci an rt n mc cn t) NestLoop(ci an rt n mc cn t chn) Leading((((((((ci an) rt) n) mc) cn) t) chn)) */
"SELECT MIN(an.name) AS alternative_name, MIN(chn.name) AS character_name, MIN(t.title) AS movie
FROM aka_name AS an,
 char_name AS chn,
 cast_info AS ci,
 company_name AS cn,
 movie_companies AS mc,
 name AS n,
 role_type AS rt,
 title AS t
WHERE ci.movie_id = t.id
 AND t.id = mc.movie_id
 AND ci.movie_id = mc.movie_id
 AND mc.company_id = cn.id
 AND ci.role_id = rt.id
 AND n.id = ci.person_id
 AND chn.id = ci.person_role_id
 AND an.person_id = n.id
 AND an.person_id = ci.person_id
AND ci.note IN ('(as Anasa Briggs-Graves)', '(as Harold Wilson)', '(producer: USSR)', '(as Mariah Kane)', '(as Jay Sanders)')
AND cn.country_code = '[us]'
AND mc.note IS NOT NULL 
AND (mc.note LIKE '%U%' OR mc.note LIKE '%(%')
AND n.gender = 'f'
AND n.name LIKE '%e%'
AND rt.role = 'actress'
AND t.production_year BETWEEN 1953 AND 2003;",5,/*+  SeqScan(ci) SeqScan(an) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexScan(t title_pkey) IndexScan(chn char_name_pkey) HashJoin(ci an) HashJoin(ci an rt) NestLoop(ci an rt n) NestLoop(ci an rt n mc) NestLoop(ci an rt n mc cn) NestLoop(ci an rt n mc cn t) NestLoop(ci an rt n mc cn t chn) Leading((((((((ci an) rt) n) mc) cn) t) chn)) */
"SELECT MIN(an.name) AS alternative_name, MIN(chn.name) AS character_name, MIN(t.title) AS movie
FROM aka_name AS an,
 char_name AS chn,
 cast_info AS ci,
 company_name AS cn,
 movie_companies AS mc,
 name AS n,
 role_type AS rt,
 title AS t
WHERE ci.movie_id = t.id
 AND t.id = mc.movie_id
 AND ci.movie_id = mc.movie_id
 AND mc.company_id = cn.id
 AND ci.role_id = rt.id
 AND n.id = ci.person_id
 AND chn.id = ci.person_role_id
 AND an.person_id = n.id
 AND an.person_id = ci.person_id
AND ci.note IN ('(as Ben R. Scott)', '(as Jazella)', '(as Ãngel HÃ©ctor)', '(as Regan Poole)', '(as Stefan Preis)')
AND cn.country_code = '[fi]'
AND mc.note IS NOT NULL 
AND (mc.note LIKE '%)%' OR mc.note LIKE '%)%')
AND n.gender = 'm'
AND n.name LIKE '%,%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1952 AND 2020;",294,/*+  SeqScan(t) SeqScan(mc) SeqScan(cn) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(an person_id_aka_name) IndexScan(chn char_name_pkey) HashJoin(mc cn) HashJoin(t mc cn) NestLoop(t mc cn ci) HashJoin(t mc cn ci rt) NestLoop(t mc cn ci rt n) NestLoop(t mc cn ci rt n an) NestLoop(t mc cn ci rt n an chn) Leading(((((((t (mc cn)) ci) rt) n) an) chn)) */
"SELECT MIN(an.name) AS alternative_name, MIN(chn.name) AS character_name, MIN(t.title) AS movie
FROM aka_name AS an,
 char_name AS chn,
 cast_info AS ci,
 company_name AS cn,
 movie_companies AS mc,
 name AS n,
 role_type AS rt,
 title AS t
WHERE ci.movie_id = t.id
 AND t.id = mc.movie_id
 AND ci.movie_id = mc.movie_id
 AND mc.company_id = cn.id
 AND ci.role_id = rt.id
 AND n.id = ci.person_id
 AND chn.id = ci.person_role_id
 AND an.person_id = n.id
 AND an.person_id = ci.person_id
AND ci.note IN ('(voice)', '(as Ken Loechner)', '(as Art of Mouth)', '(as Wenzong Gu)', '(as Hilding Rohlin)')
AND cn.country_code = '[gb]'
AND mc.note IS NOT NULL 
AND (mc.note LIKE '%(%' OR mc.note LIKE '%9%')
AND n.gender = 'm'
AND n.name LIKE '%o%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1951 AND 2007;",5,/*+  SeqScan(ci) SeqScan(an) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexScan(t title_pkey) IndexScan(chn char_name_pkey) HashJoin(ci an) HashJoin(ci an rt) NestLoop(ci an rt n) NestLoop(ci an rt n mc) NestLoop(ci an rt n mc cn) NestLoop(ci an rt n mc cn t) NestLoop(ci an rt n mc cn t chn) Leading((((((((ci an) rt) n) mc) cn) t) chn)) */
"SELECT MIN(an.name) AS alternative_name, MIN(chn.name) AS character_name, MIN(t.title) AS movie
FROM aka_name AS an,
 char_name AS chn,
 cast_info AS ci,
 company_name AS cn,
 movie_companies AS mc,
 name AS n,
 role_type AS rt,
 title AS t
WHERE ci.movie_id = t.id
 AND t.id = mc.movie_id
 AND ci.movie_id = mc.movie_id
 AND mc.company_id = cn.id
 AND ci.role_id = rt.id
 AND n.id = ci.person_id
 AND chn.id = ci.person_role_id
 AND an.person_id = n.id
 AND an.person_id = ci.person_id
AND ci.note IN ('(uncredited)', '(publicity artist)', '(as Gail Griffen)', '(as Dunya Kahayame)', '(hummer wrangler)')
AND cn.country_code = '[es]'
AND mc.note IS NOT NULL 
AND (mc.note LIKE '%t%' OR mc.note LIKE '%9%')
AND n.gender = 'm'
AND n.name LIKE '%t%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1926 AND 2014;",5,/*+  SeqScan(ci) SeqScan(an) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexScan(t title_pkey) IndexScan(chn char_name_pkey) HashJoin(ci an) HashJoin(ci an rt) NestLoop(ci an rt n) NestLoop(ci an rt n mc) NestLoop(ci an rt n mc cn) NestLoop(ci an rt n mc cn t) NestLoop(ci an rt n mc cn t chn) Leading((((((((ci an) rt) n) mc) cn) t) chn)) */
"SELECT MIN(an.name) AS alternative_name, MIN(chn.name) AS character_name, MIN(t.title) AS movie
FROM aka_name AS an,
 char_name AS chn,
 cast_info AS ci,
 company_name AS cn,
 movie_companies AS mc,
 name AS n,
 role_type AS rt,
 title AS t
WHERE ci.movie_id = t.id
 AND t.id = mc.movie_id
 AND ci.movie_id = mc.movie_id
 AND mc.company_id = cn.id
 AND ci.role_id = rt.id
 AND n.id = ci.person_id
 AND chn.id = ci.person_role_id
 AND an.person_id = n.id
 AND an.person_id = ci.person_id
AND ci.note IN ('(uncredited)', '(as John Coburn)', '(age 14-17)', '(as Danis)', '(as V. Valentinova)')
AND cn.country_code = '[fi]'
AND mc.note IS NOT NULL 
AND (mc.note LIKE '%7%' OR mc.note LIKE '%d%')
AND n.gender = 'f'
AND n.name LIKE '%e%'
AND rt.role = 'actress'
AND t.production_year BETWEEN 1942 AND 2017;",5,/*+  SeqScan(ci) SeqScan(an) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexScan(t title_pkey) IndexScan(chn char_name_pkey) HashJoin(ci an) HashJoin(ci an rt) NestLoop(ci an rt n) NestLoop(ci an rt n mc) NestLoop(ci an rt n mc cn) NestLoop(ci an rt n mc cn t) NestLoop(ci an rt n mc cn t chn) Leading((((((((ci an) rt) n) mc) cn) t) chn)) */
"SELECT MIN(an.name) AS alternative_name, MIN(chn.name) AS character_name, MIN(t.title) AS movie
FROM aka_name AS an,
 char_name AS chn,
 cast_info AS ci,
 company_name AS cn,
 movie_companies AS mc,
 name AS n,
 role_type AS rt,
 title AS t
WHERE ci.movie_id = t.id
 AND t.id = mc.movie_id
 AND ci.movie_id = mc.movie_id
 AND mc.company_id = cn.id
 AND ci.role_id = rt.id
 AND n.id = ci.person_id
 AND chn.id = ci.person_role_id
 AND an.person_id = n.id
 AND an.person_id = ci.person_id
AND ci.note IN ('(archive footage)', '(episodes 4, 6)', '(as Sir Derek Ezra)', '(as Poty)', '(as Marie Quillen)')
AND cn.country_code = '[dk]'
AND mc.note IS NOT NULL 
AND (mc.note LIKE '%l%' OR mc.note LIKE '%)%')
AND n.gender = 'm'
AND n.name LIKE '%l%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1909 AND 1954;",294,/*+  SeqScan(t) SeqScan(mc) SeqScan(cn) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(an person_id_aka_name) IndexScan(chn char_name_pkey) HashJoin(mc cn) HashJoin(t mc cn) NestLoop(t mc cn ci) HashJoin(t mc cn ci rt) NestLoop(t mc cn ci rt n) NestLoop(t mc cn ci rt n an) NestLoop(t mc cn ci rt n an chn) Leading(((((((t (mc cn)) ci) rt) n) an) chn)) */
"SELECT MIN(an.name) AS alternative_name, MIN(chn.name) AS character_name, MIN(t.title) AS movie
FROM aka_name AS an,
 char_name AS chn,
 cast_info AS ci,
 company_name AS cn,
 movie_companies AS mc,
 name AS n,
 role_type AS rt,
 title AS t
WHERE ci.movie_id = t.id
 AND t.id = mc.movie_id
 AND ci.movie_id = mc.movie_id
 AND mc.company_id = cn.id
 AND ci.role_id = rt.id
 AND n.id = ci.person_id
 AND chn.id = ci.person_role_id
 AND an.person_id = n.id
 AND an.person_id = ci.person_id
AND ci.note IN ('(voice)', '(mac specialist)', '(as Master Bittu)', '(as E. Turevich)', '(as Molly McLure)')
AND cn.country_code = '[us]'
AND mc.note IS NOT NULL 
AND (mc.note LIKE '%0%' OR mc.note LIKE '%(%')
AND n.gender = 'm'
AND n.name LIKE '%a%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1912 AND 2006;",294,/*+  SeqScan(t) SeqScan(mc) SeqScan(cn) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(an person_id_aka_name) IndexScan(chn char_name_pkey) HashJoin(mc cn) HashJoin(t mc cn) NestLoop(t mc cn ci) HashJoin(t mc cn ci rt) NestLoop(t mc cn ci rt n) NestLoop(t mc cn ci rt n an) NestLoop(t mc cn ci rt n an chn) Leading(((((((t (mc cn)) ci) rt) n) an) chn)) */
"SELECT MIN(an.name) AS alternative_name, MIN(chn.name) AS character_name, MIN(t.title) AS movie
FROM aka_name AS an,
 char_name AS chn,
 cast_info AS ci,
 company_name AS cn,
 movie_companies AS mc,
 name AS n,
 role_type AS rt,
 title AS t
WHERE ci.movie_id = t.id
 AND t.id = mc.movie_id
 AND ci.movie_id = mc.movie_id
 AND mc.company_id = cn.id
 AND ci.role_id = rt.id
 AND n.id = ci.person_id
 AND chn.id = ci.person_role_id
 AND an.person_id = n.id
 AND an.person_id = ci.person_id
AND ci.note IN ('(uncredited)', '(as Teddy Nygh)', '(as William Dyer)', '(Pinky''s dad)', '(as Bill Brown)')
AND cn.country_code = '[us]'
AND mc.note IS NOT NULL 
AND (mc.note LIKE '%D%' OR mc.note LIKE '%(%')
AND n.gender = 'm'
AND n.name LIKE '%h%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1920 AND 2013;",5,/*+  SeqScan(ci) SeqScan(an) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexScan(t title_pkey) IndexScan(chn char_name_pkey) HashJoin(ci an) HashJoin(ci an rt) NestLoop(ci an rt n) NestLoop(ci an rt n mc) NestLoop(ci an rt n mc cn) NestLoop(ci an rt n mc cn t) NestLoop(ci an rt n mc cn t chn) Leading((((((((ci an) rt) n) mc) cn) t) chn)) */
"SELECT MIN(an.name) AS alternative_name, MIN(chn.name) AS character_name, MIN(t.title) AS movie
FROM aka_name AS an,
 char_name AS chn,
 cast_info AS ci,
 company_name AS cn,
 movie_companies AS mc,
 name AS n,
 role_type AS rt,
 title AS t
WHERE ci.movie_id = t.id
 AND t.id = mc.movie_id
 AND ci.movie_id = mc.movie_id
 AND mc.company_id = cn.id
 AND ci.role_id = rt.id
 AND n.id = ci.person_id
 AND chn.id = ci.person_role_id
 AND an.person_id = n.id
 AND an.person_id = ci.person_id
AND ci.note IN ('(archive footage)', '(as Vinnie Langdon)', '(as Pam Nemmo)', '(it support)', '(as Dermot Cronin)')
AND cn.country_code = '[pr]'
AND mc.note IS NOT NULL 
AND (mc.note LIKE '%e%' OR mc.note LIKE '%i%')
AND n.gender = 'm'
AND n.name LIKE '%r%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1919 AND 1950;",5,/*+  SeqScan(ci) SeqScan(an) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexScan(t title_pkey) IndexScan(chn char_name_pkey) HashJoin(ci an) HashJoin(ci an rt) NestLoop(ci an rt n) NestLoop(ci an rt n mc) NestLoop(ci an rt n mc cn) NestLoop(ci an rt n mc cn t) NestLoop(ci an rt n mc cn t chn) Leading((((((((ci an) rt) n) mc) cn) t) chn)) */
"SELECT MIN(an.name) AS alternative_name, MIN(chn.name) AS character_name, MIN(t.title) AS movie
FROM aka_name AS an,
 char_name AS chn,
 cast_info AS ci,
 company_name AS cn,
 movie_companies AS mc,
 name AS n,
 role_type AS rt,
 title AS t
WHERE ci.movie_id = t.id
 AND t.id = mc.movie_id
 AND ci.movie_id = mc.movie_id
 AND mc.company_id = cn.id
 AND ci.role_id = rt.id
 AND n.id = ci.person_id
 AND chn.id = ci.person_role_id
 AND an.person_id = n.id
 AND an.person_id = ci.person_id
AND ci.note IN ('(archive footage) (as Mary Jayne Saunders)', '(as Madhu S. Rao)', '(as Malek Sultan)', '(as Richard Hannah)', '(as J. Wozniak)')
AND cn.country_code = '[us]'
AND mc.note IS NOT NULL 
AND (mc.note LIKE '%)%' OR mc.note LIKE '%i%')
AND n.gender = 'f'
AND n.name LIKE '%d%'
AND rt.role = 'actress'
AND t.production_year BETWEEN 1892 AND 2019;",5,/*+  SeqScan(ci) SeqScan(an) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexScan(t title_pkey) IndexScan(chn char_name_pkey) HashJoin(ci an) HashJoin(ci an rt) NestLoop(ci an rt n) NestLoop(ci an rt n mc) NestLoop(ci an rt n mc cn) NestLoop(ci an rt n mc cn t) NestLoop(ci an rt n mc cn t chn) Leading((((((((ci an) rt) n) mc) cn) t) chn)) */
"SELECT MIN(an.name) AS alternative_name, MIN(chn.name) AS character_name, MIN(t.title) AS movie
FROM aka_name AS an,
 char_name AS chn,
 cast_info AS ci,
 company_name AS cn,
 movie_companies AS mc,
 name AS n,
 role_type AS rt,
 title AS t
WHERE ci.movie_id = t.id
 AND t.id = mc.movie_id
 AND ci.movie_id = mc.movie_id
 AND mc.company_id = cn.id
 AND ci.role_id = rt.id
 AND n.id = ci.person_id
 AND chn.id = ci.person_role_id
 AND an.person_id = n.id
 AND an.person_id = ci.person_id
AND ci.note IN ('(as Rob Drake)', '(novel ""Watchers"")', '(as Rachel Latham)', '(as Rick Onyx)', '(as Dada Salvi)')
AND cn.country_code = '[ca]'
AND mc.note IS NOT NULL 
AND (mc.note LIKE '%e%' OR mc.note LIKE '%)%')
AND n.gender = 'm'
AND n.name LIKE '%n%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 2006 AND 2014;",294,/*+  SeqScan(t) SeqScan(mc) SeqScan(cn) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(an person_id_aka_name) IndexScan(chn char_name_pkey) HashJoin(mc cn) HashJoin(t mc cn) NestLoop(t mc cn ci) HashJoin(t mc cn ci rt) NestLoop(t mc cn ci rt n) NestLoop(t mc cn ci rt n an) NestLoop(t mc cn ci rt n an chn) Leading(((((((t (mc cn)) ci) rt) n) an) chn)) */
"SELECT MIN(an.name) AS alternative_name, MIN(chn.name) AS character_name, MIN(t.title) AS movie
FROM aka_name AS an,
 char_name AS chn,
 cast_info AS ci,
 company_name AS cn,
 movie_companies AS mc,
 name AS n,
 role_type AS rt,
 title AS t
WHERE ci.movie_id = t.id
 AND t.id = mc.movie_id
 AND ci.movie_id = mc.movie_id
 AND mc.company_id = cn.id
 AND ci.role_id = rt.id
 AND n.id = ci.person_id
 AND chn.id = ci.person_role_id
 AND an.person_id = n.id
 AND an.person_id = ci.person_id
AND ci.note IN ('(voice)', '(as H. Kestin)', '(as Howard Smith)', '(as Rodney Johnson)', '(ship technician)')
AND cn.country_code = '[fr]'
AND mc.note IS NOT NULL 
AND (mc.note LIKE '%)%' OR mc.note LIKE '%(%')
AND n.gender = 'm'
AND n.name LIKE '%a%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1891 AND 2017;",5,/*+  SeqScan(ci) SeqScan(an) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexScan(t title_pkey) IndexScan(chn char_name_pkey) HashJoin(ci an) HashJoin(ci an rt) NestLoop(ci an rt n) NestLoop(ci an rt n mc) NestLoop(ci an rt n mc cn) NestLoop(ci an rt n mc cn t) NestLoop(ci an rt n mc cn t chn) Leading((((((((ci an) rt) n) mc) cn) t) chn)) */
"SELECT MIN(an.name) AS alternative_name, MIN(chn.name) AS character_name, MIN(t.title) AS movie
FROM aka_name AS an,
 char_name AS chn,
 cast_info AS ci,
 company_name AS cn,
 movie_companies AS mc,
 name AS n,
 role_type AS rt,
 title AS t
WHERE ci.movie_id = t.id
 AND t.id = mc.movie_id
 AND ci.movie_id = mc.movie_id
 AND mc.company_id = cn.id
 AND ci.role_id = rt.id
 AND n.id = ci.person_id
 AND chn.id = ci.person_role_id
 AND an.person_id = n.id
 AND an.person_id = ci.person_id
AND ci.note IN ('(voice) (uncredited)', '(as ReneÃ© Paris)', '(as David Harris)', '(as Rod Mills)', '(droid supervisor)')
AND cn.country_code = '[nl]'
AND mc.note IS NOT NULL 
AND (mc.note LIKE '%V%' OR mc.note LIKE '%1%')
AND n.gender = 'f'
AND n.name LIKE '%y%'
AND rt.role = 'actress'
AND t.production_year BETWEEN 1966 AND 2016;",5,/*+  SeqScan(ci) SeqScan(an) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexScan(t title_pkey) IndexScan(chn char_name_pkey) HashJoin(ci an) HashJoin(ci an rt) NestLoop(ci an rt n) NestLoop(ci an rt n mc) NestLoop(ci an rt n mc cn) NestLoop(ci an rt n mc cn t) NestLoop(ci an rt n mc cn t chn) Leading((((((((ci an) rt) n) mc) cn) t) chn)) */
"SELECT MIN(an.name) AS alternative_name, MIN(chn.name) AS character_name, MIN(t.title) AS movie
FROM aka_name AS an,
 char_name AS chn,
 cast_info AS ci,
 company_name AS cn,
 movie_companies AS mc,
 name AS n,
 role_type AS rt,
 title AS t
WHERE ci.movie_id = t.id
 AND t.id = mc.movie_id
 AND ci.movie_id = mc.movie_id
 AND mc.company_id = cn.id
 AND ci.role_id = rt.id
 AND n.id = ci.person_id
 AND chn.id = ci.person_role_id
 AND an.person_id = n.id
 AND an.person_id = ci.person_id
AND ci.note IN ('(uncredited)', '(as Javier Kuehnle)', '(as Carlos M. Sola)', '(as Roger Matteo)', '(Top Six Finalist)')
AND cn.country_code = '[gb]'
AND mc.note IS NOT NULL 
AND (mc.note LIKE '%0%' OR mc.note LIKE '%7%')
AND n.gender = 'm'
AND n.name LIKE '%e%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1951 AND 2019;",5,/*+  SeqScan(ci) SeqScan(an) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexScan(t title_pkey) IndexScan(chn char_name_pkey) HashJoin(ci an) HashJoin(ci an rt) NestLoop(ci an rt n) NestLoop(ci an rt n mc) NestLoop(ci an rt n mc cn) NestLoop(ci an rt n mc cn t) NestLoop(ci an rt n mc cn t chn) Leading((((((((ci an) rt) n) mc) cn) t) chn)) */
"SELECT MIN(an.name) AS alternative_name, MIN(chn.name) AS character_name, MIN(t.title) AS movie
FROM aka_name AS an,
 char_name AS chn,
 cast_info AS ci,
 company_name AS cn,
 movie_companies AS mc,
 name AS n,
 role_type AS rt,
 title AS t
WHERE ci.movie_id = t.id
 AND t.id = mc.movie_id
 AND ci.movie_id = mc.movie_id
 AND mc.company_id = cn.id
 AND ci.role_id = rt.id
 AND n.id = ci.person_id
 AND chn.id = ci.person_role_id
 AND an.person_id = n.id
 AND an.person_id = ci.person_id
AND ci.note IN ('(uncredited)', '(play ""Diversion"")', '(1958-1984)', '(as Mya Harrison)', '(as Donna Desmond)')
AND cn.country_code = '[br]'
AND mc.note IS NOT NULL 
AND (mc.note LIKE '%0%' OR mc.note LIKE '%(%')
AND n.gender = 'm'
AND n.name LIKE '%A%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 2001 AND 2015;",5,/*+  SeqScan(ci) SeqScan(an) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexScan(t title_pkey) IndexScan(chn char_name_pkey) HashJoin(ci an) HashJoin(ci an rt) NestLoop(ci an rt n) NestLoop(ci an rt n mc) NestLoop(ci an rt n mc cn) NestLoop(ci an rt n mc cn t) NestLoop(ci an rt n mc cn t chn) Leading((((((((ci an) rt) n) mc) cn) t) chn)) */
"SELECT MIN(an.name) AS alternative_name, MIN(chn.name) AS character_name, MIN(t.title) AS movie
FROM aka_name AS an,
 char_name AS chn,
 cast_info AS ci,
 company_name AS cn,
 movie_companies AS mc,
 name AS n,
 role_type AS rt,
 title AS t
WHERE ci.movie_id = t.id
 AND t.id = mc.movie_id
 AND ci.movie_id = mc.movie_id
 AND mc.company_id = cn.id
 AND ci.role_id = rt.id
 AND n.id = ci.person_id
 AND chn.id = ci.person_role_id
 AND an.person_id = n.id
 AND an.person_id = ci.person_id
AND ci.note IN ('(voice)', '(8 ans)', '(""Toonies"" segment)', '(as Dennis Kieffer)', '(as Raiven Bulado)')
AND cn.country_code = '[us]'
AND mc.note IS NOT NULL 
AND (mc.note LIKE '%(%' OR mc.note LIKE '%9%')
AND n.gender = 'm'
AND n.name LIKE '%r%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1900 AND 2019;",76,/*+  SeqScan(mc) SeqScan(cn) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) IndexScan(n name_pkey) IndexScan(an person_id_aka_name) SeqScan(rt) IndexScan(chn char_name_pkey) HashJoin(mc cn) NestLoop(mc cn t) NestLoop(mc cn t ci) NestLoop(mc cn t ci n) NestLoop(mc cn t ci n an) HashJoin(mc cn t ci n an rt) NestLoop(mc cn t ci n an rt chn) Leading((((((((mc cn) t) ci) n) an) rt) chn)) */
"SELECT MIN(an.name) AS alternative_name, MIN(chn.name) AS character_name, MIN(t.title) AS movie
FROM aka_name AS an,
 char_name AS chn,
 cast_info AS ci,
 company_name AS cn,
 movie_companies AS mc,
 name AS n,
 role_type AS rt,
 title AS t
WHERE ci.movie_id = t.id
 AND t.id = mc.movie_id
 AND ci.movie_id = mc.movie_id
 AND mc.company_id = cn.id
 AND ci.role_id = rt.id
 AND n.id = ci.person_id
 AND chn.id = ci.person_role_id
 AND an.person_id = n.id
 AND an.person_id = ci.person_id
AND ci.note IN ('(uncredited)', '(as Alex de Castro)', '(at Begining)', '(as Emily Wain)', '(as Lee Hoi Sung)')
AND cn.country_code = '[lb]'
AND mc.note IS NOT NULL 
AND (mc.note LIKE '%2%' OR mc.note LIKE '%e%')
AND n.gender = 'm'
AND n.name LIKE '%r%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1916 AND 2017;",294,/*+  SeqScan(t) SeqScan(mc) SeqScan(cn) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(an person_id_aka_name) IndexScan(chn char_name_pkey) HashJoin(mc cn) HashJoin(t mc cn) NestLoop(t mc cn ci) HashJoin(t mc cn ci rt) NestLoop(t mc cn ci rt n) NestLoop(t mc cn ci rt n an) NestLoop(t mc cn ci rt n an chn) Leading(((((((t (mc cn)) ci) rt) n) an) chn)) */
"SELECT MIN(an.name) AS alternative_name, MIN(chn.name) AS character_name, MIN(t.title) AS movie
FROM aka_name AS an,
 char_name AS chn,
 cast_info AS ci,
 company_name AS cn,
 movie_companies AS mc,
 name AS n,
 role_type AS rt,
 title AS t
WHERE ci.movie_id = t.id
 AND t.id = mc.movie_id
 AND ci.movie_id = mc.movie_id
 AND mc.company_id = cn.id
 AND ci.role_id = rt.id
 AND n.id = ci.person_id
 AND chn.id = ci.person_role_id
 AND an.person_id = n.id
 AND an.person_id = ci.person_id
AND ci.note IN ('(uncredited)', '(as Sharon Lee)', '(publicity artist)', '(as Ilosvay Kati)', '(Balasubramaniam)')
AND cn.country_code = '[de]'
AND mc.note IS NOT NULL 
AND (mc.note LIKE '%)%' OR mc.note LIKE '%2%')
AND n.gender = 'm'
AND n.name LIKE '%u%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1994 AND 2009;",5,/*+  SeqScan(ci) SeqScan(an) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexScan(t title_pkey) IndexScan(chn char_name_pkey) HashJoin(ci an) HashJoin(ci an rt) NestLoop(ci an rt n) NestLoop(ci an rt n mc) NestLoop(ci an rt n mc cn) NestLoop(ci an rt n mc cn t) NestLoop(ci an rt n mc cn t chn) Leading((((((((ci an) rt) n) mc) cn) t) chn)) */
"SELECT MIN(an.name) AS alternative_name, MIN(chn.name) AS character_name, MIN(t.title) AS movie
FROM aka_name AS an,
 char_name AS chn,
 cast_info AS ci,
 company_name AS cn,
 movie_companies AS mc,
 name AS n,
 role_type AS rt,
 title AS t
WHERE ci.movie_id = t.id
 AND t.id = mc.movie_id
 AND ci.movie_id = mc.movie_id
 AND mc.company_id = cn.id
 AND ci.role_id = rt.id
 AND n.id = ci.person_id
 AND chn.id = ci.person_role_id
 AND an.person_id = n.id
 AND an.person_id = ci.person_id
AND ci.note IN ('(uncredited)', '(tech coordinator)', '(as Amely)', '(clearance support)', '(FÃ¸rste Offer)')
AND cn.country_code = '[nl]'
AND mc.note IS NOT NULL 
AND (mc.note LIKE '%d%' OR mc.note LIKE '%B%')
AND n.gender = 'm'
AND n.name LIKE '%a%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1936 AND 1988;",76,/*+  SeqScan(mc) SeqScan(cn) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) IndexScan(n name_pkey) IndexScan(an person_id_aka_name) SeqScan(rt) IndexScan(chn char_name_pkey) HashJoin(mc cn) NestLoop(mc cn t) NestLoop(mc cn t ci) NestLoop(mc cn t ci n) NestLoop(mc cn t ci n an) HashJoin(mc cn t ci n an rt) NestLoop(mc cn t ci n an rt chn) Leading((((((((mc cn) t) ci) n) an) rt) chn)) */
"SELECT MIN(an.name) AS alternative_name, MIN(chn.name) AS character_name, MIN(t.title) AS movie
FROM aka_name AS an,
 char_name AS chn,
 cast_info AS ci,
 company_name AS cn,
 movie_companies AS mc,
 name AS n,
 role_type AS rt,
 title AS t
WHERE ci.movie_id = t.id
 AND t.id = mc.movie_id
 AND ci.movie_id = mc.movie_id
 AND mc.company_id = cn.id
 AND ci.role_id = rt.id
 AND n.id = ci.person_id
 AND chn.id = ci.person_role_id
 AND an.person_id = n.id
 AND an.person_id = ci.person_id
AND ci.note IN ('(as Theilla Bladh)', '(as Kristi Fitts)', '(commando leader)', '(as Yuriy Ermolin)', '(broadcast writer)')
AND cn.country_code = '[gr]'
AND mc.note IS NOT NULL 
AND (mc.note LIKE '%i%' OR mc.note LIKE '%c%')
AND n.gender = 'f'
AND n.name LIKE '%l%'
AND rt.role = 'actress'
AND t.production_year BETWEEN 1931 AND 2011;",5,/*+  SeqScan(ci) SeqScan(an) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexScan(t title_pkey) IndexScan(chn char_name_pkey) HashJoin(ci an) HashJoin(ci an rt) NestLoop(ci an rt n) NestLoop(ci an rt n mc) NestLoop(ci an rt n mc cn) NestLoop(ci an rt n mc cn t) NestLoop(ci an rt n mc cn t chn) Leading((((((((ci an) rt) n) mc) cn) t) chn)) */
"SELECT MIN(an.name) AS alternative_name, MIN(chn.name) AS character_name, MIN(t.title) AS movie
FROM aka_name AS an,
 char_name AS chn,
 cast_info AS ci,
 company_name AS cn,
 movie_companies AS mc,
 name AS n,
 role_type AS rt,
 title AS t
WHERE ci.movie_id = t.id
 AND t.id = mc.movie_id
 AND ci.movie_id = mc.movie_id
 AND mc.company_id = cn.id
 AND ci.role_id = rt.id
 AND n.id = ci.person_id
 AND chn.id = ci.person_role_id
 AND an.person_id = n.id
 AND an.person_id = ci.person_id
AND ci.note IN ('(as Eddie Martinez)', '(as Valbret)', '(as Warde Butler)', '(as Tom Fellegi)', '(as Sabina Marina)')
AND cn.country_code = '[nl]'
AND mc.note IS NOT NULL 
AND (mc.note LIKE '%s%' OR mc.note LIKE '%T%')
AND n.gender = 'm'
AND n.name LIKE '%E%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 2003 AND 2014;",294,/*+  SeqScan(t) SeqScan(mc) SeqScan(cn) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(an person_id_aka_name) IndexScan(chn char_name_pkey) HashJoin(mc cn) HashJoin(t mc cn) NestLoop(t mc cn ci) HashJoin(t mc cn ci rt) NestLoop(t mc cn ci rt n) NestLoop(t mc cn ci rt n an) NestLoop(t mc cn ci rt n an chn) Leading(((((((t (mc cn)) ci) rt) n) an) chn)) */
"SELECT MIN(an.name) AS alternative_name, MIN(chn.name) AS character_name, MIN(t.title) AS movie
FROM aka_name AS an,
 char_name AS chn,
 cast_info AS ci,
 company_name AS cn,
 movie_companies AS mc,
 name AS n,
 role_type AS rt,
 title AS t
WHERE ci.movie_id = t.id
 AND t.id = mc.movie_id
 AND ci.movie_id = mc.movie_id
 AND mc.company_id = cn.id
 AND ci.role_id = rt.id
 AND n.id = ci.person_id
 AND chn.id = ci.person_role_id
 AND an.person_id = n.id
 AND an.person_id = ci.person_id
AND ci.note IN ('(uncredited)', '(as MÃ¼rÃ¼vvet Sim)', '(2006 version)', '(Clifford)', '(as Alice Baez)')
AND cn.country_code = '[es]'
AND mc.note IS NOT NULL 
AND (mc.note LIKE '%d%' OR mc.note LIKE '%l%')
AND n.gender = 'f'
AND n.name LIKE '%s%'
AND rt.role = 'actress'
AND t.production_year BETWEEN 1911 AND 2016;",76,/*+  SeqScan(mc) SeqScan(cn) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) IndexScan(n name_pkey) IndexScan(an person_id_aka_name) SeqScan(rt) IndexScan(chn char_name_pkey) HashJoin(mc cn) NestLoop(mc cn t) NestLoop(mc cn t ci) NestLoop(mc cn t ci n) NestLoop(mc cn t ci n an) HashJoin(mc cn t ci n an rt) NestLoop(mc cn t ci n an rt chn) Leading((((((((mc cn) t) ci) n) an) rt) chn)) */
"SELECT MIN(an.name) AS alternative_name, MIN(chn.name) AS character_name, MIN(t.title) AS movie
FROM aka_name AS an,
 char_name AS chn,
 cast_info AS ci,
 company_name AS cn,
 movie_companies AS mc,
 name AS n,
 role_type AS rt,
 title AS t
WHERE ci.movie_id = t.id
 AND t.id = mc.movie_id
 AND ci.movie_id = mc.movie_id
 AND mc.company_id = cn.id
 AND ci.role_id = rt.id
 AND n.id = ci.person_id
 AND chn.id = ci.person_role_id
 AND an.person_id = n.id
 AND an.person_id = ci.person_id
AND ci.note IN ('(as Janne Ahlgren)', '(as John Ryan)', '(as Nuuuli Brown)', '(as Dan Minahan)', '(as Pam Britton)')
AND cn.country_code = '[se]'
AND mc.note IS NOT NULL 
AND (mc.note LIKE '%e%' OR mc.note LIKE '%0%')
AND n.gender = 'm'
AND n.name LIKE '%e%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1904 AND 2016;",5,/*+  SeqScan(ci) SeqScan(an) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexScan(t title_pkey) IndexScan(chn char_name_pkey) HashJoin(ci an) HashJoin(ci an rt) NestLoop(ci an rt n) NestLoop(ci an rt n mc) NestLoop(ci an rt n mc cn) NestLoop(ci an rt n mc cn t) NestLoop(ci an rt n mc cn t chn) Leading((((((((ci an) rt) n) mc) cn) t) chn)) */
"SELECT MIN(an.name) AS alternative_name, MIN(chn.name) AS character_name, MIN(t.title) AS movie
FROM aka_name AS an,
 char_name AS chn,
 cast_info AS ci,
 company_name AS cn,
 movie_companies AS mc,
 name AS n,
 role_type AS rt,
 title AS t
WHERE ci.movie_id = t.id
 AND t.id = mc.movie_id
 AND ci.movie_id = mc.movie_id
 AND mc.company_id = cn.id
 AND ci.role_id = rt.id
 AND n.id = ci.person_id
 AND chn.id = ci.person_role_id
 AND an.person_id = n.id
 AND an.person_id = ci.person_id
AND ci.note IN ('(as Gustav Hansen)', '(as HajdÃº Erzsike)', '(character)', '(as Sarah Helen)', '(as Rosebudd)')
AND cn.country_code = '[us]'
AND mc.note IS NOT NULL 
AND (mc.note LIKE '%g%' OR mc.note LIKE '%e%')
AND n.gender = 'm'
AND n.name LIKE '%a%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1988 AND 2014;",294,/*+  SeqScan(t) SeqScan(mc) SeqScan(cn) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(an person_id_aka_name) IndexScan(chn char_name_pkey) HashJoin(mc cn) HashJoin(t mc cn) NestLoop(t mc cn ci) HashJoin(t mc cn ci rt) NestLoop(t mc cn ci rt n) NestLoop(t mc cn ci rt n an) NestLoop(t mc cn ci rt n an chn) Leading(((((((t (mc cn)) ci) rt) n) an) chn)) */
"SELECT MIN(an.name) AS alternative_name, MIN(chn.name) AS character_name, MIN(t.title) AS movie
FROM aka_name AS an,
 char_name AS chn,
 cast_info AS ci,
 company_name AS cn,
 movie_companies AS mc,
 name AS n,
 role_type AS rt,
 title AS t
WHERE ci.movie_id = t.id
 AND t.id = mc.movie_id
 AND ci.movie_id = mc.movie_id
 AND mc.company_id = cn.id
 AND ci.role_id = rt.id
 AND n.id = ci.person_id
 AND chn.id = ci.person_role_id
 AND an.person_id = n.id
 AND an.person_id = ci.person_id
AND ci.note IN ('(uncredited)', '(as John Guarnieri)', '(as Gia L''Orenzo)', '(1972-1982)', '(as Ruth Hazlette)')
AND cn.country_code = '[us]'
AND mc.note IS NOT NULL 
AND (mc.note LIKE '%d%' OR mc.note LIKE '%d%')
AND n.gender = 'm'
AND n.name LIKE '%i%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1918 AND 2017;",294,/*+  SeqScan(t) SeqScan(mc) SeqScan(cn) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(an person_id_aka_name) IndexScan(chn char_name_pkey) HashJoin(mc cn) HashJoin(t mc cn) NestLoop(t mc cn ci) HashJoin(t mc cn ci rt) NestLoop(t mc cn ci rt n) NestLoop(t mc cn ci rt n an) NestLoop(t mc cn ci rt n an chn) Leading(((((((t (mc cn)) ci) rt) n) an) chn)) */
"SELECT MIN(an.name) AS alternative_name, MIN(chn.name) AS character_name, MIN(t.title) AS movie
FROM aka_name AS an,
 char_name AS chn,
 cast_info AS ci,
 company_name AS cn,
 movie_companies AS mc,
 name AS n,
 role_type AS rt,
 title AS t
WHERE ci.movie_id = t.id
 AND t.id = mc.movie_id
 AND ci.movie_id = mc.movie_id
 AND mc.company_id = cn.id
 AND ci.role_id = rt.id
 AND n.id = ci.person_id
 AND chn.id = ci.person_role_id
 AND an.person_id = n.id
 AND an.person_id = ci.person_id
AND ci.note IN ('(as Paul Jesseman)', '(as Annette Souvet)', '(as Mofa Pan Duro)', '(as Mabel May-Jong)', '(test pilot)')
AND cn.country_code = '[fr]'
AND mc.note IS NOT NULL 
AND (mc.note LIKE '%V%' OR mc.note LIKE '%)%')
AND n.gender = 'm'
AND n.name LIKE '%i%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1915 AND 2019;",294,/*+  SeqScan(t) SeqScan(mc) SeqScan(cn) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(an person_id_aka_name) IndexScan(chn char_name_pkey) HashJoin(mc cn) HashJoin(t mc cn) NestLoop(t mc cn ci) HashJoin(t mc cn ci rt) NestLoop(t mc cn ci rt n) NestLoop(t mc cn ci rt n an) NestLoop(t mc cn ci rt n an chn) Leading(((((((t (mc cn)) ci) rt) n) an) chn)) */
"SELECT MIN(an.name) AS alternative_name, MIN(chn.name) AS character_name, MIN(t.title) AS movie
FROM aka_name AS an,
 char_name AS chn,
 cast_info AS ci,
 company_name AS cn,
 movie_companies AS mc,
 name AS n,
 role_type AS rt,
 title AS t
WHERE ci.movie_id = t.id
 AND t.id = mc.movie_id
 AND ci.movie_id = mc.movie_id
 AND mc.company_id = cn.id
 AND ci.role_id = rt.id
 AND n.id = ci.person_id
 AND chn.id = ci.person_role_id
 AND an.person_id = n.id
 AND an.person_id = ci.person_id
AND ci.note IN ('(uncredited)', '(as Tim T.)', '(segment ""Wine Rx"")', '(as AmÃ©lia Jacob)', '(labor reporter)')
AND cn.country_code = '[us]'
AND mc.note IS NOT NULL 
AND (mc.note LIKE '%m%' OR mc.note LIKE '%)%')
AND n.gender = 'm'
AND n.name LIKE '%a%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1888 AND 2016;",294,/*+  SeqScan(t) SeqScan(mc) SeqScan(cn) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(an person_id_aka_name) IndexScan(chn char_name_pkey) HashJoin(mc cn) HashJoin(t mc cn) NestLoop(t mc cn ci) HashJoin(t mc cn ci rt) NestLoop(t mc cn ci rt n) NestLoop(t mc cn ci rt n an) NestLoop(t mc cn ci rt n an chn) Leading(((((((t (mc cn)) ci) rt) n) an) chn)) */
"SELECT MIN(an.name) AS alternative_name, MIN(chn.name) AS character_name, MIN(t.title) AS movie
FROM aka_name AS an,
 char_name AS chn,
 cast_info AS ci,
 company_name AS cn,
 movie_companies AS mc,
 name AS n,
 role_type AS rt,
 title AS t
WHERE ci.movie_id = t.id
 AND t.id = mc.movie_id
 AND ci.movie_id = mc.movie_id
 AND mc.company_id = cn.id
 AND ci.role_id = rt.id
 AND n.id = ci.person_id
 AND chn.id = ci.person_role_id
 AND an.person_id = n.id
 AND an.person_id = ci.person_id
AND ci.note IN ('(as Lana Joyce)', '(as Nance Jordan)', '(as Heinz Mareczek)', '(as Bert Visser)', '(as Juana SolÃ©)')
AND cn.country_code = '[ca]'
AND mc.note IS NOT NULL 
AND (mc.note LIKE '%i%' OR mc.note LIKE '%t%')
AND n.gender = 'f'
AND n.name LIKE '%J%'
AND rt.role = 'actress'
AND t.production_year BETWEEN 1927 AND 2002;",76,/*+  SeqScan(mc) SeqScan(cn) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) IndexScan(n name_pkey) IndexScan(an person_id_aka_name) SeqScan(rt) IndexScan(chn char_name_pkey) HashJoin(mc cn) NestLoop(mc cn t) NestLoop(mc cn t ci) NestLoop(mc cn t ci n) NestLoop(mc cn t ci n an) HashJoin(mc cn t ci n an rt) NestLoop(mc cn t ci n an rt chn) Leading((((((((mc cn) t) ci) n) an) rt) chn)) */
"SELECT MIN(an.name) AS alternative_name, MIN(chn.name) AS character_name, MIN(t.title) AS movie
FROM aka_name AS an,
 char_name AS chn,
 cast_info AS ci,
 company_name AS cn,
 movie_companies AS mc,
 name AS n,
 role_type AS rt,
 title AS t
WHERE ci.movie_id = t.id
 AND t.id = mc.movie_id
 AND ci.movie_id = mc.movie_id
 AND mc.company_id = cn.id
 AND ci.role_id = rt.id
 AND n.id = ci.person_id
 AND chn.id = ci.person_role_id
 AND an.person_id = n.id
 AND an.person_id = ci.person_id
AND ci.note IN ('(uncredited)', '(as Clinton Kimbro)', '(as Steve Norris)', '(as Fresita)', '(as Benny Carduso)')
AND cn.country_code = '[us]'
AND mc.note IS NOT NULL 
AND (mc.note LIKE '%V%' OR mc.note LIKE '%(%')
AND n.gender = 'm'
AND n.name LIKE '%a%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1928 AND 1999;",294,/*+  SeqScan(t) SeqScan(mc) SeqScan(cn) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(an person_id_aka_name) IndexScan(chn char_name_pkey) HashJoin(mc cn) HashJoin(t mc cn) NestLoop(t mc cn ci) HashJoin(t mc cn ci rt) NestLoop(t mc cn ci rt n) NestLoop(t mc cn ci rt n an) NestLoop(t mc cn ci rt n an chn) Leading(((((((t (mc cn)) ci) rt) n) an) chn)) */
"SELECT MIN(an.name) AS alternative_name, MIN(chn.name) AS character_name, MIN(t.title) AS movie
FROM aka_name AS an,
 char_name AS chn,
 cast_info AS ci,
 company_name AS cn,
 movie_companies AS mc,
 name AS n,
 role_type AS rt,
 title AS t
WHERE ci.movie_id = t.id
 AND t.id = mc.movie_id
 AND ci.movie_id = mc.movie_id
 AND mc.company_id = cn.id
 AND ci.role_id = rt.id
 AND n.id = ci.person_id
 AND chn.id = ci.person_role_id
 AND an.person_id = n.id
 AND an.person_id = ci.person_id
AND ci.note IN ('(as Fred Steele)', '(enemy arrangement)', '(as Ramon Langa)', '(as Kalle BjerkÃ¸)', '(as Adam Trottman)')
AND cn.country_code = '[jp]'
AND mc.note IS NOT NULL 
AND (mc.note LIKE '%(%' OR mc.note LIKE '%a%')
AND n.gender = 'm'
AND n.name LIKE '%e%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1926 AND 1975;",5,/*+  SeqScan(ci) SeqScan(an) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexScan(t title_pkey) IndexScan(chn char_name_pkey) HashJoin(ci an) HashJoin(ci an rt) NestLoop(ci an rt n) NestLoop(ci an rt n mc) NestLoop(ci an rt n mc cn) NestLoop(ci an rt n mc cn t) NestLoop(ci an rt n mc cn t chn) Leading((((((((ci an) rt) n) mc) cn) t) chn)) */
"SELECT MIN(an.name) AS alternative_name, MIN(chn.name) AS character_name, MIN(t.title) AS movie
FROM aka_name AS an,
 char_name AS chn,
 cast_info AS ci,
 company_name AS cn,
 movie_companies AS mc,
 name AS n,
 role_type AS rt,
 title AS t
WHERE ci.movie_id = t.id
 AND t.id = mc.movie_id
 AND ci.movie_id = mc.movie_id
 AND mc.company_id = cn.id
 AND ci.role_id = rt.id
 AND n.id = ci.person_id
 AND chn.id = ci.person_role_id
 AND an.person_id = n.id
 AND an.person_id = ci.person_id
AND ci.note IN ('(as Anton Algrang)', '(as Peter Price)', '(Zaiton''s mother)', '(as Charles Haas)', '(as Ines Fancevic)')
AND cn.country_code = '[de]'
AND mc.note IS NOT NULL 
AND (mc.note LIKE '%n%' OR mc.note LIKE '%c%')
AND n.gender = 'm'
AND n.name LIKE '%t%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1934 AND 2012;",76,/*+  SeqScan(mc) SeqScan(cn) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) IndexScan(n name_pkey) IndexScan(an person_id_aka_name) SeqScan(rt) IndexScan(chn char_name_pkey) HashJoin(mc cn) NestLoop(mc cn t) NestLoop(mc cn t ci) NestLoop(mc cn t ci n) NestLoop(mc cn t ci n an) HashJoin(mc cn t ci n an rt) NestLoop(mc cn t ci n an rt chn) Leading((((((((mc cn) t) ci) n) an) rt) chn)) */
"SELECT MIN(an.name) AS alternative_name, MIN(chn.name) AS character_name, MIN(t.title) AS movie
FROM aka_name AS an,
 char_name AS chn,
 cast_info AS ci,
 company_name AS cn,
 movie_companies AS mc,
 name AS n,
 role_type AS rt,
 title AS t
WHERE ci.movie_id = t.id
 AND t.id = mc.movie_id
 AND ci.movie_id = mc.movie_id
 AND mc.company_id = cn.id
 AND ci.role_id = rt.id
 AND n.id = ci.person_id
 AND chn.id = ci.person_role_id
 AND an.person_id = n.id
 AND an.person_id = ci.person_id
AND ci.note IN ('(as Richard E. Hirschfeld)', '(as Eirini Pappa)', '(as Arto Reunanen)', '(as Pietro Dizanno)', '(bond consultant)')
AND cn.country_code = '[nl]'
AND mc.note IS NOT NULL 
AND (mc.note LIKE '%0%' OR mc.note LIKE '%)%')
AND n.gender = 'm'
AND n.name LIKE '%l%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1984 AND 2008;",76,/*+  SeqScan(mc) SeqScan(cn) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) IndexScan(n name_pkey) IndexScan(an person_id_aka_name) SeqScan(rt) IndexScan(chn char_name_pkey) HashJoin(mc cn) NestLoop(mc cn t) NestLoop(mc cn t ci) NestLoop(mc cn t ci n) NestLoop(mc cn t ci n an) HashJoin(mc cn t ci n an rt) NestLoop(mc cn t ci n an rt chn) Leading((((((((mc cn) t) ci) n) an) rt) chn)) */
"SELECT MIN(an.name) AS alternative_name, MIN(chn.name) AS character_name, MIN(t.title) AS movie
FROM aka_name AS an,
 char_name AS chn,
 cast_info AS ci,
 company_name AS cn,
 movie_companies AS mc,
 name AS n,
 role_type AS rt,
 title AS t
WHERE ci.movie_id = t.id
 AND t.id = mc.movie_id
 AND ci.movie_id = mc.movie_id
 AND mc.company_id = cn.id
 AND ci.role_id = rt.id
 AND n.id = ci.person_id
 AND chn.id = ci.person_role_id
 AND an.person_id = n.id
 AND an.person_id = ci.person_id
AND ci.note IN ('(Prudence)', '(as Frank Cee)', '(as Despina)', '(as DanÃ« Peterson)', '(m)')
AND cn.country_code = '[nl]'
AND mc.note IS NOT NULL 
AND (mc.note LIKE '%d%' OR mc.note LIKE '%t%')
AND n.gender = 'f'
AND n.name LIKE '%r%'
AND rt.role = 'actress'
AND t.production_year BETWEEN 1983 AND 2006;",294,/*+  SeqScan(t) SeqScan(mc) SeqScan(cn) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(an person_id_aka_name) IndexScan(chn char_name_pkey) HashJoin(mc cn) HashJoin(t mc cn) NestLoop(t mc cn ci) HashJoin(t mc cn ci rt) NestLoop(t mc cn ci rt n) NestLoop(t mc cn ci rt n an) NestLoop(t mc cn ci rt n an chn) Leading(((((((t (mc cn)) ci) rt) n) an) chn)) */
"SELECT MIN(an.name) AS alternative_name, MIN(chn.name) AS character_name, MIN(t.title) AS movie
FROM aka_name AS an,
 char_name AS chn,
 cast_info AS ci,
 company_name AS cn,
 movie_companies AS mc,
 name AS n,
 role_type AS rt,
 title AS t
WHERE ci.movie_id = t.id
 AND t.id = mc.movie_id
 AND ci.movie_id = mc.movie_id
 AND mc.company_id = cn.id
 AND ci.role_id = rt.id
 AND n.id = ci.person_id
 AND chn.id = ci.person_role_id
 AND an.person_id = n.id
 AND an.person_id = ci.person_id
AND ci.note IN ('(uncredited)', '(as Rocio Paso)', '(healthy catering)', '(as Annapurna)', '(as Stig Hansson)')
AND cn.country_code = '[fr]'
AND mc.note IS NOT NULL 
AND (mc.note LIKE '%a%' OR mc.note LIKE '%a%')
AND n.gender = 'm'
AND n.name LIKE '%a%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1952 AND 1992;",76,/*+  SeqScan(mc) SeqScan(cn) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) IndexScan(n name_pkey) IndexScan(an person_id_aka_name) SeqScan(rt) IndexScan(chn char_name_pkey) HashJoin(mc cn) NestLoop(mc cn t) NestLoop(mc cn t ci) NestLoop(mc cn t ci n) NestLoop(mc cn t ci n an) HashJoin(mc cn t ci n an rt) NestLoop(mc cn t ci n an rt chn) Leading((((((((mc cn) t) ci) n) an) rt) chn)) */
"SELECT MIN(an.name) AS alternative_name, MIN(chn.name) AS character_name, MIN(t.title) AS movie
FROM aka_name AS an,
 char_name AS chn,
 cast_info AS ci,
 company_name AS cn,
 movie_companies AS mc,
 name AS n,
 role_type AS rt,
 title AS t
WHERE ci.movie_id = t.id
 AND t.id = mc.movie_id
 AND ci.movie_id = mc.movie_id
 AND mc.company_id = cn.id
 AND ci.role_id = rt.id
 AND n.id = ci.person_id
 AND chn.id = ci.person_role_id
 AND an.person_id = n.id
 AND an.person_id = ci.person_id
AND ci.note IN ('(uncredited)', '(as S.N. Patankar)', '(as Anthony Sharpe)', '(as Babi Ne'' Eman)', '(as Bessie Walsh)')
AND cn.country_code = '[us]'
AND mc.note IS NOT NULL 
AND (mc.note LIKE '%1%' OR mc.note LIKE '%e%')
AND n.gender = 'm'
AND n.name LIKE '%h%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1938 AND 2004;",5,/*+  SeqScan(ci) SeqScan(an) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexScan(t title_pkey) IndexScan(chn char_name_pkey) HashJoin(ci an) HashJoin(ci an rt) NestLoop(ci an rt n) NestLoop(ci an rt n mc) NestLoop(ci an rt n mc cn) NestLoop(ci an rt n mc cn t) NestLoop(ci an rt n mc cn t chn) Leading((((((((ci an) rt) n) mc) cn) t) chn)) */
"SELECT MIN(an.name) AS alternative_name, MIN(chn.name) AS character_name, MIN(t.title) AS movie
FROM aka_name AS an,
 char_name AS chn,
 cast_info AS ci,
 company_name AS cn,
 movie_companies AS mc,
 name AS n,
 role_type AS rt,
 title AS t
WHERE ci.movie_id = t.id
 AND t.id = mc.movie_id
 AND ci.movie_id = mc.movie_id
 AND mc.company_id = cn.id
 AND ci.role_id = rt.id
 AND n.id = ci.person_id
 AND chn.id = ci.person_role_id
 AND an.person_id = n.id
 AND an.person_id = ci.person_id
AND ci.note IN ('(uncredited)', '(phototypesetting)', '(as Ami Daemion)', '(as Sady La BÃ©te)', '(as Teresa OvÃ­deo)')
AND cn.country_code = '[se]'
AND mc.note IS NOT NULL 
AND (mc.note LIKE '%o%' OR mc.note LIKE '%w%')
AND n.gender = 'm'
AND n.name LIKE '%,%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1891 AND 1955;",5,/*+  SeqScan(ci) SeqScan(an) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexScan(t title_pkey) IndexScan(chn char_name_pkey) HashJoin(ci an) HashJoin(ci an rt) NestLoop(ci an rt n) NestLoop(ci an rt n mc) NestLoop(ci an rt n mc cn) NestLoop(ci an rt n mc cn t) NestLoop(ci an rt n mc cn t chn) Leading((((((((ci an) rt) n) mc) cn) t) chn)) */
"SELECT MIN(an.name) AS alternative_name, MIN(chn.name) AS character_name, MIN(t.title) AS movie
FROM aka_name AS an,
 char_name AS chn,
 cast_info AS ci,
 company_name AS cn,
 movie_companies AS mc,
 name AS n,
 role_type AS rt,
 title AS t
WHERE ci.movie_id = t.id
 AND t.id = mc.movie_id
 AND ci.movie_id = mc.movie_id
 AND mc.company_id = cn.id
 AND ci.role_id = rt.id
 AND n.id = ci.person_id
 AND chn.id = ci.person_role_id
 AND an.person_id = n.id
 AND an.person_id = ci.person_id
AND ci.note IN ('(uncredited)', '(as Marc Power)', '(as Lew Prygunow)', '(as Nuel Nuval)', '(as Jesper Rofeldt)')
AND cn.country_code = '[gr]'
AND mc.note IS NOT NULL 
AND (mc.note LIKE '%e%' OR mc.note LIKE '%r%')
AND n.gender = 'f'
AND n.name LIKE '%a%'
AND rt.role = 'actress'
AND t.production_year BETWEEN 1891 AND 2003;",76,/*+  SeqScan(mc) SeqScan(cn) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) IndexScan(n name_pkey) IndexScan(an person_id_aka_name) SeqScan(rt) IndexScan(chn char_name_pkey) HashJoin(mc cn) NestLoop(mc cn t) NestLoop(mc cn t ci) NestLoop(mc cn t ci n) NestLoop(mc cn t ci n an) HashJoin(mc cn t ci n an rt) NestLoop(mc cn t ci n an rt chn) Leading((((((((mc cn) t) ci) n) an) rt) chn)) */
"SELECT MIN(an.name) AS alternative_name, MIN(chn.name) AS character_name, MIN(t.title) AS movie
FROM aka_name AS an,
 char_name AS chn,
 cast_info AS ci,
 company_name AS cn,
 movie_companies AS mc,
 name AS n,
 role_type AS rt,
 title AS t
WHERE ci.movie_id = t.id
 AND t.id = mc.movie_id
 AND ci.movie_id = mc.movie_id
 AND mc.company_id = cn.id
 AND ci.role_id = rt.id
 AND n.id = ci.person_id
 AND chn.id = ci.person_role_id
 AND an.person_id = n.id
 AND an.person_id = ci.person_id
AND ci.note IN ('(uncredited)', '(as Kandaswami)', '(as Mark Labett)', '(as A-Teens)', '(as Tom Hunter)')
AND cn.country_code = '[gr]'
AND mc.note IS NOT NULL 
AND (mc.note LIKE '%G%' OR mc.note LIKE '%H%')
AND n.gender = 'm'
AND n.name LIKE '%l%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1906 AND 2011;",76,/*+  SeqScan(mc) SeqScan(cn) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) IndexScan(n name_pkey) IndexScan(an person_id_aka_name) SeqScan(rt) IndexScan(chn char_name_pkey) HashJoin(mc cn) NestLoop(mc cn t) NestLoop(mc cn t ci) NestLoop(mc cn t ci n) NestLoop(mc cn t ci n an) HashJoin(mc cn t ci n an rt) NestLoop(mc cn t ci n an rt chn) Leading((((((((mc cn) t) ci) n) an) rt) chn)) */
"SELECT MIN(an.name) AS alternative_name, MIN(chn.name) AS character_name, MIN(t.title) AS movie
FROM aka_name AS an,
 char_name AS chn,
 cast_info AS ci,
 company_name AS cn,
 movie_companies AS mc,
 name AS n,
 role_type AS rt,
 title AS t
WHERE ci.movie_id = t.id
 AND t.id = mc.movie_id
 AND ci.movie_id = mc.movie_id
 AND mc.company_id = cn.id
 AND ci.role_id = rt.id
 AND n.id = ci.person_id
 AND chn.id = ci.person_role_id
 AND an.person_id = n.id
 AND an.person_id = ci.person_id
AND ci.note IN ('(uncredited)', '(as Rachel Headley)', '(as Jessica Vallot)', '(as Herb Bress)', '(townhall boy)')
AND cn.country_code = '[cshh]'
AND mc.note IS NOT NULL 
AND (mc.note LIKE '%v%' OR mc.note LIKE '%c%')
AND n.gender = 'm'
AND n.name LIKE '%,%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1898 AND 1989;",5,/*+  SeqScan(ci) SeqScan(an) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexScan(t title_pkey) IndexScan(chn char_name_pkey) HashJoin(ci an) HashJoin(ci an rt) NestLoop(ci an rt n) NestLoop(ci an rt n mc) NestLoop(ci an rt n mc cn) NestLoop(ci an rt n mc cn t) NestLoop(ci an rt n mc cn t chn) Leading((((((((ci an) rt) n) mc) cn) t) chn)) */
"SELECT MIN(an.name) AS alternative_name, MIN(chn.name) AS character_name, MIN(t.title) AS movie
FROM aka_name AS an,
 char_name AS chn,
 cast_info AS ci,
 company_name AS cn,
 movie_companies AS mc,
 name AS n,
 role_type AS rt,
 title AS t
WHERE ci.movie_id = t.id
 AND t.id = mc.movie_id
 AND ci.movie_id = mc.movie_id
 AND mc.company_id = cn.id
 AND ci.role_id = rt.id
 AND n.id = ci.person_id
 AND chn.id = ci.person_role_id
 AND an.person_id = n.id
 AND an.person_id = ci.person_id
AND ci.note IN ('(uncredited)', '(as Hilary Shapiro)', '(as Ruth Toby)', '(provider: avion)', '(as Tammie Brown)')
AND cn.country_code = '[fi]'
AND mc.note IS NOT NULL 
AND (mc.note LIKE '%0%' OR mc.note LIKE '%n%')
AND n.gender = 'm'
AND n.name LIKE '%s%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1908 AND 2009;",76,/*+  SeqScan(mc) SeqScan(cn) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) IndexScan(n name_pkey) IndexScan(an person_id_aka_name) SeqScan(rt) IndexScan(chn char_name_pkey) HashJoin(mc cn) NestLoop(mc cn t) NestLoop(mc cn t ci) NestLoop(mc cn t ci n) NestLoop(mc cn t ci n an) HashJoin(mc cn t ci n an rt) NestLoop(mc cn t ci n an rt chn) Leading((((((((mc cn) t) ci) n) an) rt) chn)) */
"SELECT MIN(an.name) AS alternative_name, MIN(chn.name) AS character_name, MIN(t.title) AS movie
FROM aka_name AS an,
 char_name AS chn,
 cast_info AS ci,
 company_name AS cn,
 movie_companies AS mc,
 name AS n,
 role_type AS rt,
 title AS t
WHERE ci.movie_id = t.id
 AND t.id = mc.movie_id
 AND ci.movie_id = mc.movie_id
 AND mc.company_id = cn.id
 AND ci.role_id = rt.id
 AND n.id = ci.person_id
 AND chn.id = ci.person_role_id
 AND an.person_id = n.id
 AND an.person_id = ci.person_id
AND ci.note IN ('(as Carrie Yazel)', '(as Sandi Reagan)', '(Berry segment)', '(novel ""Pesma"")', '(EBU TV Director)')
AND cn.country_code = '[us]'
AND mc.note IS NOT NULL 
AND (mc.note LIKE '%)%' OR mc.note LIKE '%a%')
AND n.gender = 'f'
AND n.name LIKE '%r%'
AND rt.role = 'actress'
AND t.production_year BETWEEN 1971 AND 1997;",5,/*+  SeqScan(ci) SeqScan(an) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexScan(t title_pkey) IndexScan(chn char_name_pkey) HashJoin(ci an) HashJoin(ci an rt) NestLoop(ci an rt n) NestLoop(ci an rt n mc) NestLoop(ci an rt n mc cn) NestLoop(ci an rt n mc cn t) NestLoop(ci an rt n mc cn t chn) Leading((((((((ci an) rt) n) mc) cn) t) chn)) */
"SELECT MIN(an.name) AS alternative_name, MIN(chn.name) AS character_name, MIN(t.title) AS movie
FROM aka_name AS an,
 char_name AS chn,
 cast_info AS ci,
 company_name AS cn,
 movie_companies AS mc,
 name AS n,
 role_type AS rt,
 title AS t
WHERE ci.movie_id = t.id
 AND t.id = mc.movie_id
 AND ci.movie_id = mc.movie_id
 AND mc.company_id = cn.id
 AND ci.role_id = rt.id
 AND n.id = ci.person_id
 AND chn.id = ci.person_role_id
 AND an.person_id = n.id
 AND an.person_id = ci.person_id
AND ci.note IN ('(archive footage) (uncredited)', '(as Billy Flynn)', '(as Pawan Malhotra)', '(as P. ClÃ©rouc)', '(as Ander Paige)')
AND cn.country_code = '[au]'
AND mc.note IS NOT NULL 
AND (mc.note LIKE '%r%' OR mc.note LIKE '%l%')
AND n.gender = 'f'
AND n.name LIKE '%g%'
AND rt.role = 'actress'
AND t.production_year BETWEEN 1896 AND 1998;",5,/*+  SeqScan(ci) SeqScan(an) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexScan(t title_pkey) IndexScan(chn char_name_pkey) HashJoin(ci an) HashJoin(ci an rt) NestLoop(ci an rt n) NestLoop(ci an rt n mc) NestLoop(ci an rt n mc cn) NestLoop(ci an rt n mc cn t) NestLoop(ci an rt n mc cn t chn) Leading((((((((ci an) rt) n) mc) cn) t) chn)) */
"SELECT MIN(an.name) AS alternative_name, MIN(chn.name) AS character_name, MIN(t.title) AS movie
FROM aka_name AS an,
 char_name AS chn,
 cast_info AS ci,
 company_name AS cn,
 movie_companies AS mc,
 name AS n,
 role_type AS rt,
 title AS t
WHERE ci.movie_id = t.id
 AND t.id = mc.movie_id
 AND ci.movie_id = mc.movie_id
 AND mc.company_id = cn.id
 AND ci.role_id = rt.id
 AND n.id = ci.person_id
 AND chn.id = ci.person_role_id
 AND an.person_id = n.id
 AND an.person_id = ci.person_id
AND ci.note IN ('(voice)', '(as Kalle BjerkÃ¸)', '(as Grete Volters)', '(fixer USA)', '(as Brigitte Corey)')
AND cn.country_code = '[us]'
AND mc.note IS NOT NULL 
AND (mc.note LIKE '%s%' OR mc.note LIKE '%t%')
AND n.gender = 'f'
AND n.name LIKE '%i%'
AND rt.role = 'actress'
AND t.production_year BETWEEN 1964 AND 1996;",5,/*+  SeqScan(ci) SeqScan(an) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexScan(t title_pkey) IndexScan(chn char_name_pkey) HashJoin(ci an) HashJoin(ci an rt) NestLoop(ci an rt n) NestLoop(ci an rt n mc) NestLoop(ci an rt n mc cn) NestLoop(ci an rt n mc cn t) NestLoop(ci an rt n mc cn t chn) Leading((((((((ci an) rt) n) mc) cn) t) chn)) */
"SELECT MIN(an.name) AS alternative_name, MIN(chn.name) AS character_name, MIN(t.title) AS movie
FROM aka_name AS an,
 char_name AS chn,
 cast_info AS ci,
 company_name AS cn,
 movie_companies AS mc,
 name AS n,
 role_type AS rt,
 title AS t
WHERE ci.movie_id = t.id
 AND t.id = mc.movie_id
 AND ci.movie_id = mc.movie_id
 AND mc.company_id = cn.id
 AND ci.role_id = rt.id
 AND n.id = ci.person_id
 AND chn.id = ci.person_role_id
 AND an.person_id = n.id
 AND an.person_id = ci.person_id
AND ci.note IN ('(uncredited)', '(as James Gosa)', '(as Danny Resnik)', '(1966-1982)', '(as FeFe Bardot)')
AND cn.country_code = '[us]'
AND mc.note IS NOT NULL 
AND (mc.note LIKE '%)%' OR mc.note LIKE '%)%')
AND n.gender = 'm'
AND n.name LIKE '%b%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1927 AND 1995;",5,/*+  SeqScan(ci) SeqScan(an) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexScan(t title_pkey) IndexScan(chn char_name_pkey) HashJoin(ci an) HashJoin(ci an rt) NestLoop(ci an rt n) NestLoop(ci an rt n mc) NestLoop(ci an rt n mc cn) NestLoop(ci an rt n mc cn t) NestLoop(ci an rt n mc cn t chn) Leading((((((((ci an) rt) n) mc) cn) t) chn)) */
"SELECT MIN(an.name) AS alternative_name, MIN(chn.name) AS character_name, MIN(t.title) AS movie
FROM aka_name AS an,
 char_name AS chn,
 cast_info AS ci,
 company_name AS cn,
 movie_companies AS mc,
 name AS n,
 role_type AS rt,
 title AS t
WHERE ci.movie_id = t.id
 AND t.id = mc.movie_id
 AND ci.movie_id = mc.movie_id
 AND mc.company_id = cn.id
 AND ci.role_id = rt.id
 AND n.id = ci.person_id
 AND chn.id = ci.person_role_id
 AND an.person_id = n.id
 AND an.person_id = ci.person_id
AND ci.note IN ('(uncredited)', '(as Robyn Morgan)', '(1961-1980)', '(as Speedy Kean)', '(as h.prÃ¼ller)')
AND cn.country_code = '[nl]'
AND mc.note IS NOT NULL 
AND (mc.note LIKE '%)%' OR mc.note LIKE '%N%')
AND n.gender = 'f'
AND n.name LIKE '%s%'
AND rt.role = 'actress'
AND t.production_year BETWEEN 1905 AND 1981;",76,/*+  SeqScan(mc) SeqScan(cn) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) IndexScan(n name_pkey) IndexScan(an person_id_aka_name) SeqScan(rt) IndexScan(chn char_name_pkey) HashJoin(mc cn) NestLoop(mc cn t) NestLoop(mc cn t ci) NestLoop(mc cn t ci n) NestLoop(mc cn t ci n an) HashJoin(mc cn t ci n an rt) NestLoop(mc cn t ci n an rt chn) Leading((((((((mc cn) t) ci) n) an) rt) chn)) */
"SELECT MIN(an.name) AS alternative_name, MIN(chn.name) AS character_name, MIN(t.title) AS movie
FROM aka_name AS an,
 char_name AS chn,
 cast_info AS ci,
 company_name AS cn,
 movie_companies AS mc,
 name AS n,
 role_type AS rt,
 title AS t
WHERE ci.movie_id = t.id
 AND t.id = mc.movie_id
 AND ci.movie_id = mc.movie_id
 AND mc.company_id = cn.id
 AND ci.role_id = rt.id
 AND n.id = ci.person_id
 AND chn.id = ci.person_role_id
 AND an.person_id = n.id
 AND an.person_id = ci.person_id
AND ci.note IN ('(uncredited)', '(as Bob Rykas)', '(as Melba Senta)', '(as Ellen Liu)', '(as Norm Michaels)')
AND cn.country_code = '[de]'
AND mc.note IS NOT NULL 
AND (mc.note LIKE '%r%' OR mc.note LIKE '%V%')
AND n.gender = 'm'
AND n.name LIKE '%n%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1890 AND 2007;",76,/*+  SeqScan(mc) SeqScan(cn) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) IndexScan(n name_pkey) IndexScan(an person_id_aka_name) SeqScan(rt) IndexScan(chn char_name_pkey) HashJoin(mc cn) NestLoop(mc cn t) NestLoop(mc cn t ci) NestLoop(mc cn t ci n) NestLoop(mc cn t ci n an) HashJoin(mc cn t ci n an rt) NestLoop(mc cn t ci n an rt chn) Leading((((((((mc cn) t) ci) n) an) rt) chn)) */
"SELECT MIN(an.name) AS alternative_name, MIN(chn.name) AS character_name, MIN(t.title) AS movie
FROM aka_name AS an,
 char_name AS chn,
 cast_info AS ci,
 company_name AS cn,
 movie_companies AS mc,
 name AS n,
 role_type AS rt,
 title AS t
WHERE ci.movie_id = t.id
 AND t.id = mc.movie_id
 AND ci.movie_id = mc.movie_id
 AND mc.company_id = cn.id
 AND ci.role_id = rt.id
 AND n.id = ci.person_id
 AND chn.id = ci.person_role_id
 AND an.person_id = n.id
 AND an.person_id = ci.person_id
AND ci.note IN ('(as Andrea Ros Buerrero)', '(as Mr. Newburg)', '(as Manel SolÃ s)', '(as Pratap Potan)', '(as Mike Findlay)')
AND cn.country_code = '[hk]'
AND mc.note IS NOT NULL 
AND (mc.note LIKE '%u%' OR mc.note LIKE '%2%')
AND n.gender = 'f'
AND n.name LIKE '%r%'
AND rt.role = 'actress'
AND t.production_year BETWEEN 1959 AND 2017;",294,/*+  SeqScan(t) SeqScan(mc) SeqScan(cn) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(an person_id_aka_name) IndexScan(chn char_name_pkey) HashJoin(mc cn) HashJoin(t mc cn) NestLoop(t mc cn ci) HashJoin(t mc cn ci rt) NestLoop(t mc cn ci rt n) NestLoop(t mc cn ci rt n an) NestLoop(t mc cn ci rt n an chn) Leading(((((((t (mc cn)) ci) rt) n) an) chn)) */
"SELECT MIN(an.name) AS alternative_name, MIN(chn.name) AS character_name, MIN(t.title) AS movie
FROM aka_name AS an,
 char_name AS chn,
 cast_info AS ci,
 company_name AS cn,
 movie_companies AS mc,
 name AS n,
 role_type AS rt,
 title AS t
WHERE ci.movie_id = t.id
 AND t.id = mc.movie_id
 AND ci.movie_id = mc.movie_id
 AND mc.company_id = cn.id
 AND ci.role_id = rt.id
 AND n.id = ci.person_id
 AND chn.id = ci.person_role_id
 AND an.person_id = n.id
 AND an.person_id = ci.person_id
AND ci.note IN ('(uncredited)', '(as DÃ¶rte VÃ¶lz)', '(as Linda Thorne)', '(video) (1980s)', '(story elements)')
AND cn.country_code = '[ru]'
AND mc.note IS NOT NULL 
AND (mc.note LIKE '%0%' OR mc.note LIKE '%r%')
AND n.gender = 'm'
AND n.name LIKE '%R%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1954 AND 2007;",5,/*+  SeqScan(ci) SeqScan(an) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexScan(t title_pkey) IndexScan(chn char_name_pkey) HashJoin(ci an) HashJoin(ci an rt) NestLoop(ci an rt n) NestLoop(ci an rt n mc) NestLoop(ci an rt n mc cn) NestLoop(ci an rt n mc cn t) NestLoop(ci an rt n mc cn t chn) Leading((((((((ci an) rt) n) mc) cn) t) chn)) */
"SELECT MIN(an.name) AS alternative_name, MIN(chn.name) AS character_name, MIN(t.title) AS movie
FROM aka_name AS an,
 char_name AS chn,
 cast_info AS ci,
 company_name AS cn,
 movie_companies AS mc,
 name AS n,
 role_type AS rt,
 title AS t
WHERE ci.movie_id = t.id
 AND t.id = mc.movie_id
 AND ci.movie_id = mc.movie_id
 AND mc.company_id = cn.id
 AND ci.role_id = rt.id
 AND n.id = ci.person_id
 AND chn.id = ci.person_role_id
 AND an.person_id = n.id
 AND an.person_id = ci.person_id
AND ci.note IN ('(as Kate O''Brien)', '(Miss March 1986)', '(U.S. costumes)', '(Fight Scene Only)', '(as Yu. Orlov)')
AND cn.country_code = '[nl]'
AND mc.note IS NOT NULL 
AND (mc.note LIKE '%3%' OR mc.note LIKE '%2%')
AND n.gender = 'f'
AND n.name LIKE '%i%'
AND rt.role = 'actress'
AND t.production_year BETWEEN 1961 AND 2015;",5,/*+  SeqScan(ci) SeqScan(an) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexScan(t title_pkey) IndexScan(chn char_name_pkey) HashJoin(ci an) HashJoin(ci an rt) NestLoop(ci an rt n) NestLoop(ci an rt n mc) NestLoop(ci an rt n mc cn) NestLoop(ci an rt n mc cn t) NestLoop(ci an rt n mc cn t chn) Leading((((((((ci an) rt) n) mc) cn) t) chn)) */
"SELECT MIN(an.name) AS alternative_name, MIN(chn.name) AS character_name, MIN(t.title) AS movie
FROM aka_name AS an,
 char_name AS chn,
 cast_info AS ci,
 company_name AS cn,
 movie_companies AS mc,
 name AS n,
 role_type AS rt,
 title AS t
WHERE ci.movie_id = t.id
 AND t.id = mc.movie_id
 AND ci.movie_id = mc.movie_id
 AND mc.company_id = cn.id
 AND ci.role_id = rt.id
 AND n.id = ci.person_id
 AND chn.id = ci.person_role_id
 AND an.person_id = n.id
 AND an.person_id = ci.person_id
AND ci.note IN ('(as Edmund Dalby)', '(creator) (1963)', '(as Kid)', '(as Wei-yun Tseng)', '(as Chan Ka Wo)')
AND cn.country_code = '[us]'
AND mc.note IS NOT NULL 
AND (mc.note LIKE '%S%' OR mc.note LIKE '%n%')
AND n.gender = 'm'
AND n.name LIKE '%m%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1888 AND 1920;",76,/*+  SeqScan(mc) SeqScan(cn) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) IndexScan(n name_pkey) IndexScan(an person_id_aka_name) SeqScan(rt) IndexScan(chn char_name_pkey) HashJoin(mc cn) NestLoop(mc cn t) NestLoop(mc cn t ci) NestLoop(mc cn t ci n) NestLoop(mc cn t ci n an) HashJoin(mc cn t ci n an rt) NestLoop(mc cn t ci n an rt chn) Leading((((((((mc cn) t) ci) n) an) rt) chn)) */
"SELECT MIN(an.name) AS alternative_name, MIN(chn.name) AS character_name, MIN(t.title) AS movie
FROM aka_name AS an,
 char_name AS chn,
 cast_info AS ci,
 company_name AS cn,
 movie_companies AS mc,
 name AS n,
 role_type AS rt,
 title AS t
WHERE ci.movie_id = t.id
 AND t.id = mc.movie_id
 AND ci.movie_id = mc.movie_id
 AND mc.company_id = cn.id
 AND ci.role_id = rt.id
 AND n.id = ci.person_id
 AND chn.id = ci.person_role_id
 AND an.person_id = n.id
 AND an.person_id = ci.person_id
AND ci.note IN ('(as Sam Nagakane)', '(as le chien Bambi)', '(as Pamela Kesler)', '(as Daniel Magner)', '(as Cameron A.)')
AND cn.country_code = '[ar]'
AND mc.note IS NOT NULL 
AND (mc.note LIKE '%t%' OR mc.note LIKE '%0%')
AND n.gender = 'm'
AND n.name LIKE '%a%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1996 AND 2010;",76,/*+  SeqScan(mc) SeqScan(cn) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) IndexScan(n name_pkey) IndexScan(an person_id_aka_name) SeqScan(rt) IndexScan(chn char_name_pkey) HashJoin(mc cn) NestLoop(mc cn t) NestLoop(mc cn t ci) NestLoop(mc cn t ci n) NestLoop(mc cn t ci n an) HashJoin(mc cn t ci n an rt) NestLoop(mc cn t ci n an rt chn) Leading((((((((mc cn) t) ci) n) an) rt) chn)) */
"SELECT MIN(an.name) AS alternative_name, MIN(chn.name) AS character_name, MIN(t.title) AS movie
FROM aka_name AS an,
 char_name AS chn,
 cast_info AS ci,
 company_name AS cn,
 movie_companies AS mc,
 name AS n,
 role_type AS rt,
 title AS t
WHERE ci.movie_id = t.id
 AND t.id = mc.movie_id
 AND ci.movie_id = mc.movie_id
 AND mc.company_id = cn.id
 AND ci.role_id = rt.id
 AND n.id = ci.person_id
 AND chn.id = ci.person_role_id
 AND an.person_id = n.id
 AND an.person_id = ci.person_id
AND ci.note IN ('(uncredited)', '(as Shu Lan Noma)', '(as Scott Davids)', '(as Kathleen Man)', '(as Hiroshi Ãmori)')
AND cn.country_code = '[ar]'
AND mc.note IS NOT NULL 
AND (mc.note LIKE '%6%' OR mc.note LIKE '%r%')
AND n.gender = 'm'
AND n.name LIKE '%t%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1902 AND 2013;",5,/*+  SeqScan(ci) SeqScan(an) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexScan(t title_pkey) IndexScan(chn char_name_pkey) HashJoin(ci an) HashJoin(ci an rt) NestLoop(ci an rt n) NestLoop(ci an rt n mc) NestLoop(ci an rt n mc cn) NestLoop(ci an rt n mc cn t) NestLoop(ci an rt n mc cn t chn) Leading((((((((ci an) rt) n) mc) cn) t) chn)) */
"SELECT MIN(an.name) AS alternative_name, MIN(chn.name) AS character_name, MIN(t.title) AS movie
FROM aka_name AS an,
 char_name AS chn,
 cast_info AS ci,
 company_name AS cn,
 movie_companies AS mc,
 name AS n,
 role_type AS rt,
 title AS t
WHERE ci.movie_id = t.id
 AND t.id = mc.movie_id
 AND ci.movie_id = mc.movie_id
 AND mc.company_id = cn.id
 AND ci.role_id = rt.id
 AND n.id = ci.person_id
 AND chn.id = ci.person_role_id
 AND an.person_id = n.id
 AND an.person_id = ci.person_id
AND ci.note IN ('(as Billy Moran)', '(as Marco Z)', '(prison advisor)', '(parts 4-6)', '(ghost consultant)')
AND cn.country_code = '[us]'
AND mc.note IS NOT NULL 
AND (mc.note LIKE '%1%' OR mc.note LIKE '%)%')
AND n.gender = 'm'
AND n.name LIKE '%l%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1917 AND 2013;",5,/*+  SeqScan(ci) SeqScan(an) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexScan(t title_pkey) IndexScan(chn char_name_pkey) HashJoin(ci an) HashJoin(ci an rt) NestLoop(ci an rt n) NestLoop(ci an rt n mc) NestLoop(ci an rt n mc cn) NestLoop(ci an rt n mc cn t) NestLoop(ci an rt n mc cn t chn) Leading((((((((ci an) rt) n) mc) cn) t) chn)) */
"SELECT MIN(an.name) AS alternative_name, MIN(chn.name) AS character_name, MIN(t.title) AS movie
FROM aka_name AS an,
 char_name AS chn,
 cast_info AS ci,
 company_name AS cn,
 movie_companies AS mc,
 name AS n,
 role_type AS rt,
 title AS t
WHERE ci.movie_id = t.id
 AND t.id = mc.movie_id
 AND ci.movie_id = mc.movie_id
 AND mc.company_id = cn.id
 AND ci.role_id = rt.id
 AND n.id = ci.person_id
 AND chn.id = ci.person_role_id
 AND an.person_id = n.id
 AND an.person_id = ci.person_id
AND ci.note IN ('(as Andre Maranne)', '(as Poirier)', '(13 yrs. old)', '(as Yu. Zhuravlyov)', '(as Sr. Nadie)')
AND cn.country_code = '[fr]'
AND mc.note IS NOT NULL 
AND (mc.note LIKE '%(%' OR mc.note LIKE '%(%')
AND n.gender = 'm'
AND n.name LIKE '%a%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1943 AND 2014;",294,/*+  SeqScan(t) SeqScan(mc) SeqScan(cn) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(an person_id_aka_name) IndexScan(chn char_name_pkey) HashJoin(mc cn) HashJoin(t mc cn) NestLoop(t mc cn ci) HashJoin(t mc cn ci rt) NestLoop(t mc cn ci rt n) NestLoop(t mc cn ci rt n an) NestLoop(t mc cn ci rt n an chn) Leading(((((((t (mc cn)) ci) rt) n) an) chn)) */
"SELECT MIN(an.name) AS alternative_name, MIN(chn.name) AS character_name, MIN(t.title) AS movie
FROM aka_name AS an,
 char_name AS chn,
 cast_info AS ci,
 company_name AS cn,
 movie_companies AS mc,
 name AS n,
 role_type AS rt,
 title AS t
WHERE ci.movie_id = t.id
 AND t.id = mc.movie_id
 AND ci.movie_id = mc.movie_id
 AND mc.company_id = cn.id
 AND ci.role_id = rt.id
 AND n.id = ci.person_id
 AND chn.id = ci.person_role_id
 AND an.person_id = n.id
 AND an.person_id = ci.person_id
AND ci.note IN ('(uncredited)', '(as Dino Hodzic)', '(as Dimce Gesevski)', '(as John Tan)', '(as Jarek Zawadko)')
AND cn.country_code = '[eg]'
AND mc.note IS NOT NULL 
AND (mc.note LIKE '%a%' OR mc.note LIKE '%(%')
AND n.gender = 'm'
AND n.name LIKE '%m%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1936 AND 1951;",294,/*+  SeqScan(t) SeqScan(mc) SeqScan(cn) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(an person_id_aka_name) IndexScan(chn char_name_pkey) HashJoin(mc cn) HashJoin(t mc cn) NestLoop(t mc cn ci) HashJoin(t mc cn ci rt) NestLoop(t mc cn ci rt n) NestLoop(t mc cn ci rt n an) NestLoop(t mc cn ci rt n an chn) Leading(((((((t (mc cn)) ci) rt) n) an) chn)) */
"SELECT MIN(an.name) AS alternative_name, MIN(chn.name) AS character_name, MIN(t.title) AS movie
FROM aka_name AS an,
 char_name AS chn,
 cast_info AS ci,
 company_name AS cn,
 movie_companies AS mc,
 name AS n,
 role_type AS rt,
 title AS t
WHERE ci.movie_id = t.id
 AND t.id = mc.movie_id
 AND ci.movie_id = mc.movie_id
 AND mc.company_id = cn.id
 AND ci.role_id = rt.id
 AND n.id = ci.person_id
 AND chn.id = ci.person_role_id
 AND an.person_id = n.id
 AND an.person_id = ci.person_id
AND ci.note IN ('(voice) (uncredited)', '(local liaison)', '(as Cesar Roman)', '(as Jillian Bond)', '(as David Eden)')
AND cn.country_code = '[us]'
AND mc.note IS NOT NULL 
AND (mc.note LIKE '%)%' OR mc.note LIKE '%)%')
AND n.gender = 'm'
AND n.name LIKE '%y%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1975 AND 2020;",294,/*+  SeqScan(t) SeqScan(mc) SeqScan(cn) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(an person_id_aka_name) IndexScan(chn char_name_pkey) HashJoin(mc cn) HashJoin(t mc cn) NestLoop(t mc cn ci) HashJoin(t mc cn ci rt) NestLoop(t mc cn ci rt n) NestLoop(t mc cn ci rt n an) NestLoop(t mc cn ci rt n an chn) Leading(((((((t (mc cn)) ci) rt) n) an) chn)) */
"SELECT MIN(an.name) AS alternative_name, MIN(chn.name) AS character_name, MIN(t.title) AS movie
FROM aka_name AS an,
 char_name AS chn,
 cast_info AS ci,
 company_name AS cn,
 movie_companies AS mc,
 name AS n,
 role_type AS rt,
 title AS t
WHERE ci.movie_id = t.id
 AND t.id = mc.movie_id
 AND ci.movie_id = mc.movie_id
 AND mc.company_id = cn.id
 AND ci.role_id = rt.id
 AND n.id = ci.person_id
 AND chn.id = ci.person_role_id
 AND an.person_id = n.id
 AND an.person_id = ci.person_id
AND ci.note IN ('(as Carmel Mccallion)', '(Munna)', '(as David Donaghty)', '(as Sindy Lang)', '(as Ryco Sarroga)')
AND cn.country_code = '[nl]'
AND mc.note IS NOT NULL 
AND (mc.note LIKE '%r%' OR mc.note LIKE '%r%')
AND n.gender = 'f'
AND n.name LIKE '%l%'
AND rt.role = 'actress'
AND t.production_year BETWEEN 1909 AND 2004;",294,/*+  SeqScan(t) SeqScan(mc) SeqScan(cn) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(an person_id_aka_name) IndexScan(chn char_name_pkey) HashJoin(mc cn) HashJoin(t mc cn) NestLoop(t mc cn ci) HashJoin(t mc cn ci rt) NestLoop(t mc cn ci rt n) NestLoop(t mc cn ci rt n an) NestLoop(t mc cn ci rt n an chn) Leading(((((((t (mc cn)) ci) rt) n) an) chn)) */
"SELECT MIN(an.name) AS alternative_name, MIN(chn.name) AS character_name, MIN(t.title) AS movie
FROM aka_name AS an,
 char_name AS chn,
 cast_info AS ci,
 company_name AS cn,
 movie_companies AS mc,
 name AS n,
 role_type AS rt,
 title AS t
WHERE ci.movie_id = t.id
 AND t.id = mc.movie_id
 AND ci.movie_id = mc.movie_id
 AND mc.company_id = cn.id
 AND ci.role_id = rt.id
 AND n.id = ci.person_id
 AND chn.id = ci.person_role_id
 AND an.person_id = n.id
 AND an.person_id = ci.person_id
AND ci.note IN ('(Non-Sex)', '(as Holly Wood)', '(Stand In)', '(piano instructor)', '(as Roma Migunov)')
AND cn.country_code = '[us]'
AND mc.note IS NOT NULL 
AND (mc.note LIKE '%8%' OR mc.note LIKE '%U%')
AND n.gender = 'm'
AND n.name LIKE '%,%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1964 AND 2012;",5,/*+  SeqScan(ci) SeqScan(an) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexScan(t title_pkey) IndexScan(chn char_name_pkey) HashJoin(ci an) HashJoin(ci an rt) NestLoop(ci an rt n) NestLoop(ci an rt n mc) NestLoop(ci an rt n mc cn) NestLoop(ci an rt n mc cn t) NestLoop(ci an rt n mc cn t chn) Leading((((((((ci an) rt) n) mc) cn) t) chn)) */
"SELECT MIN(an.name) AS alternative_name, MIN(chn.name) AS character_name, MIN(t.title) AS movie
FROM aka_name AS an,
 char_name AS chn,
 cast_info AS ci,
 company_name AS cn,
 movie_companies AS mc,
 name AS n,
 role_type AS rt,
 title AS t
WHERE ci.movie_id = t.id
 AND t.id = mc.movie_id
 AND ci.movie_id = mc.movie_id
 AND mc.company_id = cn.id
 AND ci.role_id = rt.id
 AND n.id = ci.person_id
 AND chn.id = ci.person_role_id
 AND an.person_id = n.id
 AND an.person_id = ci.person_id
AND ci.note IN ('(uncredited)', '(as David Lucas)', '(LUAR leader)', '(local guide: Cuba)', '(as Susing Yoson)')
AND cn.country_code = '[au]'
AND mc.note IS NOT NULL 
AND (mc.note LIKE '%u%' OR mc.note LIKE '%a%')
AND n.gender = 'm'
AND n.name LIKE '%R%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1932 AND 2008;",5,/*+  SeqScan(ci) SeqScan(an) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexScan(t title_pkey) IndexScan(chn char_name_pkey) HashJoin(ci an) HashJoin(ci an rt) NestLoop(ci an rt n) NestLoop(ci an rt n mc) NestLoop(ci an rt n mc cn) NestLoop(ci an rt n mc cn t) NestLoop(ci an rt n mc cn t chn) Leading((((((((ci an) rt) n) mc) cn) t) chn)) */
"SELECT MIN(an.name) AS alternative_name, MIN(chn.name) AS character_name, MIN(t.title) AS movie
FROM aka_name AS an,
 char_name AS chn,
 cast_info AS ci,
 company_name AS cn,
 movie_companies AS mc,
 name AS n,
 role_type AS rt,
 title AS t
WHERE ci.movie_id = t.id
 AND t.id = mc.movie_id
 AND ci.movie_id = mc.movie_id
 AND mc.company_id = cn.id
 AND ci.role_id = rt.id
 AND n.id = ci.person_id
 AND chn.id = ci.person_role_id
 AND an.person_id = n.id
 AND an.person_id = ci.person_id
AND ci.note IN ('(as Mario LÃ³pez)', '(segment ""Furo, O"")', '(as Lee Sin-Je)', '(as Jorge Nery)', '(as Agustin Bescos)')
AND cn.country_code = '[nl]'
AND mc.note IS NOT NULL 
AND (mc.note LIKE '%)%' OR mc.note LIKE '%t%')
AND n.gender = 'm'
AND n.name LIKE '%,%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1974 AND 2013;",76,/*+  SeqScan(mc) SeqScan(cn) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) IndexScan(n name_pkey) IndexScan(an person_id_aka_name) SeqScan(rt) IndexScan(chn char_name_pkey) HashJoin(mc cn) NestLoop(mc cn t) NestLoop(mc cn t ci) NestLoop(mc cn t ci n) NestLoop(mc cn t ci n an) HashJoin(mc cn t ci n an rt) NestLoop(mc cn t ci n an rt chn) Leading((((((((mc cn) t) ci) n) an) rt) chn)) */
"SELECT MIN(an.name) AS alternative_name, MIN(chn.name) AS character_name, MIN(t.title) AS movie
FROM aka_name AS an,
 char_name AS chn,
 cast_info AS ci,
 company_name AS cn,
 movie_companies AS mc,
 name AS n,
 role_type AS rt,
 title AS t
WHERE ci.movie_id = t.id
 AND t.id = mc.movie_id
 AND ci.movie_id = mc.movie_id
 AND mc.company_id = cn.id
 AND ci.role_id = rt.id
 AND n.id = ci.person_id
 AND chn.id = ci.person_role_id
 AND an.person_id = n.id
 AND an.person_id = ci.person_id
AND ci.note IN ('(segment ""Quo vadis Europa"")', '(as Gian Di Donna)', '(segment ""Boo Men"")', '(as Venoly)', '(as Nancy Trites)')
AND cn.country_code = '[br]'
AND mc.note IS NOT NULL 
AND (mc.note LIKE '%(%' OR mc.note LIKE '%)%')
AND n.gender = 'm'
AND n.name LIKE '%e%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1979 AND 2012;",294,/*+  SeqScan(t) SeqScan(mc) SeqScan(cn) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(an person_id_aka_name) IndexScan(chn char_name_pkey) HashJoin(mc cn) HashJoin(t mc cn) NestLoop(t mc cn ci) HashJoin(t mc cn ci rt) NestLoop(t mc cn ci rt n) NestLoop(t mc cn ci rt n an) NestLoop(t mc cn ci rt n an chn) Leading(((((((t (mc cn)) ci) rt) n) an) chn)) */
"SELECT MIN(an.name) AS alternative_name, MIN(chn.name) AS character_name, MIN(t.title) AS movie
FROM aka_name AS an,
 char_name AS chn,
 cast_info AS ci,
 company_name AS cn,
 movie_companies AS mc,
 name AS n,
 role_type AS rt,
 title AS t
WHERE ci.movie_id = t.id
 AND t.id = mc.movie_id
 AND ci.movie_id = mc.movie_id
 AND mc.company_id = cn.id
 AND ci.role_id = rt.id
 AND n.id = ci.person_id
 AND chn.id = ci.person_role_id
 AND an.person_id = n.id
 AND an.person_id = ci.person_id
AND ci.note IN ('(as Aleksander Mikic)', '(as Dave Cameron)', '(local production)', '(as Tee Wor Chu)', '(as YÃ»ji Hayakawa)')
AND cn.country_code = '[ch]'
AND mc.note IS NOT NULL 
AND (mc.note LIKE '%0%' OR mc.note LIKE '%a%')
AND n.gender = 'm'
AND n.name LIKE '%a%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1994 AND 2013;",5,/*+  SeqScan(ci) SeqScan(an) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexScan(t title_pkey) IndexScan(chn char_name_pkey) HashJoin(ci an) HashJoin(ci an rt) NestLoop(ci an rt n) NestLoop(ci an rt n mc) NestLoop(ci an rt n mc cn) NestLoop(ci an rt n mc cn t) NestLoop(ci an rt n mc cn t chn) Leading((((((((ci an) rt) n) mc) cn) t) chn)) */
"SELECT MIN(an.name) AS alternative_name, MIN(chn.name) AS character_name, MIN(t.title) AS movie
FROM aka_name AS an,
 char_name AS chn,
 cast_info AS ci,
 company_name AS cn,
 movie_companies AS mc,
 name AS n,
 role_type AS rt,
 title AS t
WHERE ci.movie_id = t.id
 AND t.id = mc.movie_id
 AND ci.movie_id = mc.movie_id
 AND mc.company_id = cn.id
 AND ci.role_id = rt.id
 AND n.id = ci.person_id
 AND chn.id = ci.person_role_id
 AND an.person_id = n.id
 AND an.person_id = ci.person_id
AND ci.note IN ('(uncredited)', '(as Jarek Zawadko)', '(as Gerald Perreau)', '(as Anette Waaler)', '(angora consultant)')
AND cn.country_code = '[us]'
AND mc.note IS NOT NULL 
AND (mc.note LIKE '%4%' OR mc.note LIKE '%l%')
AND n.gender = 'm'
AND n.name LIKE '%T%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1894 AND 1948;",5,/*+  SeqScan(ci) SeqScan(an) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexScan(t title_pkey) IndexScan(chn char_name_pkey) HashJoin(ci an) HashJoin(ci an rt) NestLoop(ci an rt n) NestLoop(ci an rt n mc) NestLoop(ci an rt n mc cn) NestLoop(ci an rt n mc cn t) NestLoop(ci an rt n mc cn t chn) Leading((((((((ci an) rt) n) mc) cn) t) chn)) */
"SELECT MIN(an.name) AS alternative_name, MIN(chn.name) AS character_name, MIN(t.title) AS movie
FROM aka_name AS an,
 char_name AS chn,
 cast_info AS ci,
 company_name AS cn,
 movie_companies AS mc,
 name AS n,
 role_type AS rt,
 title AS t
WHERE ci.movie_id = t.id
 AND t.id = mc.movie_id
 AND ci.movie_id = mc.movie_id
 AND mc.company_id = cn.id
 AND ci.role_id = rt.id
 AND n.id = ci.person_id
 AND chn.id = ci.person_role_id
 AND an.person_id = n.id
 AND an.person_id = ci.person_id
AND ci.note IN ('(voice)', '(as Dr Iain West)', '(winner)', '(skate artist)', '(style guide)')
AND cn.country_code = '[be]'
AND mc.note IS NOT NULL 
AND (mc.note LIKE '%a%' OR mc.note LIKE '%a%')
AND n.gender = 'f'
AND n.name LIKE '%e%'
AND rt.role = 'actress'
AND t.production_year BETWEEN 1913 AND 2015;",5,/*+  SeqScan(ci) SeqScan(an) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexScan(t title_pkey) IndexScan(chn char_name_pkey) HashJoin(ci an) HashJoin(ci an rt) NestLoop(ci an rt n) NestLoop(ci an rt n mc) NestLoop(ci an rt n mc cn) NestLoop(ci an rt n mc cn t) NestLoop(ci an rt n mc cn t chn) Leading((((((((ci an) rt) n) mc) cn) t) chn)) */
"SELECT MIN(an.name) AS alternative_name, MIN(chn.name) AS character_name, MIN(t.title) AS movie
FROM aka_name AS an,
 char_name AS chn,
 cast_info AS ci,
 company_name AS cn,
 movie_companies AS mc,
 name AS n,
 role_type AS rt,
 title AS t
WHERE ci.movie_id = t.id
 AND t.id = mc.movie_id
 AND ci.movie_id = mc.movie_id
 AND mc.company_id = cn.id
 AND ci.role_id = rt.id
 AND n.id = ci.person_id
 AND chn.id = ci.person_role_id
 AND an.person_id = n.id
 AND an.person_id = ci.person_id
AND ci.note IN ('(uncredited)', '(as Manmojee)', '(as Mitsu Kurokawa)', '(enemy planner)', '(world designer)')
AND cn.country_code = '[it]'
AND mc.note IS NOT NULL 
AND (mc.note LIKE '%t%' OR mc.note LIKE '%(%')
AND n.gender = 'f'
AND n.name LIKE '%M%'
AND rt.role = 'actress'
AND t.production_year BETWEEN 1914 AND 1965;",5,/*+  SeqScan(ci) SeqScan(an) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexScan(t title_pkey) IndexScan(chn char_name_pkey) HashJoin(ci an) HashJoin(ci an rt) NestLoop(ci an rt n) NestLoop(ci an rt n mc) NestLoop(ci an rt n mc cn) NestLoop(ci an rt n mc cn t) NestLoop(ci an rt n mc cn t chn) Leading((((((((ci an) rt) n) mc) cn) t) chn)) */
"SELECT MIN(an.name) AS alternative_name, MIN(chn.name) AS character_name, MIN(t.title) AS movie
FROM aka_name AS an,
 char_name AS chn,
 cast_info AS ci,
 company_name AS cn,
 movie_companies AS mc,
 name AS n,
 role_type AS rt,
 title AS t
WHERE ci.movie_id = t.id
 AND t.id = mc.movie_id
 AND ci.movie_id = mc.movie_id
 AND mc.company_id = cn.id
 AND ci.role_id = rt.id
 AND n.id = ci.person_id
 AND chn.id = ci.person_role_id
 AND an.person_id = n.id
 AND an.person_id = ci.person_id
AND ci.note IN ('(uncredited)', '(as Won Do)', '(as Yana Benyumov)', '(as Albert Paulson)', '(as William Bush)')
AND cn.country_code = '[gb]'
AND mc.note IS NOT NULL 
AND (mc.note LIKE '%n%' OR mc.note LIKE '%t%')
AND n.gender = 'm'
AND n.name LIKE '%i%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1908 AND 2015;",5,/*+  SeqScan(ci) SeqScan(an) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexScan(t title_pkey) IndexScan(chn char_name_pkey) HashJoin(ci an) HashJoin(ci an rt) NestLoop(ci an rt n) NestLoop(ci an rt n mc) NestLoop(ci an rt n mc cn) NestLoop(ci an rt n mc cn t) NestLoop(ci an rt n mc cn t chn) Leading((((((((ci an) rt) n) mc) cn) t) chn)) */
"SELECT MIN(an.name) AS alternative_name, MIN(chn.name) AS character_name, MIN(t.title) AS movie
FROM aka_name AS an,
 char_name AS chn,
 cast_info AS ci,
 company_name AS cn,
 movie_companies AS mc,
 name AS n,
 role_type AS rt,
 title AS t
WHERE ci.movie_id = t.id
 AND t.id = mc.movie_id
 AND ci.movie_id = mc.movie_id
 AND mc.company_id = cn.id
 AND ci.role_id = rt.id
 AND n.id = ci.person_id
 AND chn.id = ci.person_role_id
 AND an.person_id = n.id
 AND an.person_id = ci.person_id
AND ci.note IN ('(as Edward Bell)', '(as Kelly M. Dixon)', '(Matron)', '(as Antcar)', '(as Rob Koch)')
AND cn.country_code = '[us]'
AND mc.note IS NOT NULL 
AND (mc.note LIKE '%(%' OR mc.note LIKE '%S%')
AND n.gender = 'm'
AND n.name LIKE '%l%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1970 AND 1984;",294,/*+  SeqScan(t) SeqScan(mc) SeqScan(cn) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(an person_id_aka_name) IndexScan(chn char_name_pkey) HashJoin(mc cn) HashJoin(t mc cn) NestLoop(t mc cn ci) HashJoin(t mc cn ci rt) NestLoop(t mc cn ci rt n) NestLoop(t mc cn ci rt n an) NestLoop(t mc cn ci rt n an chn) Leading(((((((t (mc cn)) ci) rt) n) an) chn)) */
"SELECT MIN(an.name) AS alternative_name, MIN(chn.name) AS character_name, MIN(t.title) AS movie
FROM aka_name AS an,
 char_name AS chn,
 cast_info AS ci,
 company_name AS cn,
 movie_companies AS mc,
 name AS n,
 role_type AS rt,
 title AS t
WHERE ci.movie_id = t.id
 AND t.id = mc.movie_id
 AND ci.movie_id = mc.movie_id
 AND mc.company_id = cn.id
 AND ci.role_id = rt.id
 AND n.id = ci.person_id
 AND chn.id = ci.person_role_id
 AND an.person_id = n.id
 AND an.person_id = ci.person_id
AND ci.note IN ('(as Max Elfeldt)', '(as Andy Worm)', '(as Mr. Richmond)', '(as Lockie Jeffery)', '(as Bruce LaNoil)')
AND cn.country_code = '[us]'
AND mc.note IS NOT NULL 
AND (mc.note LIKE '%(%' OR mc.note LIKE '%(%')
AND n.gender = 'm'
AND n.name LIKE '%f%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1985 AND 2014;",5,/*+  SeqScan(ci) SeqScan(an) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexScan(t title_pkey) IndexScan(chn char_name_pkey) HashJoin(ci an) HashJoin(ci an rt) NestLoop(ci an rt n) NestLoop(ci an rt n mc) NestLoop(ci an rt n mc cn) NestLoop(ci an rt n mc cn t) NestLoop(ci an rt n mc cn t chn) Leading((((((((ci an) rt) n) mc) cn) t) chn)) */
"SELECT MIN(an.name) AS alternative_name, MIN(chn.name) AS character_name, MIN(t.title) AS movie
FROM aka_name AS an,
 char_name AS chn,
 cast_info AS ci,
 company_name AS cn,
 movie_companies AS mc,
 name AS n,
 role_type AS rt,
 title AS t
WHERE ci.movie_id = t.id
 AND t.id = mc.movie_id
 AND ci.movie_id = mc.movie_id
 AND mc.company_id = cn.id
 AND ci.role_id = rt.id
 AND n.id = ci.person_id
 AND chn.id = ci.person_role_id
 AND an.person_id = n.id
 AND an.person_id = ci.person_id
AND ci.note IN ('(as Nancy Lilley)', '(as Jimmie Dugan)', '(as Axel Wandke)', '(head of F1)', '(as Erno)')
AND cn.country_code = '[br]'
AND mc.note IS NOT NULL 
AND (mc.note LIKE '%(%' OR mc.note LIKE '%(%')
AND n.gender = 'f'
AND n.name LIKE '%n%'
AND rt.role = 'actress'
AND t.production_year BETWEEN 1943 AND 2011;",5,/*+  SeqScan(ci) SeqScan(an) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexScan(t title_pkey) IndexScan(chn char_name_pkey) HashJoin(ci an) HashJoin(ci an rt) NestLoop(ci an rt n) NestLoop(ci an rt n mc) NestLoop(ci an rt n mc cn) NestLoop(ci an rt n mc cn t) NestLoop(ci an rt n mc cn t chn) Leading((((((((ci an) rt) n) mc) cn) t) chn)) */
"SELECT MIN(an.name) AS alternative_name, MIN(chn.name) AS character_name, MIN(t.title) AS movie
FROM aka_name AS an,
 char_name AS chn,
 cast_info AS ci,
 company_name AS cn,
 movie_companies AS mc,
 name AS n,
 role_type AS rt,
 title AS t
WHERE ci.movie_id = t.id
 AND t.id = mc.movie_id
 AND ci.movie_id = mc.movie_id
 AND mc.company_id = cn.id
 AND ci.role_id = rt.id
 AND n.id = ci.person_id
 AND chn.id = ci.person_role_id
 AND an.person_id = n.id
 AND an.person_id = ci.person_id
AND ci.note IN ('(archive footage)', '(as Brian C. Waren)', '(video ""Nusinam"")', '(as Agah)', '(as May Montajo)')
AND cn.country_code = '[us]'
AND mc.note IS NOT NULL 
AND (mc.note LIKE '%)%' OR mc.note LIKE '%w%')
AND n.gender = 'f'
AND n.name LIKE '%n%'
AND rt.role = 'actress'
AND t.production_year BETWEEN 1904 AND 2007;",5,/*+  SeqScan(ci) SeqScan(an) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexScan(t title_pkey) IndexScan(chn char_name_pkey) HashJoin(ci an) HashJoin(ci an rt) NestLoop(ci an rt n) NestLoop(ci an rt n mc) NestLoop(ci an rt n mc cn) NestLoop(ci an rt n mc cn t) NestLoop(ci an rt n mc cn t chn) Leading((((((((ci an) rt) n) mc) cn) t) chn)) */
"SELECT MIN(an.name) AS alternative_name, MIN(chn.name) AS character_name, MIN(t.title) AS movie
FROM aka_name AS an,
 char_name AS chn,
 cast_info AS ci,
 company_name AS cn,
 movie_companies AS mc,
 name AS n,
 role_type AS rt,
 title AS t
WHERE ci.movie_id = t.id
 AND t.id = mc.movie_id
 AND ci.movie_id = mc.movie_id
 AND mc.company_id = cn.id
 AND ci.role_id = rt.id
 AND n.id = ci.person_id
 AND chn.id = ci.person_role_id
 AND an.person_id = n.id
 AND an.person_id = ci.person_id
AND ci.note IN ('(as Arthur Millan)', '(as Thom Phillips)', '(as Heera)', '(as DR Juniorkoret)', '(Her)')
AND cn.country_code = '[us]'
AND mc.note IS NOT NULL 
AND (mc.note LIKE '%T%' OR mc.note LIKE '%r%')
AND n.gender = 'm'
AND n.name LIKE '%M%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1902 AND 1969;",5,/*+  SeqScan(ci) SeqScan(an) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexScan(t title_pkey) IndexScan(chn char_name_pkey) HashJoin(ci an) HashJoin(ci an rt) NestLoop(ci an rt n) NestLoop(ci an rt n mc) NestLoop(ci an rt n mc cn) NestLoop(ci an rt n mc cn t) NestLoop(ci an rt n mc cn t chn) Leading((((((((ci an) rt) n) mc) cn) t) chn)) */
"SELECT MIN(an.name) AS alternative_name, MIN(chn.name) AS character_name, MIN(t.title) AS movie
FROM aka_name AS an,
 char_name AS chn,
 cast_info AS ci,
 company_name AS cn,
 movie_companies AS mc,
 name AS n,
 role_type AS rt,
 title AS t
WHERE ci.movie_id = t.id
 AND t.id = mc.movie_id
 AND ci.movie_id = mc.movie_id
 AND mc.company_id = cn.id
 AND ci.role_id = rt.id
 AND n.id = ci.person_id
 AND chn.id = ci.person_role_id
 AND an.person_id = n.id
 AND an.person_id = ci.person_id
AND ci.note IN ('(uncredited)', '(as Melanie Venne)', '(as Andres Isbert)', '(as Laetitia Kandi)', '(as Tommy Loo Chun)')
AND cn.country_code = '[us]'
AND mc.note IS NOT NULL 
AND (mc.note LIKE '%(%' OR mc.note LIKE '%o%')
AND n.gender = 'm'
AND n.name LIKE '%a%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1952 AND 2016;",294,/*+  SeqScan(t) SeqScan(mc) SeqScan(cn) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(an person_id_aka_name) IndexScan(chn char_name_pkey) HashJoin(mc cn) HashJoin(t mc cn) NestLoop(t mc cn ci) HashJoin(t mc cn ci rt) NestLoop(t mc cn ci rt n) NestLoop(t mc cn ci rt n an) NestLoop(t mc cn ci rt n an chn) Leading(((((((t (mc cn)) ci) rt) n) an) chn)) */
"SELECT MIN(an.name) AS alternative_name, MIN(chn.name) AS character_name, MIN(t.title) AS movie
FROM aka_name AS an,
 char_name AS chn,
 cast_info AS ci,
 company_name AS cn,
 movie_companies AS mc,
 name AS n,
 role_type AS rt,
 title AS t
WHERE ci.movie_id = t.id
 AND t.id = mc.movie_id
 AND ci.movie_id = mc.movie_id
 AND mc.company_id = cn.id
 AND ci.role_id = rt.id
 AND n.id = ci.person_id
 AND chn.id = ci.person_role_id
 AND an.person_id = n.id
 AND an.person_id = ci.person_id
AND ci.note IN ('(uncredited)', '(with Bi-2)', '(as Bill Cartlidge)', '(as Roadkill)', '(as Jenny Erotica)')
AND cn.country_code = '[br]'
AND mc.note IS NOT NULL 
AND (mc.note LIKE '%)%' OR mc.note LIKE '%7%')
AND n.gender = 'f'
AND n.name LIKE '%g%'
AND rt.role = 'actress'
AND t.production_year BETWEEN 1934 AND 1986;",5,/*+  SeqScan(ci) SeqScan(an) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexScan(t title_pkey) IndexScan(chn char_name_pkey) HashJoin(ci an) HashJoin(ci an rt) NestLoop(ci an rt n) NestLoop(ci an rt n mc) NestLoop(ci an rt n mc cn) NestLoop(ci an rt n mc cn t) NestLoop(ci an rt n mc cn t chn) Leading((((((((ci an) rt) n) mc) cn) t) chn)) */
"SELECT MIN(an.name) AS alternative_name, MIN(chn.name) AS character_name, MIN(t.title) AS movie
FROM aka_name AS an,
 char_name AS chn,
 cast_info AS ci,
 company_name AS cn,
 movie_companies AS mc,
 name AS n,
 role_type AS rt,
 title AS t
WHERE ci.movie_id = t.id
 AND t.id = mc.movie_id
 AND ci.movie_id = mc.movie_id
 AND mc.company_id = cn.id
 AND ci.role_id = rt.id
 AND n.id = ci.person_id
 AND chn.id = ci.person_role_id
 AND an.person_id = n.id
 AND an.person_id = ci.person_id
AND ci.note IN ('(uncredited)', '(as Fali Unwala)', '(as Victor Mccay)', '(as Kim Turner)', '(as Antatchaburu)')
AND cn.country_code = '[us]'
AND mc.note IS NOT NULL 
AND (mc.note LIKE '%(%' OR mc.note LIKE '%(%')
AND n.gender = 'm'
AND n.name LIKE '%R%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1922 AND 2008;",5,/*+  SeqScan(ci) SeqScan(an) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexScan(t title_pkey) IndexScan(chn char_name_pkey) HashJoin(ci an) HashJoin(ci an rt) NestLoop(ci an rt n) NestLoop(ci an rt n mc) NestLoop(ci an rt n mc cn) NestLoop(ci an rt n mc cn t) NestLoop(ci an rt n mc cn t chn) Leading((((((((ci an) rt) n) mc) cn) t) chn)) */
"SELECT MIN(an.name) AS alternative_name, MIN(chn.name) AS character_name, MIN(t.title) AS movie
FROM aka_name AS an,
 char_name AS chn,
 cast_info AS ci,
 company_name AS cn,
 movie_companies AS mc,
 name AS n,
 role_type AS rt,
 title AS t
WHERE ci.movie_id = t.id
 AND t.id = mc.movie_id
 AND ci.movie_id = mc.movie_id
 AND mc.company_id = cn.id
 AND ci.role_id = rt.id
 AND n.id = ci.person_id
 AND chn.id = ci.person_role_id
 AND an.person_id = n.id
 AND an.person_id = ci.person_id
AND ci.note IN ('(uncredited)', '(as Hally Hammond)', '(as Jutta Schmidt)', '(as John Yat Wing)', '(as Jack Kimball)')
AND cn.country_code = '[us]'
AND mc.note IS NOT NULL 
AND (mc.note LIKE '%(%' OR mc.note LIKE '%0%')
AND n.gender = 'm'
AND n.name LIKE '%s%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1895 AND 1980;",5,/*+  SeqScan(ci) SeqScan(an) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexScan(t title_pkey) IndexScan(chn char_name_pkey) HashJoin(ci an) HashJoin(ci an rt) NestLoop(ci an rt n) NestLoop(ci an rt n mc) NestLoop(ci an rt n mc cn) NestLoop(ci an rt n mc cn t) NestLoop(ci an rt n mc cn t chn) Leading((((((((ci an) rt) n) mc) cn) t) chn)) */
"SELECT MIN(an.name) AS alternative_name, MIN(chn.name) AS character_name, MIN(t.title) AS movie
FROM aka_name AS an,
 char_name AS chn,
 cast_info AS ci,
 company_name AS cn,
 movie_companies AS mc,
 name AS n,
 role_type AS rt,
 title AS t
WHERE ci.movie_id = t.id
 AND t.id = mc.movie_id
 AND ci.movie_id = mc.movie_id
 AND mc.company_id = cn.id
 AND ci.role_id = rt.id
 AND n.id = ci.person_id
 AND chn.id = ci.person_role_id
 AND an.person_id = n.id
 AND an.person_id = ci.person_id
AND ci.note IN ('(uncredited)', '(as Saudia Bio)', '(as Juan J. DÃ­az)', '(producer: CBBC)', '(adviser: weapons)')
AND cn.country_code = '[ar]'
AND mc.note IS NOT NULL 
AND (mc.note LIKE '%0%' OR mc.note LIKE '%)%')
AND n.gender = 'm'
AND n.name LIKE '%,%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1926 AND 2009;",76,/*+  SeqScan(mc) SeqScan(cn) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) IndexScan(n name_pkey) IndexScan(an person_id_aka_name) SeqScan(rt) IndexScan(chn char_name_pkey) HashJoin(mc cn) NestLoop(mc cn t) NestLoop(mc cn t ci) NestLoop(mc cn t ci n) NestLoop(mc cn t ci n an) HashJoin(mc cn t ci n an rt) NestLoop(mc cn t ci n an rt chn) Leading((((((((mc cn) t) ci) n) an) rt) chn)) */
"SELECT MIN(an.name) AS alternative_name, MIN(chn.name) AS character_name, MIN(t.title) AS movie
FROM aka_name AS an,
 char_name AS chn,
 cast_info AS ci,
 company_name AS cn,
 movie_companies AS mc,
 name AS n,
 role_type AS rt,
 title AS t
WHERE ci.movie_id = t.id
 AND t.id = mc.movie_id
 AND ci.movie_id = mc.movie_id
 AND mc.company_id = cn.id
 AND ci.role_id = rt.id
 AND n.id = ci.person_id
 AND chn.id = ci.person_role_id
 AND an.person_id = n.id
 AND an.person_id = ci.person_id
AND ci.note IN ('(archive footage) (uncredited)', '(as Joseph Glick)', '(as Tanya Falan)', '(as Charlotte Chan)', '(1967-1979)')
AND cn.country_code = '[us]'
AND mc.note IS NOT NULL 
AND (mc.note LIKE '%(%' OR mc.note LIKE '%(%')
AND n.gender = 'm'
AND n.name LIKE '%a%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1960 AND 1999;",294,/*+  SeqScan(t) SeqScan(mc) SeqScan(cn) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(an person_id_aka_name) IndexScan(chn char_name_pkey) HashJoin(mc cn) HashJoin(t mc cn) NestLoop(t mc cn ci) HashJoin(t mc cn ci rt) NestLoop(t mc cn ci rt n) NestLoop(t mc cn ci rt n an) NestLoop(t mc cn ci rt n an chn) Leading(((((((t (mc cn)) ci) rt) n) an) chn)) */
"SELECT MIN(an.name) AS alternative_name, MIN(chn.name) AS character_name, MIN(t.title) AS movie
FROM aka_name AS an,
 char_name AS chn,
 cast_info AS ci,
 company_name AS cn,
 movie_companies AS mc,
 name AS n,
 role_type AS rt,
 title AS t
WHERE ci.movie_id = t.id
 AND t.id = mc.movie_id
 AND ci.movie_id = mc.movie_id
 AND mc.company_id = cn.id
 AND ci.role_id = rt.id
 AND n.id = ci.person_id
 AND chn.id = ci.person_role_id
 AND an.person_id = n.id
 AND an.person_id = ci.person_id
AND ci.note IN ('(uncredited)', '(as Helen Myron)', '(plastic surgery)', '(Bob the Tomato)', '(Taxidriver)')
AND cn.country_code = '[au]'
AND mc.note IS NOT NULL 
AND (mc.note LIKE '%)%' OR mc.note LIKE '%)%')
AND n.gender = 'm'
AND n.name LIKE '%,%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1992 AND 2017;",5,/*+  SeqScan(ci) SeqScan(an) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexScan(t title_pkey) IndexScan(chn char_name_pkey) HashJoin(ci an) HashJoin(ci an rt) NestLoop(ci an rt n) NestLoop(ci an rt n mc) NestLoop(ci an rt n mc cn) NestLoop(ci an rt n mc cn t) NestLoop(ci an rt n mc cn t chn) Leading((((((((ci an) rt) n) mc) cn) t) chn)) */
"SELECT MIN(an.name) AS alternative_name, MIN(chn.name) AS character_name, MIN(t.title) AS movie
FROM aka_name AS an,
 char_name AS chn,
 cast_info AS ci,
 company_name AS cn,
 movie_companies AS mc,
 name AS n,
 role_type AS rt,
 title AS t
WHERE ci.movie_id = t.id
 AND t.id = mc.movie_id
 AND ci.movie_id = mc.movie_id
 AND mc.company_id = cn.id
 AND ci.role_id = rt.id
 AND n.id = ci.person_id
 AND chn.id = ci.person_role_id
 AND an.person_id = n.id
 AND an.person_id = ci.person_id
AND ci.note IN ('(uncredited)', '(as L. Tsuladze)', '(as Pia Gemberg)', '(ferryboad rental)', '(as Mckenzee Miles)')
AND cn.country_code = '[us]'
AND mc.note IS NOT NULL 
AND (mc.note LIKE '%V%' OR mc.note LIKE '%U%')
AND n.gender = 'm'
AND n.name LIKE '%n%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1914 AND 2008;",294,/*+  SeqScan(t) SeqScan(mc) SeqScan(cn) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(an person_id_aka_name) IndexScan(chn char_name_pkey) HashJoin(mc cn) HashJoin(t mc cn) NestLoop(t mc cn ci) HashJoin(t mc cn ci rt) NestLoop(t mc cn ci rt n) NestLoop(t mc cn ci rt n an) NestLoop(t mc cn ci rt n an chn) Leading(((((((t (mc cn)) ci) rt) n) an) chn)) */
"SELECT MIN(an.name) AS alternative_name, MIN(chn.name) AS character_name, MIN(t.title) AS movie
FROM aka_name AS an,
 char_name AS chn,
 cast_info AS ci,
 company_name AS cn,
 movie_companies AS mc,
 name AS n,
 role_type AS rt,
 title AS t
WHERE ci.movie_id = t.id
 AND t.id = mc.movie_id
 AND ci.movie_id = mc.movie_id
 AND mc.company_id = cn.id
 AND ci.role_id = rt.id
 AND n.id = ci.person_id
 AND chn.id = ci.person_role_id
 AND an.person_id = n.id
 AND an.person_id = ci.person_id
AND ci.note IN ('(uncredited)', '(as Tony)', '( Kevin''s Father)', '(as A. Presnetsov)', '(as Sarah Keith)')
AND cn.country_code = '[nl]'
AND mc.note IS NOT NULL 
AND (mc.note LIKE '%l%' OR mc.note LIKE '%t%')
AND n.gender = 'f'
AND n.name LIKE '%a%'
AND rt.role = 'actress'
AND t.production_year BETWEEN 1954 AND 2015;",5,/*+  SeqScan(ci) SeqScan(an) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexScan(t title_pkey) IndexScan(chn char_name_pkey) HashJoin(ci an) HashJoin(ci an rt) NestLoop(ci an rt n) NestLoop(ci an rt n mc) NestLoop(ci an rt n mc cn) NestLoop(ci an rt n mc cn t) NestLoop(ci an rt n mc cn t chn) Leading((((((((ci an) rt) n) mc) cn) t) chn)) */
"SELECT MIN(an.name) AS alternative_name, MIN(chn.name) AS character_name, MIN(t.title) AS movie
FROM aka_name AS an,
 char_name AS chn,
 cast_info AS ci,
 company_name AS cn,
 movie_companies AS mc,
 name AS n,
 role_type AS rt,
 title AS t
WHERE ci.movie_id = t.id
 AND t.id = mc.movie_id
 AND ci.movie_id = mc.movie_id
 AND mc.company_id = cn.id
 AND ci.role_id = rt.id
 AND n.id = ci.person_id
 AND chn.id = ci.person_role_id
 AND an.person_id = n.id
 AND an.person_id = ci.person_id
AND ci.note IN ('(uncredited)', '(sequence chief)', '(as Lilibeth)', '(animal keeper)', '(as Emmanuael Mark)')
AND cn.country_code = '[be]'
AND mc.note IS NOT NULL 
AND (mc.note LIKE '%t%' OR mc.note LIKE '%t%')
AND n.gender = 'm'
AND n.name LIKE '%e%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1901 AND 1960;",294,/*+  SeqScan(t) SeqScan(mc) SeqScan(cn) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(an person_id_aka_name) IndexScan(chn char_name_pkey) HashJoin(mc cn) HashJoin(t mc cn) NestLoop(t mc cn ci) HashJoin(t mc cn ci rt) NestLoop(t mc cn ci rt n) NestLoop(t mc cn ci rt n an) NestLoop(t mc cn ci rt n an chn) Leading(((((((t (mc cn)) ci) rt) n) an) chn)) */
"SELECT MIN(an.name) AS alternative_name, MIN(chn.name) AS character_name, MIN(t.title) AS movie
FROM aka_name AS an,
 char_name AS chn,
 cast_info AS ci,
 company_name AS cn,
 movie_companies AS mc,
 name AS n,
 role_type AS rt,
 title AS t
WHERE ci.movie_id = t.id
 AND t.id = mc.movie_id
 AND ci.movie_id = mc.movie_id
 AND mc.company_id = cn.id
 AND ci.role_id = rt.id
 AND n.id = ci.person_id
 AND chn.id = ci.person_role_id
 AND an.person_id = n.id
 AND an.person_id = ci.person_id
AND ci.note IN ('(uncredited)', '(as J. Boone)', '(as Kate Hateley)', '(novel ""Moonwebs"")', '(as Victoria Saez)')
AND cn.country_code = '[za]'
AND mc.note IS NOT NULL 
AND (mc.note LIKE '%t%' OR mc.note LIKE '%a%')
AND n.gender = 'f'
AND n.name LIKE '%a%'
AND rt.role = 'actress'
AND t.production_year BETWEEN 1985 AND 2016;",5,/*+  SeqScan(ci) SeqScan(an) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexScan(t title_pkey) IndexScan(chn char_name_pkey) HashJoin(ci an) HashJoin(ci an rt) NestLoop(ci an rt n) NestLoop(ci an rt n mc) NestLoop(ci an rt n mc cn) NestLoop(ci an rt n mc cn t) NestLoop(ci an rt n mc cn t chn) Leading((((((((ci an) rt) n) mc) cn) t) chn)) */
"SELECT MIN(an.name) AS alternative_name, MIN(chn.name) AS character_name, MIN(t.title) AS movie
FROM aka_name AS an,
 char_name AS chn,
 cast_info AS ci,
 company_name AS cn,
 movie_companies AS mc,
 name AS n,
 role_type AS rt,
 title AS t
WHERE ci.movie_id = t.id
 AND t.id = mc.movie_id
 AND ci.movie_id = mc.movie_id
 AND mc.company_id = cn.id
 AND ci.role_id = rt.id
 AND n.id = ci.person_id
 AND chn.id = ci.person_role_id
 AND an.person_id = n.id
 AND an.person_id = ci.person_id
AND ci.note IN ('(1969)', '(as Jeremy Lelliot)', '(as Chandra)', '(as Mahadeb Shee)', '(as Emilia Vilas)')
AND cn.country_code = '[suhh]'
AND mc.note IS NOT NULL 
AND (mc.note LIKE '%9%' OR mc.note LIKE '%)%')
AND n.gender = 'm'
AND n.name LIKE '%u%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1955 AND 1979;",5,/*+  SeqScan(ci) SeqScan(an) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexScan(t title_pkey) IndexScan(chn char_name_pkey) HashJoin(ci an) HashJoin(ci an rt) NestLoop(ci an rt n) NestLoop(ci an rt n mc) NestLoop(ci an rt n mc cn) NestLoop(ci an rt n mc cn t) NestLoop(ci an rt n mc cn t chn) Leading((((((((ci an) rt) n) mc) cn) t) chn)) */
"SELECT MIN(an.name) AS alternative_name, MIN(chn.name) AS character_name, MIN(t.title) AS movie
FROM aka_name AS an,
 char_name AS chn,
 cast_info AS ci,
 company_name AS cn,
 movie_companies AS mc,
 name AS n,
 role_type AS rt,
 title AS t
WHERE ci.movie_id = t.id
 AND t.id = mc.movie_id
 AND ci.movie_id = mc.movie_id
 AND mc.company_id = cn.id
 AND ci.role_id = rt.id
 AND n.id = ci.person_id
 AND chn.id = ci.person_role_id
 AND an.person_id = n.id
 AND an.person_id = ci.person_id
AND ci.note IN ('(uncredited)', '(as Freddy Roberto)', '(as G. Kireeva)', '(as Gabriela Ponti)', '(as James Groves)')
AND cn.country_code = '[fi]'
AND mc.note IS NOT NULL 
AND (mc.note LIKE '%9%' OR mc.note LIKE '%)%')
AND n.gender = 'm'
AND n.name LIKE '%e%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1896 AND 2009;",5,/*+  SeqScan(ci) SeqScan(an) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexScan(t title_pkey) IndexScan(chn char_name_pkey) HashJoin(ci an) HashJoin(ci an rt) NestLoop(ci an rt n) NestLoop(ci an rt n mc) NestLoop(ci an rt n mc cn) NestLoop(ci an rt n mc cn t) NestLoop(ci an rt n mc cn t chn) Leading((((((((ci an) rt) n) mc) cn) t) chn)) */
"SELECT MIN(an.name) AS alternative_name, MIN(chn.name) AS character_name, MIN(t.title) AS movie
FROM aka_name AS an,
 char_name AS chn,
 cast_info AS ci,
 company_name AS cn,
 movie_companies AS mc,
 name AS n,
 role_type AS rt,
 title AS t
WHERE ci.movie_id = t.id
 AND t.id = mc.movie_id
 AND ci.movie_id = mc.movie_id
 AND mc.company_id = cn.id
 AND ci.role_id = rt.id
 AND n.id = ci.person_id
 AND chn.id = ci.person_role_id
 AND an.person_id = n.id
 AND an.person_id = ci.person_id
AND ci.note IN ('(as Chris Combs)', '(as Katya)', '(as Mike Ward)', '(as Iya Rainbow)', '(as D''Arcy Erokan)')
AND cn.country_code = '[us]'
AND mc.note IS NOT NULL 
AND (mc.note LIKE '%(%' OR mc.note LIKE '%(%')
AND n.gender = 'm'
AND n.name LIKE '%r%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1930 AND 2013;",294,/*+  SeqScan(t) SeqScan(mc) SeqScan(cn) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(an person_id_aka_name) IndexScan(chn char_name_pkey) HashJoin(mc cn) HashJoin(t mc cn) NestLoop(t mc cn ci) HashJoin(t mc cn ci rt) NestLoop(t mc cn ci rt n) NestLoop(t mc cn ci rt n an) NestLoop(t mc cn ci rt n an chn) Leading(((((((t (mc cn)) ci) rt) n) an) chn)) */
"SELECT MIN(an.name) AS alternative_name, MIN(chn.name) AS character_name, MIN(t.title) AS movie
FROM aka_name AS an,
 char_name AS chn,
 cast_info AS ci,
 company_name AS cn,
 movie_companies AS mc,
 name AS n,
 role_type AS rt,
 title AS t
WHERE ci.movie_id = t.id
 AND t.id = mc.movie_id
 AND ci.movie_id = mc.movie_id
 AND mc.company_id = cn.id
 AND ci.role_id = rt.id
 AND n.id = ci.person_id
 AND chn.id = ci.person_role_id
 AND an.person_id = n.id
 AND an.person_id = ci.person_id
AND ci.note IN ('(voice)', '(as Linda Hemming)', '(as Angel Barr)', '(grandfather)', '(as John Morse)')
AND cn.country_code = '[es]'
AND mc.note IS NOT NULL 
AND (mc.note LIKE '%a%' OR mc.note LIKE '%s%')
AND n.gender = 'm'
AND n.name LIKE '%l%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1948 AND 2011;",294,/*+  SeqScan(t) SeqScan(mc) SeqScan(cn) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(an person_id_aka_name) IndexScan(chn char_name_pkey) HashJoin(mc cn) HashJoin(t mc cn) NestLoop(t mc cn ci) HashJoin(t mc cn ci rt) NestLoop(t mc cn ci rt n) NestLoop(t mc cn ci rt n an) NestLoop(t mc cn ci rt n an chn) Leading(((((((t (mc cn)) ci) rt) n) an) chn)) */
"SELECT MIN(an.name) AS alternative_name, MIN(chn.name) AS character_name, MIN(t.title) AS movie
FROM aka_name AS an,
 char_name AS chn,
 cast_info AS ci,
 company_name AS cn,
 movie_companies AS mc,
 name AS n,
 role_type AS rt,
 title AS t
WHERE ci.movie_id = t.id
 AND t.id = mc.movie_id
 AND ci.movie_id = mc.movie_id
 AND mc.company_id = cn.id
 AND ci.role_id = rt.id
 AND n.id = ci.person_id
 AND chn.id = ci.person_role_id
 AND an.person_id = n.id
 AND an.person_id = ci.person_id
AND ci.note IN ('(as Andrea Checci)', '(as Dion Phillips)', '(as D. Goshev)', '(as Scott Holmes)', '(as Dana Menetos)')
AND cn.country_code = '[de]'
AND mc.note IS NOT NULL 
AND (mc.note LIKE '%)%' OR mc.note LIKE '%t%')
AND n.gender = 'm'
AND n.name LIKE '%C%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1934 AND 1981;",5,/*+  SeqScan(ci) SeqScan(an) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexScan(t title_pkey) IndexScan(chn char_name_pkey) HashJoin(ci an) HashJoin(ci an rt) NestLoop(ci an rt n) NestLoop(ci an rt n mc) NestLoop(ci an rt n mc cn) NestLoop(ci an rt n mc cn t) NestLoop(ci an rt n mc cn t chn) Leading((((((((ci an) rt) n) mc) cn) t) chn)) */
"SELECT MIN(an.name) AS alternative_name, MIN(chn.name) AS character_name, MIN(t.title) AS movie
FROM aka_name AS an,
 char_name AS chn,
 cast_info AS ci,
 company_name AS cn,
 movie_companies AS mc,
 name AS n,
 role_type AS rt,
 title AS t
WHERE ci.movie_id = t.id
 AND t.id = mc.movie_id
 AND ci.movie_id = mc.movie_id
 AND mc.company_id = cn.id
 AND ci.role_id = rt.id
 AND n.id = ci.person_id
 AND chn.id = ci.person_role_id
 AND an.person_id = n.id
 AND an.person_id = ci.person_id
AND ci.note IN ('(uncredited)', '(as Macie Taylor)', '(as Carlton Lynx)', '(segment ""Top Dog"")', '(as Otto Mellis)')
AND cn.country_code = '[fr]'
AND mc.note IS NOT NULL 
AND (mc.note LIKE '%l%' OR mc.note LIKE '%(%')
AND n.gender = 'f'
AND n.name LIKE '%T%'
AND rt.role = 'actress'
AND t.production_year BETWEEN 1955 AND 2015;",5,/*+  SeqScan(ci) SeqScan(an) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexScan(t title_pkey) IndexScan(chn char_name_pkey) HashJoin(ci an) HashJoin(ci an rt) NestLoop(ci an rt n) NestLoop(ci an rt n mc) NestLoop(ci an rt n mc cn) NestLoop(ci an rt n mc cn t) NestLoop(ci an rt n mc cn t chn) Leading((((((((ci an) rt) n) mc) cn) t) chn)) */
"SELECT MIN(an.name) AS alternative_name, MIN(chn.name) AS character_name, MIN(t.title) AS movie
FROM aka_name AS an,
 char_name AS chn,
 cast_info AS ci,
 company_name AS cn,
 movie_companies AS mc,
 name AS n,
 role_type AS rt,
 title AS t
WHERE ci.movie_id = t.id
 AND t.id = mc.movie_id
 AND ci.movie_id = mc.movie_id
 AND mc.company_id = cn.id
 AND ci.role_id = rt.id
 AND n.id = ci.person_id
 AND chn.id = ci.person_role_id
 AND an.person_id = n.id
 AND an.person_id = ci.person_id
AND ci.note IN ('(uncredited)', '(as Judy Woodbury)', '(really Lee Madden)', '(as Leen Persijn)', '(one scene only)')
AND cn.country_code = '[au]'
AND mc.note IS NOT NULL 
AND (mc.note LIKE '%a%' OR mc.note LIKE '%i%')
AND n.gender = 'm'
AND n.name LIKE '%i%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1947 AND 1998;",294,/*+  SeqScan(t) SeqScan(mc) SeqScan(cn) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(an person_id_aka_name) IndexScan(chn char_name_pkey) HashJoin(mc cn) HashJoin(t mc cn) NestLoop(t mc cn ci) HashJoin(t mc cn ci rt) NestLoop(t mc cn ci rt n) NestLoop(t mc cn ci rt n an) NestLoop(t mc cn ci rt n an chn) Leading(((((((t (mc cn)) ci) rt) n) an) chn)) */
"SELECT MIN(an.name) AS alternative_name, MIN(chn.name) AS character_name, MIN(t.title) AS movie
FROM aka_name AS an,
 char_name AS chn,
 cast_info AS ci,
 company_name AS cn,
 movie_companies AS mc,
 name AS n,
 role_type AS rt,
 title AS t
WHERE ci.movie_id = t.id
 AND t.id = mc.movie_id
 AND ci.movie_id = mc.movie_id
 AND mc.company_id = cn.id
 AND ci.role_id = rt.id
 AND n.id = ci.person_id
 AND chn.id = ci.person_role_id
 AND an.person_id = n.id
 AND an.person_id = ci.person_id
AND ci.note IN ('(uncredited)', '(as Yvonne Hotz)', '(as Frank Danuelas)', '(as La bodoquito)', '(as Jon Inciarte)')
AND cn.country_code = '[br]'
AND mc.note IS NOT NULL 
AND (mc.note LIKE '%a%' OR mc.note LIKE '%l%')
AND n.gender = 'm'
AND n.name LIKE '%e%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1931 AND 1955;",5,/*+  SeqScan(ci) SeqScan(an) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexScan(t title_pkey) IndexScan(chn char_name_pkey) HashJoin(ci an) HashJoin(ci an rt) NestLoop(ci an rt n) NestLoop(ci an rt n mc) NestLoop(ci an rt n mc cn) NestLoop(ci an rt n mc cn t) NestLoop(ci an rt n mc cn t chn) Leading((((((((ci an) rt) n) mc) cn) t) chn)) */
"SELECT MIN(an.name) AS alternative_name, MIN(chn.name) AS character_name, MIN(t.title) AS movie
FROM aka_name AS an,
 char_name AS chn,
 cast_info AS ci,
 company_name AS cn,
 movie_companies AS mc,
 name AS n,
 role_type AS rt,
 title AS t
WHERE ci.movie_id = t.id
 AND t.id = mc.movie_id
 AND ci.movie_id = mc.movie_id
 AND mc.company_id = cn.id
 AND ci.role_id = rt.id
 AND n.id = ci.person_id
 AND chn.id = ci.person_role_id
 AND an.person_id = n.id
 AND an.person_id = ci.person_id
AND ci.note IN ('(as Stuart Hameroff MD)', '(as Pocket Jakes)', '(as Alan Hale)', '(as Kissy)', '(as O. Feoktistov)')
AND cn.country_code = '[br]'
AND mc.note IS NOT NULL 
AND (mc.note LIKE '%(%' OR mc.note LIKE '%6%')
AND n.gender = 'm'
AND n.name LIKE '%u%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1968 AND 2016;",5,/*+  SeqScan(ci) SeqScan(an) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexScan(t title_pkey) IndexScan(chn char_name_pkey) HashJoin(ci an) HashJoin(ci an rt) NestLoop(ci an rt n) NestLoop(ci an rt n mc) NestLoop(ci an rt n mc cn) NestLoop(ci an rt n mc cn t) NestLoop(ci an rt n mc cn t chn) Leading((((((((ci an) rt) n) mc) cn) t) chn)) */
"SELECT MIN(an.name) AS alternative_name, MIN(chn.name) AS character_name, MIN(t.title) AS movie
FROM aka_name AS an,
 char_name AS chn,
 cast_info AS ci,
 company_name AS cn,
 movie_companies AS mc,
 name AS n,
 role_type AS rt,
 title AS t
WHERE ci.movie_id = t.id
 AND t.id = mc.movie_id
 AND ci.movie_id = mc.movie_id
 AND mc.company_id = cn.id
 AND ci.role_id = rt.id
 AND n.id = ci.person_id
 AND chn.id = ci.person_role_id
 AND an.person_id = n.id
 AND an.person_id = ci.person_id
AND ci.note IN ('(uncredited)', '(as S. Barillier)', '(as Amythyst)', '(as Yu. Troyan)', '(Song Appearance)')
AND cn.country_code = '[fi]'
AND mc.note IS NOT NULL 
AND (mc.note LIKE '%(%' OR mc.note LIKE '%9%')
AND n.gender = 'f'
AND n.name LIKE '%,%'
AND rt.role = 'actress'
AND t.production_year BETWEEN 1908 AND 2020;",5,/*+  SeqScan(ci) SeqScan(an) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexScan(t title_pkey) IndexScan(chn char_name_pkey) HashJoin(ci an) HashJoin(ci an rt) NestLoop(ci an rt n) NestLoop(ci an rt n mc) NestLoop(ci an rt n mc cn) NestLoop(ci an rt n mc cn t) NestLoop(ci an rt n mc cn t chn) Leading((((((((ci an) rt) n) mc) cn) t) chn)) */
"SELECT MIN(an.name) AS alternative_name, MIN(chn.name) AS character_name, MIN(t.title) AS movie
FROM aka_name AS an,
 char_name AS chn,
 cast_info AS ci,
 company_name AS cn,
 movie_companies AS mc,
 name AS n,
 role_type AS rt,
 title AS t
WHERE ci.movie_id = t.id
 AND t.id = mc.movie_id
 AND ci.movie_id = mc.movie_id
 AND mc.company_id = cn.id
 AND ci.role_id = rt.id
 AND n.id = ci.person_id
 AND chn.id = ci.person_role_id
 AND an.person_id = n.id
 AND an.person_id = ci.person_id
AND ci.note IN ('(uncredited)', '(as J.K. Agarwal)', '(as Robert Bolla)', '(as Redmond Symons)', '(as Cleo Budde)')
AND cn.country_code = '[us]'
AND mc.note IS NOT NULL 
AND (mc.note LIKE '%V%' OR mc.note LIKE '%A%')
AND n.gender = 'm'
AND n.name LIKE '%a%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1927 AND 2007;",76,/*+  SeqScan(mc) SeqScan(cn) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) IndexScan(n name_pkey) IndexScan(an person_id_aka_name) SeqScan(rt) IndexScan(chn char_name_pkey) HashJoin(mc cn) NestLoop(mc cn t) NestLoop(mc cn t ci) NestLoop(mc cn t ci n) NestLoop(mc cn t ci n an) HashJoin(mc cn t ci n an rt) NestLoop(mc cn t ci n an rt chn) Leading((((((((mc cn) t) ci) n) an) rt) chn)) */
"SELECT MIN(an.name) AS alternative_name, MIN(chn.name) AS character_name, MIN(t.title) AS movie
FROM aka_name AS an,
 char_name AS chn,
 cast_info AS ci,
 company_name AS cn,
 movie_companies AS mc,
 name AS n,
 role_type AS rt,
 title AS t
WHERE ci.movie_id = t.id
 AND t.id = mc.movie_id
 AND ci.movie_id = mc.movie_id
 AND mc.company_id = cn.id
 AND ci.role_id = rt.id
 AND n.id = ci.person_id
 AND chn.id = ci.person_role_id
 AND an.person_id = n.id
 AND an.person_id = ci.person_id
AND ci.note IN ('(1970-1975)', '(as Lui Mananzala)', '(as FÃ¼sÃ¼n UÃ§ar)', '(as Yuk-wan Wong)', '(as Mike Meros)')
AND cn.country_code = '[us]'
AND mc.note IS NOT NULL 
AND (mc.note LIKE '%1%' OR mc.note LIKE '%d%')
AND n.gender = 'f'
AND n.name LIKE '%P%'
AND rt.role = 'actress'
AND t.production_year BETWEEN 1939 AND 1993;",5,/*+  SeqScan(ci) SeqScan(an) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexScan(t title_pkey) IndexScan(chn char_name_pkey) HashJoin(ci an) HashJoin(ci an rt) NestLoop(ci an rt n) NestLoop(ci an rt n mc) NestLoop(ci an rt n mc cn) NestLoop(ci an rt n mc cn t) NestLoop(ci an rt n mc cn t chn) Leading((((((((ci an) rt) n) mc) cn) t) chn)) */
"SELECT MIN(an.name) AS alternative_name, MIN(chn.name) AS character_name, MIN(t.title) AS movie
FROM aka_name AS an,
 char_name AS chn,
 cast_info AS ci,
 company_name AS cn,
 movie_companies AS mc,
 name AS n,
 role_type AS rt,
 title AS t
WHERE ci.movie_id = t.id
 AND t.id = mc.movie_id
 AND ci.movie_id = mc.movie_id
 AND mc.company_id = cn.id
 AND ci.role_id = rt.id
 AND n.id = ci.person_id
 AND chn.id = ci.person_role_id
 AND an.person_id = n.id
 AND an.person_id = ci.person_id
AND ci.note IN ('(uncredited)', '(as Janette)', '(as Jimmy Liu)', '(cachetes)', '(as Laura Menini)')
AND cn.country_code = '[us]'
AND mc.note IS NOT NULL 
AND (mc.note LIKE '%L%' OR mc.note LIKE '%c%')
AND n.gender = 'm'
AND n.name LIKE '%n%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1880 AND 1948;",294,/*+  SeqScan(t) SeqScan(mc) SeqScan(cn) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(an person_id_aka_name) IndexScan(chn char_name_pkey) HashJoin(mc cn) HashJoin(t mc cn) NestLoop(t mc cn ci) HashJoin(t mc cn ci rt) NestLoop(t mc cn ci rt n) NestLoop(t mc cn ci rt n an) NestLoop(t mc cn ci rt n an chn) Leading(((((((t (mc cn)) ci) rt) n) an) chn)) */
"SELECT MIN(an.name) AS alternative_name, MIN(chn.name) AS character_name, MIN(t.title) AS movie
FROM aka_name AS an,
 char_name AS chn,
 cast_info AS ci,
 company_name AS cn,
 movie_companies AS mc,
 name AS n,
 role_type AS rt,
 title AS t
WHERE ci.movie_id = t.id
 AND t.id = mc.movie_id
 AND ci.movie_id = mc.movie_id
 AND mc.company_id = cn.id
 AND ci.role_id = rt.id
 AND n.id = ci.person_id
 AND chn.id = ci.person_role_id
 AND an.person_id = n.id
 AND an.person_id = ci.person_id
AND ci.note IN ('(segment ""The Facts in the Case of Mr. Valdemar"")', '(as Irma Karkama)', '(as J. Gelpi)', '(as Lee Nizani)', '(story) (1982)')
AND cn.country_code = '[ru]'
AND mc.note IS NOT NULL 
AND (mc.note LIKE '%)%' OR mc.note LIKE '%R%')
AND n.gender = 'm'
AND n.name LIKE '%J%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1950 AND 2000;",5,/*+  SeqScan(ci) SeqScan(an) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexScan(t title_pkey) IndexScan(chn char_name_pkey) HashJoin(ci an) HashJoin(ci an rt) NestLoop(ci an rt n) NestLoop(ci an rt n mc) NestLoop(ci an rt n mc cn) NestLoop(ci an rt n mc cn t) NestLoop(ci an rt n mc cn t chn) Leading((((((((ci an) rt) n) mc) cn) t) chn)) */
"SELECT MIN(an.name) AS alternative_name, MIN(chn.name) AS character_name, MIN(t.title) AS movie
FROM aka_name AS an,
 char_name AS chn,
 cast_info AS ci,
 company_name AS cn,
 movie_companies AS mc,
 name AS n,
 role_type AS rt,
 title AS t
WHERE ci.movie_id = t.id
 AND t.id = mc.movie_id
 AND ci.movie_id = mc.movie_id
 AND mc.company_id = cn.id
 AND ci.role_id = rt.id
 AND n.id = ci.person_id
 AND chn.id = ci.person_role_id
 AND an.person_id = n.id
 AND an.person_id = ci.person_id
AND ci.note IN ('(voice)', '(as Victoria Blond)', '(as Penny Shelton)', '(sword play)', '(as Kelly C. Cruz)')
AND cn.country_code = '[us]'
AND mc.note IS NOT NULL 
AND (mc.note LIKE '%)%' OR mc.note LIKE '%i%')
AND n.gender = 'm'
AND n.name LIKE '%,%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1911 AND 2008;",5,/*+  SeqScan(ci) SeqScan(an) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexScan(t title_pkey) IndexScan(chn char_name_pkey) HashJoin(ci an) HashJoin(ci an rt) NestLoop(ci an rt n) NestLoop(ci an rt n mc) NestLoop(ci an rt n mc cn) NestLoop(ci an rt n mc cn t) NestLoop(ci an rt n mc cn t chn) Leading((((((((ci an) rt) n) mc) cn) t) chn)) */
"SELECT MIN(an.name) AS alternative_name, MIN(chn.name) AS character_name, MIN(t.title) AS movie
FROM aka_name AS an,
 char_name AS chn,
 cast_info AS ci,
 company_name AS cn,
 movie_companies AS mc,
 name AS n,
 role_type AS rt,
 title AS t
WHERE ci.movie_id = t.id
 AND t.id = mc.movie_id
 AND ci.movie_id = mc.movie_id
 AND mc.company_id = cn.id
 AND ci.role_id = rt.id
 AND n.id = ci.person_id
 AND chn.id = ci.person_role_id
 AND an.person_id = n.id
 AND an.person_id = ci.person_id
AND ci.note IN ('(as Diana Tilldon-Davis)', '(as V. Balikhin)', '(as Kanako Sato)', '(Spa)', '(as Capone)')
AND cn.country_code = '[fi]'
AND mc.note IS NOT NULL 
AND (mc.note LIKE '%n%' OR mc.note LIKE '%n%')
AND n.gender = 'f'
AND n.name LIKE '%a%'
AND rt.role = 'actress'
AND t.production_year BETWEEN 1960 AND 2017;",5,/*+  SeqScan(ci) SeqScan(an) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexScan(t title_pkey) IndexScan(chn char_name_pkey) HashJoin(ci an) HashJoin(ci an rt) NestLoop(ci an rt n) NestLoop(ci an rt n mc) NestLoop(ci an rt n mc cn) NestLoop(ci an rt n mc cn t) NestLoop(ci an rt n mc cn t chn) Leading((((((((ci an) rt) n) mc) cn) t) chn)) */
"SELECT MIN(an.name) AS alternative_name, MIN(chn.name) AS character_name, MIN(t.title) AS movie
FROM aka_name AS an,
 char_name AS chn,
 cast_info AS ci,
 company_name AS cn,
 movie_companies AS mc,
 name AS n,
 role_type AS rt,
 title AS t
WHERE ci.movie_id = t.id
 AND t.id = mc.movie_id
 AND ci.movie_id = mc.movie_id
 AND mc.company_id = cn.id
 AND ci.role_id = rt.id
 AND n.id = ci.person_id
 AND chn.id = ci.person_role_id
 AND an.person_id = n.id
 AND an.person_id = ci.person_id
AND ci.note IN ('(uncredited)', '(as Louie Guss)', '(episode ""Haran"")', '(as Tarek Aziz)', '(Peter van Pels)')
AND cn.country_code = '[hu]'
AND mc.note IS NOT NULL 
AND (mc.note LIKE '%)%' OR mc.note LIKE '%0%')
AND n.gender = 'f'
AND n.name LIKE '%e%'
AND rt.role = 'actress'
AND t.production_year BETWEEN 1927 AND 2014;",76,/*+  SeqScan(mc) SeqScan(cn) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) IndexScan(n name_pkey) IndexScan(an person_id_aka_name) SeqScan(rt) IndexScan(chn char_name_pkey) HashJoin(mc cn) NestLoop(mc cn t) NestLoop(mc cn t ci) NestLoop(mc cn t ci n) NestLoop(mc cn t ci n an) HashJoin(mc cn t ci n an rt) NestLoop(mc cn t ci n an rt chn) Leading((((((((mc cn) t) ci) n) an) rt) chn)) */
"SELECT MIN(an.name) AS alternative_name, MIN(chn.name) AS character_name, MIN(t.title) AS movie
FROM aka_name AS an,
 char_name AS chn,
 cast_info AS ci,
 company_name AS cn,
 movie_companies AS mc,
 name AS n,
 role_type AS rt,
 title AS t
WHERE ci.movie_id = t.id
 AND t.id = mc.movie_id
 AND ci.movie_id = mc.movie_id
 AND mc.company_id = cn.id
 AND ci.role_id = rt.id
 AND n.id = ci.person_id
 AND chn.id = ci.person_role_id
 AND an.person_id = n.id
 AND an.person_id = ci.person_id
AND ci.note IN ('(as Jacob Hoffman)', '(as Chicago)', '(1930) (uncredited)', '(as Meenaxi Anand)', '(transfer: Germany)')
AND cn.country_code = '[it]'
AND mc.note IS NOT NULL 
AND (mc.note LIKE '%D%' OR mc.note LIKE '%D%')
AND n.gender = 'm'
AND n.name LIKE '%f%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1909 AND 2004;",294,/*+  SeqScan(t) SeqScan(mc) SeqScan(cn) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(an person_id_aka_name) IndexScan(chn char_name_pkey) HashJoin(mc cn) HashJoin(t mc cn) NestLoop(t mc cn ci) HashJoin(t mc cn ci rt) NestLoop(t mc cn ci rt n) NestLoop(t mc cn ci rt n an) NestLoop(t mc cn ci rt n an chn) Leading(((((((t (mc cn)) ci) rt) n) an) chn)) */
"SELECT MIN(an.name) AS alternative_name, MIN(chn.name) AS character_name, MIN(t.title) AS movie
FROM aka_name AS an,
 char_name AS chn,
 cast_info AS ci,
 company_name AS cn,
 movie_companies AS mc,
 name AS n,
 role_type AS rt,
 title AS t
WHERE ci.movie_id = t.id
 AND t.id = mc.movie_id
 AND ci.movie_id = mc.movie_id
 AND mc.company_id = cn.id
 AND ci.role_id = rt.id
 AND n.id = ci.person_id
 AND chn.id = ci.person_role_id
 AND an.person_id = n.id
 AND an.person_id = ci.person_id
AND ci.note IN ('(uncredited)', '(as Mohamed Sayari)', '(as Denis Lee)', '(as Ruth Mc Devitt)', '(as Hyrise)')
AND cn.country_code = '[nl]'
AND mc.note IS NOT NULL 
AND (mc.note LIKE '%d%' OR mc.note LIKE '%(%')
AND n.gender = 'f'
AND n.name LIKE '%M%'
AND rt.role = 'actress'
AND t.production_year BETWEEN 1968 AND 2020;",5,/*+  SeqScan(ci) SeqScan(an) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexScan(t title_pkey) IndexScan(chn char_name_pkey) HashJoin(ci an) HashJoin(ci an rt) NestLoop(ci an rt n) NestLoop(ci an rt n mc) NestLoop(ci an rt n mc cn) NestLoop(ci an rt n mc cn t) NestLoop(ci an rt n mc cn t chn) Leading((((((((ci an) rt) n) mc) cn) t) chn)) */
"SELECT MIN(an.name) AS alternative_name, MIN(chn.name) AS character_name, MIN(t.title) AS movie
FROM aka_name AS an,
 char_name AS chn,
 cast_info AS ci,
 company_name AS cn,
 movie_companies AS mc,
 name AS n,
 role_type AS rt,
 title AS t
WHERE ci.movie_id = t.id
 AND t.id = mc.movie_id
 AND ci.movie_id = mc.movie_id
 AND mc.company_id = cn.id
 AND ci.role_id = rt.id
 AND n.id = ci.person_id
 AND chn.id = ci.person_role_id
 AND an.person_id = n.id
 AND an.person_id = ci.person_id
AND ci.note IN ('(archive footage) (uncredited)', '(as Tovia Borodyn)', '(Bruce Barton)', '(as U Par Gyi)', '(portraits: Elvis)')
AND cn.country_code = '[us]'
AND mc.note IS NOT NULL 
AND (mc.note LIKE '%U%' OR mc.note LIKE '%)%')
AND n.gender = 'm'
AND n.name LIKE '%R%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1978 AND 1998;",294,/*+  SeqScan(t) SeqScan(mc) SeqScan(cn) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(an person_id_aka_name) IndexScan(chn char_name_pkey) HashJoin(mc cn) HashJoin(t mc cn) NestLoop(t mc cn ci) HashJoin(t mc cn ci rt) NestLoop(t mc cn ci rt n) NestLoop(t mc cn ci rt n an) NestLoop(t mc cn ci rt n an chn) Leading(((((((t (mc cn)) ci) rt) n) an) chn)) */
"SELECT MIN(an.name) AS alternative_name, MIN(chn.name) AS character_name, MIN(t.title) AS movie
FROM aka_name AS an,
 char_name AS chn,
 cast_info AS ci,
 company_name AS cn,
 movie_companies AS mc,
 name AS n,
 role_type AS rt,
 title AS t
WHERE ci.movie_id = t.id
 AND t.id = mc.movie_id
 AND ci.movie_id = mc.movie_id
 AND mc.company_id = cn.id
 AND ci.role_id = rt.id
 AND n.id = ci.person_id
 AND chn.id = ci.person_role_id
 AND an.person_id = n.id
 AND an.person_id = ci.person_id
AND ci.note IN ('(uncredited)', '(as Jamie Smith)', '(as Steven Nahaj)', '(as Liz Lodge)', '(as Mikael Dickson)')
AND cn.country_code = '[de]'
AND mc.note IS NOT NULL 
AND (mc.note LIKE '%t%' OR mc.note LIKE '%e%')
AND n.gender = 'f'
AND n.name LIKE '%,%'
AND rt.role = 'actress'
AND t.production_year BETWEEN 1965 AND 2009;",76,/*+  SeqScan(mc) SeqScan(cn) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) IndexScan(n name_pkey) IndexScan(an person_id_aka_name) SeqScan(rt) IndexScan(chn char_name_pkey) HashJoin(mc cn) NestLoop(mc cn t) NestLoop(mc cn t ci) NestLoop(mc cn t ci n) NestLoop(mc cn t ci n an) HashJoin(mc cn t ci n an rt) NestLoop(mc cn t ci n an rt chn) Leading((((((((mc cn) t) ci) n) an) rt) chn)) */
"SELECT MIN(an.name) AS alternative_name, MIN(chn.name) AS character_name, MIN(t.title) AS movie
FROM aka_name AS an,
 char_name AS chn,
 cast_info AS ci,
 company_name AS cn,
 movie_companies AS mc,
 name AS n,
 role_type AS rt,
 title AS t
WHERE ci.movie_id = t.id
 AND t.id = mc.movie_id
 AND ci.movie_id = mc.movie_id
 AND mc.company_id = cn.id
 AND ci.role_id = rt.id
 AND n.id = ci.person_id
 AND chn.id = ci.person_role_id
 AND an.person_id = n.id
 AND an.person_id = ci.person_id
AND ci.note IN ('(as Richard C. Travers)', '(as Eddie Buzzell)', '(as Andrew Hawyley)', '(as Marcelle Teuma)', '(as Glyn Owen)')
AND cn.country_code = '[us]'
AND mc.note IS NOT NULL 
AND (mc.note LIKE '%r%' OR mc.note LIKE '%(%')
AND n.gender = 'm'
AND n.name LIKE '%h%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1898 AND 2007;",5,/*+  SeqScan(ci) SeqScan(an) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexScan(t title_pkey) IndexScan(chn char_name_pkey) HashJoin(ci an) HashJoin(ci an rt) NestLoop(ci an rt n) NestLoop(ci an rt n mc) NestLoop(ci an rt n mc cn) NestLoop(ci an rt n mc cn t) NestLoop(ci an rt n mc cn t chn) Leading((((((((ci an) rt) n) mc) cn) t) chn)) */
"SELECT MIN(an.name) AS alternative_name, MIN(chn.name) AS character_name, MIN(t.title) AS movie
FROM aka_name AS an,
 char_name AS chn,
 cast_info AS ci,
 company_name AS cn,
 movie_companies AS mc,
 name AS n,
 role_type AS rt,
 title AS t
WHERE ci.movie_id = t.id
 AND t.id = mc.movie_id
 AND ci.movie_id = mc.movie_id
 AND mc.company_id = cn.id
 AND ci.role_id = rt.id
 AND n.id = ci.person_id
 AND chn.id = ci.person_role_id
 AND an.person_id = n.id
 AND an.person_id = ci.person_id
AND ci.note IN ('(uncredited)', '(as Lung Wong)', '(as Chris Brosnan)', '(as Kim Hye-soo)', '(special dresses)')
AND cn.country_code = '[us]'
AND mc.note IS NOT NULL 
AND (mc.note LIKE '%0%' OR mc.note LIKE '%0%')
AND n.gender = 'm'
AND n.name LIKE '%r%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1955 AND 2015;",294,/*+  SeqScan(t) SeqScan(mc) SeqScan(cn) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(an person_id_aka_name) IndexScan(chn char_name_pkey) HashJoin(mc cn) HashJoin(t mc cn) NestLoop(t mc cn ci) HashJoin(t mc cn ci rt) NestLoop(t mc cn ci rt n) NestLoop(t mc cn ci rt n an) NestLoop(t mc cn ci rt n an chn) Leading(((((((t (mc cn)) ci) rt) n) an) chn)) */
"SELECT MIN(an.name) AS alternative_name, MIN(chn.name) AS character_name, MIN(t.title) AS movie
FROM aka_name AS an,
 char_name AS chn,
 cast_info AS ci,
 company_name AS cn,
 movie_companies AS mc,
 name AS n,
 role_type AS rt,
 title AS t
WHERE ci.movie_id = t.id
 AND t.id = mc.movie_id
 AND ci.movie_id = mc.movie_id
 AND mc.company_id = cn.id
 AND ci.role_id = rt.id
 AND n.id = ci.person_id
 AND chn.id = ci.person_role_id
 AND an.person_id = n.id
 AND an.person_id = ci.person_id
AND ci.note IN ('(uncredited)', '(as P.C. Ruesch)', '(as Juan Cejas)', '(as Tomas Martin)', '(as A. Moiseyev)')
AND cn.country_code = '[cl]'
AND mc.note IS NOT NULL 
AND (mc.note LIKE '%)%' OR mc.note LIKE '%)%')
AND n.gender = 'm'
AND n.name LIKE '%,%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1936 AND 2002;",294,/*+  SeqScan(t) SeqScan(mc) SeqScan(cn) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(an person_id_aka_name) IndexScan(chn char_name_pkey) HashJoin(mc cn) HashJoin(t mc cn) NestLoop(t mc cn ci) HashJoin(t mc cn ci rt) NestLoop(t mc cn ci rt n) NestLoop(t mc cn ci rt n an) NestLoop(t mc cn ci rt n an chn) Leading(((((((t (mc cn)) ci) rt) n) an) chn)) */
"SELECT MIN(an.name) AS alternative_name, MIN(chn.name) AS character_name, MIN(t.title) AS movie
FROM aka_name AS an,
 char_name AS chn,
 cast_info AS ci,
 company_name AS cn,
 movie_companies AS mc,
 name AS n,
 role_type AS rt,
 title AS t
WHERE ci.movie_id = t.id
 AND t.id = mc.movie_id
 AND ci.movie_id = mc.movie_id
 AND mc.company_id = cn.id
 AND ci.role_id = rt.id
 AND n.id = ci.person_id
 AND chn.id = ci.person_role_id
 AND an.person_id = n.id
 AND an.person_id = ci.person_id
AND ci.note IN ('(uncredited)', '(as Terri Starr)', '(as May Geraci)', '(1986-87)', '(as Jean Beaudain)')
AND cn.country_code = '[fr]'
AND mc.note IS NOT NULL 
AND (mc.note LIKE '%0%' OR mc.note LIKE '%n%')
AND n.gender = 'f'
AND n.name LIKE '%,%'
AND rt.role = 'actress'
AND t.production_year BETWEEN 1991 AND 2020;",5,/*+  SeqScan(ci) SeqScan(an) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexScan(t title_pkey) IndexScan(chn char_name_pkey) HashJoin(ci an) HashJoin(ci an rt) NestLoop(ci an rt n) NestLoop(ci an rt n mc) NestLoop(ci an rt n mc cn) NestLoop(ci an rt n mc cn t) NestLoop(ci an rt n mc cn t chn) Leading((((((((ci an) rt) n) mc) cn) t) chn)) */
"SELECT MIN(an.name) AS alternative_name, MIN(chn.name) AS character_name, MIN(t.title) AS movie
FROM aka_name AS an,
 char_name AS chn,
 cast_info AS ci,
 company_name AS cn,
 movie_companies AS mc,
 name AS n,
 role_type AS rt,
 title AS t
WHERE ci.movie_id = t.id
 AND t.id = mc.movie_id
 AND ci.movie_id = mc.movie_id
 AND mc.company_id = cn.id
 AND ci.role_id = rt.id
 AND n.id = ci.person_id
 AND chn.id = ci.person_role_id
 AND an.person_id = n.id
 AND an.person_id = ci.person_id
AND ci.note IN ('(The Sex Kittens)', '(1948-????)', '(as Jess Gibbons)', '(as Mike Attwell)', '(as Nicki Sotirov)')
AND cn.country_code = '[ca]'
AND mc.note IS NOT NULL 
AND (mc.note LIKE '%9%' OR mc.note LIKE '%)%')
AND n.gender = 'f'
AND n.name LIKE '%e%'
AND rt.role = 'actress'
AND t.production_year BETWEEN 1960 AND 2001;",5,/*+  SeqScan(ci) SeqScan(an) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexScan(t title_pkey) IndexScan(chn char_name_pkey) HashJoin(ci an) HashJoin(ci an rt) NestLoop(ci an rt n) NestLoop(ci an rt n mc) NestLoop(ci an rt n mc cn) NestLoop(ci an rt n mc cn t) NestLoop(ci an rt n mc cn t chn) Leading((((((((ci an) rt) n) mc) cn) t) chn)) */
"SELECT MIN(an.name) AS alternative_name, MIN(chn.name) AS character_name, MIN(t.title) AS movie
FROM aka_name AS an,
 char_name AS chn,
 cast_info AS ci,
 company_name AS cn,
 movie_companies AS mc,
 name AS n,
 role_type AS rt,
 title AS t
WHERE ci.movie_id = t.id
 AND t.id = mc.movie_id
 AND ci.movie_id = mc.movie_id
 AND mc.company_id = cn.id
 AND ci.role_id = rt.id
 AND n.id = ci.person_id
 AND chn.id = ci.person_role_id
 AND an.person_id = n.id
 AND an.person_id = ci.person_id
AND ci.note IN ('(uncredited)', '(as Nino Prester)', '(as William Kurdi)', '(as Paco Torres)', '(production: India)')
AND cn.country_code = '[cz]'
AND mc.note IS NOT NULL 
AND (mc.note LIKE '%a%' OR mc.note LIKE '%b%')
AND n.gender = 'm'
AND n.name LIKE '%e%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 2007 AND 2017;",294,/*+  SeqScan(t) SeqScan(mc) SeqScan(cn) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(an person_id_aka_name) IndexScan(chn char_name_pkey) HashJoin(mc cn) HashJoin(t mc cn) NestLoop(t mc cn ci) HashJoin(t mc cn ci rt) NestLoop(t mc cn ci rt n) NestLoop(t mc cn ci rt n an) NestLoop(t mc cn ci rt n an chn) Leading(((((((t (mc cn)) ci) rt) n) an) chn)) */
"SELECT MIN(an.name) AS alternative_name, MIN(chn.name) AS character_name, MIN(t.title) AS movie
FROM aka_name AS an,
 char_name AS chn,
 cast_info AS ci,
 company_name AS cn,
 movie_companies AS mc,
 name AS n,
 role_type AS rt,
 title AS t
WHERE ci.movie_id = t.id
 AND t.id = mc.movie_id
 AND ci.movie_id = mc.movie_id
 AND mc.company_id = cn.id
 AND ci.role_id = rt.id
 AND n.id = ci.person_id
 AND chn.id = ci.person_role_id
 AND an.person_id = n.id
 AND an.person_id = ci.person_id
AND ci.note IN ('(uncredited)', '(internet campaign)', '(""The Alphabet"")', '(based on story by)', '(as S. Mojic)')
AND cn.country_code = '[no]'
AND mc.note IS NOT NULL 
AND (mc.note LIKE '%1%' OR mc.note LIKE '%t%')
AND n.gender = 'm'
AND n.name LIKE '%i%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1925 AND 1989;",294,/*+  SeqScan(t) SeqScan(mc) SeqScan(cn) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(an person_id_aka_name) IndexScan(chn char_name_pkey) HashJoin(mc cn) HashJoin(t mc cn) NestLoop(t mc cn ci) HashJoin(t mc cn ci rt) NestLoop(t mc cn ci rt n) NestLoop(t mc cn ci rt n an) NestLoop(t mc cn ci rt n an chn) Leading(((((((t (mc cn)) ci) rt) n) an) chn)) */
"SELECT MIN(an.name) AS alternative_name, MIN(chn.name) AS character_name, MIN(t.title) AS movie
FROM aka_name AS an,
 char_name AS chn,
 cast_info AS ci,
 company_name AS cn,
 movie_companies AS mc,
 name AS n,
 role_type AS rt,
 title AS t
WHERE ci.movie_id = t.id
 AND t.id = mc.movie_id
 AND ci.movie_id = mc.movie_id
 AND mc.company_id = cn.id
 AND ci.role_id = rt.id
 AND n.id = ci.person_id
 AND chn.id = ci.person_role_id
 AND an.person_id = n.id
 AND an.person_id = ci.person_id
AND ci.note IN ('(as AndrÃ© M. Hennicke)', '(as Shyla Jameson)', '(studio executive)', '(as Juli Donald)', '(as John J. Eyler)')
AND cn.country_code = '[ro]'
AND mc.note IS NOT NULL 
AND (mc.note LIKE '%1%' OR mc.note LIKE '%)%')
AND n.gender = 'm'
AND n.name LIKE '%d%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1947 AND 2017;",5,/*+  SeqScan(ci) SeqScan(an) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexScan(t title_pkey) IndexScan(chn char_name_pkey) HashJoin(ci an) HashJoin(ci an rt) NestLoop(ci an rt n) NestLoop(ci an rt n mc) NestLoop(ci an rt n mc cn) NestLoop(ci an rt n mc cn t) NestLoop(ci an rt n mc cn t chn) Leading((((((((ci an) rt) n) mc) cn) t) chn)) */
"SELECT MIN(an.name) AS alternative_name, MIN(chn.name) AS character_name, MIN(t.title) AS movie
FROM aka_name AS an,
 char_name AS chn,
 cast_info AS ci,
 company_name AS cn,
 movie_companies AS mc,
 name AS n,
 role_type AS rt,
 title AS t
WHERE ci.movie_id = t.id
 AND t.id = mc.movie_id
 AND ci.movie_id = mc.movie_id
 AND mc.company_id = cn.id
 AND ci.role_id = rt.id
 AND n.id = ci.person_id
 AND chn.id = ci.person_role_id
 AND an.person_id = n.id
 AND an.person_id = ci.person_id
AND ci.note IN ('(uncredited)', '(as Tanya Siminov)', '(burro wrangler)', '(bus driver)', '(as Jorge Robles)')
AND cn.country_code = '[us]'
AND mc.note IS NOT NULL 
AND (mc.note LIKE '%U%' OR mc.note LIKE '%i%')
AND n.gender = 'm'
AND n.name LIKE '%J%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1916 AND 1973;",5,/*+  SeqScan(ci) SeqScan(an) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexScan(t title_pkey) IndexScan(chn char_name_pkey) HashJoin(ci an) HashJoin(ci an rt) NestLoop(ci an rt n) NestLoop(ci an rt n mc) NestLoop(ci an rt n mc cn) NestLoop(ci an rt n mc cn t) NestLoop(ci an rt n mc cn t chn) Leading((((((((ci an) rt) n) mc) cn) t) chn)) */
"SELECT MIN(an.name) AS alternative_name, MIN(chn.name) AS character_name, MIN(t.title) AS movie
FROM aka_name AS an,
 char_name AS chn,
 cast_info AS ci,
 company_name AS cn,
 movie_companies AS mc,
 name AS n,
 role_type AS rt,
 title AS t
WHERE ci.movie_id = t.id
 AND t.id = mc.movie_id
 AND ci.movie_id = mc.movie_id
 AND mc.company_id = cn.id
 AND ci.role_id = rt.id
 AND n.id = ci.person_id
 AND chn.id = ci.person_role_id
 AND an.person_id = n.id
 AND an.person_id = ci.person_id
AND ci.note IN ('(uncredited)', '(as Michael Zinn)', '(as Don Deer)', '(as Yousef Sweid)', '(as Lilian Fritz)')
AND cn.country_code = '[tr]'
AND mc.note IS NOT NULL 
AND (mc.note LIKE '%d%' OR mc.note LIKE '%e%')
AND n.gender = 'm'
AND n.name LIKE '%Ã%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1978 AND 2010;",5,/*+  SeqScan(ci) SeqScan(an) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexScan(t title_pkey) IndexScan(chn char_name_pkey) HashJoin(ci an) HashJoin(ci an rt) NestLoop(ci an rt n) NestLoop(ci an rt n mc) NestLoop(ci an rt n mc cn) NestLoop(ci an rt n mc cn t) NestLoop(ci an rt n mc cn t chn) Leading((((((((ci an) rt) n) mc) cn) t) chn)) */
"SELECT MIN(an.name) AS alternative_name, MIN(chn.name) AS character_name, MIN(t.title) AS movie
FROM aka_name AS an,
 char_name AS chn,
 cast_info AS ci,
 company_name AS cn,
 movie_companies AS mc,
 name AS n,
 role_type AS rt,
 title AS t
WHERE ci.movie_id = t.id
 AND t.id = mc.movie_id
 AND ci.movie_id = mc.movie_id
 AND mc.company_id = cn.id
 AND ci.role_id = rt.id
 AND n.id = ci.person_id
 AND chn.id = ci.person_role_id
 AND an.person_id = n.id
 AND an.person_id = ci.person_id
AND ci.note IN ('(uncredited)', '(as Amy Instone)', '(as Johnny Rad)', '(as Milli Jay)', '(as Lyube)')
AND cn.country_code = '[mx]'
AND mc.note IS NOT NULL 
AND (mc.note LIKE '%c%' OR mc.note LIKE '%i%')
AND n.gender = 'm'
AND n.name LIKE '%p%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1905 AND 1966;",5,/*+  SeqScan(ci) SeqScan(an) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexScan(t title_pkey) IndexScan(chn char_name_pkey) HashJoin(ci an) HashJoin(ci an rt) NestLoop(ci an rt n) NestLoop(ci an rt n mc) NestLoop(ci an rt n mc cn) NestLoop(ci an rt n mc cn t) NestLoop(ci an rt n mc cn t chn) Leading((((((((ci an) rt) n) mc) cn) t) chn)) */
"SELECT MIN(an.name) AS alternative_name, MIN(chn.name) AS character_name, MIN(t.title) AS movie
FROM aka_name AS an,
 char_name AS chn,
 cast_info AS ci,
 company_name AS cn,
 movie_companies AS mc,
 name AS n,
 role_type AS rt,
 title AS t
WHERE ci.movie_id = t.id
 AND t.id = mc.movie_id
 AND ci.movie_id = mc.movie_id
 AND mc.company_id = cn.id
 AND ci.role_id = rt.id
 AND n.id = ci.person_id
 AND chn.id = ci.person_role_id
 AND an.person_id = n.id
 AND an.person_id = ci.person_id
AND ci.note IN ('(as Dr. Leroy Perry Jr.)', '(as Edwige Belmore)', '(as Ivanka Popovic)', '(as Georgie Wang)', '(as Sam Roeca)')
AND cn.country_code = '[us]'
AND mc.note IS NOT NULL 
AND (mc.note LIKE '%9%' OR mc.note LIKE '%U%')
AND n.gender = 'm'
AND n.name LIKE '%J%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1944 AND 2000;",5,/*+  SeqScan(ci) SeqScan(an) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexScan(t title_pkey) IndexScan(chn char_name_pkey) HashJoin(ci an) HashJoin(ci an rt) NestLoop(ci an rt n) NestLoop(ci an rt n mc) NestLoop(ci an rt n mc cn) NestLoop(ci an rt n mc cn t) NestLoop(ci an rt n mc cn t chn) Leading((((((((ci an) rt) n) mc) cn) t) chn)) */
"SELECT MIN(an.name) AS alternative_name, MIN(chn.name) AS character_name, MIN(t.title) AS movie
FROM aka_name AS an,
 char_name AS chn,
 cast_info AS ci,
 company_name AS cn,
 movie_companies AS mc,
 name AS n,
 role_type AS rt,
 title AS t
WHERE ci.movie_id = t.id
 AND t.id = mc.movie_id
 AND ci.movie_id = mc.movie_id
 AND mc.company_id = cn.id
 AND ci.role_id = rt.id
 AND n.id = ci.person_id
 AND chn.id = ci.person_role_id
 AND an.person_id = n.id
 AND an.person_id = ci.person_id
AND ci.note IN ('(2009-2010)', '(as MÂª JosÃ© Ruz)', '(as Wm. Gillespie)', '(as Lin Yin-Chu)', '(as US Quevilly)')
AND cn.country_code = '[kr]'
AND mc.note IS NOT NULL 
AND (mc.note LIKE '%o%' OR mc.note LIKE '%t%')
AND n.gender = 'f'
AND n.name LIKE '%G%'
AND rt.role = 'actress'
AND t.production_year BETWEEN 1938 AND 2010;",5,/*+  SeqScan(ci) SeqScan(an) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexScan(t title_pkey) IndexScan(chn char_name_pkey) HashJoin(ci an) HashJoin(ci an rt) NestLoop(ci an rt n) NestLoop(ci an rt n mc) NestLoop(ci an rt n mc cn) NestLoop(ci an rt n mc cn t) NestLoop(ci an rt n mc cn t chn) Leading((((((((ci an) rt) n) mc) cn) t) chn)) */
"SELECT MIN(an.name) AS alternative_name, MIN(chn.name) AS character_name, MIN(t.title) AS movie
FROM aka_name AS an,
 char_name AS chn,
 cast_info AS ci,
 company_name AS cn,
 movie_companies AS mc,
 name AS n,
 role_type AS rt,
 title AS t
WHERE ci.movie_id = t.id
 AND t.id = mc.movie_id
 AND ci.movie_id = mc.movie_id
 AND mc.company_id = cn.id
 AND ci.role_id = rt.id
 AND n.id = ci.person_id
 AND chn.id = ci.person_role_id
 AND an.person_id = n.id
 AND an.person_id = ci.person_id
AND ci.note IN ('(uncredited)', '(as Damien Lee)', '(as Klara DÃ¸ving)', '(as Gawn Grainer)', '(as Marc Lessert)')
AND cn.country_code = '[us]'
AND mc.note IS NOT NULL 
AND (mc.note LIKE '%9%' OR mc.note LIKE '%U%')
AND n.gender = 'f'
AND n.name LIKE '%g%'
AND rt.role = 'actress'
AND t.production_year BETWEEN 1943 AND 2010;",5,/*+  SeqScan(ci) SeqScan(an) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexScan(t title_pkey) IndexScan(chn char_name_pkey) HashJoin(ci an) HashJoin(ci an rt) NestLoop(ci an rt n) NestLoop(ci an rt n mc) NestLoop(ci an rt n mc cn) NestLoop(ci an rt n mc cn t) NestLoop(ci an rt n mc cn t chn) Leading((((((((ci an) rt) n) mc) cn) t) chn)) */
"SELECT MIN(an.name) AS alternative_name, MIN(chn.name) AS character_name, MIN(t.title) AS movie
FROM aka_name AS an,
 char_name AS chn,
 cast_info AS ci,
 company_name AS cn,
 movie_companies AS mc,
 name AS n,
 role_type AS rt,
 title AS t
WHERE ci.movie_id = t.id
 AND t.id = mc.movie_id
 AND ci.movie_id = mc.movie_id
 AND mc.company_id = cn.id
 AND ci.role_id = rt.id
 AND n.id = ci.person_id
 AND chn.id = ci.person_role_id
 AND an.person_id = n.id
 AND an.person_id = ci.person_id
AND ci.note IN ('(as Bill Schilling)', '(as Lord Stow Hill)', '(as Seydina Mboup)', '(as A. Grishin)', '(as Anneke Putri)')
AND cn.country_code = '[fi]'
AND mc.note IS NOT NULL 
AND (mc.note LIKE '%i%' OR mc.note LIKE '%D%')
AND n.gender = 'm'
AND n.name LIKE '%a%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1920 AND 2008;",5,/*+  SeqScan(ci) SeqScan(an) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexScan(t title_pkey) IndexScan(chn char_name_pkey) HashJoin(ci an) HashJoin(ci an rt) NestLoop(ci an rt n) NestLoop(ci an rt n mc) NestLoop(ci an rt n mc cn) NestLoop(ci an rt n mc cn t) NestLoop(ci an rt n mc cn t chn) Leading((((((((ci an) rt) n) mc) cn) t) chn)) */
"SELECT MIN(an.name) AS alternative_name, MIN(chn.name) AS character_name, MIN(t.title) AS movie
FROM aka_name AS an,
 char_name AS chn,
 cast_info AS ci,
 company_name AS cn,
 movie_companies AS mc,
 name AS n,
 role_type AS rt,
 title AS t
WHERE ci.movie_id = t.id
 AND t.id = mc.movie_id
 AND ci.movie_id = mc.movie_id
 AND mc.company_id = cn.id
 AND ci.role_id = rt.id
 AND n.id = ci.person_id
 AND chn.id = ci.person_role_id
 AND an.person_id = n.id
 AND an.person_id = ci.person_id
AND ci.note IN ('(uncredited)', '(as Arturo Garcia)', '(as V. VlasÃ¡kovÃ¡)', '(as Summers)', '(as Ofelia Acosta)')
AND cn.country_code = '[fi]'
AND mc.note IS NOT NULL 
AND (mc.note LIKE '%r%' OR mc.note LIKE '%(%')
AND n.gender = 'f'
AND n.name LIKE '%a%'
AND rt.role = 'actress'
AND t.production_year BETWEEN 1943 AND 1982;",5,/*+  SeqScan(ci) SeqScan(an) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexScan(t title_pkey) IndexScan(chn char_name_pkey) HashJoin(ci an) HashJoin(ci an rt) NestLoop(ci an rt n) NestLoop(ci an rt n mc) NestLoop(ci an rt n mc cn) NestLoop(ci an rt n mc cn t) NestLoop(ci an rt n mc cn t chn) Leading((((((((ci an) rt) n) mc) cn) t) chn)) */
"SELECT MIN(an.name) AS alternative_name, MIN(chn.name) AS character_name, MIN(t.title) AS movie
FROM aka_name AS an,
 char_name AS chn,
 cast_info AS ci,
 company_name AS cn,
 movie_companies AS mc,
 name AS n,
 role_type AS rt,
 title AS t
WHERE ci.movie_id = t.id
 AND t.id = mc.movie_id
 AND ci.movie_id = mc.movie_id
 AND mc.company_id = cn.id
 AND ci.role_id = rt.id
 AND n.id = ci.person_id
 AND chn.id = ci.person_role_id
 AND an.person_id = n.id
 AND an.person_id = ci.person_id
AND ci.note IN ('(as Ed Hall)', '(1970-1972)', '(as B. Gopal)', '(as Gaston Howard)', '(as Ted Reid)')
AND cn.country_code = '[us]'
AND mc.note IS NOT NULL 
AND (mc.note LIKE '%)%' OR mc.note LIKE '%9%')
AND n.gender = 'm'
AND n.name LIKE '%E%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1935 AND 2016;",5,/*+  SeqScan(ci) SeqScan(an) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexScan(t title_pkey) IndexScan(chn char_name_pkey) HashJoin(ci an) HashJoin(ci an rt) NestLoop(ci an rt n) NestLoop(ci an rt n mc) NestLoop(ci an rt n mc cn) NestLoop(ci an rt n mc cn t) NestLoop(ci an rt n mc cn t chn) Leading((((((((ci an) rt) n) mc) cn) t) chn)) */
"SELECT MIN(an.name) AS alternative_name, MIN(chn.name) AS character_name, MIN(t.title) AS movie
FROM aka_name AS an,
 char_name AS chn,
 cast_info AS ci,
 company_name AS cn,
 movie_companies AS mc,
 name AS n,
 role_type AS rt,
 title AS t
WHERE ci.movie_id = t.id
 AND t.id = mc.movie_id
 AND ci.movie_id = mc.movie_id
 AND mc.company_id = cn.id
 AND ci.role_id = rt.id
 AND n.id = ci.person_id
 AND chn.id = ci.person_role_id
 AND an.person_id = n.id
 AND an.person_id = ci.person_id
AND ci.note IN ('(uncredited)', '(as Dan Fitzsimons)', '(as A. Romantsov)', '(as ED J. Horton)', '(as Denissa DÃ©r)')
AND cn.country_code = '[us]'
AND mc.note IS NOT NULL 
AND (mc.note LIKE '%r%' OR mc.note LIKE '%5%')
AND n.gender = 'm'
AND n.name LIKE '%e%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1922 AND 1995;",5,/*+  SeqScan(ci) SeqScan(an) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexScan(t title_pkey) IndexScan(chn char_name_pkey) HashJoin(ci an) HashJoin(ci an rt) NestLoop(ci an rt n) NestLoop(ci an rt n mc) NestLoop(ci an rt n mc cn) NestLoop(ci an rt n mc cn t) NestLoop(ci an rt n mc cn t chn) Leading((((((((ci an) rt) n) mc) cn) t) chn)) */
"SELECT MIN(an.name) AS alternative_name, MIN(chn.name) AS character_name, MIN(t.title) AS movie
FROM aka_name AS an,
 char_name AS chn,
 cast_info AS ci,
 company_name AS cn,
 movie_companies AS mc,
 name AS n,
 role_type AS rt,
 title AS t
WHERE ci.movie_id = t.id
 AND t.id = mc.movie_id
 AND ci.movie_id = mc.movie_id
 AND mc.company_id = cn.id
 AND ci.role_id = rt.id
 AND n.id = ci.person_id
 AND chn.id = ci.person_role_id
 AND an.person_id = n.id
 AND an.person_id = ci.person_id
AND ci.note IN ('(as Hardy Kruger)', '(as Koel)', '(as April Chapple)', '(The Moody Blues)', '(as Lew Meahan)')
AND cn.country_code = '[us]'
AND mc.note IS NOT NULL 
AND (mc.note LIKE '%S%' OR mc.note LIKE '%(%')
AND n.gender = 'm'
AND n.name LIKE '%d%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1930 AND 1999;",5,/*+  SeqScan(ci) SeqScan(an) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexScan(t title_pkey) IndexScan(chn char_name_pkey) HashJoin(ci an) HashJoin(ci an rt) NestLoop(ci an rt n) NestLoop(ci an rt n mc) NestLoop(ci an rt n mc cn) NestLoop(ci an rt n mc cn t) NestLoop(ci an rt n mc cn t chn) Leading((((((((ci an) rt) n) mc) cn) t) chn)) */
"SELECT MIN(an.name) AS alternative_name, MIN(chn.name) AS character_name, MIN(t.title) AS movie
FROM aka_name AS an,
 char_name AS chn,
 cast_info AS ci,
 company_name AS cn,
 movie_companies AS mc,
 name AS n,
 role_type AS rt,
 title AS t
WHERE ci.movie_id = t.id
 AND t.id = mc.movie_id
 AND ci.movie_id = mc.movie_id
 AND mc.company_id = cn.id
 AND ci.role_id = rt.id
 AND n.id = ci.person_id
 AND chn.id = ci.person_role_id
 AND an.person_id = n.id
 AND an.person_id = ci.person_id
AND ci.note IN ('(uncredited)', '(as R. H. Thomson)', '(as Holly Stevens)', '(marine wrangler)', '(as Albert Marcus)')
AND cn.country_code = '[ph]'
AND mc.note IS NOT NULL 
AND (mc.note LIKE '%t%' OR mc.note LIKE '%l%')
AND n.gender = 'm'
AND n.name LIKE '%s%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1933 AND 2013;",5,/*+  SeqScan(ci) SeqScan(an) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexScan(t title_pkey) IndexScan(chn char_name_pkey) HashJoin(ci an) HashJoin(ci an rt) NestLoop(ci an rt n) NestLoop(ci an rt n mc) NestLoop(ci an rt n mc cn) NestLoop(ci an rt n mc cn t) NestLoop(ci an rt n mc cn t chn) Leading((((((((ci an) rt) n) mc) cn) t) chn)) */
"SELECT MIN(an.name) AS alternative_name, MIN(chn.name) AS character_name, MIN(t.title) AS movie
FROM aka_name AS an,
 char_name AS chn,
 cast_info AS ci,
 company_name AS cn,
 movie_companies AS mc,
 name AS n,
 role_type AS rt,
 title AS t
WHERE ci.movie_id = t.id
 AND t.id = mc.movie_id
 AND ci.movie_id = mc.movie_id
 AND mc.company_id = cn.id
 AND ci.role_id = rt.id
 AND n.id = ci.person_id
 AND chn.id = ci.person_role_id
 AND an.person_id = n.id
 AND an.person_id = ci.person_id
AND ci.note IN ('(as Sabra Choi)', '(as Eric Campbell)', '(2013-)', '(as Andi McPherson)', '(2010 score)')
AND cn.country_code = '[us]'
AND mc.note IS NOT NULL 
AND (mc.note LIKE '%S%' OR mc.note LIKE '%)%')
AND n.gender = 'f'
AND n.name LIKE '%a%'
AND rt.role = 'actress'
AND t.production_year BETWEEN 1901 AND 2017;",5,/*+  SeqScan(ci) SeqScan(an) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexScan(t title_pkey) IndexScan(chn char_name_pkey) HashJoin(ci an) HashJoin(ci an rt) NestLoop(ci an rt n) NestLoop(ci an rt n mc) NestLoop(ci an rt n mc cn) NestLoop(ci an rt n mc cn t) NestLoop(ci an rt n mc cn t chn) Leading((((((((ci an) rt) n) mc) cn) t) chn)) */
"SELECT MIN(an.name) AS alternative_name, MIN(chn.name) AS character_name, MIN(t.title) AS movie
FROM aka_name AS an,
 char_name AS chn,
 cast_info AS ci,
 company_name AS cn,
 movie_companies AS mc,
 name AS n,
 role_type AS rt,
 title AS t
WHERE ci.movie_id = t.id
 AND t.id = mc.movie_id
 AND ci.movie_id = mc.movie_id
 AND mc.company_id = cn.id
 AND ci.role_id = rt.id
 AND n.id = ci.person_id
 AND chn.id = ci.person_role_id
 AND an.person_id = n.id
 AND an.person_id = ci.person_id
AND ci.note IN ('(uncredited)', '(as Julie Reding)', '(as Hattie De Laro)', '(as Tifanny Russo)', '(as Jon Wrigth)')
AND cn.country_code = '[us]'
AND mc.note IS NOT NULL 
AND (mc.note LIKE '%U%' OR mc.note LIKE '%)%')
AND n.gender = 'm'
AND n.name LIKE '%n%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1902 AND 1996;",294,/*+  SeqScan(t) SeqScan(mc) SeqScan(cn) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(an person_id_aka_name) IndexScan(chn char_name_pkey) HashJoin(mc cn) HashJoin(t mc cn) NestLoop(t mc cn ci) HashJoin(t mc cn ci rt) NestLoop(t mc cn ci rt n) NestLoop(t mc cn ci rt n an) NestLoop(t mc cn ci rt n an chn) Leading(((((((t (mc cn)) ci) rt) n) an) chn)) */
"SELECT MIN(an.name) AS alternative_name, MIN(chn.name) AS character_name, MIN(t.title) AS movie
FROM aka_name AS an,
 char_name AS chn,
 cast_info AS ci,
 company_name AS cn,
 movie_companies AS mc,
 name AS n,
 role_type AS rt,
 title AS t
WHERE ci.movie_id = t.id
 AND t.id = mc.movie_id
 AND ci.movie_id = mc.movie_id
 AND mc.company_id = cn.id
 AND ci.role_id = rt.id
 AND n.id = ci.person_id
 AND chn.id = ci.person_role_id
 AND an.person_id = n.id
 AND an.person_id = ci.person_id
AND ci.note IN ('(uncredited)', '(as John Le Guard)', '(as Anne Zelda)', '(as Louis Ramos)', '(as Jose Solans)')
AND cn.country_code = '[ar]'
AND mc.note IS NOT NULL 
AND (mc.note LIKE '%c%' OR mc.note LIKE '%a%')
AND n.gender = 'm'
AND n.name LIKE '%r%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1969 AND 2014;",294,/*+  SeqScan(t) SeqScan(mc) SeqScan(cn) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(an person_id_aka_name) IndexScan(chn char_name_pkey) HashJoin(mc cn) HashJoin(t mc cn) NestLoop(t mc cn ci) HashJoin(t mc cn ci rt) NestLoop(t mc cn ci rt n) NestLoop(t mc cn ci rt n an) NestLoop(t mc cn ci rt n an chn) Leading(((((((t (mc cn)) ci) rt) n) an) chn)) */
"SELECT MIN(an.name) AS alternative_name, MIN(chn.name) AS character_name, MIN(t.title) AS movie
FROM aka_name AS an,
 char_name AS chn,
 cast_info AS ci,
 company_name AS cn,
 movie_companies AS mc,
 name AS n,
 role_type AS rt,
 title AS t
WHERE ci.movie_id = t.id
 AND t.id = mc.movie_id
 AND ci.movie_id = mc.movie_id
 AND mc.company_id = cn.id
 AND ci.role_id = rt.id
 AND n.id = ci.person_id
 AND chn.id = ci.person_role_id
 AND an.person_id = n.id
 AND an.person_id = ci.person_id
AND ci.note IN ('(voice)', '(as Elfi Gerhart)', '(as Gregory Kupiec)', '(script) (2004)', '(as Ronald Hardman)')
AND cn.country_code = '[us]'
AND mc.note IS NOT NULL 
AND (mc.note LIKE '%(%' OR mc.note LIKE '%r%')
AND n.gender = 'm'
AND n.name LIKE '%r%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1977 AND 2013;",294,/*+  SeqScan(t) SeqScan(mc) SeqScan(cn) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(an person_id_aka_name) IndexScan(chn char_name_pkey) HashJoin(mc cn) HashJoin(t mc cn) NestLoop(t mc cn ci) HashJoin(t mc cn ci rt) NestLoop(t mc cn ci rt n) NestLoop(t mc cn ci rt n an) NestLoop(t mc cn ci rt n an chn) Leading(((((((t (mc cn)) ci) rt) n) an) chn)) */
"SELECT MIN(an.name) AS alternative_name, MIN(chn.name) AS character_name, MIN(t.title) AS movie
FROM aka_name AS an,
 char_name AS chn,
 cast_info AS ci,
 company_name AS cn,
 movie_companies AS mc,
 name AS n,
 role_type AS rt,
 title AS t
WHERE ci.movie_id = t.id
 AND t.id = mc.movie_id
 AND ci.movie_id = mc.movie_id
 AND mc.company_id = cn.id
 AND ci.role_id = rt.id
 AND n.id = ci.person_id
 AND chn.id = ci.person_role_id
 AND an.person_id = n.id
 AND an.person_id = ci.person_id
AND ci.note IN ('(uncredited)', '(as Sergio Mateu)', '(as Robert Curran)', '(as Cara Newman)', '(as Tiffany Willis)')
AND cn.country_code = '[ar]'
AND mc.note IS NOT NULL 
AND (mc.note LIKE '%(%' OR mc.note LIKE '%0%')
AND n.gender = 'f'
AND n.name LIKE '%l%'
AND rt.role = 'actress'
AND t.production_year BETWEEN 1896 AND 2007;",294,/*+  SeqScan(t) SeqScan(mc) SeqScan(cn) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(an person_id_aka_name) IndexScan(chn char_name_pkey) HashJoin(mc cn) HashJoin(t mc cn) NestLoop(t mc cn ci) HashJoin(t mc cn ci rt) NestLoop(t mc cn ci rt n) NestLoop(t mc cn ci rt n an) NestLoop(t mc cn ci rt n an chn) Leading(((((((t (mc cn)) ci) rt) n) an) chn)) */
"SELECT MIN(an.name) AS alternative_name, MIN(chn.name) AS character_name, MIN(t.title) AS movie
FROM aka_name AS an,
 char_name AS chn,
 cast_info AS ci,
 company_name AS cn,
 movie_companies AS mc,
 name AS n,
 role_type AS rt,
 title AS t
WHERE ci.movie_id = t.id
 AND t.id = mc.movie_id
 AND ci.movie_id = mc.movie_id
 AND mc.company_id = cn.id
 AND ci.role_id = rt.id
 AND n.id = ci.person_id
 AND chn.id = ci.person_role_id
 AND an.person_id = n.id
 AND an.person_id = ci.person_id
AND ci.note IN ('(segment ""Yvan Attal"")', '(as George Chan)', '(as Marco Tibor)', '(as Dirk Braeter)', '(as Traci Carter)')
AND cn.country_code = '[us]'
AND mc.note IS NOT NULL 
AND (mc.note LIKE '%a%' OR mc.note LIKE '%a%')
AND n.gender = 'f'
AND n.name LIKE '%e%'
AND rt.role = 'actress'
AND t.production_year BETWEEN 1951 AND 2012;",5,/*+  SeqScan(ci) SeqScan(an) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexScan(t title_pkey) IndexScan(chn char_name_pkey) HashJoin(ci an) HashJoin(ci an rt) NestLoop(ci an rt n) NestLoop(ci an rt n mc) NestLoop(ci an rt n mc cn) NestLoop(ci an rt n mc cn t) NestLoop(ci an rt n mc cn t chn) Leading((((((((ci an) rt) n) mc) cn) t) chn)) */
"SELECT MIN(an.name) AS alternative_name, MIN(chn.name) AS character_name, MIN(t.title) AS movie
FROM aka_name AS an,
 char_name AS chn,
 cast_info AS ci,
 company_name AS cn,
 movie_companies AS mc,
 name AS n,
 role_type AS rt,
 title AS t
WHERE ci.movie_id = t.id
 AND t.id = mc.movie_id
 AND ci.movie_id = mc.movie_id
 AND mc.company_id = cn.id
 AND ci.role_id = rt.id
 AND n.id = ci.person_id
 AND chn.id = ci.person_role_id
 AND an.person_id = n.id
 AND an.person_id = ci.person_id
AND ci.note IN ('(as Steven ''Dooky'' Bland)', '(Deco)', '(as Clint Palmer)', '(Pawel)', '(as Dennis Arundel)')
AND cn.country_code = '[us]'
AND mc.note IS NOT NULL 
AND (mc.note LIKE '%)%' OR mc.note LIKE '%V%')
AND n.gender = 'm'
AND n.name LIKE '%B%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1969 AND 2019;",5,/*+  SeqScan(ci) SeqScan(an) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexScan(t title_pkey) IndexScan(chn char_name_pkey) HashJoin(ci an) HashJoin(ci an rt) NestLoop(ci an rt n) NestLoop(ci an rt n mc) NestLoop(ci an rt n mc cn) NestLoop(ci an rt n mc cn t) NestLoop(ci an rt n mc cn t chn) Leading((((((((ci an) rt) n) mc) cn) t) chn)) */
"SELECT MIN(an.name) AS alternative_name, MIN(chn.name) AS character_name, MIN(t.title) AS movie
FROM aka_name AS an,
 char_name AS chn,
 cast_info AS ci,
 company_name AS cn,
 movie_companies AS mc,
 name AS n,
 role_type AS rt,
 title AS t
WHERE ci.movie_id = t.id
 AND t.id = mc.movie_id
 AND ci.movie_id = mc.movie_id
 AND mc.company_id = cn.id
 AND ci.role_id = rt.id
 AND n.id = ci.person_id
 AND chn.id = ci.person_role_id
 AND an.person_id = n.id
 AND an.person_id = ci.person_id
AND ci.note IN ('(as Lauren M. Karl)', '(as Paul Lodgsdon)', '(as Danny Zaidivar)', '(as Marje Fowler)', '(as Stan Kubick)')
AND cn.country_code = '[us]'
AND mc.note IS NOT NULL 
AND (mc.note LIKE '%e%' OR mc.note LIKE '%i%')
AND n.gender = 'f'
AND n.name LIKE '%L%'
AND rt.role = 'actress'
AND t.production_year BETWEEN 1968 AND 2015;",5,/*+  SeqScan(ci) SeqScan(an) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexScan(t title_pkey) IndexScan(chn char_name_pkey) HashJoin(ci an) HashJoin(ci an rt) NestLoop(ci an rt n) NestLoop(ci an rt n mc) NestLoop(ci an rt n mc cn) NestLoop(ci an rt n mc cn t) NestLoop(ci an rt n mc cn t chn) Leading((((((((ci an) rt) n) mc) cn) t) chn)) */
"SELECT MIN(an.name) AS alternative_name, MIN(chn.name) AS character_name, MIN(t.title) AS movie
FROM aka_name AS an,
 char_name AS chn,
 cast_info AS ci,
 company_name AS cn,
 movie_companies AS mc,
 name AS n,
 role_type AS rt,
 title AS t
WHERE ci.movie_id = t.id
 AND t.id = mc.movie_id
 AND ci.movie_id = mc.movie_id
 AND mc.company_id = cn.id
 AND ci.role_id = rt.id
 AND n.id = ci.person_id
 AND chn.id = ci.person_role_id
 AND an.person_id = n.id
 AND an.person_id = ci.person_id
AND ci.note IN ('(voice) (as Gil Anderson)', '(programme adviser)', '(as K.M. Sprunt Jr)', '(as La Singla)', '(as Jim Burton)')
AND cn.country_code = '[us]'
AND mc.note IS NOT NULL 
AND (mc.note LIKE '%s%' OR mc.note LIKE '%,%')
AND n.gender = 'f'
AND n.name LIKE '%n%'
AND rt.role = 'actress'
AND t.production_year BETWEEN 2010 AND 2016;",5,/*+  SeqScan(ci) SeqScan(an) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexScan(t title_pkey) IndexScan(chn char_name_pkey) HashJoin(ci an) HashJoin(ci an rt) NestLoop(ci an rt n) NestLoop(ci an rt n mc) NestLoop(ci an rt n mc cn) NestLoop(ci an rt n mc cn t) NestLoop(ci an rt n mc cn t chn) Leading((((((((ci an) rt) n) mc) cn) t) chn)) */
"SELECT MIN(an.name) AS alternative_name, MIN(chn.name) AS character_name, MIN(t.title) AS movie
FROM aka_name AS an,
 char_name AS chn,
 cast_info AS ci,
 company_name AS cn,
 movie_companies AS mc,
 name AS n,
 role_type AS rt,
 title AS t
WHERE ci.movie_id = t.id
 AND t.id = mc.movie_id
 AND ci.movie_id = mc.movie_id
 AND mc.company_id = cn.id
 AND ci.role_id = rt.id
 AND n.id = ci.person_id
 AND chn.id = ci.person_role_id
 AND an.person_id = n.id
 AND an.person_id = ci.person_id
AND ci.note IN ('(uncredited)', '(as Ruben O''Lague)', '(as Mitch Lodwick)', '(as Lee Ke Rei)', '(article Hiroshima)')
AND cn.country_code = '[ru]'
AND mc.note IS NOT NULL 
AND (mc.note LIKE '%e%' OR mc.note LIKE '%v%')
AND n.gender = 'f'
AND n.name LIKE '%d%'
AND rt.role = 'actress'
AND t.production_year BETWEEN 1905 AND 1940;",5,/*+  SeqScan(ci) SeqScan(an) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexScan(t title_pkey) IndexScan(chn char_name_pkey) HashJoin(ci an) HashJoin(ci an rt) NestLoop(ci an rt n) NestLoop(ci an rt n mc) NestLoop(ci an rt n mc cn) NestLoop(ci an rt n mc cn t) NestLoop(ci an rt n mc cn t chn) Leading((((((((ci an) rt) n) mc) cn) t) chn)) */
"SELECT MIN(an.name) AS alternative_name, MIN(chn.name) AS character_name, MIN(t.title) AS movie
FROM aka_name AS an,
 char_name AS chn,
 cast_info AS ci,
 company_name AS cn,
 movie_companies AS mc,
 name AS n,
 role_type AS rt,
 title AS t
WHERE ci.movie_id = t.id
 AND t.id = mc.movie_id
 AND ci.movie_id = mc.movie_id
 AND mc.company_id = cn.id
 AND ci.role_id = rt.id
 AND n.id = ci.person_id
 AND chn.id = ci.person_role_id
 AND an.person_id = n.id
 AND an.person_id = ci.person_id
AND ci.note IN ('(archive footage) (uncredited)', '(scene programmer)', '(as Bessy Stiepl)', '(main engineer)', '(much love for)')
AND cn.country_code = '[gb]'
AND mc.note IS NOT NULL 
AND (mc.note LIKE '%(%' OR mc.note LIKE '%(%')
AND n.gender = 'm'
AND n.name LIKE '%,%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1918 AND 2007;",5,/*+  SeqScan(ci) SeqScan(an) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexScan(t title_pkey) IndexScan(chn char_name_pkey) HashJoin(ci an) HashJoin(ci an rt) NestLoop(ci an rt n) NestLoop(ci an rt n mc) NestLoop(ci an rt n mc cn) NestLoop(ci an rt n mc cn t) NestLoop(ci an rt n mc cn t chn) Leading((((((((ci an) rt) n) mc) cn) t) chn)) */
"SELECT MIN(an.name) AS alternative_name, MIN(chn.name) AS character_name, MIN(t.title) AS movie
FROM aka_name AS an,
 char_name AS chn,
 cast_info AS ci,
 company_name AS cn,
 movie_companies AS mc,
 name AS n,
 role_type AS rt,
 title AS t
WHERE ci.movie_id = t.id
 AND t.id = mc.movie_id
 AND ci.movie_id = mc.movie_id
 AND mc.company_id = cn.id
 AND ci.role_id = rt.id
 AND n.id = ci.person_id
 AND chn.id = ci.person_role_id
 AND an.person_id = n.id
 AND an.person_id = ci.person_id
AND ci.note IN ('(as Christopher Fields)', '(as George Paine)', '(segment ""Casco"")', '(caterer: Iceland)', '(caretaker: etxras)')
AND cn.country_code = '[us]'
AND mc.note IS NOT NULL 
AND (mc.note LIKE '%n%' OR mc.note LIKE '%s%')
AND n.gender = 'm'
AND n.name LIKE '%o%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1956 AND 2010;",294,/*+  SeqScan(t) SeqScan(mc) SeqScan(cn) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(an person_id_aka_name) IndexScan(chn char_name_pkey) HashJoin(mc cn) HashJoin(t mc cn) NestLoop(t mc cn ci) HashJoin(t mc cn ci rt) NestLoop(t mc cn ci rt n) NestLoop(t mc cn ci rt n an) NestLoop(t mc cn ci rt n an chn) Leading(((((((t (mc cn)) ci) rt) n) an) chn)) */
"SELECT MIN(an.name) AS alternative_name, MIN(chn.name) AS character_name, MIN(t.title) AS movie
FROM aka_name AS an,
 char_name AS chn,
 cast_info AS ci,
 company_name AS cn,
 movie_companies AS mc,
 name AS n,
 role_type AS rt,
 title AS t
WHERE ci.movie_id = t.id
 AND t.id = mc.movie_id
 AND ci.movie_id = mc.movie_id
 AND mc.company_id = cn.id
 AND ci.role_id = rt.id
 AND n.id = ci.person_id
 AND chn.id = ci.person_role_id
 AND an.person_id = n.id
 AND an.person_id = ci.person_id
AND ci.note IN ('(as Patrick J. Kelly)', '(as Vincent Murphy)', '(Shou-6)', '(Story #6)', '(as Enzo Recchia)')
AND cn.country_code = '[nl]'
AND mc.note IS NOT NULL 
AND (mc.note LIKE '%l%' OR mc.note LIKE '%)%')
AND n.gender = 'm'
AND n.name LIKE '%K%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1918 AND 1998;",294,/*+  SeqScan(t) SeqScan(mc) SeqScan(cn) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(an person_id_aka_name) IndexScan(chn char_name_pkey) HashJoin(mc cn) HashJoin(t mc cn) NestLoop(t mc cn ci) HashJoin(t mc cn ci rt) NestLoop(t mc cn ci rt n) NestLoop(t mc cn ci rt n an) NestLoop(t mc cn ci rt n an chn) Leading(((((((t (mc cn)) ci) rt) n) an) chn)) */
"SELECT MIN(an.name) AS alternative_name, MIN(chn.name) AS character_name, MIN(t.title) AS movie
FROM aka_name AS an,
 char_name AS chn,
 cast_info AS ci,
 company_name AS cn,
 movie_companies AS mc,
 name AS n,
 role_type AS rt,
 title AS t
WHERE ci.movie_id = t.id
 AND t.id = mc.movie_id
 AND ci.movie_id = mc.movie_id
 AND mc.company_id = cn.id
 AND ci.role_id = rt.id
 AND n.id = ci.person_id
 AND chn.id = ci.person_role_id
 AND an.person_id = n.id
 AND an.person_id = ci.person_id
AND ci.note IN ('(voice)', '(as Laumonier)', '(as DJ Polymorphic)', '(as Loles GarcÃ­a)', '(as Thuraya Masri)')
AND cn.country_code = '[fi]'
AND mc.note IS NOT NULL 
AND (mc.note LIKE '%)%' OR mc.note LIKE '%l%')
AND n.gender = 'm'
AND n.name LIKE '%s%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1914 AND 1998;",294,/*+  SeqScan(t) SeqScan(mc) SeqScan(cn) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(an person_id_aka_name) IndexScan(chn char_name_pkey) HashJoin(mc cn) HashJoin(t mc cn) NestLoop(t mc cn ci) HashJoin(t mc cn ci rt) NestLoop(t mc cn ci rt n) NestLoop(t mc cn ci rt n an) NestLoop(t mc cn ci rt n an chn) Leading(((((((t (mc cn)) ci) rt) n) an) chn)) */
"SELECT MIN(an.name) AS alternative_name, MIN(chn.name) AS character_name, MIN(t.title) AS movie
FROM aka_name AS an,
 char_name AS chn,
 cast_info AS ci,
 company_name AS cn,
 movie_companies AS mc,
 name AS n,
 role_type AS rt,
 title AS t
WHERE ci.movie_id = t.id
 AND t.id = mc.movie_id
 AND ci.movie_id = mc.movie_id
 AND mc.company_id = cn.id
 AND ci.role_id = rt.id
 AND n.id = ci.person_id
 AND chn.id = ci.person_role_id
 AND an.person_id = n.id
 AND an.person_id = ci.person_id
AND ci.note IN ('(uncredited)', '(as Jerome Wiggins)', '(as Shelly Ray)', '(planner: Fuji TV)', '(as LÃ©na Dartes)')
AND cn.country_code = '[es]'
AND mc.note IS NOT NULL 
AND (mc.note LIKE '%(%' OR mc.note LIKE '%)%')
AND n.gender = 'm'
AND n.name LIKE '%i%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1902 AND 2012;",294,/*+  SeqScan(t) SeqScan(mc) SeqScan(cn) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(an person_id_aka_name) IndexScan(chn char_name_pkey) HashJoin(mc cn) HashJoin(t mc cn) NestLoop(t mc cn ci) HashJoin(t mc cn ci rt) NestLoop(t mc cn ci rt n) NestLoop(t mc cn ci rt n an) NestLoop(t mc cn ci rt n an chn) Leading(((((((t (mc cn)) ci) rt) n) an) chn)) */
"SELECT MIN(an.name) AS alternative_name, MIN(chn.name) AS character_name, MIN(t.title) AS movie
FROM aka_name AS an,
 char_name AS chn,
 cast_info AS ci,
 company_name AS cn,
 movie_companies AS mc,
 name AS n,
 role_type AS rt,
 title AS t
WHERE ci.movie_id = t.id
 AND t.id = mc.movie_id
 AND ci.movie_id = mc.movie_id
 AND mc.company_id = cn.id
 AND ci.role_id = rt.id
 AND n.id = ci.person_id
 AND chn.id = ci.person_role_id
 AND an.person_id = n.id
 AND an.person_id = ci.person_id
AND ci.note IN ('(as Jacob ''Jae Fusz'' Fuszara)', '(as Terri Benoum)', '(writer) (1994)', '(as Minne Kavoulis)', '(as Bob Cochrane)')
AND cn.country_code = '[gb]'
AND mc.note IS NOT NULL 
AND (mc.note LIKE '%n%' OR mc.note LIKE '%n%')
AND n.gender = 'm'
AND n.name LIKE '%z%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 2006 AND 2017;",5,/*+  SeqScan(ci) SeqScan(an) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexScan(t title_pkey) IndexScan(chn char_name_pkey) HashJoin(ci an) HashJoin(ci an rt) NestLoop(ci an rt n) NestLoop(ci an rt n mc) NestLoop(ci an rt n mc cn) NestLoop(ci an rt n mc cn t) NestLoop(ci an rt n mc cn t chn) Leading((((((((ci an) rt) n) mc) cn) t) chn)) */
"SELECT MIN(an.name) AS alternative_name, MIN(chn.name) AS character_name, MIN(t.title) AS movie
FROM aka_name AS an,
 char_name AS chn,
 cast_info AS ci,
 company_name AS cn,
 movie_companies AS mc,
 name AS n,
 role_type AS rt,
 title AS t
WHERE ci.movie_id = t.id
 AND t.id = mc.movie_id
 AND ci.movie_id = mc.movie_id
 AND mc.company_id = cn.id
 AND ci.role_id = rt.id
 AND n.id = ci.person_id
 AND chn.id = ci.person_role_id
 AND an.person_id = n.id
 AND an.person_id = ci.person_id
AND ci.note IN ('(uncredited)', '(as Groza Wesco)', '(as MÃ¡ria IllyÃ©s)', '(creator) (2013)', '(as Cody Whirler)')
AND cn.country_code = '[us]'
AND mc.note IS NOT NULL 
AND (mc.note LIKE '%t%' OR mc.note LIKE '%t%')
AND n.gender = 'm'
AND n.name LIKE '%t%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1923 AND 2002;",5,/*+  SeqScan(ci) SeqScan(an) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexScan(t title_pkey) IndexScan(chn char_name_pkey) HashJoin(ci an) HashJoin(ci an rt) NestLoop(ci an rt n) NestLoop(ci an rt n mc) NestLoop(ci an rt n mc cn) NestLoop(ci an rt n mc cn t) NestLoop(ci an rt n mc cn t chn) Leading((((((((ci an) rt) n) mc) cn) t) chn)) */
"SELECT MIN(an.name) AS alternative_name, MIN(chn.name) AS character_name, MIN(t.title) AS movie
FROM aka_name AS an,
 char_name AS chn,
 cast_info AS ci,
 company_name AS cn,
 movie_companies AS mc,
 name AS n,
 role_type AS rt,
 title AS t
WHERE ci.movie_id = t.id
 AND t.id = mc.movie_id
 AND ci.movie_id = mc.movie_id
 AND mc.company_id = cn.id
 AND ci.role_id = rt.id
 AND n.id = ci.person_id
 AND chn.id = ci.person_role_id
 AND an.person_id = n.id
 AND an.person_id = ci.person_id
AND ci.note IN ('(uncredited)', '(as Serge Hasdorf)', '(as Matt Franklin)', '(set equipment)', '(as Raymond Dandee)')
AND cn.country_code = '[ar]'
AND mc.note IS NOT NULL 
AND (mc.note LIKE '%n%' OR mc.note LIKE '%r%')
AND n.gender = 'm'
AND n.name LIKE '%e%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1941 AND 1961;",76,/*+  SeqScan(mc) SeqScan(cn) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) IndexScan(n name_pkey) IndexScan(an person_id_aka_name) SeqScan(rt) IndexScan(chn char_name_pkey) HashJoin(mc cn) NestLoop(mc cn t) NestLoop(mc cn t ci) NestLoop(mc cn t ci n) NestLoop(mc cn t ci n an) HashJoin(mc cn t ci n an rt) NestLoop(mc cn t ci n an rt chn) Leading((((((((mc cn) t) ci) n) an) rt) chn)) */
"SELECT MIN(an.name) AS alternative_name, MIN(chn.name) AS character_name, MIN(t.title) AS movie
FROM aka_name AS an,
 char_name AS chn,
 cast_info AS ci,
 company_name AS cn,
 movie_companies AS mc,
 name AS n,
 role_type AS rt,
 title AS t
WHERE ci.movie_id = t.id
 AND t.id = mc.movie_id
 AND ci.movie_id = mc.movie_id
 AND mc.company_id = cn.id
 AND ci.role_id = rt.id
 AND n.id = ci.person_id
 AND chn.id = ci.person_role_id
 AND an.person_id = n.id
 AND an.person_id = ci.person_id
AND ci.note IN ('(as Georges Riviere)', '(programming)', '(stage programming)', '(as Dave Legano)', '(as Steven Garry)')
AND cn.country_code = '[fr]'
AND mc.note IS NOT NULL 
AND (mc.note LIKE '%)%' OR mc.note LIKE '%1%')
AND n.gender = 'm'
AND n.name LIKE '%¨%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1907 AND 1999;",76,/*+  SeqScan(mc) SeqScan(cn) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) IndexScan(n name_pkey) IndexScan(an person_id_aka_name) SeqScan(rt) IndexScan(chn char_name_pkey) HashJoin(mc cn) NestLoop(mc cn t) NestLoop(mc cn t ci) NestLoop(mc cn t ci n) NestLoop(mc cn t ci n an) HashJoin(mc cn t ci n an rt) NestLoop(mc cn t ci n an rt chn) Leading((((((((mc cn) t) ci) n) an) rt) chn)) */
"SELECT MIN(an.name) AS alternative_name, MIN(chn.name) AS character_name, MIN(t.title) AS movie
FROM aka_name AS an,
 char_name AS chn,
 cast_info AS ci,
 company_name AS cn,
 movie_companies AS mc,
 name AS n,
 role_type AS rt,
 title AS t
WHERE ci.movie_id = t.id
 AND t.id = mc.movie_id
 AND ci.movie_id = mc.movie_id
 AND mc.company_id = cn.id
 AND ci.role_id = rt.id
 AND n.id = ci.person_id
 AND chn.id = ci.person_role_id
 AND an.person_id = n.id
 AND an.person_id = ci.person_id
AND ci.note IN ('(voice)', '(as John Barker)', '(as John Dumas)', '(Ricardo)', '(as Corrina Sklar)')
AND cn.country_code = '[us]'
AND mc.note IS NOT NULL 
AND (mc.note LIKE '%)%' OR mc.note LIKE '%1%')
AND n.gender = 'f'
AND n.name LIKE '%a%'
AND rt.role = 'actress'
AND t.production_year BETWEEN 1889 AND 2019;",5,/*+  SeqScan(ci) SeqScan(an) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexScan(t title_pkey) IndexScan(chn char_name_pkey) HashJoin(ci an) HashJoin(ci an rt) NestLoop(ci an rt n) NestLoop(ci an rt n mc) NestLoop(ci an rt n mc cn) NestLoop(ci an rt n mc cn t) NestLoop(ci an rt n mc cn t chn) Leading((((((((ci an) rt) n) mc) cn) t) chn)) */
"SELECT MIN(an.name) AS alternative_name, MIN(chn.name) AS character_name, MIN(t.title) AS movie
FROM aka_name AS an,
 char_name AS chn,
 cast_info AS ci,
 company_name AS cn,
 movie_companies AS mc,
 name AS n,
 role_type AS rt,
 title AS t
WHERE ci.movie_id = t.id
 AND t.id = mc.movie_id
 AND ci.movie_id = mc.movie_id
 AND mc.company_id = cn.id
 AND ci.role_id = rt.id
 AND n.id = ci.person_id
 AND chn.id = ci.person_role_id
 AND an.person_id = n.id
 AND an.person_id = ci.person_id
AND ci.note IN ('(uncredited)', '(as N. Majzler)', '(as Byron Barr)', '(as Chris Borelli)', '(as Bloem)')
AND cn.country_code = '[jp]'
AND mc.note IS NOT NULL 
AND (mc.note LIKE '%a%' OR mc.note LIKE '%p%')
AND n.gender = 'm'
AND n.name LIKE '%,%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1914 AND 1957;",294,/*+  SeqScan(t) SeqScan(mc) SeqScan(cn) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(an person_id_aka_name) IndexScan(chn char_name_pkey) HashJoin(mc cn) HashJoin(t mc cn) NestLoop(t mc cn ci) HashJoin(t mc cn ci rt) NestLoop(t mc cn ci rt n) NestLoop(t mc cn ci rt n an) NestLoop(t mc cn ci rt n an chn) Leading(((((((t (mc cn)) ci) rt) n) an) chn)) */
"SELECT MIN(an.name) AS alternative_name, MIN(chn.name) AS character_name, MIN(t.title) AS movie
FROM aka_name AS an,
 char_name AS chn,
 cast_info AS ci,
 company_name AS cn,
 movie_companies AS mc,
 name AS n,
 role_type AS rt,
 title AS t
WHERE ci.movie_id = t.id
 AND t.id = mc.movie_id
 AND ci.movie_id = mc.movie_id
 AND mc.company_id = cn.id
 AND ci.role_id = rt.id
 AND n.id = ci.person_id
 AND chn.id = ci.person_role_id
 AND an.person_id = n.id
 AND an.person_id = ci.person_id
AND ci.note IN ('(uncredited)', '(as Jenifer Ludlam)', '(as David Clarke)', '(as Otto Mellis)', '(as Gordon Ramon)')
AND cn.country_code = '[de]'
AND mc.note IS NOT NULL 
AND (mc.note LIKE '%h%' OR mc.note LIKE '%)%')
AND n.gender = 'm'
AND n.name LIKE '%o%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1964 AND 1993;",294,/*+  SeqScan(t) SeqScan(mc) SeqScan(cn) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(an person_id_aka_name) IndexScan(chn char_name_pkey) HashJoin(mc cn) HashJoin(t mc cn) NestLoop(t mc cn ci) HashJoin(t mc cn ci rt) NestLoop(t mc cn ci rt n) NestLoop(t mc cn ci rt n an) NestLoop(t mc cn ci rt n an chn) Leading(((((((t (mc cn)) ci) rt) n) an) chn)) */
"SELECT MIN(an.name) AS alternative_name, MIN(chn.name) AS character_name, MIN(t.title) AS movie
FROM aka_name AS an,
 char_name AS chn,
 cast_info AS ci,
 company_name AS cn,
 movie_companies AS mc,
 name AS n,
 role_type AS rt,
 title AS t
WHERE ci.movie_id = t.id
 AND t.id = mc.movie_id
 AND ci.movie_id = mc.movie_id
 AND mc.company_id = cn.id
 AND ci.role_id = rt.id
 AND n.id = ci.person_id
 AND chn.id = ci.person_role_id
 AND an.person_id = n.id
 AND an.person_id = ci.person_id
AND ci.note IN ('(uncredited)', '(as N. Polishchuk)', '(as Tony Reagan)', '(as Ronald Pitts)', '(as Mikkel)')
AND cn.country_code = '[pa]'
AND mc.note IS NOT NULL 
AND (mc.note LIKE '%o%' OR mc.note LIKE '%7%')
AND n.gender = 'm'
AND n.name LIKE '%P%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1898 AND 2010;",5,/*+  SeqScan(ci) SeqScan(an) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexScan(t title_pkey) IndexScan(chn char_name_pkey) HashJoin(ci an) HashJoin(ci an rt) NestLoop(ci an rt n) NestLoop(ci an rt n mc) NestLoop(ci an rt n mc cn) NestLoop(ci an rt n mc cn t) NestLoop(ci an rt n mc cn t chn) Leading((((((((ci an) rt) n) mc) cn) t) chn)) */
"SELECT MIN(an.name) AS alternative_name, MIN(chn.name) AS character_name, MIN(t.title) AS movie
FROM aka_name AS an,
 char_name AS chn,
 cast_info AS ci,
 company_name AS cn,
 movie_companies AS mc,
 name AS n,
 role_type AS rt,
 title AS t
WHERE ci.movie_id = t.id
 AND t.id = mc.movie_id
 AND ci.movie_id = mc.movie_id
 AND mc.company_id = cn.id
 AND ci.role_id = rt.id
 AND n.id = ci.person_id
 AND chn.id = ci.person_role_id
 AND an.person_id = n.id
 AND an.person_id = ci.person_id
AND ci.note IN ('(voice)', '(as B.M. Turner)', '(as CsÃµgÃ¶r Tibi)', '(as Bob Hale)', '(as Leo Wayne)')
AND cn.country_code = '[ar]'
AND mc.note IS NOT NULL 
AND (mc.note LIKE '%l%' OR mc.note LIKE '%n%')
AND n.gender = 'm'
AND n.name LIKE '%,%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1973 AND 2001;",76,/*+  SeqScan(mc) SeqScan(cn) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) IndexScan(n name_pkey) IndexScan(an person_id_aka_name) SeqScan(rt) IndexScan(chn char_name_pkey) HashJoin(mc cn) NestLoop(mc cn t) NestLoop(mc cn t ci) NestLoop(mc cn t ci n) NestLoop(mc cn t ci n an) HashJoin(mc cn t ci n an rt) NestLoop(mc cn t ci n an rt chn) Leading((((((((mc cn) t) ci) n) an) rt) chn)) */
"SELECT MIN(an.name) AS alternative_name, MIN(chn.name) AS character_name, MIN(t.title) AS movie
FROM aka_name AS an,
 char_name AS chn,
 cast_info AS ci,
 company_name AS cn,
 movie_companies AS mc,
 name AS n,
 role_type AS rt,
 title AS t
WHERE ci.movie_id = t.id
 AND t.id = mc.movie_id
 AND ci.movie_id = mc.movie_id
 AND mc.company_id = cn.id
 AND ci.role_id = rt.id
 AND n.id = ci.person_id
 AND chn.id = ci.person_role_id
 AND an.person_id = n.id
 AND an.person_id = ci.person_id
AND ci.note IN ('(uncredited)', '(as Romi Park)', '(as Ian Crim)', '(as Krista Reckner)', '(as Jen Gillian)')
AND cn.country_code = '[de]'
AND mc.note IS NOT NULL 
AND (mc.note LIKE '%V%' OR mc.note LIKE '%m%')
AND n.gender = 'm'
AND n.name LIKE '%r%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1905 AND 2003;",294,/*+  SeqScan(t) SeqScan(mc) SeqScan(cn) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(an person_id_aka_name) IndexScan(chn char_name_pkey) HashJoin(mc cn) HashJoin(t mc cn) NestLoop(t mc cn ci) HashJoin(t mc cn ci rt) NestLoop(t mc cn ci rt n) NestLoop(t mc cn ci rt n an) NestLoop(t mc cn ci rt n an chn) Leading(((((((t (mc cn)) ci) rt) n) an) chn)) */
"SELECT MIN(an.name) AS alternative_name, MIN(chn.name) AS character_name, MIN(t.title) AS movie
FROM aka_name AS an,
 char_name AS chn,
 cast_info AS ci,
 company_name AS cn,
 movie_companies AS mc,
 name AS n,
 role_type AS rt,
 title AS t
WHERE ci.movie_id = t.id
 AND t.id = mc.movie_id
 AND ci.movie_id = mc.movie_id
 AND mc.company_id = cn.id
 AND ci.role_id = rt.id
 AND n.id = ci.person_id
 AND chn.id = ci.person_role_id
 AND an.person_id = n.id
 AND an.person_id = ci.person_id
AND ci.note IN ('(uncredited)', '(as Chris Rube)', '(as Leif Bach)', '(as Laura Rocca)', '(as Tom Riley)')
AND cn.country_code = '[dk]'
AND mc.note IS NOT NULL 
AND (mc.note LIKE '%t%' OR mc.note LIKE '%a%')
AND n.gender = 'm'
AND n.name LIKE '%v%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1985 AND 2019;",5,/*+  SeqScan(ci) SeqScan(an) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexScan(t title_pkey) IndexScan(chn char_name_pkey) HashJoin(ci an) HashJoin(ci an rt) NestLoop(ci an rt n) NestLoop(ci an rt n mc) NestLoop(ci an rt n mc cn) NestLoop(ci an rt n mc cn t) NestLoop(ci an rt n mc cn t chn) Leading((((((((ci an) rt) n) mc) cn) t) chn)) */
"SELECT MIN(an.name) AS alternative_name, MIN(chn.name) AS character_name, MIN(t.title) AS movie
FROM aka_name AS an,
 char_name AS chn,
 cast_info AS ci,
 company_name AS cn,
 movie_companies AS mc,
 name AS n,
 role_type AS rt,
 title AS t
WHERE ci.movie_id = t.id
 AND t.id = mc.movie_id
 AND ci.movie_id = mc.movie_id
 AND mc.company_id = cn.id
 AND ci.role_id = rt.id
 AND n.id = ci.person_id
 AND chn.id = ci.person_role_id
 AND an.person_id = n.id
 AND an.person_id = ci.person_id
AND ci.note IN ('(as Ronald Selmour)', '(as Yu. Tsupko)', '(4Âª expulsada)', '(as Rachel Blake)', '(7 Points)')
AND cn.country_code = '[ru]'
AND mc.note IS NOT NULL 
AND (mc.note LIKE '%)%' OR mc.note LIKE '%i%')
AND n.gender = 'm'
AND n.name LIKE '%m%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1977 AND 2010;",5,/*+  SeqScan(ci) SeqScan(an) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexScan(t title_pkey) IndexScan(chn char_name_pkey) HashJoin(ci an) HashJoin(ci an rt) NestLoop(ci an rt n) NestLoop(ci an rt n mc) NestLoop(ci an rt n mc cn) NestLoop(ci an rt n mc cn t) NestLoop(ci an rt n mc cn t chn) Leading((((((((ci an) rt) n) mc) cn) t) chn)) */
"SELECT MIN(an.name) AS alternative_name, MIN(chn.name) AS character_name, MIN(t.title) AS movie
FROM aka_name AS an,
 char_name AS chn,
 cast_info AS ci,
 company_name AS cn,
 movie_companies AS mc,
 name AS n,
 role_type AS rt,
 title AS t
WHERE ci.movie_id = t.id
 AND t.id = mc.movie_id
 AND ci.movie_id = mc.movie_id
 AND mc.company_id = cn.id
 AND ci.role_id = rt.id
 AND n.id = ci.person_id
 AND chn.id = ci.person_role_id
 AND an.person_id = n.id
 AND an.person_id = ci.person_id
AND ci.note IN ('(uncredited)', '(as Erika West)', '(as Anita Dano)', '(as Ritchie Stuart)', '(as Tessa Brind)')
AND cn.country_code = '[ru]'
AND mc.note IS NOT NULL 
AND (mc.note LIKE '%0%' OR mc.note LIKE '%0%')
AND n.gender = 'm'
AND n.name LIKE '%t%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1927 AND 1994;",5,/*+  SeqScan(ci) SeqScan(an) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexScan(t title_pkey) IndexScan(chn char_name_pkey) HashJoin(ci an) HashJoin(ci an rt) NestLoop(ci an rt n) NestLoop(ci an rt n mc) NestLoop(ci an rt n mc cn) NestLoop(ci an rt n mc cn t) NestLoop(ci an rt n mc cn t chn) Leading((((((((ci an) rt) n) mc) cn) t) chn)) */
"SELECT MIN(an.name) AS alternative_name, MIN(chn.name) AS character_name, MIN(t.title) AS movie
FROM aka_name AS an,
 char_name AS chn,
 cast_info AS ci,
 company_name AS cn,
 movie_companies AS mc,
 name AS n,
 role_type AS rt,
 title AS t
WHERE ci.movie_id = t.id
 AND t.id = mc.movie_id
 AND ci.movie_id = mc.movie_id
 AND mc.company_id = cn.id
 AND ci.role_id = rt.id
 AND n.id = ci.person_id
 AND chn.id = ci.person_role_id
 AND an.person_id = n.id
 AND an.person_id = ci.person_id
AND ci.note IN ('(as Larry)', '(as Jimmy Chiu)', '(ultimate engineer)', '(as Roy Ayers)', '(press: Slovenia)')
AND cn.country_code = '[ar]'
AND mc.note IS NOT NULL 
AND (mc.note LIKE '%(%' OR mc.note LIKE '%)%')
AND n.gender = 'm'
AND n.name LIKE '%r%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1926 AND 2012;",294,/*+  SeqScan(t) SeqScan(mc) SeqScan(cn) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(an person_id_aka_name) IndexScan(chn char_name_pkey) HashJoin(mc cn) HashJoin(t mc cn) NestLoop(t mc cn ci) HashJoin(t mc cn ci rt) NestLoop(t mc cn ci rt n) NestLoop(t mc cn ci rt n an) NestLoop(t mc cn ci rt n an chn) Leading(((((((t (mc cn)) ci) rt) n) an) chn)) */
"SELECT MIN(an.name) AS alternative_name, MIN(chn.name) AS character_name, MIN(t.title) AS movie
FROM aka_name AS an,
 char_name AS chn,
 cast_info AS ci,
 company_name AS cn,
 movie_companies AS mc,
 name AS n,
 role_type AS rt,
 title AS t
WHERE ci.movie_id = t.id
 AND t.id = mc.movie_id
 AND ci.movie_id = mc.movie_id
 AND mc.company_id = cn.id
 AND ci.role_id = rt.id
 AND n.id = ci.person_id
 AND chn.id = ci.person_role_id
 AND an.person_id = n.id
 AND an.person_id = ci.person_id
AND ci.note IN ('(as Jeannette Etheredge)', '(Madho)', '(2010-2012))', '(as Chris Oneliner)', '(as Vincent Flueck)')
AND cn.country_code = '[de]'
AND mc.note IS NOT NULL 
AND (mc.note LIKE '%2%' OR mc.note LIKE '%i%')
AND n.gender = 'f'
AND n.name LIKE '%t%'
AND rt.role = 'actress'
AND t.production_year BETWEEN 1892 AND 2020;",5,/*+  SeqScan(ci) SeqScan(an) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexScan(t title_pkey) IndexScan(chn char_name_pkey) HashJoin(ci an) HashJoin(ci an rt) NestLoop(ci an rt n) NestLoop(ci an rt n mc) NestLoop(ci an rt n mc cn) NestLoop(ci an rt n mc cn t) NestLoop(ci an rt n mc cn t chn) Leading((((((((ci an) rt) n) mc) cn) t) chn)) */
"SELECT MIN(an.name) AS alternative_name, MIN(chn.name) AS character_name, MIN(t.title) AS movie
FROM aka_name AS an,
 char_name AS chn,
 cast_info AS ci,
 company_name AS cn,
 movie_companies AS mc,
 name AS n,
 role_type AS rt,
 title AS t
WHERE ci.movie_id = t.id
 AND t.id = mc.movie_id
 AND ci.movie_id = mc.movie_id
 AND mc.company_id = cn.id
 AND ci.role_id = rt.id
 AND n.id = ci.person_id
 AND chn.id = ci.person_role_id
 AND an.person_id = n.id
 AND an.person_id = ci.person_id
AND ci.note IN ('(uncredited)', '(as Lari Laine)', '(as Annie Anderson)', '(as Luisa Carletti)', '(as Rudi Feldt)')
AND cn.country_code = '[us]'
AND mc.note IS NOT NULL 
AND (mc.note LIKE '%i%' OR mc.note LIKE '%h%')
AND n.gender = 'm'
AND n.name LIKE '%s%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1889 AND 1998;",76,/*+  SeqScan(mc) SeqScan(cn) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) IndexScan(n name_pkey) IndexScan(an person_id_aka_name) SeqScan(rt) IndexScan(chn char_name_pkey) HashJoin(mc cn) NestLoop(mc cn t) NestLoop(mc cn t ci) NestLoop(mc cn t ci n) NestLoop(mc cn t ci n an) HashJoin(mc cn t ci n an rt) NestLoop(mc cn t ci n an rt chn) Leading((((((((mc cn) t) ci) n) an) rt) chn)) */
"SELECT MIN(an.name) AS alternative_name, MIN(chn.name) AS character_name, MIN(t.title) AS movie
FROM aka_name AS an,
 char_name AS chn,
 cast_info AS ci,
 company_name AS cn,
 movie_companies AS mc,
 name AS n,
 role_type AS rt,
 title AS t
WHERE ci.movie_id = t.id
 AND t.id = mc.movie_id
 AND ci.movie_id = mc.movie_id
 AND mc.company_id = cn.id
 AND ci.role_id = rt.id
 AND n.id = ci.person_id
 AND chn.id = ci.person_role_id
 AND an.person_id = n.id
 AND an.person_id = ci.person_id
AND ci.note IN ('(uncredited)', '(King Arthur)', '(as Luis Marco)', '(as Irene Cho)', '(as Pepita Ruiz)')
AND cn.country_code = '[us]'
AND mc.note IS NOT NULL 
AND (mc.note LIKE '%A%' OR mc.note LIKE '%)%')
AND n.gender = 'm'
AND n.name LIKE '%r%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1932 AND 1995;",294,/*+  SeqScan(t) SeqScan(mc) SeqScan(cn) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(an person_id_aka_name) IndexScan(chn char_name_pkey) HashJoin(mc cn) HashJoin(t mc cn) NestLoop(t mc cn ci) HashJoin(t mc cn ci rt) NestLoop(t mc cn ci rt n) NestLoop(t mc cn ci rt n an) NestLoop(t mc cn ci rt n an chn) Leading(((((((t (mc cn)) ci) rt) n) an) chn)) */
"SELECT MIN(an.name) AS alternative_name, MIN(chn.name) AS character_name, MIN(t.title) AS movie
FROM aka_name AS an,
 char_name AS chn,
 cast_info AS ci,
 company_name AS cn,
 movie_companies AS mc,
 name AS n,
 role_type AS rt,
 title AS t
WHERE ci.movie_id = t.id
 AND t.id = mc.movie_id
 AND ci.movie_id = mc.movie_id
 AND mc.company_id = cn.id
 AND ci.role_id = rt.id
 AND n.id = ci.person_id
 AND chn.id = ci.person_role_id
 AND an.person_id = n.id
 AND an.person_id = ci.person_id
AND ci.note IN ('(as Eivind Harum)', '(as Asad)', '(play ""Dona Xepa"")', '(as Andris Oshin)', '(as Charlie Hustle)')
AND cn.country_code = '[us]'
AND mc.note IS NOT NULL 
AND (mc.note LIKE '%)%' OR mc.note LIKE '%9%')
AND n.gender = 'm'
AND n.name LIKE '%n%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1946 AND 2000;",76,/*+  SeqScan(mc) SeqScan(cn) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) IndexScan(n name_pkey) IndexScan(an person_id_aka_name) SeqScan(rt) IndexScan(chn char_name_pkey) HashJoin(mc cn) NestLoop(mc cn t) NestLoop(mc cn t ci) NestLoop(mc cn t ci n) NestLoop(mc cn t ci n an) HashJoin(mc cn t ci n an rt) NestLoop(mc cn t ci n an rt chn) Leading((((((((mc cn) t) ci) n) an) rt) chn)) */
"SELECT MIN(an.name) AS alternative_name, MIN(chn.name) AS character_name, MIN(t.title) AS movie
FROM aka_name AS an,
 char_name AS chn,
 cast_info AS ci,
 company_name AS cn,
 movie_companies AS mc,
 name AS n,
 role_type AS rt,
 title AS t
WHERE ci.movie_id = t.id
 AND t.id = mc.movie_id
 AND ci.movie_id = mc.movie_id
 AND mc.company_id = cn.id
 AND ci.role_id = rt.id
 AND n.id = ci.person_id
 AND chn.id = ci.person_role_id
 AND an.person_id = n.id
 AND an.person_id = ci.person_id
AND ci.note IN ('(uncredited)', '(Newspaper Thief)', '(segment ""Wet"")', '(as Grant Vedders)', '(as Brendan Burke)')
AND cn.country_code = '[jp]'
AND mc.note IS NOT NULL 
AND (mc.note LIKE '%a%' OR mc.note LIKE '%a%')
AND n.gender = 'f'
AND n.name LIKE '%D%'
AND rt.role = 'actress'
AND t.production_year BETWEEN 1992 AND 2014;",5,/*+  SeqScan(ci) SeqScan(an) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexScan(t title_pkey) IndexScan(chn char_name_pkey) HashJoin(ci an) HashJoin(ci an rt) NestLoop(ci an rt n) NestLoop(ci an rt n mc) NestLoop(ci an rt n mc cn) NestLoop(ci an rt n mc cn t) NestLoop(ci an rt n mc cn t chn) Leading((((((((ci an) rt) n) mc) cn) t) chn)) */
"SELECT MIN(an.name) AS alternative_name, MIN(chn.name) AS character_name, MIN(t.title) AS movie
FROM aka_name AS an,
 char_name AS chn,
 cast_info AS ci,
 company_name AS cn,
 movie_companies AS mc,
 name AS n,
 role_type AS rt,
 title AS t
WHERE ci.movie_id = t.id
 AND t.id = mc.movie_id
 AND ci.movie_id = mc.movie_id
 AND mc.company_id = cn.id
 AND ci.role_id = rt.id
 AND n.id = ci.person_id
 AND chn.id = ci.person_role_id
 AND an.person_id = n.id
 AND an.person_id = ci.person_id
AND ci.note IN ('(uncredited)', '(as MC Chris)', '(as Angel Alvarez)', '(as Garat)', '(as Martin Amiott)')
AND cn.country_code = '[de]'
AND mc.note IS NOT NULL 
AND (mc.note LIKE '%H%' OR mc.note LIKE '%n%')
AND n.gender = 'm'
AND n.name LIKE '%a%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1924 AND 2001;",76,/*+  SeqScan(mc) SeqScan(cn) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) IndexScan(n name_pkey) IndexScan(an person_id_aka_name) SeqScan(rt) IndexScan(chn char_name_pkey) HashJoin(mc cn) NestLoop(mc cn t) NestLoop(mc cn t ci) NestLoop(mc cn t ci n) NestLoop(mc cn t ci n an) HashJoin(mc cn t ci n an rt) NestLoop(mc cn t ci n an rt chn) Leading((((((((mc cn) t) ci) n) an) rt) chn)) */
"SELECT MIN(an.name) AS alternative_name, MIN(chn.name) AS character_name, MIN(t.title) AS movie
FROM aka_name AS an,
 char_name AS chn,
 cast_info AS ci,
 company_name AS cn,
 movie_companies AS mc,
 name AS n,
 role_type AS rt,
 title AS t
WHERE ci.movie_id = t.id
 AND t.id = mc.movie_id
 AND ci.movie_id = mc.movie_id
 AND mc.company_id = cn.id
 AND ci.role_id = rt.id
 AND n.id = ci.person_id
 AND chn.id = ci.person_role_id
 AND an.person_id = n.id
 AND an.person_id = ci.person_id
AND ci.note IN ('(as John Codiglia)', '(as E. Lissiak)', '(as Jay Sears)', '(as Louis Jardim)', '(as L. Barsacq)')
AND cn.country_code = '[gb]'
AND mc.note IS NOT NULL 
AND (mc.note LIKE '%d%' OR mc.note LIKE '%U%')
AND n.gender = 'm'
AND n.name LIKE '%g%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1906 AND 1989;",5,/*+  SeqScan(ci) SeqScan(an) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexScan(t title_pkey) IndexScan(chn char_name_pkey) HashJoin(ci an) HashJoin(ci an rt) NestLoop(ci an rt n) NestLoop(ci an rt n mc) NestLoop(ci an rt n mc cn) NestLoop(ci an rt n mc cn t) NestLoop(ci an rt n mc cn t chn) Leading((((((((ci an) rt) n) mc) cn) t) chn)) */
"SELECT MIN(an.name) AS alternative_name, MIN(chn.name) AS character_name, MIN(t.title) AS movie
FROM aka_name AS an,
 char_name AS chn,
 cast_info AS ci,
 company_name AS cn,
 movie_companies AS mc,
 name AS n,
 role_type AS rt,
 title AS t
WHERE ci.movie_id = t.id
 AND t.id = mc.movie_id
 AND ci.movie_id = mc.movie_id
 AND mc.company_id = cn.id
 AND ci.role_id = rt.id
 AND n.id = ci.person_id
 AND chn.id = ci.person_role_id
 AND an.person_id = n.id
 AND an.person_id = ci.person_id
AND ci.note IN ('(uncredited)', '(as Dick Burnett)', '(as Sudheer Dalavi)', '(as Anup Ganguly)', '(as SofÃ­a Evans)')
AND cn.country_code = '[nl]'
AND mc.note IS NOT NULL 
AND (mc.note LIKE '%5%' OR mc.note LIKE '%(%')
AND n.gender = 'f'
AND n.name LIKE '%,%'
AND rt.role = 'actress'
AND t.production_year BETWEEN 1931 AND 2013;",5,/*+  SeqScan(ci) SeqScan(an) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexScan(t title_pkey) IndexScan(chn char_name_pkey) HashJoin(ci an) HashJoin(ci an rt) NestLoop(ci an rt n) NestLoop(ci an rt n mc) NestLoop(ci an rt n mc cn) NestLoop(ci an rt n mc cn t) NestLoop(ci an rt n mc cn t chn) Leading((((((((ci an) rt) n) mc) cn) t) chn)) */
"SELECT MIN(an.name) AS alternative_name, MIN(chn.name) AS character_name, MIN(t.title) AS movie
FROM aka_name AS an,
 char_name AS chn,
 cast_info AS ci,
 company_name AS cn,
 movie_companies AS mc,
 name AS n,
 role_type AS rt,
 title AS t
WHERE ci.movie_id = t.id
 AND t.id = mc.movie_id
 AND ci.movie_id = mc.movie_id
 AND mc.company_id = cn.id
 AND ci.role_id = rt.id
 AND n.id = ci.person_id
 AND chn.id = ci.person_role_id
 AND an.person_id = n.id
 AND an.person_id = ci.person_id
AND ci.note IN ('(as Michael David Aragon)', '(as Marius Liescu)', '(as Adele St. Maur)', '(as Steward West)', '(as Duen Wai Lun)')
AND cn.country_code = '[us]'
AND mc.note IS NOT NULL 
AND (mc.note LIKE '%(%' OR mc.note LIKE '%l%')
AND n.gender = 'm'
AND n.name LIKE '%i%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1975 AND 2012;",294,/*+  SeqScan(t) SeqScan(mc) SeqScan(cn) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(an person_id_aka_name) IndexScan(chn char_name_pkey) HashJoin(mc cn) HashJoin(t mc cn) NestLoop(t mc cn ci) HashJoin(t mc cn ci rt) NestLoop(t mc cn ci rt n) NestLoop(t mc cn ci rt n an) NestLoop(t mc cn ci rt n an chn) Leading(((((((t (mc cn)) ci) rt) n) an) chn)) */
"SELECT MIN(an.name) AS alternative_name, MIN(chn.name) AS character_name, MIN(t.title) AS movie
FROM aka_name AS an,
 char_name AS chn,
 cast_info AS ci,
 company_name AS cn,
 movie_companies AS mc,
 name AS n,
 role_type AS rt,
 title AS t
WHERE ci.movie_id = t.id
 AND t.id = mc.movie_id
 AND ci.movie_id = mc.movie_id
 AND mc.company_id = cn.id
 AND ci.role_id = rt.id
 AND n.id = ci.person_id
 AND chn.id = ci.person_role_id
 AND an.person_id = n.id
 AND an.person_id = ci.person_id
AND ci.note IN ('(as Sha-Na-Na)', '(as BÃ¡n KlÃ¡ra)', '(segment direcfor)', '(as Ben Disinger)', '(as L. Staritsyna)')
AND cn.country_code = '[us]'
AND mc.note IS NOT NULL 
AND (mc.note LIKE '%s%' OR mc.note LIKE '%e%')
AND n.gender = 'm'
AND n.name LIKE '%l%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1940 AND 1993;",5,/*+  SeqScan(ci) SeqScan(an) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexScan(t title_pkey) IndexScan(chn char_name_pkey) HashJoin(ci an) HashJoin(ci an rt) NestLoop(ci an rt n) NestLoop(ci an rt n mc) NestLoop(ci an rt n mc cn) NestLoop(ci an rt n mc cn t) NestLoop(ci an rt n mc cn t chn) Leading((((((((ci an) rt) n) mc) cn) t) chn)) */
"SELECT MIN(an.name) AS alternative_name, MIN(chn.name) AS character_name, MIN(t.title) AS movie
FROM aka_name AS an,
 char_name AS chn,
 cast_info AS ci,
 company_name AS cn,
 movie_companies AS mc,
 name AS n,
 role_type AS rt,
 title AS t
WHERE ci.movie_id = t.id
 AND t.id = mc.movie_id
 AND ci.movie_id = mc.movie_id
 AND mc.company_id = cn.id
 AND ci.role_id = rt.id
 AND n.id = ci.person_id
 AND chn.id = ci.person_role_id
 AND an.person_id = n.id
 AND an.person_id = ci.person_id
AND ci.note IN ('(as Mike Badalucco)', '(as Syd Black)', '(Rockshow Concert)', '(as S. NovÃ¡kovÃ¡)', '(elevator crew)')
AND cn.country_code = '[gr]'
AND mc.note IS NOT NULL 
AND (mc.note LIKE '%)%' OR mc.note LIKE '%i%')
AND n.gender = 'm'
AND n.name LIKE '%B%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1971 AND 2009;",5,/*+  SeqScan(ci) SeqScan(an) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexScan(t title_pkey) IndexScan(chn char_name_pkey) HashJoin(ci an) HashJoin(ci an rt) NestLoop(ci an rt n) NestLoop(ci an rt n mc) NestLoop(ci an rt n mc cn) NestLoop(ci an rt n mc cn t) NestLoop(ci an rt n mc cn t chn) Leading((((((((ci an) rt) n) mc) cn) t) chn)) */
"SELECT MIN(an.name) AS alternative_name, MIN(chn.name) AS character_name, MIN(t.title) AS movie
FROM aka_name AS an,
 char_name AS chn,
 cast_info AS ci,
 company_name AS cn,
 movie_companies AS mc,
 name AS n,
 role_type AS rt,
 title AS t
WHERE ci.movie_id = t.id
 AND t.id = mc.movie_id
 AND ci.movie_id = mc.movie_id
 AND mc.company_id = cn.id
 AND ci.role_id = rt.id
 AND n.id = ci.person_id
 AND chn.id = ci.person_role_id
 AND an.person_id = n.id
 AND an.person_id = ci.person_id
AND ci.note IN ('(2001, 2003, 2005)', '(as Yang Mi)', '(as George Fields)', '(regional dialogue)', '(as Marie Polo)')
AND cn.country_code = '[dk]'
AND mc.note IS NOT NULL 
AND (mc.note LIKE '%0%' OR mc.note LIKE '%2%')
AND n.gender = 'm'
AND n.name LIKE '%u%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1978 AND 2010;",5,/*+  SeqScan(ci) SeqScan(an) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexScan(t title_pkey) IndexScan(chn char_name_pkey) HashJoin(ci an) HashJoin(ci an rt) NestLoop(ci an rt n) NestLoop(ci an rt n mc) NestLoop(ci an rt n mc cn) NestLoop(ci an rt n mc cn t) NestLoop(ci an rt n mc cn t chn) Leading((((((((ci an) rt) n) mc) cn) t) chn)) */
"SELECT MIN(an.name) AS alternative_name, MIN(chn.name) AS character_name, MIN(t.title) AS movie
FROM aka_name AS an,
 char_name AS chn,
 cast_info AS ci,
 company_name AS cn,
 movie_companies AS mc,
 name AS n,
 role_type AS rt,
 title AS t
WHERE ci.movie_id = t.id
 AND t.id = mc.movie_id
 AND ci.movie_id = mc.movie_id
 AND mc.company_id = cn.id
 AND ci.role_id = rt.id
 AND n.id = ci.person_id
 AND chn.id = ci.person_role_id
 AND an.person_id = n.id
 AND an.person_id = ci.person_id
AND ci.note IN ('(as Howard Hickman)', '(as Tobi Hochstein)', '(as Fidel Garriaga)', '(as Danyal Cheeks)', '(as Simo Magwasa)')
AND cn.country_code = '[us]'
AND mc.note IS NOT NULL 
AND (mc.note LIKE '%i%' OR mc.note LIKE '%(%')
AND n.gender = 'm'
AND n.name LIKE '%d%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1928 AND 1941;",5,/*+  SeqScan(ci) SeqScan(an) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexScan(t title_pkey) IndexScan(chn char_name_pkey) HashJoin(ci an) HashJoin(ci an rt) NestLoop(ci an rt n) NestLoop(ci an rt n mc) NestLoop(ci an rt n mc cn) NestLoop(ci an rt n mc cn t) NestLoop(ci an rt n mc cn t chn) Leading((((((((ci an) rt) n) mc) cn) t) chn)) */
"SELECT MIN(an.name) AS alternative_name, MIN(chn.name) AS character_name, MIN(t.title) AS movie
FROM aka_name AS an,
 char_name AS chn,
 cast_info AS ci,
 company_name AS cn,
 movie_companies AS mc,
 name AS n,
 role_type AS rt,
 title AS t
WHERE ci.movie_id = t.id
 AND t.id = mc.movie_id
 AND ci.movie_id = mc.movie_id
 AND mc.company_id = cn.id
 AND ci.role_id = rt.id
 AND n.id = ci.person_id
 AND chn.id = ci.person_role_id
 AND an.person_id = n.id
 AND an.person_id = ci.person_id
AND ci.note IN ('(voice) (uncredited)', '(as Devera Marcus)', '(as Debra Murphy)', '(segment ""Crying"")', '(as Rex Velasco)')
AND cn.country_code = '[au]'
AND mc.note IS NOT NULL 
AND (mc.note LIKE '%r%' OR mc.note LIKE '%2%')
AND n.gender = 'm'
AND n.name LIKE '%,%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1934 AND 1984;",5,/*+  SeqScan(ci) SeqScan(an) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexScan(t title_pkey) IndexScan(chn char_name_pkey) HashJoin(ci an) HashJoin(ci an rt) NestLoop(ci an rt n) NestLoop(ci an rt n mc) NestLoop(ci an rt n mc cn) NestLoop(ci an rt n mc cn t) NestLoop(ci an rt n mc cn t chn) Leading((((((((ci an) rt) n) mc) cn) t) chn)) */
"SELECT MIN(an.name) AS alternative_name, MIN(chn.name) AS character_name, MIN(t.title) AS movie
FROM aka_name AS an,
 char_name AS chn,
 cast_info AS ci,
 company_name AS cn,
 movie_companies AS mc,
 name AS n,
 role_type AS rt,
 title AS t
WHERE ci.movie_id = t.id
 AND t.id = mc.movie_id
 AND ci.movie_id = mc.movie_id
 AND mc.company_id = cn.id
 AND ci.role_id = rt.id
 AND n.id = ci.person_id
 AND chn.id = ci.person_role_id
 AND an.person_id = n.id
 AND an.person_id = ci.person_id
AND ci.note IN ('(uncredited)', '(as Melony Jagger)', '(as Ralph)', '(as Cesar Burner)', '(Lead to Absolom)')
AND cn.country_code = '[ar]'
AND mc.note IS NOT NULL 
AND (mc.note LIKE '%g%' OR mc.note LIKE '%D%')
AND n.gender = 'm'
AND n.name LIKE '%a%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1895 AND 2020;",5,/*+  SeqScan(ci) SeqScan(an) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexScan(t title_pkey) IndexScan(chn char_name_pkey) HashJoin(ci an) HashJoin(ci an rt) NestLoop(ci an rt n) NestLoop(ci an rt n mc) NestLoop(ci an rt n mc cn) NestLoop(ci an rt n mc cn t) NestLoop(ci an rt n mc cn t chn) Leading((((((((ci an) rt) n) mc) cn) t) chn)) */
"SELECT MIN(an.name) AS alternative_name, MIN(chn.name) AS character_name, MIN(t.title) AS movie
FROM aka_name AS an,
 char_name AS chn,
 cast_info AS ci,
 company_name AS cn,
 movie_companies AS mc,
 name AS n,
 role_type AS rt,
 title AS t
WHERE ci.movie_id = t.id
 AND t.id = mc.movie_id
 AND ci.movie_id = mc.movie_id
 AND mc.company_id = cn.id
 AND ci.role_id = rt.id
 AND n.id = ci.person_id
 AND chn.id = ci.person_role_id
 AND an.person_id = n.id
 AND an.person_id = ci.person_id
AND ci.note IN ('(uncredited)', '(as Rakesh Dewana)', '(Ranch Cook)', '(as Oscar Lam)', '(Reaction Video #2)')
AND cn.country_code = '[fr]'
AND mc.note IS NOT NULL 
AND (mc.note LIKE '%3%' OR mc.note LIKE '%3%')
AND n.gender = 'f'
AND n.name LIKE '%i%'
AND rt.role = 'actress'
AND t.production_year BETWEEN 1973 AND 2004;",294,/*+  SeqScan(t) SeqScan(mc) SeqScan(cn) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(an person_id_aka_name) IndexScan(chn char_name_pkey) HashJoin(mc cn) HashJoin(t mc cn) NestLoop(t mc cn ci) HashJoin(t mc cn ci rt) NestLoop(t mc cn ci rt n) NestLoop(t mc cn ci rt n an) NestLoop(t mc cn ci rt n an chn) Leading(((((((t (mc cn)) ci) rt) n) an) chn)) */
"SELECT MIN(an.name) AS alternative_name, MIN(chn.name) AS character_name, MIN(t.title) AS movie
FROM aka_name AS an,
 char_name AS chn,
 cast_info AS ci,
 company_name AS cn,
 movie_companies AS mc,
 name AS n,
 role_type AS rt,
 title AS t
WHERE ci.movie_id = t.id
 AND t.id = mc.movie_id
 AND ci.movie_id = mc.movie_id
 AND mc.company_id = cn.id
 AND ci.role_id = rt.id
 AND n.id = ci.person_id
 AND chn.id = ci.person_role_id
 AND an.person_id = n.id
 AND an.person_id = ci.person_id
AND ci.note IN ('(as Eric Leroy [Pee Wee] Burdette)', '(as Muyiwa Ademol)', '(play ""Moumou"")', '(as Heinz LÃ¼ck)', '(as Fernando Paiz)')
AND cn.country_code = '[us]'
AND mc.note IS NOT NULL 
AND (mc.note LIKE '%)%' OR mc.note LIKE '%U%')
AND n.gender = 'm'
AND n.name LIKE '%y%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1892 AND 2016;",5,/*+  SeqScan(ci) SeqScan(an) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexScan(t title_pkey) IndexScan(chn char_name_pkey) HashJoin(ci an) HashJoin(ci an rt) NestLoop(ci an rt n) NestLoop(ci an rt n mc) NestLoop(ci an rt n mc cn) NestLoop(ci an rt n mc cn t) NestLoop(ci an rt n mc cn t chn) Leading((((((((ci an) rt) n) mc) cn) t) chn)) */
"SELECT MIN(an.name) AS alternative_name, MIN(chn.name) AS character_name, MIN(t.title) AS movie
FROM aka_name AS an,
 char_name AS chn,
 cast_info AS ci,
 company_name AS cn,
 movie_companies AS mc,
 name AS n,
 role_type AS rt,
 title AS t
WHERE ci.movie_id = t.id
 AND t.id = mc.movie_id
 AND ci.movie_id = mc.movie_id
 AND mc.company_id = cn.id
 AND ci.role_id = rt.id
 AND n.id = ci.person_id
 AND chn.id = ci.person_role_id
 AND an.person_id = n.id
 AND an.person_id = ci.person_id
AND ci.note IN ('(Judge)', '(as Rudi Pogats)', '(as Tinku Thakur)', '(as I.Pismenny)', '(as Chang)')
AND cn.country_code = '[us]'
AND mc.note IS NOT NULL 
AND (mc.note LIKE '%(%' OR mc.note LIKE '%)%')
AND n.gender = 'm'
AND n.name LIKE '%e%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1907 AND 1993;",76,/*+  SeqScan(mc) SeqScan(cn) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) IndexScan(n name_pkey) IndexScan(an person_id_aka_name) SeqScan(rt) IndexScan(chn char_name_pkey) HashJoin(mc cn) NestLoop(mc cn t) NestLoop(mc cn t ci) NestLoop(mc cn t ci n) NestLoop(mc cn t ci n an) HashJoin(mc cn t ci n an rt) NestLoop(mc cn t ci n an rt chn) Leading((((((((mc cn) t) ci) n) an) rt) chn)) */
"SELECT MIN(an.name) AS alternative_name, MIN(chn.name) AS character_name, MIN(t.title) AS movie
FROM aka_name AS an,
 char_name AS chn,
 cast_info AS ci,
 company_name AS cn,
 movie_companies AS mc,
 name AS n,
 role_type AS rt,
 title AS t
WHERE ci.movie_id = t.id
 AND t.id = mc.movie_id
 AND ci.movie_id = mc.movie_id
 AND mc.company_id = cn.id
 AND ci.role_id = rt.id
 AND n.id = ci.person_id
 AND chn.id = ci.person_role_id
 AND an.person_id = n.id
 AND an.person_id = ci.person_id
AND ci.note IN ('(as Nicole Noir)', '(as David Armin)', '(as J.R. Reed)', '(as Marc Goodall)', '(as Eugene R. Wood)')
AND cn.country_code = '[us]'
AND mc.note IS NOT NULL 
AND (mc.note LIKE '%8%' OR mc.note LIKE '%)%')
AND n.gender = 'f'
AND n.name LIKE '%o%'
AND rt.role = 'actress'
AND t.production_year BETWEEN 1976 AND 1998;",5,/*+  SeqScan(ci) SeqScan(an) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexScan(t title_pkey) IndexScan(chn char_name_pkey) HashJoin(ci an) HashJoin(ci an rt) NestLoop(ci an rt n) NestLoop(ci an rt n mc) NestLoop(ci an rt n mc cn) NestLoop(ci an rt n mc cn t) NestLoop(ci an rt n mc cn t chn) Leading((((((((ci an) rt) n) mc) cn) t) chn)) */
"SELECT MIN(an.name) AS alternative_name, MIN(chn.name) AS character_name, MIN(t.title) AS movie
FROM aka_name AS an,
 char_name AS chn,
 cast_info AS ci,
 company_name AS cn,
 movie_companies AS mc,
 name AS n,
 role_type AS rt,
 title AS t
WHERE ci.movie_id = t.id
 AND t.id = mc.movie_id
 AND ci.movie_id = mc.movie_id
 AND mc.company_id = cn.id
 AND ci.role_id = rt.id
 AND n.id = ci.person_id
 AND chn.id = ci.person_role_id
 AND an.person_id = n.id
 AND an.person_id = ci.person_id
AND ci.note IN ('(uncredited)', '(as Brain McCabe)', '(as R. Vasilevsky)', '(Ft. Hedley CO)', '(tv ad promotion)')
AND cn.country_code = '[us]'
AND mc.note IS NOT NULL 
AND (mc.note LIKE '%1%' OR mc.note LIKE '%S%')
AND n.gender = 'f'
AND n.name LIKE '%R%'
AND rt.role = 'actress'
AND t.production_year BETWEEN 1921 AND 1950;",5,/*+  SeqScan(ci) SeqScan(an) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexScan(t title_pkey) IndexScan(chn char_name_pkey) HashJoin(ci an) HashJoin(ci an rt) NestLoop(ci an rt n) NestLoop(ci an rt n mc) NestLoop(ci an rt n mc cn) NestLoop(ci an rt n mc cn t) NestLoop(ci an rt n mc cn t chn) Leading((((((((ci an) rt) n) mc) cn) t) chn)) */
"SELECT MIN(an.name) AS alternative_name, MIN(chn.name) AS character_name, MIN(t.title) AS movie
FROM aka_name AS an,
 char_name AS chn,
 cast_info AS ci,
 company_name AS cn,
 movie_companies AS mc,
 name AS n,
 role_type AS rt,
 title AS t
WHERE ci.movie_id = t.id
 AND t.id = mc.movie_id
 AND ci.movie_id = mc.movie_id
 AND mc.company_id = cn.id
 AND ci.role_id = rt.id
 AND n.id = ci.person_id
 AND chn.id = ci.person_role_id
 AND an.person_id = n.id
 AND an.person_id = ci.person_id
AND ci.note IN ('(uncredited)', '(as Lucas Rooney)', '(as Suzkaiden)', '(as Bedria Timimi)', '(as Diane)')
AND cn.country_code = '[it]'
AND mc.note IS NOT NULL 
AND (mc.note LIKE '%l%' OR mc.note LIKE '%t%')
AND n.gender = 'f'
AND n.name LIKE '%a%'
AND rt.role = 'actress'
AND t.production_year BETWEEN 1907 AND 2020;",5,/*+  SeqScan(ci) SeqScan(an) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexScan(t title_pkey) IndexScan(chn char_name_pkey) HashJoin(ci an) HashJoin(ci an rt) NestLoop(ci an rt n) NestLoop(ci an rt n mc) NestLoop(ci an rt n mc cn) NestLoop(ci an rt n mc cn t) NestLoop(ci an rt n mc cn t chn) Leading((((((((ci an) rt) n) mc) cn) t) chn)) */
"SELECT MIN(an.name) AS alternative_name, MIN(chn.name) AS character_name, MIN(t.title) AS movie
FROM aka_name AS an,
 char_name AS chn,
 cast_info AS ci,
 company_name AS cn,
 movie_companies AS mc,
 name AS n,
 role_type AS rt,
 title AS t
WHERE ci.movie_id = t.id
 AND t.id = mc.movie_id
 AND ci.movie_id = mc.movie_id
 AND mc.company_id = cn.id
 AND ci.role_id = rt.id
 AND n.id = ci.person_id
 AND chn.id = ci.person_role_id
 AND an.person_id = n.id
 AND an.person_id = ci.person_id
AND ci.note IN ('(voice)', '(as Scott Lyon)', '(Danni Lang)', '(as Rafael ValdÃ©s)', '(as Medieval Babes)')
AND cn.country_code = '[jp]'
AND mc.note IS NOT NULL 
AND (mc.note LIKE '%p%' OR mc.note LIKE '%(%')
AND n.gender = 'm'
AND n.name LIKE '%i%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1952 AND 2010;",294,/*+  SeqScan(t) SeqScan(mc) SeqScan(cn) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(an person_id_aka_name) IndexScan(chn char_name_pkey) HashJoin(mc cn) HashJoin(t mc cn) NestLoop(t mc cn ci) HashJoin(t mc cn ci rt) NestLoop(t mc cn ci rt n) NestLoop(t mc cn ci rt n an) NestLoop(t mc cn ci rt n an chn) Leading(((((((t (mc cn)) ci) rt) n) an) chn)) */
"SELECT MIN(an.name) AS alternative_name, MIN(chn.name) AS character_name, MIN(t.title) AS movie
FROM aka_name AS an,
 char_name AS chn,
 cast_info AS ci,
 company_name AS cn,
 movie_companies AS mc,
 name AS n,
 role_type AS rt,
 title AS t
WHERE ci.movie_id = t.id
 AND t.id = mc.movie_id
 AND ci.movie_id = mc.movie_id
 AND mc.company_id = cn.id
 AND ci.role_id = rt.id
 AND n.id = ci.person_id
 AND chn.id = ci.person_role_id
 AND an.person_id = n.id
 AND an.person_id = ci.person_id
AND ci.note IN ('(uncredited)', '(Happy)', '(as Randal Haworth)', '(as Linda Lazar MD)', '(as Clark Carlisle)')
AND cn.country_code = '[us]'
AND mc.note IS NOT NULL 
AND (mc.note LIKE '%a%' OR mc.note LIKE '%E%')
AND n.gender = 'm'
AND n.name LIKE '%h%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1934 AND 2008;",5,/*+  SeqScan(ci) SeqScan(an) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexScan(t title_pkey) IndexScan(chn char_name_pkey) HashJoin(ci an) HashJoin(ci an rt) NestLoop(ci an rt n) NestLoop(ci an rt n mc) NestLoop(ci an rt n mc cn) NestLoop(ci an rt n mc cn t) NestLoop(ci an rt n mc cn t chn) Leading((((((((ci an) rt) n) mc) cn) t) chn)) */
"SELECT MIN(an.name) AS alternative_name, MIN(chn.name) AS character_name, MIN(t.title) AS movie
FROM aka_name AS an,
 char_name AS chn,
 cast_info AS ci,
 company_name AS cn,
 movie_companies AS mc,
 name AS n,
 role_type AS rt,
 title AS t
WHERE ci.movie_id = t.id
 AND t.id = mc.movie_id
 AND ci.movie_id = mc.movie_id
 AND mc.company_id = cn.id
 AND ci.role_id = rt.id
 AND n.id = ci.person_id
 AND chn.id = ci.person_role_id
 AND an.person_id = n.id
 AND an.person_id = ci.person_id
AND ci.note IN ('(uncredited)', '(schedule mistress)', '(as Codi Star)', '(as Willie Tsang)', '(as Leslie Irving)')
AND cn.country_code = '[gr]'
AND mc.note IS NOT NULL 
AND (mc.note LIKE '%3%' OR mc.note LIKE '%(%')
AND n.gender = 'm'
AND n.name LIKE '%w%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1951 AND 2013;",5,/*+  SeqScan(ci) SeqScan(an) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexScan(t title_pkey) IndexScan(chn char_name_pkey) HashJoin(ci an) HashJoin(ci an rt) NestLoop(ci an rt n) NestLoop(ci an rt n mc) NestLoop(ci an rt n mc cn) NestLoop(ci an rt n mc cn t) NestLoop(ci an rt n mc cn t chn) Leading((((((((ci an) rt) n) mc) cn) t) chn)) */
"SELECT MIN(an.name) AS alternative_name, MIN(chn.name) AS character_name, MIN(t.title) AS movie
FROM aka_name AS an,
 char_name AS chn,
 cast_info AS ci,
 company_name AS cn,
 movie_companies AS mc,
 name AS n,
 role_type AS rt,
 title AS t
WHERE ci.movie_id = t.id
 AND t.id = mc.movie_id
 AND ci.movie_id = mc.movie_id
 AND mc.company_id = cn.id
 AND ci.role_id = rt.id
 AND n.id = ci.person_id
 AND chn.id = ci.person_role_id
 AND an.person_id = n.id
 AND an.person_id = ci.person_id
AND ci.note IN ('(uncredited)', '(as Toni Leicester)', '(as Gustavo Abel)', '(Dilling''s Butler)', '(as Jun Sodela)')
AND cn.country_code = '[ar]'
AND mc.note IS NOT NULL 
AND (mc.note LIKE '%n%' OR mc.note LIKE '%1%')
AND n.gender = 'm'
AND n.name LIKE '%T%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1946 AND 2000;",76,/*+  SeqScan(mc) SeqScan(cn) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) IndexScan(n name_pkey) IndexScan(an person_id_aka_name) SeqScan(rt) IndexScan(chn char_name_pkey) HashJoin(mc cn) NestLoop(mc cn t) NestLoop(mc cn t ci) NestLoop(mc cn t ci n) NestLoop(mc cn t ci n an) HashJoin(mc cn t ci n an rt) NestLoop(mc cn t ci n an rt chn) Leading((((((((mc cn) t) ci) n) an) rt) chn)) */
"SELECT MIN(an.name) AS alternative_name, MIN(chn.name) AS character_name, MIN(t.title) AS movie
FROM aka_name AS an,
 char_name AS chn,
 cast_info AS ci,
 company_name AS cn,
 movie_companies AS mc,
 name AS n,
 role_type AS rt,
 title AS t
WHERE ci.movie_id = t.id
 AND t.id = mc.movie_id
 AND ci.movie_id = mc.movie_id
 AND mc.company_id = cn.id
 AND ci.role_id = rt.id
 AND n.id = ci.person_id
 AND chn.id = ci.person_role_id
 AND an.person_id = n.id
 AND an.person_id = ci.person_id
AND ci.note IN ('(uncredited)', '(as David McMillan)', '(as Amanda Cinoman)', '(as Leung Han Yuan)', '(night watchman)')
AND cn.country_code = '[gb]'
AND mc.note IS NOT NULL 
AND (mc.note LIKE '%(%' OR mc.note LIKE '%)%')
AND n.gender = 'm'
AND n.name LIKE '%e%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1941 AND 1999;",5,/*+  SeqScan(ci) SeqScan(an) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexScan(t title_pkey) IndexScan(chn char_name_pkey) HashJoin(ci an) HashJoin(ci an rt) NestLoop(ci an rt n) NestLoop(ci an rt n mc) NestLoop(ci an rt n mc cn) NestLoop(ci an rt n mc cn t) NestLoop(ci an rt n mc cn t chn) Leading((((((((ci an) rt) n) mc) cn) t) chn)) */
"SELECT MIN(an.name) AS alternative_name, MIN(chn.name) AS character_name, MIN(t.title) AS movie
FROM aka_name AS an,
 char_name AS chn,
 cast_info AS ci,
 company_name AS cn,
 movie_companies AS mc,
 name AS n,
 role_type AS rt,
 title AS t
WHERE ci.movie_id = t.id
 AND t.id = mc.movie_id
 AND ci.movie_id = mc.movie_id
 AND mc.company_id = cn.id
 AND ci.role_id = rt.id
 AND n.id = ci.person_id
 AND chn.id = ci.person_role_id
 AND an.person_id = n.id
 AND an.person_id = ci.person_id
AND ci.note IN ('(as Guenter Meisner)', '(dancers)', '(as Kathryn Hudson)', '(as M. Politseima)', '(as Fuad Ahmed)')
AND cn.country_code = '[us]'
AND mc.note IS NOT NULL 
AND (mc.note LIKE '%(%' OR mc.note LIKE '%(%')
AND n.gender = 'm'
AND n.name LIKE '%n%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1911 AND 2012;",76,/*+  SeqScan(mc) SeqScan(cn) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) IndexScan(n name_pkey) IndexScan(an person_id_aka_name) SeqScan(rt) IndexScan(chn char_name_pkey) HashJoin(mc cn) NestLoop(mc cn t) NestLoop(mc cn t ci) NestLoop(mc cn t ci n) NestLoop(mc cn t ci n an) HashJoin(mc cn t ci n an rt) NestLoop(mc cn t ci n an rt chn) Leading((((((((mc cn) t) ci) n) an) rt) chn)) */
"SELECT MIN(an.name) AS alternative_name, MIN(chn.name) AS character_name, MIN(t.title) AS movie
FROM aka_name AS an,
 char_name AS chn,
 cast_info AS ci,
 company_name AS cn,
 movie_companies AS mc,
 name AS n,
 role_type AS rt,
 title AS t
WHERE ci.movie_id = t.id
 AND t.id = mc.movie_id
 AND ci.movie_id = mc.movie_id
 AND mc.company_id = cn.id
 AND ci.role_id = rt.id
 AND n.id = ci.person_id
 AND chn.id = ci.person_role_id
 AND an.person_id = n.id
 AND an.person_id = ci.person_id
AND ci.note IN ('(uncredited)', '(Robber)', '(as Mo-wah Kan)', '(as Sam Regal)', '(as Shuqi Xu)')
AND cn.country_code = '[au]'
AND mc.note IS NOT NULL 
AND (mc.note LIKE '%(%' OR mc.note LIKE '%l%')
AND n.gender = 'f'
AND n.name LIKE '%i%'
AND rt.role = 'actress'
AND t.production_year BETWEEN 1925 AND 1974;",294,/*+  SeqScan(t) SeqScan(mc) SeqScan(cn) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(an person_id_aka_name) IndexScan(chn char_name_pkey) HashJoin(mc cn) HashJoin(t mc cn) NestLoop(t mc cn ci) HashJoin(t mc cn ci rt) NestLoop(t mc cn ci rt n) NestLoop(t mc cn ci rt n an) NestLoop(t mc cn ci rt n an chn) Leading(((((((t (mc cn)) ci) rt) n) an) chn)) */
"SELECT MIN(an.name) AS alternative_name, MIN(chn.name) AS character_name, MIN(t.title) AS movie
FROM aka_name AS an,
 char_name AS chn,
 cast_info AS ci,
 company_name AS cn,
 movie_companies AS mc,
 name AS n,
 role_type AS rt,
 title AS t
WHERE ci.movie_id = t.id
 AND t.id = mc.movie_id
 AND ci.movie_id = mc.movie_id
 AND mc.company_id = cn.id
 AND ci.role_id = rt.id
 AND n.id = ci.person_id
 AND chn.id = ci.person_role_id
 AND an.person_id = n.id
 AND an.person_id = ci.person_id
AND ci.note IN ('(as JC Kenny)', '(as Ye Qingyuan)', '(as The Usual Lot)', '(as Aguettand)', '(First Millionaire)')
AND cn.country_code = '[ca]'
AND mc.note IS NOT NULL 
AND (mc.note LIKE '%t%' OR mc.note LIKE '%T%')
AND n.gender = 'f'
AND n.name LIKE '%.%'
AND rt.role = 'actress'
AND t.production_year BETWEEN 1889 AND 2014;",76,/*+  SeqScan(mc) SeqScan(cn) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) IndexScan(n name_pkey) IndexScan(an person_id_aka_name) SeqScan(rt) IndexScan(chn char_name_pkey) HashJoin(mc cn) NestLoop(mc cn t) NestLoop(mc cn t ci) NestLoop(mc cn t ci n) NestLoop(mc cn t ci n an) HashJoin(mc cn t ci n an rt) NestLoop(mc cn t ci n an rt chn) Leading((((((((mc cn) t) ci) n) an) rt) chn)) */
