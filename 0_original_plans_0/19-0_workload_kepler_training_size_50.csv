query,plan_id,plan_content
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
  movie_companies AS mc,
   movie_info AS mi,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(as Andrea Miltnerova)', '(as Teppaz)', '(#49) (Interviewee)', '(as Igor Sk)', '(as Guli Korolyova)')
AND cn.country_code = '[us]'
AND it.info = 'admissions'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%e%' OR mc.note LIKE '%o%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%5%' OR mi.info LIKE '%3%')
AND n.gender = 'f'
AND n.name LIKE '%n%'
AND rt.role = 'actress'
AND t.production_year BETWEEN 1967 AND 2020;",99,/*+  SeqScan(mc) SeqScan(cn) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) SeqScan(it) IndexOnlyScan(chn char_name_pkey) IndexOnlyScan(an person_id_aka_name) HashJoin(mc cn) NestLoop(mc cn t) NestLoop(mc cn t ci) HashJoin(mc cn t ci rt) NestLoop(mc cn t ci rt n) NestLoop(mc cn t ci rt n mi) HashJoin(mc cn t ci rt n mi it) NestLoop(mc cn t ci rt n mi it chn) NestLoop(mc cn t ci rt n mi it chn an) Leading((((((((((mc cn) t) ci) rt) n) mi) it) chn) an)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
  movie_companies AS mc,
   movie_info AS mi,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(as Whitby Hertford)', '(as Aufgeiger)', '(as S. Mohen)', '(as James Harrison)', '(as D. Nurgaziyev)')
AND cn.country_code = '[us]'
AND it.info = 'weekend gross'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%)%' OR mc.note LIKE '%)%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%S%' OR mi.info LIKE '%7%')
AND n.gender = 'm'
AND n.name LIKE '%o%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1938 AND 2010;",99,/*+  SeqScan(mc) SeqScan(cn) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) SeqScan(it) IndexOnlyScan(chn char_name_pkey) IndexOnlyScan(an person_id_aka_name) HashJoin(mc cn) NestLoop(mc cn t) NestLoop(mc cn t ci) HashJoin(mc cn t ci rt) NestLoop(mc cn t ci rt n) NestLoop(mc cn t ci rt n mi) HashJoin(mc cn t ci rt n mi it) NestLoop(mc cn t ci rt n mi it chn) NestLoop(mc cn t ci rt n mi it chn an) Leading((((((((((mc cn) t) ci) rt) n) mi) it) chn) an)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
  movie_companies AS mc,
   movie_info AS mi,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(as Whitby Hertford)', '(as Yoha)', '(as Sopho)', '(March 22 2005)', '(as Tommy Harmon)')
AND cn.country_code = '[us]'
AND it.info = 'goofs'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%)%' OR mc.note LIKE '%e%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%i%' OR mi.info LIKE '%G%')
AND n.gender = 'm'
AND n.name LIKE '%i%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1985 AND 2019;",99,/*+  SeqScan(mc) SeqScan(cn) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) SeqScan(it) IndexOnlyScan(chn char_name_pkey) IndexOnlyScan(an person_id_aka_name) HashJoin(mc cn) NestLoop(mc cn t) NestLoop(mc cn t ci) HashJoin(mc cn t ci rt) NestLoop(mc cn t ci rt n) NestLoop(mc cn t ci rt n mi) HashJoin(mc cn t ci rt n mi it) NestLoop(mc cn t ci rt n mi it chn) NestLoop(mc cn t ci rt n mi it chn an) Leading((((((((((mc cn) t) ci) rt) n) mi) it) chn) an)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
  movie_companies AS mc,
   movie_info AS mi,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(as Whitby Hertford)', '(as Yvonne Hotz)', '(as Frank Danuelas)', '(as La bodoquito)', '(as Jon Inciarte)')
AND cn.country_code = '[gb]'
AND it.info = 'trivia'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%s%' OR mc.note LIKE '%(%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%l%' OR mi.info LIKE '%e%')
AND n.gender = 'm'
AND n.name LIKE '%f%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1888 AND 2008;",99,/*+  SeqScan(mc) SeqScan(cn) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) SeqScan(it) IndexOnlyScan(chn char_name_pkey) IndexOnlyScan(an person_id_aka_name) HashJoin(mc cn) NestLoop(mc cn t) NestLoop(mc cn t ci) HashJoin(mc cn t ci rt) NestLoop(mc cn t ci rt n) NestLoop(mc cn t ci rt n mi) HashJoin(mc cn t ci rt n mi it) NestLoop(mc cn t ci rt n mi it chn) NestLoop(mc cn t ci rt n mi it chn an) Leading((((((((((mc cn) t) ci) rt) n) mi) it) chn) an)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
  movie_companies AS mc,
   movie_info AS mi,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(as John Goff)', '(as Neil Almebor)', '(as Rika Schwarz)', '(rider)', '(as Jemma)')
AND cn.country_code = '[us]'
AND it.info = 'runtimes'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%i%' OR mc.note LIKE '%l%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%a%' OR mi.info LIKE '%a%')
AND n.gender = 'm'
AND n.name LIKE '%J%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1976 AND 2000;",99,/*+  SeqScan(mc) SeqScan(cn) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) SeqScan(it) IndexOnlyScan(chn char_name_pkey) IndexOnlyScan(an person_id_aka_name) HashJoin(mc cn) NestLoop(mc cn t) NestLoop(mc cn t ci) HashJoin(mc cn t ci rt) NestLoop(mc cn t ci rt n) NestLoop(mc cn t ci rt n mi) HashJoin(mc cn t ci rt n mi it) NestLoop(mc cn t ci rt n mi it chn) NestLoop(mc cn t ci rt n mi it chn an) Leading((((((((((mc cn) t) ci) rt) n) mi) it) chn) an)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
  movie_companies AS mc,
   movie_info AS mi,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(credit only)', '(as I. Gedjadze)', '(as Scott Howard)', '(BÃ©ci)', '(as Vl. PeterkovÃ¡)')
AND cn.country_code = '[mx]'
AND it.info = 'release dates'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%)%' OR mc.note LIKE '%(%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%p%' OR mi.info LIKE '%D%')
AND n.gender = 'm'
AND n.name LIKE '%e%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1953 AND 2019;",99,/*+  SeqScan(mc) SeqScan(cn) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) SeqScan(it) IndexOnlyScan(chn char_name_pkey) IndexOnlyScan(an person_id_aka_name) HashJoin(mc cn) NestLoop(mc cn t) NestLoop(mc cn t ci) HashJoin(mc cn t ci rt) NestLoop(mc cn t ci rt n) NestLoop(mc cn t ci rt n mi) HashJoin(mc cn t ci rt n mi it) NestLoop(mc cn t ci rt n mi it chn) NestLoop(mc cn t ci rt n mi it chn an) Leading((((((((((mc cn) t) ci) rt) n) mi) it) chn) an)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
  movie_companies AS mc,
   movie_info AS mi,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(uncredited)', '(as Bob Condor)', '(liaison agent)', '(as Olya Esalnek)', '(as Dante Ha)')
AND cn.country_code = '[de]'
AND it.info = 'release dates'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%a%' OR mc.note LIKE '%m%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%E%' OR mi.info LIKE '%0%')
AND n.gender = 'f'
AND n.name LIKE '%h%'
AND rt.role = 'actress'
AND t.production_year BETWEEN 1972 AND 2016;",7,/*+  SeqScan(ci) IndexOnlyScan(an person_id_aka_name) SeqScan(rt) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexScan(mi movie_id_movie_info) SeqScan(it) IndexOnlyScan(chn char_name_pkey) IndexScan(n name_pkey) IndexScan(t title_pkey) NestLoop(ci an) HashJoin(ci an rt) NestLoop(ci an rt mc) NestLoop(ci an rt mc cn) NestLoop(ci an rt mc cn mi) HashJoin(ci an rt mc cn mi it) NestLoop(ci an rt mc cn mi it chn) NestLoop(ci an rt mc cn mi it chn n) NestLoop(ci an rt mc cn mi it chn n t) Leading((((((((((ci an) rt) mc) cn) mi) it) chn) n) t)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
  movie_companies AS mc,
   movie_info AS mi,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(as Whitby Hertford)', '(as Michelle Malin)', '(as Janine Faye)', '(as Nickel Creek)', '(graphics layout)')
AND cn.country_code = '[ar]'
AND it.info = 'gross'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%A%' OR mc.note LIKE '%)%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%D%' OR mi.info LIKE '%8%')
AND n.gender = 'm'
AND n.name LIKE '%r%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1963 AND 1995;",99,/*+  SeqScan(mc) SeqScan(cn) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) SeqScan(it) IndexOnlyScan(chn char_name_pkey) IndexOnlyScan(an person_id_aka_name) HashJoin(mc cn) NestLoop(mc cn t) NestLoop(mc cn t ci) HashJoin(mc cn t ci rt) NestLoop(mc cn t ci rt n) NestLoop(mc cn t ci rt n mi) HashJoin(mc cn t ci rt n mi it) NestLoop(mc cn t ci rt n mi it chn) NestLoop(mc cn t ci rt n mi it chn an) Leading((((((((((mc cn) t) ci) rt) n) mi) it) chn) an)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
  movie_companies AS mc,
   movie_info AS mi,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(as Charles Tamburro)', '(as Fred Wagner)', '(as J.S. Kollar)', '(as Almen Wong)', '(story and manual)')
AND cn.country_code = '[gb]'
AND it.info = 'screenplay-teleplay'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%3%' OR mc.note LIKE '%a%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%o%' OR mi.info LIKE '%9%')
AND n.gender = 'm'
AND n.name LIKE '%r%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1953 AND 2003;",7,/*+  SeqScan(ci) IndexOnlyScan(an person_id_aka_name) SeqScan(rt) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexScan(mi movie_id_movie_info) SeqScan(it) IndexOnlyScan(chn char_name_pkey) IndexScan(n name_pkey) IndexScan(t title_pkey) NestLoop(ci an) HashJoin(ci an rt) NestLoop(ci an rt mc) NestLoop(ci an rt mc cn) NestLoop(ci an rt mc cn mi) HashJoin(ci an rt mc cn mi it) NestLoop(ci an rt mc cn mi it chn) NestLoop(ci an rt mc cn mi it chn n) NestLoop(ci an rt mc cn mi it chn n t) Leading((((((((((ci an) rt) mc) cn) mi) it) chn) n) t)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
  movie_companies AS mc,
   movie_info AS mi,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(uncredited)', '(level builder)', '(as Bill Cleary)', '(as Val Spooner)', '(as Willy Wilhelmy)')
AND cn.country_code = '[us]'
AND it.info = 'printed media reviews'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%)%' OR mc.note LIKE '%r%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%t%' OR mi.info LIKE '%5%')
AND n.gender = 'f'
AND n.name LIKE '%g%'
AND rt.role = 'actress'
AND t.production_year BETWEEN 1973 AND 2011;",99,/*+  SeqScan(mc) SeqScan(cn) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) SeqScan(it) IndexOnlyScan(chn char_name_pkey) IndexOnlyScan(an person_id_aka_name) HashJoin(mc cn) NestLoop(mc cn t) NestLoop(mc cn t ci) HashJoin(mc cn t ci rt) NestLoop(mc cn t ci rt n) NestLoop(mc cn t ci rt n mi) HashJoin(mc cn t ci rt n mi it) NestLoop(mc cn t ci rt n mi it chn) NestLoop(mc cn t ci rt n mi it chn an) Leading((((((((((mc cn) t) ci) rt) n) mi) it) chn) an)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
  movie_companies AS mc,
   movie_info AS mi,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(as Charles Tamburro)', '(as Sile Harrower)', '(as Eugen Shuftan)', '(as Bert Botterman)', '(as Chen Kai Ge)')
AND cn.country_code = '[nl]'
AND it.info = 'opening weekend'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%)%' OR mc.note LIKE '%)%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%(%' OR mi.info LIKE '%1%')
AND n.gender = 'm'
AND n.name LIKE '%b%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1902 AND 2000;",99,/*+  SeqScan(mc) SeqScan(cn) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) SeqScan(it) IndexOnlyScan(chn char_name_pkey) IndexOnlyScan(an person_id_aka_name) HashJoin(mc cn) NestLoop(mc cn t) NestLoop(mc cn t ci) HashJoin(mc cn t ci rt) NestLoop(mc cn t ci rt n) NestLoop(mc cn t ci rt n mi) HashJoin(mc cn t ci rt n mi it) NestLoop(mc cn t ci rt n mi it chn) NestLoop(mc cn t ci rt n mi it chn an) Leading((((((((((mc cn) t) ci) rt) n) mi) it) chn) an)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
  movie_companies AS mc,
   movie_info AS mi,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(as Whitby Hertford)', '(as Tatianna Stone)', '(as Jose GonzÃ¡lez)', '(as Andy Sumner)', '(novel 1981)')
AND cn.country_code = '[us]'
AND it.info = 'goofs'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%a%' OR mc.note LIKE '%e%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%c%' OR mi.info LIKE '%e%')
AND n.gender = 'm'
AND n.name LIKE '%t%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1918 AND 2009;",99,/*+  SeqScan(mc) SeqScan(cn) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) SeqScan(it) IndexOnlyScan(chn char_name_pkey) IndexOnlyScan(an person_id_aka_name) HashJoin(mc cn) NestLoop(mc cn t) NestLoop(mc cn t ci) HashJoin(mc cn t ci rt) NestLoop(mc cn t ci rt n) NestLoop(mc cn t ci rt n mi) HashJoin(mc cn t ci rt n mi it) NestLoop(mc cn t ci rt n mi it chn) NestLoop(mc cn t ci rt n mi it chn an) Leading((((((((((mc cn) t) ci) rt) n) mi) it) chn) an)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
  movie_companies AS mc,
   movie_info AS mi,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(as Whitby Hertford)', '(as Malice)', '(screenplay ""Envy"")', '(as Surekha Parkar)', '(as Codie Wilbee)')
AND cn.country_code = '[at]'
AND it.info = 'gross'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%A%' OR mc.note LIKE '%u%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%3%' OR mi.info LIKE '%3%')
AND n.gender = 'm'
AND n.name LIKE '%r%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1915 AND 2008;",7,/*+  SeqScan(ci) IndexOnlyScan(an person_id_aka_name) SeqScan(rt) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexScan(mi movie_id_movie_info) SeqScan(it) IndexOnlyScan(chn char_name_pkey) IndexScan(n name_pkey) IndexScan(t title_pkey) NestLoop(ci an) HashJoin(ci an rt) NestLoop(ci an rt mc) NestLoop(ci an rt mc cn) NestLoop(ci an rt mc cn mi) HashJoin(ci an rt mc cn mi it) NestLoop(ci an rt mc cn mi it chn) NestLoop(ci an rt mc cn mi it chn n) NestLoop(ci an rt mc cn mi it chn n t) Leading((((((((((ci an) rt) mc) cn) mi) it) chn) n) t)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
  movie_companies AS mc,
   movie_info AS mi,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(as Charles Tamburro)', '(as Patricia Gaddy)', '(as O. Abdulov)', '(as Dave Ratajczak)', '(as Jean Perimony)')
AND cn.country_code = '[gb]'
AND it.info = 'trivia'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%)%' OR mc.note LIKE '%)%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%a%' OR mi.info LIKE '%f%')
AND n.gender = 'm'
AND n.name LIKE '%T%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1956 AND 2000;",99,/*+  SeqScan(mc) SeqScan(cn) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) SeqScan(it) IndexOnlyScan(chn char_name_pkey) IndexOnlyScan(an person_id_aka_name) HashJoin(mc cn) NestLoop(mc cn t) NestLoop(mc cn t ci) HashJoin(mc cn t ci rt) NestLoop(mc cn t ci rt n) NestLoop(mc cn t ci rt n mi) HashJoin(mc cn t ci rt n mi it) NestLoop(mc cn t ci rt n mi it chn) NestLoop(mc cn t ci rt n mi it chn an) Leading((((((((((mc cn) t) ci) rt) n) mi) it) chn) an)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
  movie_companies AS mc,
   movie_info AS mi,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(as Charles Tamburro)', '(as Jadzia Nalepa)', '(The Skipper)', '(as Louis Zeto)', '(the terror)')
AND cn.country_code = '[us]'
AND it.info = 'trivia'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%1%' OR mc.note LIKE '%e%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%a%' OR mi.info LIKE '%i%')
AND n.gender = 'm'
AND n.name LIKE '%l%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1940 AND 2001;",99,/*+  SeqScan(mc) SeqScan(cn) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) SeqScan(it) IndexOnlyScan(chn char_name_pkey) IndexOnlyScan(an person_id_aka_name) HashJoin(mc cn) NestLoop(mc cn t) NestLoop(mc cn t ci) HashJoin(mc cn t ci rt) NestLoop(mc cn t ci rt n) NestLoop(mc cn t ci rt n mi) HashJoin(mc cn t ci rt n mi it) NestLoop(mc cn t ci rt n mi it chn) NestLoop(mc cn t ci rt n mi it chn an) Leading((((((((((mc cn) t) ci) rt) n) mi) it) chn) an)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
  movie_companies AS mc,
   movie_info AS mi,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(uncredited)', '(as Jean Donahue)', '(as Jay Ax)', '(as Zien Cui)', '(novel ""Nance"")')
AND cn.country_code = '[us]'
AND it.info = 'release dates'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%)%' OR mc.note LIKE '%3%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%0%' OR mi.info LIKE '%t%')
AND n.gender = 'f'
AND n.name LIKE '%o%'
AND rt.role = 'actress'
AND t.production_year BETWEEN 1933 AND 2012;",99,/*+  SeqScan(mc) SeqScan(cn) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) SeqScan(it) IndexOnlyScan(chn char_name_pkey) IndexOnlyScan(an person_id_aka_name) HashJoin(mc cn) NestLoop(mc cn t) NestLoop(mc cn t ci) HashJoin(mc cn t ci rt) NestLoop(mc cn t ci rt n) NestLoop(mc cn t ci rt n mi) HashJoin(mc cn t ci rt n mi it) NestLoop(mc cn t ci rt n mi it chn) NestLoop(mc cn t ci rt n mi it chn an) Leading((((((((((mc cn) t) ci) rt) n) mi) it) chn) an)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
  movie_companies AS mc,
   movie_info AS mi,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(uncredited)', '(executive: Imp)', '(1982-1993)', '(as Angel Diamond)', '(as Pepe y Natacha)')
AND cn.country_code = '[de]'
AND it.info = 'tech info'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%r%' OR mc.note LIKE '%r%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%:%' OR mi.info LIKE '%n%')
AND n.gender = 'f'
AND n.name LIKE '%a%'
AND rt.role = 'actress'
AND t.production_year BETWEEN 1892 AND 2013;",99,/*+  SeqScan(mc) SeqScan(cn) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) SeqScan(it) IndexOnlyScan(chn char_name_pkey) IndexOnlyScan(an person_id_aka_name) HashJoin(mc cn) NestLoop(mc cn t) NestLoop(mc cn t ci) HashJoin(mc cn t ci rt) NestLoop(mc cn t ci rt n) NestLoop(mc cn t ci rt n mi) HashJoin(mc cn t ci rt n mi it) NestLoop(mc cn t ci rt n mi it chn) NestLoop(mc cn t ci rt n mi it chn an) Leading((((((((((mc cn) t) ci) rt) n) mi) it) chn) an)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
  movie_companies AS mc,
   movie_info AS mi,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(as Whitby Hertford)', '(as DC Coles)', '(as Ariel Knights)', '(as Jose VivÃ³)', '(as Kaschouba)')
AND cn.country_code = '[nl]'
AND it.info = 'goofs'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%l%' OR mc.note LIKE '%d%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%e%' OR mi.info LIKE '%t%')
AND n.gender = 'm'
AND n.name LIKE '%t%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1932 AND 2004;",99,/*+  SeqScan(mc) SeqScan(cn) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) SeqScan(it) IndexOnlyScan(chn char_name_pkey) IndexOnlyScan(an person_id_aka_name) HashJoin(mc cn) NestLoop(mc cn t) NestLoop(mc cn t ci) HashJoin(mc cn t ci rt) NestLoop(mc cn t ci rt n) NestLoop(mc cn t ci rt n mi) HashJoin(mc cn t ci rt n mi it) NestLoop(mc cn t ci rt n mi it chn) NestLoop(mc cn t ci rt n mi it chn an) Leading((((((((((mc cn) t) ci) rt) n) mi) it) chn) an)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
  movie_companies AS mc,
   movie_info AS mi,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(uncredited)', '(as Jon Tams)', '(as The Devlins)', '(as Genis Loren)', '(as Big Show)')
AND cn.country_code = '[fr]'
AND it.info = 'release dates'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%t%' OR mc.note LIKE '%r%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%h%' OR mi.info LIKE '%S%')
AND n.gender = 'm'
AND n.name LIKE '%a%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1916 AND 1993;",99,/*+  SeqScan(mc) SeqScan(cn) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) SeqScan(it) IndexOnlyScan(chn char_name_pkey) IndexOnlyScan(an person_id_aka_name) HashJoin(mc cn) NestLoop(mc cn t) NestLoop(mc cn t ci) HashJoin(mc cn t ci rt) NestLoop(mc cn t ci rt n) NestLoop(mc cn t ci rt n mi) HashJoin(mc cn t ci rt n mi it) NestLoop(mc cn t ci rt n mi it chn) NestLoop(mc cn t ci rt n mi it chn an) Leading((((((((((mc cn) t) ci) rt) n) mi) it) chn) an)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
  movie_companies AS mc,
   movie_info AS mi,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(as Mike Ragan)', '(as John M. Scurti)', '(laser recording)', '(hotel liaison)', '(as Mike Kallio)')
AND cn.country_code = '[us]'
AND it.info = 'certificates'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%r%' OR mc.note LIKE '%l%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%e%' OR mi.info LIKE '%e%')
AND n.gender = 'm'
AND n.name LIKE '%B%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1914 AND 2010;",99,/*+  SeqScan(mc) SeqScan(cn) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) SeqScan(it) IndexOnlyScan(chn char_name_pkey) IndexOnlyScan(an person_id_aka_name) HashJoin(mc cn) NestLoop(mc cn t) NestLoop(mc cn t ci) HashJoin(mc cn t ci rt) NestLoop(mc cn t ci rt n) NestLoop(mc cn t ci rt n mi) HashJoin(mc cn t ci rt n mi it) NestLoop(mc cn t ci rt n mi it chn) NestLoop(mc cn t ci rt n mi it chn an) Leading((((((((((mc cn) t) ci) rt) n) mi) it) chn) an)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
  movie_companies AS mc,
   movie_info AS mi,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(as Charles Tamburro)', '(staff: Sona Inc.)', '(title montage)', '(as 702)', '(segment ""Rhea"")')
AND cn.country_code = '[us]'
AND it.info = 'adaption'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%b%' OR mc.note LIKE '%9%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%k%' OR mi.info LIKE '%(%')
AND n.gender = 'm'
AND n.name LIKE '%r%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1893 AND 2008;",99,/*+  SeqScan(mc) SeqScan(cn) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) SeqScan(it) IndexOnlyScan(chn char_name_pkey) IndexOnlyScan(an person_id_aka_name) HashJoin(mc cn) NestLoop(mc cn t) NestLoop(mc cn t ci) HashJoin(mc cn t ci rt) NestLoop(mc cn t ci rt n) NestLoop(mc cn t ci rt n mi) HashJoin(mc cn t ci rt n mi it) NestLoop(mc cn t ci rt n mi it chn) NestLoop(mc cn t ci rt n mi it chn an) Leading((((((((((mc cn) t) ci) rt) n) mi) it) chn) an)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
  movie_companies AS mc,
   movie_info AS mi,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(as Angela Gibbs)', '(as John Tenorio)', '(as Henry Gordon)', '(segment Authority)', '(the Weasel)')
AND cn.country_code = '[be]'
AND it.info = 'certificates'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%)%' OR mc.note LIKE '%e%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%a%' OR mi.info LIKE '%:%')
AND n.gender = 'f'
AND n.name LIKE '%l%'
AND rt.role = 'actress'
AND t.production_year BETWEEN 1977 AND 2005;",99,/*+  SeqScan(mc) SeqScan(cn) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) SeqScan(it) IndexOnlyScan(chn char_name_pkey) IndexOnlyScan(an person_id_aka_name) HashJoin(mc cn) NestLoop(mc cn t) NestLoop(mc cn t ci) HashJoin(mc cn t ci rt) NestLoop(mc cn t ci rt n) NestLoop(mc cn t ci rt n mi) HashJoin(mc cn t ci rt n mi it) NestLoop(mc cn t ci rt n mi it chn) NestLoop(mc cn t ci rt n mi it chn an) Leading((((((((((mc cn) t) ci) rt) n) mi) it) chn) an)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
  movie_companies AS mc,
   movie_info AS mi,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(as Whitby Hertford)', '(as Pedro Damian)', '(as Anjo SolÃ³n)', '(as CeylÃ¢n)', '(as Skylar Adams)')
AND cn.country_code = '[nl]'
AND it.info = 'trivia'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%V%' OR mc.note LIKE '%)%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%a%' OR mi.info LIKE '%r%')
AND n.gender = 'm'
AND n.name LIKE '%r%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1901 AND 2017;",99,/*+  SeqScan(mc) SeqScan(cn) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) SeqScan(it) IndexOnlyScan(chn char_name_pkey) IndexOnlyScan(an person_id_aka_name) HashJoin(mc cn) NestLoop(mc cn t) NestLoop(mc cn t ci) HashJoin(mc cn t ci rt) NestLoop(mc cn t ci rt n) NestLoop(mc cn t ci rt n mi) HashJoin(mc cn t ci rt n mi it) NestLoop(mc cn t ci rt n mi it chn) NestLoop(mc cn t ci rt n mi it chn an) Leading((((((((((mc cn) t) ci) rt) n) mi) it) chn) an)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
  movie_companies AS mc,
   movie_info AS mi,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(as Whitby Hertford)', '(as Andrea Naumann)', '(as CefÃ© Quijano)', '(dolly supervisor)', '(Mrs. Gilson)')
AND cn.country_code = '[au]'
AND it.info = 'quotes'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%t%' OR mc.note LIKE '%t%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%c%' OR mi.info LIKE '%l%')
AND n.gender = 'm'
AND n.name LIKE '%f%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1976 AND 2006;",99,/*+  SeqScan(mc) SeqScan(cn) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) SeqScan(it) IndexOnlyScan(chn char_name_pkey) IndexOnlyScan(an person_id_aka_name) HashJoin(mc cn) NestLoop(mc cn t) NestLoop(mc cn t ci) HashJoin(mc cn t ci rt) NestLoop(mc cn t ci rt n) NestLoop(mc cn t ci rt n mi) HashJoin(mc cn t ci rt n mi it) NestLoop(mc cn t ci rt n mi it chn) NestLoop(mc cn t ci rt n mi it chn an) Leading((((((((((mc cn) t) ci) rt) n) mi) it) chn) an)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
  movie_companies AS mc,
   movie_info AS mi,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(as Charles Tamburro)', '(part 9)', '(as Alex Nahon)', '(legal: Granada)', '(gear manager)')
AND cn.country_code = '[gb]'
AND it.info = 'adaption'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%e%' OR mc.note LIKE '%D%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%8%' OR mi.info LIKE '%e%')
AND n.gender = 'm'
AND n.name LIKE '%s%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1894 AND 2011;",99,/*+  SeqScan(mc) SeqScan(cn) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) SeqScan(it) IndexOnlyScan(chn char_name_pkey) IndexOnlyScan(an person_id_aka_name) HashJoin(mc cn) NestLoop(mc cn t) NestLoop(mc cn t ci) HashJoin(mc cn t ci rt) NestLoop(mc cn t ci rt n) NestLoop(mc cn t ci rt n mi) HashJoin(mc cn t ci rt n mi it) NestLoop(mc cn t ci rt n mi it chn) NestLoop(mc cn t ci rt n mi it chn an) Leading((((((((((mc cn) t) ci) rt) n) mi) it) chn) an)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
  movie_companies AS mc,
   movie_info AS mi,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(as Whitby Hertford)', '(as Phill Carey)', '(as Vica Borg)', '(Organ)', '(comic: Initial D)')
AND cn.country_code = '[at]'
AND it.info = 'release dates'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%a%' OR mc.note LIKE '%s%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%i%' OR mi.info LIKE '%a%')
AND n.gender = 'm'
AND n.name LIKE '%W%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1979 AND 2000;",99,/*+  SeqScan(mc) SeqScan(cn) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) SeqScan(it) IndexOnlyScan(chn char_name_pkey) IndexOnlyScan(an person_id_aka_name) HashJoin(mc cn) NestLoop(mc cn t) NestLoop(mc cn t ci) HashJoin(mc cn t ci rt) NestLoop(mc cn t ci rt n) NestLoop(mc cn t ci rt n mi) HashJoin(mc cn t ci rt n mi it) NestLoop(mc cn t ci rt n mi it chn) NestLoop(mc cn t ci rt n mi it chn an) Leading((((((((((mc cn) t) ci) rt) n) mi) it) chn) an)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
  movie_companies AS mc,
   movie_info AS mi,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(as Charles Tamburro)', '(as Willie Ames)', '(as Kim Andersson)', '(as Dom Letts)', '(marine adviser)')
AND cn.country_code = '[nl]'
AND it.info = 'novel'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%i%' OR mc.note LIKE '%d%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%e%' OR mi.info LIKE '%m%')
AND n.gender = 'm'
AND n.name LIKE '%h%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1910 AND 1992;",99,/*+  SeqScan(mc) SeqScan(cn) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) SeqScan(it) IndexOnlyScan(chn char_name_pkey) IndexOnlyScan(an person_id_aka_name) HashJoin(mc cn) NestLoop(mc cn t) NestLoop(mc cn t ci) HashJoin(mc cn t ci rt) NestLoop(mc cn t ci rt n) NestLoop(mc cn t ci rt n mi) HashJoin(mc cn t ci rt n mi it) NestLoop(mc cn t ci rt n mi it chn) NestLoop(mc cn t ci rt n mi it chn an) Leading((((((((((mc cn) t) ci) rt) n) mi) it) chn) an)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
  movie_companies AS mc,
   movie_info AS mi,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(as Whitby Hertford)', '(as Susi Barth)', '(as Jo-Joo)', '(as Hanna Black)', '(QA manager)')
AND cn.country_code = '[gb]'
AND it.info = 'trivia'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%)%' OR mc.note LIKE '%)%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%n%' OR mi.info LIKE '%a%')
AND n.gender = 'm'
AND n.name LIKE '%,%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1943 AND 2019;",99,/*+  SeqScan(mc) SeqScan(cn) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) SeqScan(it) IndexOnlyScan(chn char_name_pkey) IndexOnlyScan(an person_id_aka_name) HashJoin(mc cn) NestLoop(mc cn t) NestLoop(mc cn t ci) HashJoin(mc cn t ci rt) NestLoop(mc cn t ci rt n) NestLoop(mc cn t ci rt n mi) HashJoin(mc cn t ci rt n mi it) NestLoop(mc cn t ci rt n mi it chn) NestLoop(mc cn t ci rt n mi it chn an) Leading((((((((((mc cn) t) ci) rt) n) mi) it) chn) an)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
  movie_companies AS mc,
   movie_info AS mi,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(as Whitby Hertford)', '(as John Sloan)', '(as Tommy Piper)', '(as V. Ivchenko)', '(as James Twaddale)')
AND cn.country_code = '[au]'
AND it.info = 'goofs'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%H%' OR mc.note LIKE '%?%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%t%' OR mi.info LIKE '%e%')
AND n.gender = 'm'
AND n.name LIKE '%r%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1890 AND 2006;",99,/*+  SeqScan(mc) SeqScan(cn) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) SeqScan(it) IndexOnlyScan(chn char_name_pkey) IndexOnlyScan(an person_id_aka_name) HashJoin(mc cn) NestLoop(mc cn t) NestLoop(mc cn t ci) HashJoin(mc cn t ci rt) NestLoop(mc cn t ci rt n) NestLoop(mc cn t ci rt n mi) HashJoin(mc cn t ci rt n mi it) NestLoop(mc cn t ci rt n mi it chn) NestLoop(mc cn t ci rt n mi it chn an) Leading((((((((((mc cn) t) ci) rt) n) mi) it) chn) an)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
  movie_companies AS mc,
   movie_info AS mi,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(as Charles Tamburro)', '(as Joy Duggar)', '(as Lisa Kellog)', '(as Katy Hudson)', '(Bade Babu)')
AND cn.country_code = '[us]'
AND it.info = 'budget'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%(%' OR mc.note LIKE '%T%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%0%' OR mi.info LIKE '%$%')
AND n.gender = 'm'
AND n.name LIKE '%h%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1930 AND 2016;",99,/*+  SeqScan(mc) SeqScan(cn) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) SeqScan(it) IndexOnlyScan(chn char_name_pkey) IndexOnlyScan(an person_id_aka_name) HashJoin(mc cn) NestLoop(mc cn t) NestLoop(mc cn t ci) HashJoin(mc cn t ci rt) NestLoop(mc cn t ci rt n) NestLoop(mc cn t ci rt n mi) HashJoin(mc cn t ci rt n mi it) NestLoop(mc cn t ci rt n mi it chn) NestLoop(mc cn t ci rt n mi it chn an) Leading((((((((((mc cn) t) ci) rt) n) mi) it) chn) an)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
  movie_companies AS mc,
   movie_info AS mi,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(as Whitby Hertford)', '(as Jack W. Fuqua)', '(as May Mersch)', '(as Perle Walter)', '(8 aÃ±os)')
AND cn.country_code = '[nl]'
AND it.info = 'trivia'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%a%' OR mc.note LIKE '%t%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%h%' OR mi.info LIKE '%m%')
AND n.gender = 'm'
AND n.name LIKE '%d%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1985 AND 2011;",99,/*+  SeqScan(mc) SeqScan(cn) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) SeqScan(it) IndexOnlyScan(chn char_name_pkey) IndexOnlyScan(an person_id_aka_name) HashJoin(mc cn) NestLoop(mc cn t) NestLoop(mc cn t ci) HashJoin(mc cn t ci rt) NestLoop(mc cn t ci rt n) NestLoop(mc cn t ci rt n mi) HashJoin(mc cn t ci rt n mi it) NestLoop(mc cn t ci rt n mi it chn) NestLoop(mc cn t ci rt n mi it chn an) Leading((((((((((mc cn) t) ci) rt) n) mi) it) chn) an)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
  movie_companies AS mc,
   movie_info AS mi,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(uncredited)', '(June 2003)', '(as Robin Bliley)', '(as Willy Marcos)', '(as Rene Estevez)')
AND cn.country_code = '[fr]'
AND it.info = 'release dates'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%4%' OR mc.note LIKE '%r%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%9%' OR mi.info LIKE '%i%')
AND n.gender = 'm'
AND n.name LIKE '%o%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1939 AND 1981;",99,/*+  SeqScan(mc) SeqScan(cn) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) SeqScan(it) IndexOnlyScan(chn char_name_pkey) IndexOnlyScan(an person_id_aka_name) HashJoin(mc cn) NestLoop(mc cn t) NestLoop(mc cn t ci) HashJoin(mc cn t ci rt) NestLoop(mc cn t ci rt n) NestLoop(mc cn t ci rt n mi) HashJoin(mc cn t ci rt n mi it) NestLoop(mc cn t ci rt n mi it chn) NestLoop(mc cn t ci rt n mi it chn an) Leading((((((((((mc cn) t) ci) rt) n) mi) it) chn) an)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
  movie_companies AS mc,
   movie_info AS mi,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(as Charles Tamburro)', '(as Harry Newmann)', '(story ""Memories"")', '(Shoeless)', '(as Jolanta Devil)')
AND cn.country_code = '[nl]'
AND it.info = 'trivia'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%e%' OR mc.note LIKE '%(%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%e%' OR mi.info LIKE '%c%')
AND n.gender = 'm'
AND n.name LIKE '%s%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1964 AND 2009;",99,/*+  SeqScan(mc) SeqScan(cn) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) SeqScan(it) IndexOnlyScan(chn char_name_pkey) IndexOnlyScan(an person_id_aka_name) HashJoin(mc cn) NestLoop(mc cn t) NestLoop(mc cn t ci) HashJoin(mc cn t ci rt) NestLoop(mc cn t ci rt n) NestLoop(mc cn t ci rt n mi) HashJoin(mc cn t ci rt n mi it) NestLoop(mc cn t ci rt n mi it chn) NestLoop(mc cn t ci rt n mi it chn an) Leading((((((((((mc cn) t) ci) rt) n) mi) it) chn) an)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
  movie_companies AS mc,
   movie_info AS mi,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(as Whitby Hertford)', '(as Hedieh Tehrani)', '(body double: Iri)', '(as Det. Ed Begley)', '(as Alesa Gantz)')
AND cn.country_code = '[gb]'
AND it.info = 'goofs'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%(%' OR mc.note LIKE '%d%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%n%' OR mi.info LIKE '%u%')
AND n.gender = 'm'
AND n.name LIKE '%t%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1919 AND 2014;",99,/*+  SeqScan(mc) SeqScan(cn) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) SeqScan(it) IndexOnlyScan(chn char_name_pkey) IndexOnlyScan(an person_id_aka_name) HashJoin(mc cn) NestLoop(mc cn t) NestLoop(mc cn t ci) HashJoin(mc cn t ci rt) NestLoop(mc cn t ci rt n) NestLoop(mc cn t ci rt n mi) HashJoin(mc cn t ci rt n mi it) NestLoop(mc cn t ci rt n mi it chn) NestLoop(mc cn t ci rt n mi it chn an) Leading((((((((((mc cn) t) ci) rt) n) mi) it) chn) an)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
  movie_companies AS mc,
   movie_info AS mi,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(as Whitby Hertford)', '(as Pataky Ferenc)', '(as Marie SoposkÃ¡)', '(caterer) (2004)', '(as Yu. Tsupko)')
AND cn.country_code = '[ar]'
AND it.info = 'gross'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%(%' OR mc.note LIKE '%)%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%l%' OR mi.info LIKE '%1%')
AND n.gender = 'm'
AND n.name LIKE '%H%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1977 AND 2007;",99,/*+  SeqScan(mc) SeqScan(cn) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) SeqScan(it) IndexOnlyScan(chn char_name_pkey) IndexOnlyScan(an person_id_aka_name) HashJoin(mc cn) NestLoop(mc cn t) NestLoop(mc cn t ci) HashJoin(mc cn t ci rt) NestLoop(mc cn t ci rt n) NestLoop(mc cn t ci rt n mi) HashJoin(mc cn t ci rt n mi it) NestLoop(mc cn t ci rt n mi it chn) NestLoop(mc cn t ci rt n mi it chn an) Leading((((((((((mc cn) t) ci) rt) n) mi) it) chn) an)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
  movie_companies AS mc,
   movie_info AS mi,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(as Whitby Hertford)', '(episodes #36-65)', '(as Nick De Maggio)', '(as Nick Palmer MP)', '(as Fred Barrett)')
AND cn.country_code = '[us]'
AND it.info = 'opening weekend'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%c%' OR mc.note LIKE '%0%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%E%' OR mi.info LIKE '%3%')
AND n.gender = 'm'
AND n.name LIKE '%t%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1961 AND 2010;",99,/*+  SeqScan(mc) SeqScan(cn) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) SeqScan(it) IndexOnlyScan(chn char_name_pkey) IndexOnlyScan(an person_id_aka_name) HashJoin(mc cn) NestLoop(mc cn t) NestLoop(mc cn t ci) HashJoin(mc cn t ci rt) NestLoop(mc cn t ci rt n) NestLoop(mc cn t ci rt n mi) HashJoin(mc cn t ci rt n mi it) NestLoop(mc cn t ci rt n mi it chn) NestLoop(mc cn t ci rt n mi it chn an) Leading((((((((((mc cn) t) ci) rt) n) mi) it) chn) an)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
  movie_companies AS mc,
   movie_info AS mi,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(as Whitby Hertford)', '(as T. Lengren)', '(as Varpu Kuusela)', '(as Zaherra)', '(show)')
AND cn.country_code = '[nl]'
AND it.info = 'goofs'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%V%' OR mc.note LIKE '%9%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%e%' OR mi.info LIKE '%i%')
AND n.gender = 'm'
AND n.name LIKE '%H%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1907 AND 2002;",99,/*+  SeqScan(mc) SeqScan(cn) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) SeqScan(it) IndexOnlyScan(chn char_name_pkey) IndexOnlyScan(an person_id_aka_name) HashJoin(mc cn) NestLoop(mc cn t) NestLoop(mc cn t ci) HashJoin(mc cn t ci rt) NestLoop(mc cn t ci rt n) NestLoop(mc cn t ci rt n mi) HashJoin(mc cn t ci rt n mi it) NestLoop(mc cn t ci rt n mi it chn) NestLoop(mc cn t ci rt n mi it chn an) Leading((((((((((mc cn) t) ci) rt) n) mi) it) chn) an)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
  movie_companies AS mc,
   movie_info AS mi,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(as Charles Tamburro)', '(as Dana Lis)', '(as Natasha Zorina)', '(as Erin Rose)', '(as Sally Nicholls)')
AND cn.country_code = '[gb]'
AND it.info = 'tech info'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%a%' OR mc.note LIKE '%9%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%:%' OR mi.info LIKE '%P%')
AND n.gender = 'm'
AND n.name LIKE '%C%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1902 AND 2020;",99,/*+  SeqScan(mc) SeqScan(cn) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) SeqScan(it) IndexOnlyScan(chn char_name_pkey) IndexOnlyScan(an person_id_aka_name) HashJoin(mc cn) NestLoop(mc cn t) NestLoop(mc cn t ci) HashJoin(mc cn t ci rt) NestLoop(mc cn t ci rt n) NestLoop(mc cn t ci rt n mi) HashJoin(mc cn t ci rt n mi it) NestLoop(mc cn t ci rt n mi it chn) NestLoop(mc cn t ci rt n mi it chn an) Leading((((((((((mc cn) t) ci) rt) n) mi) it) chn) an)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
  movie_companies AS mc,
   movie_info AS mi,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(as Whitby Hertford)', '(as V. Korovkin)', '(as Laurel Lockart)', '(Exotic Dancer)', '(as Susi Draxler)')
AND cn.country_code = '[nl]'
AND it.info = 'weekend gross'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%N%' OR mc.note LIKE '%t%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%5%' OR mi.info LIKE '%8%')
AND n.gender = 'm'
AND n.name LIKE '%t%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1905 AND 2015;",99,/*+  SeqScan(mc) SeqScan(cn) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) SeqScan(it) IndexOnlyScan(chn char_name_pkey) IndexOnlyScan(an person_id_aka_name) HashJoin(mc cn) NestLoop(mc cn t) NestLoop(mc cn t ci) HashJoin(mc cn t ci rt) NestLoop(mc cn t ci rt n) NestLoop(mc cn t ci rt n mi) HashJoin(mc cn t ci rt n mi it) NestLoop(mc cn t ci rt n mi it chn) NestLoop(mc cn t ci rt n mi it chn an) Leading((((((((((mc cn) t) ci) rt) n) mi) it) chn) an)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
  movie_companies AS mc,
   movie_info AS mi,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(as Whitby Hertford)', '(as Double D)', '(as A. Engelmayer)', '(as Johnnie Fern)', '(rides bus)')
AND cn.country_code = '[at]'
AND it.info = 'goofs'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%t%' OR mc.note LIKE '%i%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%o%' OR mi.info LIKE '%t%')
AND n.gender = 'm'
AND n.name LIKE '%i%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1923 AND 2017;",99,/*+  SeqScan(mc) SeqScan(cn) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) SeqScan(it) IndexOnlyScan(chn char_name_pkey) IndexOnlyScan(an person_id_aka_name) HashJoin(mc cn) NestLoop(mc cn t) NestLoop(mc cn t ci) HashJoin(mc cn t ci rt) NestLoop(mc cn t ci rt n) NestLoop(mc cn t ci rt n mi) HashJoin(mc cn t ci rt n mi it) NestLoop(mc cn t ci rt n mi it chn) NestLoop(mc cn t ci rt n mi it chn an) Leading((((((((((mc cn) t) ci) rt) n) mi) it) chn) an)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
  movie_companies AS mc,
   movie_info AS mi,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(as Whitby Hertford)', '(IT management)', '(1 an et demi)', '(1983-present)', '(as Frank Blount)')
AND cn.country_code = '[us]'
AND it.info = 'gross'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%(%' OR mc.note LIKE '%h%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%b%' OR mi.info LIKE '%9%')
AND n.gender = 'm'
AND n.name LIKE '%r%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1936 AND 2012;",7,/*+  SeqScan(ci) IndexOnlyScan(an person_id_aka_name) SeqScan(rt) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexScan(mi movie_id_movie_info) SeqScan(it) IndexOnlyScan(chn char_name_pkey) IndexScan(n name_pkey) IndexScan(t title_pkey) NestLoop(ci an) HashJoin(ci an rt) NestLoop(ci an rt mc) NestLoop(ci an rt mc cn) NestLoop(ci an rt mc cn mi) HashJoin(ci an rt mc cn mi it) NestLoop(ci an rt mc cn mi it chn) NestLoop(ci an rt mc cn mi it chn n) NestLoop(ci an rt mc cn mi it chn n t) Leading((((((((((ci an) rt) mc) cn) mi) it) chn) n) t)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
  movie_companies AS mc,
   movie_info AS mi,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(as Whitby Hertford)', '(as Eugene O. Roth)', '(as G. Chelidze)', '(as Hristo Neykov)', '(as Katja Schenk)')
AND cn.country_code = '[nl]'
AND it.info = 'goofs'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%i%' OR mc.note LIKE '%h%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%l%' OR mi.info LIKE '%T%')
AND n.gender = 'm'
AND n.name LIKE '%,%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1950 AND 2004;",7,/*+  SeqScan(ci) IndexOnlyScan(an person_id_aka_name) SeqScan(rt) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexScan(mi movie_id_movie_info) SeqScan(it) IndexOnlyScan(chn char_name_pkey) IndexScan(n name_pkey) IndexScan(t title_pkey) NestLoop(ci an) HashJoin(ci an rt) NestLoop(ci an rt mc) NestLoop(ci an rt mc cn) NestLoop(ci an rt mc cn mi) HashJoin(ci an rt mc cn mi it) NestLoop(ci an rt mc cn mi it chn) NestLoop(ci an rt mc cn mi it chn n) NestLoop(ci an rt mc cn mi it chn n t) Leading((((((((((ci an) rt) mc) cn) mi) it) chn) n) t)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
  movie_companies AS mc,
   movie_info AS mi,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(as Andrea Miltnerova)', '(as Jeffrey Scott)', '(as Dave Farrell)', '(as R. Walter)', '(as Larry Sloman)')
AND cn.country_code = '[de]'
AND it.info = 'genres'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%8%' OR mc.note LIKE '%u%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%t%' OR mi.info LIKE '%e%')
AND n.gender = 'f'
AND n.name LIKE '%n%'
AND rt.role = 'actress'
AND t.production_year BETWEEN 2003 AND 2013;",99,/*+  SeqScan(mc) SeqScan(cn) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) SeqScan(it) IndexOnlyScan(chn char_name_pkey) IndexOnlyScan(an person_id_aka_name) HashJoin(mc cn) NestLoop(mc cn t) NestLoop(mc cn t ci) HashJoin(mc cn t ci rt) NestLoop(mc cn t ci rt n) NestLoop(mc cn t ci rt n mi) HashJoin(mc cn t ci rt n mi it) NestLoop(mc cn t ci rt n mi it chn) NestLoop(mc cn t ci rt n mi it chn an) Leading((((((((((mc cn) t) ci) rt) n) mi) it) chn) an)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
  movie_companies AS mc,
   movie_info AS mi,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(as Charles Tamburro)', '(as Chang You)', '(as Mr. Coulson)', '(1983, 1999)', '(as Lou Saveli)')
AND cn.country_code = '[gb]'
AND it.info = 'budget'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%9%' OR mc.note LIKE '%e%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%0%' OR mi.info LIKE '%0%')
AND n.gender = 'm'
AND n.name LIKE '%m%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1943 AND 1995;",99,/*+  SeqScan(mc) SeqScan(cn) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) SeqScan(it) IndexOnlyScan(chn char_name_pkey) IndexOnlyScan(an person_id_aka_name) HashJoin(mc cn) NestLoop(mc cn t) NestLoop(mc cn t ci) HashJoin(mc cn t ci rt) NestLoop(mc cn t ci rt n) NestLoop(mc cn t ci rt n mi) HashJoin(mc cn t ci rt n mi it) NestLoop(mc cn t ci rt n mi it chn) NestLoop(mc cn t ci rt n mi it chn an) Leading((((((((((mc cn) t) ci) rt) n) mi) it) chn) an)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
  movie_companies AS mc,
   movie_info AS mi,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(as Charles Tamburro)', '(as Ãric Thomas)', '(as Gunter Tiersch)', '(press manager)', '(as Miss Berner)')
AND cn.country_code = '[br]'
AND it.info = 'weekend gross'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%H%' OR mc.note LIKE '%(%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%3%' OR mi.info LIKE '%1%')
AND n.gender = 'm'
AND n.name LIKE '%l%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1979 AND 2014;",99,/*+  SeqScan(mc) SeqScan(cn) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) SeqScan(it) IndexOnlyScan(chn char_name_pkey) IndexOnlyScan(an person_id_aka_name) HashJoin(mc cn) NestLoop(mc cn t) NestLoop(mc cn t ci) HashJoin(mc cn t ci rt) NestLoop(mc cn t ci rt n) NestLoop(mc cn t ci rt n mi) HashJoin(mc cn t ci rt n mi it) NestLoop(mc cn t ci rt n mi it chn) NestLoop(mc cn t ci rt n mi it chn an) Leading((((((((((mc cn) t) ci) rt) n) mi) it) chn) an)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
  movie_companies AS mc,
   movie_info AS mi,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(as Andrea Miltnerova)', '(as Kenneth Bilton)', '(as Ueda Kichijiro)', '(quizmovie)', '(as Hans Uwe Bauer)')
AND cn.country_code = '[sg]'
AND it.info = 'filming dates'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%(%' OR mc.note LIKE '%1%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%n%' OR mi.info LIKE '%2%')
AND n.gender = 'f'
AND n.name LIKE '%t%'
AND rt.role = 'actress'
AND t.production_year BETWEEN 1913 AND 2011;",99,/*+  SeqScan(mc) SeqScan(cn) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) SeqScan(it) IndexOnlyScan(chn char_name_pkey) IndexOnlyScan(an person_id_aka_name) HashJoin(mc cn) NestLoop(mc cn t) NestLoop(mc cn t ci) HashJoin(mc cn t ci rt) NestLoop(mc cn t ci rt n) NestLoop(mc cn t ci rt n mi) HashJoin(mc cn t ci rt n mi it) NestLoop(mc cn t ci rt n mi it chn) NestLoop(mc cn t ci rt n mi it chn an) Leading((((((((((mc cn) t) ci) rt) n) mi) it) chn) an)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
  movie_companies AS mc,
   movie_info AS mi,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(as Whitby Hertford)', '(as Chris Lewis)', '(as Dirty Sanchez)', '(Hey Marie!)', '(as Berenice Eveno)')
AND cn.country_code = '[gb]'
AND it.info = 'goofs'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%(%' OR mc.note LIKE '%)%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%O%' OR mi.info LIKE '%a%')
AND n.gender = 'm'
AND n.name LIKE '%e%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1986 AND 2007;",99,/*+  SeqScan(mc) SeqScan(cn) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) SeqScan(it) IndexOnlyScan(chn char_name_pkey) IndexOnlyScan(an person_id_aka_name) HashJoin(mc cn) NestLoop(mc cn t) NestLoop(mc cn t ci) HashJoin(mc cn t ci rt) NestLoop(mc cn t ci rt n) NestLoop(mc cn t ci rt n mi) HashJoin(mc cn t ci rt n mi it) NestLoop(mc cn t ci rt n mi it chn) NestLoop(mc cn t ci rt n mi it chn an) Leading((((((((((mc cn) t) ci) rt) n) mi) it) chn) an)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
  movie_companies AS mc,
   movie_info AS mi,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(uncredited)', '(as John Di Santi)', '(as Mitzi MorerrÃ©)', '(as Nat Parker)', '(as Deirdre Imus)')
AND cn.country_code = '[us]'
AND it.info = 'tech info'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%w%' OR mc.note LIKE '%r%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%3%' OR mi.info LIKE '%T%')
AND n.gender = 'f'
AND n.name LIKE '%T%'
AND rt.role = 'actress'
AND t.production_year BETWEEN 1944 AND 1985;",7,/*+  SeqScan(ci) IndexOnlyScan(an person_id_aka_name) SeqScan(rt) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexScan(mi movie_id_movie_info) SeqScan(it) IndexOnlyScan(chn char_name_pkey) IndexScan(n name_pkey) IndexScan(t title_pkey) NestLoop(ci an) HashJoin(ci an rt) NestLoop(ci an rt mc) NestLoop(ci an rt mc cn) NestLoop(ci an rt mc cn mi) HashJoin(ci an rt mc cn mi it) NestLoop(ci an rt mc cn mi it chn) NestLoop(ci an rt mc cn mi it chn n) NestLoop(ci an rt mc cn mi it chn n t) Leading((((((((((ci an) rt) mc) cn) mi) it) chn) n) t)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
  movie_companies AS mc,
   movie_info AS mi,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(uncredited)', '(as Fina Peter)', '(as Matthew Kelly)', '(as Cheavis White)', '(as Amy Ancona)')
AND cn.country_code = '[fr]'
AND it.info = 'release dates'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%1%' OR mc.note LIKE '%(%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%1%' OR mi.info LIKE '%t%')
AND n.gender = 'm'
AND n.name LIKE '%n%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1901 AND 1974;",99,/*+  SeqScan(mc) SeqScan(cn) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) SeqScan(it) IndexOnlyScan(chn char_name_pkey) IndexOnlyScan(an person_id_aka_name) HashJoin(mc cn) NestLoop(mc cn t) NestLoop(mc cn t ci) HashJoin(mc cn t ci rt) NestLoop(mc cn t ci rt n) NestLoop(mc cn t ci rt n mi) HashJoin(mc cn t ci rt n mi it) NestLoop(mc cn t ci rt n mi it chn) NestLoop(mc cn t ci rt n mi it chn an) Leading((((((((((mc cn) t) ci) rt) n) mi) it) chn) an)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
  movie_companies AS mc,
   movie_info AS mi,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(as Whitby Hertford)', '(as Rob Mugge)', '(as Steve Rasch)', '(as Dr. Bechstein)', '(dramatist)')
AND cn.country_code = '[nl]'
AND it.info = 'quotes'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%e%' OR mc.note LIKE '%t%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%e%' OR mi.info LIKE '%d%')
AND n.gender = 'm'
AND n.name LIKE '%t%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1900 AND 2012;",99,/*+  SeqScan(mc) SeqScan(cn) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) SeqScan(it) IndexOnlyScan(chn char_name_pkey) IndexOnlyScan(an person_id_aka_name) HashJoin(mc cn) NestLoop(mc cn t) NestLoop(mc cn t ci) HashJoin(mc cn t ci rt) NestLoop(mc cn t ci rt n) NestLoop(mc cn t ci rt n mi) HashJoin(mc cn t ci rt n mi it) NestLoop(mc cn t ci rt n mi it chn) NestLoop(mc cn t ci rt n mi it chn an) Leading((((((((((mc cn) t) ci) rt) n) mi) it) chn) an)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
  movie_companies AS mc,
   movie_info AS mi,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(as Charles Tamburro)', '(''Nige'' segment)', '(as Bedia Muvahit)', '(as Len Forest)', '(King Arthur)')
AND cn.country_code = '[nl]'
AND it.info = 'taglines'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%s%' OR mc.note LIKE '%)%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%e%' OR mi.info LIKE '%e%')
AND n.gender = 'm'
AND n.name LIKE '%.%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1975 AND 2016;",99,/*+  SeqScan(mc) SeqScan(cn) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) SeqScan(it) IndexOnlyScan(chn char_name_pkey) IndexOnlyScan(an person_id_aka_name) HashJoin(mc cn) NestLoop(mc cn t) NestLoop(mc cn t ci) HashJoin(mc cn t ci rt) NestLoop(mc cn t ci rt n) NestLoop(mc cn t ci rt n mi) HashJoin(mc cn t ci rt n mi it) NestLoop(mc cn t ci rt n mi it chn) NestLoop(mc cn t ci rt n mi it chn an) Leading((((((((((mc cn) t) ci) rt) n) mi) it) chn) an)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
  movie_companies AS mc,
   movie_info AS mi,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(uncredited)', '(as Tamara N Joy)', '(as Erik Berglund)', '(as Isabeu de R.)', '(segment ""Update"")')
AND cn.country_code = '[jp]'
AND it.info = 'release dates'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%h%' OR mc.note LIKE '%(%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%:%' OR mi.info LIKE '%1%')
AND n.gender = 'f'
AND n.name LIKE '%,%'
AND rt.role = 'actress'
AND t.production_year BETWEEN 1913 AND 2006;",99,/*+  SeqScan(mc) SeqScan(cn) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) SeqScan(it) IndexOnlyScan(chn char_name_pkey) IndexOnlyScan(an person_id_aka_name) HashJoin(mc cn) NestLoop(mc cn t) NestLoop(mc cn t ci) HashJoin(mc cn t ci rt) NestLoop(mc cn t ci rt n) NestLoop(mc cn t ci rt n mi) HashJoin(mc cn t ci rt n mi it) NestLoop(mc cn t ci rt n mi it chn) NestLoop(mc cn t ci rt n mi it chn an) Leading((((((((((mc cn) t) ci) rt) n) mi) it) chn) an)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
  movie_companies AS mc,
   movie_info AS mi,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(as Whitby Hertford)', '(as Joe Pittsbergh)', '(as Kirby Krackle)', '(as RaÃºl ViÃ±oles)', '(as Masha Kovtun)')
AND cn.country_code = '[au]'
AND it.info = 'trivia'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%)%' OR mc.note LIKE '%S%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%.%' OR mi.info LIKE '%a%')
AND n.gender = 'm'
AND n.name LIKE '%t%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1892 AND 1994;",99,/*+  SeqScan(mc) SeqScan(cn) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) SeqScan(it) IndexOnlyScan(chn char_name_pkey) IndexOnlyScan(an person_id_aka_name) HashJoin(mc cn) NestLoop(mc cn t) NestLoop(mc cn t ci) HashJoin(mc cn t ci rt) NestLoop(mc cn t ci rt n) NestLoop(mc cn t ci rt n mi) HashJoin(mc cn t ci rt n mi it) NestLoop(mc cn t ci rt n mi it chn) NestLoop(mc cn t ci rt n mi it chn an) Leading((((((((((mc cn) t) ci) rt) n) mi) it) chn) an)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
  movie_companies AS mc,
   movie_info AS mi,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(Atlanta Hawks)', '(as Bill Lucking)', '(prep coordinator)', '(staff: TV Tokyo)', '(MeÃ¡naois)')
AND cn.country_code = '[us]'
AND it.info = 'release dates'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%V%' OR mc.note LIKE '%b%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%r%' OR mi.info LIKE '%s%')
AND n.gender = 'm'
AND n.name LIKE '%S%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1951 AND 2016;",99,/*+  SeqScan(mc) SeqScan(cn) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) SeqScan(it) IndexOnlyScan(chn char_name_pkey) IndexOnlyScan(an person_id_aka_name) HashJoin(mc cn) NestLoop(mc cn t) NestLoop(mc cn t ci) HashJoin(mc cn t ci rt) NestLoop(mc cn t ci rt n) NestLoop(mc cn t ci rt n mi) HashJoin(mc cn t ci rt n mi it) NestLoop(mc cn t ci rt n mi it chn) NestLoop(mc cn t ci rt n mi it chn an) Leading((((((((((mc cn) t) ci) rt) n) mi) it) chn) an)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
  movie_companies AS mc,
   movie_info AS mi,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(as Angela Gibbs)', '(as Laksmanan)', '(as U.F.O.)', '(as Z. Hersak)', '(as Jose Rubio)')
AND cn.country_code = '[be]'
AND it.info = 'certificates'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%i%' OR mc.note LIKE '%(%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%l%' OR mi.info LIKE '%A%')
AND n.gender = 'f'
AND n.name LIKE '%a%'
AND rt.role = 'actress'
AND t.production_year BETWEEN 1978 AND 1987;",7,/*+  SeqScan(ci) IndexOnlyScan(an person_id_aka_name) SeqScan(rt) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexScan(mi movie_id_movie_info) SeqScan(it) IndexOnlyScan(chn char_name_pkey) IndexScan(n name_pkey) IndexScan(t title_pkey) NestLoop(ci an) HashJoin(ci an rt) NestLoop(ci an rt mc) NestLoop(ci an rt mc cn) NestLoop(ci an rt mc cn mi) HashJoin(ci an rt mc cn mi it) NestLoop(ci an rt mc cn mi it chn) NestLoop(ci an rt mc cn mi it chn n) NestLoop(ci an rt mc cn mi it chn n t) Leading((((((((((ci an) rt) mc) cn) mi) it) chn) n) t)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
  movie_companies AS mc,
   movie_info AS mi,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(as Charles Tamburro)', '(episode 1 - 130)', '(as Lynda GuÃ©gan)', '(as Wolf Haley)', '(as Jessie Eastmen)')
AND cn.country_code = '[se]'
AND it.info = 'weekend gross'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%e%' OR mc.note LIKE '%t%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%)%' OR mi.info LIKE '%)%')
AND n.gender = 'm'
AND n.name LIKE '%l%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1898 AND 2015;",99,/*+  SeqScan(mc) SeqScan(cn) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) SeqScan(it) IndexOnlyScan(chn char_name_pkey) IndexOnlyScan(an person_id_aka_name) HashJoin(mc cn) NestLoop(mc cn t) NestLoop(mc cn t ci) HashJoin(mc cn t ci rt) NestLoop(mc cn t ci rt n) NestLoop(mc cn t ci rt n mi) HashJoin(mc cn t ci rt n mi it) NestLoop(mc cn t ci rt n mi it chn) NestLoop(mc cn t ci rt n mi it chn an) Leading((((((((((mc cn) t) ci) rt) n) mi) it) chn) an)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
  movie_companies AS mc,
   movie_info AS mi,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(as Andrea Miltnerova)', '(as Bryan Darley)', '(as Dr Ian Friel)', '(as Wal-Berg)', '(as Filippone)')
AND cn.country_code = '[nl]'
AND it.info = 'tech info'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%D%' OR mc.note LIKE '%s%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%T%' OR mi.info LIKE '%m%')
AND n.gender = 'f'
AND n.name LIKE '%r%'
AND rt.role = 'actress'
AND t.production_year BETWEEN 1915 AND 2013;",7,/*+  SeqScan(ci) IndexOnlyScan(an person_id_aka_name) SeqScan(rt) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexScan(mi movie_id_movie_info) SeqScan(it) IndexOnlyScan(chn char_name_pkey) IndexScan(n name_pkey) IndexScan(t title_pkey) NestLoop(ci an) HashJoin(ci an rt) NestLoop(ci an rt mc) NestLoop(ci an rt mc cn) NestLoop(ci an rt mc cn mi) HashJoin(ci an rt mc cn mi it) NestLoop(ci an rt mc cn mi it chn) NestLoop(ci an rt mc cn mi it chn n) NestLoop(ci an rt mc cn mi it chn n t) Leading((((((((((ci an) rt) mc) cn) mi) it) chn) n) t)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
  movie_companies AS mc,
   movie_info AS mi,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(as Whitby Hertford)', '(as Jonathan Coyne)', '(as G. Makarovi)', '(Honeybee Robotics)', '(novel) (as Maret)')
AND cn.country_code = '[us]'
AND it.info = 'trivia'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%-%' OR mc.note LIKE '%S%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%w%' OR mi.info LIKE '%G%')
AND n.gender = 'm'
AND n.name LIKE '%r%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1992 AND 1996;",99,/*+  SeqScan(mc) SeqScan(cn) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) SeqScan(it) IndexOnlyScan(chn char_name_pkey) IndexOnlyScan(an person_id_aka_name) HashJoin(mc cn) NestLoop(mc cn t) NestLoop(mc cn t ci) HashJoin(mc cn t ci rt) NestLoop(mc cn t ci rt n) NestLoop(mc cn t ci rt n mi) HashJoin(mc cn t ci rt n mi it) NestLoop(mc cn t ci rt n mi it chn) NestLoop(mc cn t ci rt n mi it chn an) Leading((((((((((mc cn) t) ci) rt) n) mi) it) chn) an)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
  movie_companies AS mc,
   movie_info AS mi,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(as Charles Tamburro)', '(as Jon Falkow)', '(as Jermey Joshua)', '(Krijumcar)', '(as Wandisa Leigh)')
AND cn.country_code = '[us]'
AND it.info = 'weekend gross'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%S%' OR mc.note LIKE '%9%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%9%' OR mi.info LIKE '%y%')
AND n.gender = 'm'
AND n.name LIKE '%r%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1950 AND 1994;",99,/*+  SeqScan(mc) SeqScan(cn) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) SeqScan(it) IndexOnlyScan(chn char_name_pkey) IndexOnlyScan(an person_id_aka_name) HashJoin(mc cn) NestLoop(mc cn t) NestLoop(mc cn t ci) HashJoin(mc cn t ci rt) NestLoop(mc cn t ci rt n) NestLoop(mc cn t ci rt n mi) HashJoin(mc cn t ci rt n mi it) NestLoop(mc cn t ci rt n mi it chn) NestLoop(mc cn t ci rt n mi it chn an) Leading((((((((((mc cn) t) ci) rt) n) mi) it) chn) an)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
  movie_companies AS mc,
   movie_info AS mi,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(uncredited)', '(monster)', '(as Saliva)', '(as Lino Furlai)', '(as F.A. Kelsey)')
AND cn.country_code = '[de]'
AND it.info = 'release dates'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%9%' OR mc.note LIKE '%a%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%b%' OR mi.info LIKE '%F%')
AND n.gender = 'm'
AND n.name LIKE '%,%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1906 AND 1965;",99,/*+  SeqScan(mc) SeqScan(cn) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) SeqScan(it) IndexOnlyScan(chn char_name_pkey) IndexOnlyScan(an person_id_aka_name) HashJoin(mc cn) NestLoop(mc cn t) NestLoop(mc cn t ci) HashJoin(mc cn t ci rt) NestLoop(mc cn t ci rt n) NestLoop(mc cn t ci rt n mi) HashJoin(mc cn t ci rt n mi it) NestLoop(mc cn t ci rt n mi it chn) NestLoop(mc cn t ci rt n mi it chn an) Leading((((((((((mc cn) t) ci) rt) n) mi) it) chn) an)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
  movie_companies AS mc,
   movie_info AS mi,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(as Charles Tamburro)', '(''Luna di fiele'')', '(as Anthony Rivard)', '(as ZÃ»in RÃ»)', '(as Lee Williams)')
AND cn.country_code = '[nl]'
AND it.info = 'book'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%t%' OR mc.note LIKE '%c%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%m%' OR mi.info LIKE '%r%')
AND n.gender = 'm'
AND n.name LIKE '%h%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1916 AND 2019;",99,/*+  SeqScan(mc) SeqScan(cn) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) SeqScan(it) IndexOnlyScan(chn char_name_pkey) IndexOnlyScan(an person_id_aka_name) HashJoin(mc cn) NestLoop(mc cn t) NestLoop(mc cn t ci) HashJoin(mc cn t ci rt) NestLoop(mc cn t ci rt n) NestLoop(mc cn t ci rt n mi) HashJoin(mc cn t ci rt n mi it) NestLoop(mc cn t ci rt n mi it chn) NestLoop(mc cn t ci rt n mi it chn an) Leading((((((((((mc cn) t) ci) rt) n) mi) it) chn) an)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
  movie_companies AS mc,
   movie_info AS mi,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(as Whitby Hertford)', '(as Toni Canto)', '(as Danny Milner)', '(as Doris Chun)', '(as Phil Brock)')
AND cn.country_code = '[nl]'
AND it.info = 'gross'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%o%' OR mc.note LIKE '%l%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%Â%' OR mi.info LIKE '%b%')
AND n.gender = 'm'
AND n.name LIKE '%h%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1952 AND 2009;",99,/*+  SeqScan(mc) SeqScan(cn) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) SeqScan(it) IndexOnlyScan(chn char_name_pkey) IndexOnlyScan(an person_id_aka_name) HashJoin(mc cn) NestLoop(mc cn t) NestLoop(mc cn t ci) HashJoin(mc cn t ci rt) NestLoop(mc cn t ci rt n) NestLoop(mc cn t ci rt n mi) HashJoin(mc cn t ci rt n mi it) NestLoop(mc cn t ci rt n mi it chn) NestLoop(mc cn t ci rt n mi it chn an) Leading((((((((((mc cn) t) ci) rt) n) mi) it) chn) an)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
  movie_companies AS mc,
   movie_info AS mi,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(uncredited)', '(as Sam Feder)', '(as Lex Coleman)', '(as V. Gonchurov)', '(as Reimar Bo)')
AND cn.country_code = '[de]'
AND it.info = 'release dates'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%e%' OR mc.note LIKE '%t%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%e%' OR mi.info LIKE '%o%')
AND n.gender = 'm'
AND n.name LIKE '%G%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1937 AND 2015;",99,/*+  SeqScan(mc) SeqScan(cn) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) SeqScan(it) IndexOnlyScan(chn char_name_pkey) IndexOnlyScan(an person_id_aka_name) HashJoin(mc cn) NestLoop(mc cn t) NestLoop(mc cn t ci) HashJoin(mc cn t ci rt) NestLoop(mc cn t ci rt n) NestLoop(mc cn t ci rt n mi) HashJoin(mc cn t ci rt n mi it) NestLoop(mc cn t ci rt n mi it chn) NestLoop(mc cn t ci rt n mi it chn an) Leading((((((((((mc cn) t) ci) rt) n) mi) it) chn) an)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
  movie_companies AS mc,
   movie_info AS mi,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(uncredited)', '(play ""Anatol"")', '(as Caitlin Tegart)', '(as digital dk)', '(as Dora Sampsona)')
AND cn.country_code = '[de]'
AND it.info = 'release dates'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%i%' OR mc.note LIKE '%n%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%t%' OR mi.info LIKE '%1%')
AND n.gender = 'm'
AND n.name LIKE '%n%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1948 AND 1971;",99,/*+  SeqScan(mc) SeqScan(cn) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) SeqScan(it) IndexOnlyScan(chn char_name_pkey) IndexOnlyScan(an person_id_aka_name) HashJoin(mc cn) NestLoop(mc cn t) NestLoop(mc cn t ci) HashJoin(mc cn t ci rt) NestLoop(mc cn t ci rt n) NestLoop(mc cn t ci rt n mi) HashJoin(mc cn t ci rt n mi it) NestLoop(mc cn t ci rt n mi it chn) NestLoop(mc cn t ci rt n mi it chn an) Leading((((((((((mc cn) t) ci) rt) n) mi) it) chn) an)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
  movie_companies AS mc,
   movie_info AS mi,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(as Whitby Hertford)', '(as John Glaser)', '(as Terry Clarke)', '(as Rachel Wells)', '(as Chandini)')
AND cn.country_code = '[nl]'
AND it.info = 'goofs'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%(%' OR mc.note LIKE '%(%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%h%' OR mi.info LIKE '%t%')
AND n.gender = 'm'
AND n.name LIKE '%f%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1941 AND 2002;",99,/*+  SeqScan(mc) SeqScan(cn) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) SeqScan(it) IndexOnlyScan(chn char_name_pkey) IndexOnlyScan(an person_id_aka_name) HashJoin(mc cn) NestLoop(mc cn t) NestLoop(mc cn t ci) HashJoin(mc cn t ci rt) NestLoop(mc cn t ci rt n) NestLoop(mc cn t ci rt n mi) HashJoin(mc cn t ci rt n mi it) NestLoop(mc cn t ci rt n mi it chn) NestLoop(mc cn t ci rt n mi it chn an) Leading((((((((((mc cn) t) ci) rt) n) mi) it) chn) an)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
  movie_companies AS mc,
   movie_info AS mi,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(as Whitby Hertford)', '(episode 1.10)', '(banking customer)', '(journalist) (2007)', '(as Papir Magda)')
AND cn.country_code = '[gb]'
AND it.info = 'weekend gross'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%i%' OR mc.note LIKE '%c%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%1%' OR mi.info LIKE '%0%')
AND n.gender = 'm'
AND n.name LIKE '%,%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1974 AND 1994;",99,/*+  SeqScan(mc) SeqScan(cn) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) SeqScan(it) IndexOnlyScan(chn char_name_pkey) IndexOnlyScan(an person_id_aka_name) HashJoin(mc cn) NestLoop(mc cn t) NestLoop(mc cn t ci) HashJoin(mc cn t ci rt) NestLoop(mc cn t ci rt n) NestLoop(mc cn t ci rt n mi) HashJoin(mc cn t ci rt n mi it) NestLoop(mc cn t ci rt n mi it chn) NestLoop(mc cn t ci rt n mi it chn an) Leading((((((((((mc cn) t) ci) rt) n) mi) it) chn) an)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
  movie_companies AS mc,
   movie_info AS mi,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(as Whitby Hertford)', '(The Powder Monkey)', '(as Kim Cozzens)', '(as Chick Fowle)', '(as Elsy Akiki)')
AND cn.country_code = '[ar]'
AND it.info = 'quotes'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%l%' OR mc.note LIKE '%a%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%s%' OR mi.info LIKE '%a%')
AND n.gender = 'm'
AND n.name LIKE '%e%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1946 AND 2012;",99,/*+  SeqScan(mc) SeqScan(cn) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) SeqScan(it) IndexOnlyScan(chn char_name_pkey) IndexOnlyScan(an person_id_aka_name) HashJoin(mc cn) NestLoop(mc cn t) NestLoop(mc cn t ci) HashJoin(mc cn t ci rt) NestLoop(mc cn t ci rt n) NestLoop(mc cn t ci rt n mi) HashJoin(mc cn t ci rt n mi it) NestLoop(mc cn t ci rt n mi it chn) NestLoop(mc cn t ci rt n mi it chn an) Leading((((((((((mc cn) t) ci) rt) n) mi) it) chn) an)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
  movie_companies AS mc,
   movie_info AS mi,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(uncredited)', '(as Peter Steiger)', '(as John Jiotes)', '(planning and text)', '(as OOMPH!)')
AND cn.country_code = '[us]'
AND it.info = 'printed media reviews'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%r%' OR mc.note LIKE '%T%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%i%' OR mi.info LIKE '%o%')
AND n.gender = 'f'
AND n.name LIKE '%n%'
AND rt.role = 'actress'
AND t.production_year BETWEEN 1920 AND 2010;",7,/*+  SeqScan(ci) IndexOnlyScan(an person_id_aka_name) SeqScan(rt) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexScan(mi movie_id_movie_info) SeqScan(it) IndexOnlyScan(chn char_name_pkey) IndexScan(n name_pkey) IndexScan(t title_pkey) NestLoop(ci an) HashJoin(ci an rt) NestLoop(ci an rt mc) NestLoop(ci an rt mc cn) NestLoop(ci an rt mc cn mi) HashJoin(ci an rt mc cn mi it) NestLoop(ci an rt mc cn mi it chn) NestLoop(ci an rt mc cn mi it chn n) NestLoop(ci an rt mc cn mi it chn n t) Leading((((((((((ci an) rt) mc) cn) mi) it) chn) n) t)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
  movie_companies AS mc,
   movie_info AS mi,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(as Charles Tamburro)', '(locations) (2005)', '(as Oliver Alvarez)', '(as Evil-Dog)', '(as T. Lyberakis)')
AND cn.country_code = '[fr]'
AND it.info = 'adaption'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%9%' OR mc.note LIKE '%1%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%x%' OR mi.info LIKE '%8%')
AND n.gender = 'm'
AND n.name LIKE '%,%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1976 AND 1996;",99,/*+  SeqScan(mc) SeqScan(cn) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) SeqScan(it) IndexOnlyScan(chn char_name_pkey) IndexOnlyScan(an person_id_aka_name) HashJoin(mc cn) NestLoop(mc cn t) NestLoop(mc cn t ci) HashJoin(mc cn t ci rt) NestLoop(mc cn t ci rt n) NestLoop(mc cn t ci rt n mi) HashJoin(mc cn t ci rt n mi it) NestLoop(mc cn t ci rt n mi it chn) NestLoop(mc cn t ci rt n mi it chn an) Leading((((((((((mc cn) t) ci) rt) n) mi) it) chn) an)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
  movie_companies AS mc,
   movie_info AS mi,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(as Whitby Hertford)', '(Ho)', '(segment ""Dylan"")', '(play ""Syn naroda"")', '(saxophone)')
AND cn.country_code = '[gb]'
AND it.info = 'weekend gross'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%(%' OR mc.note LIKE '%i%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%2%' OR mi.info LIKE '%s%')
AND n.gender = 'm'
AND n.name LIKE '%e%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1986 AND 1996;",99,/*+  SeqScan(mc) SeqScan(cn) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) SeqScan(it) IndexOnlyScan(chn char_name_pkey) IndexOnlyScan(an person_id_aka_name) HashJoin(mc cn) NestLoop(mc cn t) NestLoop(mc cn t ci) HashJoin(mc cn t ci rt) NestLoop(mc cn t ci rt n) NestLoop(mc cn t ci rt n mi) HashJoin(mc cn t ci rt n mi it) NestLoop(mc cn t ci rt n mi it chn) NestLoop(mc cn t ci rt n mi it chn an) Leading((((((((((mc cn) t) ci) rt) n) mi) it) chn) an)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
  movie_companies AS mc,
   movie_info AS mi,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(uncredited)', '(as Aimee Barile)', '(as J. Prazmowski)', '(as Sol Gaudite)', '(written by) (2002)')
AND cn.country_code = '[jp]'
AND it.info = 'tech info'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%a%' OR mc.note LIKE '%a%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%3%' OR mi.info LIKE '%5%')
AND n.gender = 'f'
AND n.name LIKE '%k%'
AND rt.role = 'actress'
AND t.production_year BETWEEN 1961 AND 2017;",7,/*+  SeqScan(ci) IndexOnlyScan(an person_id_aka_name) SeqScan(rt) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexScan(mi movie_id_movie_info) SeqScan(it) IndexOnlyScan(chn char_name_pkey) IndexScan(n name_pkey) IndexScan(t title_pkey) NestLoop(ci an) HashJoin(ci an rt) NestLoop(ci an rt mc) NestLoop(ci an rt mc cn) NestLoop(ci an rt mc cn mi) HashJoin(ci an rt mc cn mi it) NestLoop(ci an rt mc cn mi it chn) NestLoop(ci an rt mc cn mi it chn n) NestLoop(ci an rt mc cn mi it chn n t) Leading((((((((((ci an) rt) mc) cn) mi) it) chn) n) t)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
  movie_companies AS mc,
   movie_info AS mi,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(as Charles Tamburro)', '(general organiser)', '(as Joy Wener)', '(principal tester)', '(security: night)')
AND cn.country_code = '[gb]'
AND it.info = 'tech info'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%l%' OR mc.note LIKE '%(%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%,%' OR mi.info LIKE '%H%')
AND n.gender = 'm'
AND n.name LIKE '%r%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1946 AND 2019;",99,/*+  SeqScan(mc) SeqScan(cn) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) SeqScan(it) IndexOnlyScan(chn char_name_pkey) IndexOnlyScan(an person_id_aka_name) HashJoin(mc cn) NestLoop(mc cn t) NestLoop(mc cn t ci) HashJoin(mc cn t ci rt) NestLoop(mc cn t ci rt n) NestLoop(mc cn t ci rt n mi) HashJoin(mc cn t ci rt n mi it) NestLoop(mc cn t ci rt n mi it chn) NestLoop(mc cn t ci rt n mi it chn an) Leading((((((((((mc cn) t) ci) rt) n) mi) it) chn) an)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
  movie_companies AS mc,
   movie_info AS mi,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(as Charles Tamburro)', '(as Wayne Cull)', '(as Nejat BÃ¼rÃ§en)', '(as Julian Nagle)', '(segment ""ME"")')
AND cn.country_code = '[gb]'
AND it.info = 'printed media reviews'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%9%' OR mc.note LIKE '%l%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%D%' OR mi.info LIKE '%a%')
AND n.gender = 'm'
AND n.name LIKE '%a%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1943 AND 1999;",99,/*+  SeqScan(mc) SeqScan(cn) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) SeqScan(it) IndexOnlyScan(chn char_name_pkey) IndexOnlyScan(an person_id_aka_name) HashJoin(mc cn) NestLoop(mc cn t) NestLoop(mc cn t ci) HashJoin(mc cn t ci rt) NestLoop(mc cn t ci rt n) NestLoop(mc cn t ci rt n mi) HashJoin(mc cn t ci rt n mi it) NestLoop(mc cn t ci rt n mi it chn) NestLoop(mc cn t ci rt n mi it chn an) Leading((((((((((mc cn) t) ci) rt) n) mi) it) chn) an)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
  movie_companies AS mc,
   movie_info AS mi,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(as Whitby Hertford)', '(as Scott Skversky)', '(as Q. MacLean)', '(as Jenni Smith)', '(as Ascen LÃ³pez)')
AND cn.country_code = '[gb]'
AND it.info = 'trivia'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%9%' OR mc.note LIKE '%)%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%i%' OR mi.info LIKE '%i%')
AND n.gender = 'm'
AND n.name LIKE '%r%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1944 AND 2004;",99,/*+  SeqScan(mc) SeqScan(cn) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) SeqScan(it) IndexOnlyScan(chn char_name_pkey) IndexOnlyScan(an person_id_aka_name) HashJoin(mc cn) NestLoop(mc cn t) NestLoop(mc cn t ci) HashJoin(mc cn t ci rt) NestLoop(mc cn t ci rt n) NestLoop(mc cn t ci rt n mi) HashJoin(mc cn t ci rt n mi it) NestLoop(mc cn t ci rt n mi it chn) NestLoop(mc cn t ci rt n mi it chn an) Leading((((((((((mc cn) t) ci) rt) n) mi) it) chn) an)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
  movie_companies AS mc,
   movie_info AS mi,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(as Charles Tamburro)', '(as Josh)', '(as David Smyrl)', '(as Beryl)', '(photgraphy)')
AND cn.country_code = '[gb]'
AND it.info = 'other literature'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%t%' OR mc.note LIKE '%c%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%r%' OR mi.info LIKE '%i%')
AND n.gender = 'm'
AND n.name LIKE '%l%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1967 AND 1998;",7,/*+  SeqScan(ci) IndexOnlyScan(an person_id_aka_name) SeqScan(rt) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexScan(mi movie_id_movie_info) SeqScan(it) IndexOnlyScan(chn char_name_pkey) IndexScan(n name_pkey) IndexScan(t title_pkey) NestLoop(ci an) HashJoin(ci an rt) NestLoop(ci an rt mc) NestLoop(ci an rt mc cn) NestLoop(ci an rt mc cn mi) HashJoin(ci an rt mc cn mi it) NestLoop(ci an rt mc cn mi it chn) NestLoop(ci an rt mc cn mi it chn n) NestLoop(ci an rt mc cn mi it chn n t) Leading((((((((((ci an) rt) mc) cn) mi) it) chn) n) t)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
  movie_companies AS mc,
   movie_info AS mi,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(as Whitby Hertford)', '(as Maura Knowles)', '(as Joshua Ellis)', '(as Jim Dukas)', '(schilder)')
AND cn.country_code = '[us]'
AND it.info = 'release dates'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%0%' OR mc.note LIKE '%(%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%:%' OR mi.info LIKE '%n%')
AND n.gender = 'm'
AND n.name LIKE '%e%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1898 AND 2011;",99,/*+  SeqScan(mc) SeqScan(cn) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) SeqScan(it) IndexOnlyScan(chn char_name_pkey) IndexOnlyScan(an person_id_aka_name) HashJoin(mc cn) NestLoop(mc cn t) NestLoop(mc cn t ci) HashJoin(mc cn t ci rt) NestLoop(mc cn t ci rt n) NestLoop(mc cn t ci rt n mi) HashJoin(mc cn t ci rt n mi it) NestLoop(mc cn t ci rt n mi it chn) NestLoop(mc cn t ci rt n mi it chn an) Leading((((((((((mc cn) t) ci) rt) n) mi) it) chn) an)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
  movie_companies AS mc,
   movie_info AS mi,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(as Whitby Hertford)', '(as Faaoso ''Oz'')', '(as John Stoneham)', '(head chef)', '(as Cleo)')
AND cn.country_code = '[au]'
AND it.info = 'admissions'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%a%' OR mc.note LIKE '%(%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%l%' OR mi.info LIKE '%d%')
AND n.gender = 'm'
AND n.name LIKE '%i%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1936 AND 2016;",99,/*+  SeqScan(mc) SeqScan(cn) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) SeqScan(it) IndexOnlyScan(chn char_name_pkey) IndexOnlyScan(an person_id_aka_name) HashJoin(mc cn) NestLoop(mc cn t) NestLoop(mc cn t ci) HashJoin(mc cn t ci rt) NestLoop(mc cn t ci rt n) NestLoop(mc cn t ci rt n mi) HashJoin(mc cn t ci rt n mi it) NestLoop(mc cn t ci rt n mi it chn) NestLoop(mc cn t ci rt n mi it chn an) Leading((((((((((mc cn) t) ci) rt) n) mi) it) chn) an)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
  movie_companies AS mc,
   movie_info AS mi,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(as Charles Tamburro)', '(as Steve Arenholz)', '(as Cheng Chih)', '(as Kitty Neptune)', '(hÃ´pital)')
AND cn.country_code = '[gb]'
AND it.info = 'opening weekend'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%)%' OR mc.note LIKE '%K%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%7%' OR mi.info LIKE '%A%')
AND n.gender = 'm'
AND n.name LIKE '%m%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1907 AND 1999;",99,/*+  SeqScan(mc) SeqScan(cn) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) SeqScan(it) IndexOnlyScan(chn char_name_pkey) IndexOnlyScan(an person_id_aka_name) HashJoin(mc cn) NestLoop(mc cn t) NestLoop(mc cn t ci) HashJoin(mc cn t ci rt) NestLoop(mc cn t ci rt n) NestLoop(mc cn t ci rt n mi) HashJoin(mc cn t ci rt n mi it) NestLoop(mc cn t ci rt n mi it chn) NestLoop(mc cn t ci rt n mi it chn an) Leading((((((((((mc cn) t) ci) rt) n) mi) it) chn) an)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
  movie_companies AS mc,
   movie_info AS mi,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(as Whitby Hertford)', '(as Tom Dicillo)', '(unpublished novel)', '(also Appearance)', '(as Tom Russell)')
AND cn.country_code = '[au]'
AND it.info = 'weekend gross'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%(%' OR mc.note LIKE '%A%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%,%' OR mi.info LIKE '%9%')
AND n.gender = 'm'
AND n.name LIKE '%H%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1898 AND 2006;",99,/*+  SeqScan(mc) SeqScan(cn) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) SeqScan(it) IndexOnlyScan(chn char_name_pkey) IndexOnlyScan(an person_id_aka_name) HashJoin(mc cn) NestLoop(mc cn t) NestLoop(mc cn t ci) HashJoin(mc cn t ci rt) NestLoop(mc cn t ci rt n) NestLoop(mc cn t ci rt n mi) HashJoin(mc cn t ci rt n mi it) NestLoop(mc cn t ci rt n mi it chn) NestLoop(mc cn t ci rt n mi it chn an) Leading((((((((((mc cn) t) ci) rt) n) mi) it) chn) an)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
  movie_companies AS mc,
   movie_info AS mi,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(as Whitby Hertford)', '(as Pataky JenÃµ)', '(as Adrian Pentea)', '(as Tomica Lipljan)', '(senior shepherd)')
AND cn.country_code = '[nl]'
AND it.info = 'weekend gross'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%(%' OR mc.note LIKE '%(%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%r%' OR mi.info LIKE '%(%')
AND n.gender = 'm'
AND n.name LIKE '%f%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1907 AND 1997;",99,/*+  SeqScan(mc) SeqScan(cn) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) SeqScan(it) IndexOnlyScan(chn char_name_pkey) IndexOnlyScan(an person_id_aka_name) HashJoin(mc cn) NestLoop(mc cn t) NestLoop(mc cn t ci) HashJoin(mc cn t ci rt) NestLoop(mc cn t ci rt n) NestLoop(mc cn t ci rt n mi) HashJoin(mc cn t ci rt n mi it) NestLoop(mc cn t ci rt n mi it chn) NestLoop(mc cn t ci rt n mi it chn an) Leading((((((((((mc cn) t) ci) rt) n) mi) it) chn) an)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
  movie_companies AS mc,
   movie_info AS mi,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(as Whitby Hertford)', '(as Donnie Gay)', '(as James Hertz)', '(as I. Gedjadze)', '(as Vokler Bogdan)')
AND cn.country_code = '[us]'
AND it.info = 'gross'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%t%' OR mc.note LIKE '%n%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%3%' OR mi.info LIKE '%u%')
AND n.gender = 'm'
AND n.name LIKE '%i%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1948 AND 2017;",7,/*+  SeqScan(ci) IndexOnlyScan(an person_id_aka_name) SeqScan(rt) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexScan(mi movie_id_movie_info) SeqScan(it) IndexOnlyScan(chn char_name_pkey) IndexScan(n name_pkey) IndexScan(t title_pkey) NestLoop(ci an) HashJoin(ci an rt) NestLoop(ci an rt mc) NestLoop(ci an rt mc cn) NestLoop(ci an rt mc cn mi) HashJoin(ci an rt mc cn mi it) NestLoop(ci an rt mc cn mi it chn) NestLoop(ci an rt mc cn mi it chn n) NestLoop(ci an rt mc cn mi it chn n t) Leading((((((((((ci an) rt) mc) cn) mi) it) chn) n) t)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
  movie_companies AS mc,
   movie_info AS mi,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(as Whitby Hertford)', '(as April Burril)', '(donor: caterer)', '(as Mike Lawson)', '(as D. Kasymov)')
AND cn.country_code = '[ar]'
AND it.info = 'release dates'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%a%' OR mc.note LIKE '%h%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%3%' OR mi.info LIKE '%2%')
AND n.gender = 'm'
AND n.name LIKE '%o%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1943 AND 2005;",7,/*+  SeqScan(ci) IndexOnlyScan(an person_id_aka_name) SeqScan(rt) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexScan(mi movie_id_movie_info) SeqScan(it) IndexOnlyScan(chn char_name_pkey) IndexScan(n name_pkey) IndexScan(t title_pkey) NestLoop(ci an) HashJoin(ci an rt) NestLoop(ci an rt mc) NestLoop(ci an rt mc cn) NestLoop(ci an rt mc cn mi) HashJoin(ci an rt mc cn mi it) NestLoop(ci an rt mc cn mi it chn) NestLoop(ci an rt mc cn mi it chn n) NestLoop(ci an rt mc cn mi it chn n t) Leading((((((((((ci an) rt) mc) cn) mi) it) chn) n) t)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
  movie_companies AS mc,
   movie_info AS mi,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(as Charles Tamburro)', '(as Willis Claire)', '(web and online)', '(as Bob Griffin)', '(as John Flynn)')
AND cn.country_code = '[nl]'
AND it.info = 'taglines'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%V%' OR mc.note LIKE '%t%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%r%' OR mi.info LIKE '%w%')
AND n.gender = 'm'
AND n.name LIKE '%.%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1966 AND 2003;",99,/*+  SeqScan(mc) SeqScan(cn) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) SeqScan(it) IndexOnlyScan(chn char_name_pkey) IndexOnlyScan(an person_id_aka_name) HashJoin(mc cn) NestLoop(mc cn t) NestLoop(mc cn t ci) HashJoin(mc cn t ci rt) NestLoop(mc cn t ci rt n) NestLoop(mc cn t ci rt n mi) HashJoin(mc cn t ci rt n mi it) NestLoop(mc cn t ci rt n mi it chn) NestLoop(mc cn t ci rt n mi it chn an) Leading((((((((((mc cn) t) ci) rt) n) mi) it) chn) an)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
  movie_companies AS mc,
   movie_info AS mi,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(as Charles Tamburro)', '(as Ta Ronce Allen)', '(mechanics team)', '(Bipin''s Mother)', '(as Lenny Bremem)')
AND cn.country_code = '[gb]'
AND it.info = 'adaption'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%9%' OR mc.note LIKE '%(%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%I%' OR mi.info LIKE '%a%')
AND n.gender = 'm'
AND n.name LIKE '%s%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1890 AND 1996;",99,/*+  SeqScan(mc) SeqScan(cn) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) SeqScan(it) IndexOnlyScan(chn char_name_pkey) IndexOnlyScan(an person_id_aka_name) HashJoin(mc cn) NestLoop(mc cn t) NestLoop(mc cn t ci) HashJoin(mc cn t ci rt) NestLoop(mc cn t ci rt n) NestLoop(mc cn t ci rt n mi) HashJoin(mc cn t ci rt n mi it) NestLoop(mc cn t ci rt n mi it chn) NestLoop(mc cn t ci rt n mi it chn an) Leading((((((((((mc cn) t) ci) rt) n) mi) it) chn) an)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
  movie_companies AS mc,
   movie_info AS mi,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(segment ""Un Investimento Sicuro"")', '(as MC Plat''num)', '(son of Agamemnon)', '(as Jorien Klaver)', '(as Dr Phil Besley)')
AND cn.country_code = '[es]'
AND it.info = 'plot'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%d%' OR mc.note LIKE '%c%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%u%' OR mi.info LIKE '%i%')
AND n.gender = 'm'
AND n.name LIKE '%y%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1955 AND 2014;",99,/*+  SeqScan(mc) SeqScan(cn) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) SeqScan(it) IndexOnlyScan(chn char_name_pkey) IndexOnlyScan(an person_id_aka_name) HashJoin(mc cn) NestLoop(mc cn t) NestLoop(mc cn t ci) HashJoin(mc cn t ci rt) NestLoop(mc cn t ci rt n) NestLoop(mc cn t ci rt n mi) HashJoin(mc cn t ci rt n mi it) NestLoop(mc cn t ci rt n mi it chn) NestLoop(mc cn t ci rt n mi it chn an) Leading((((((((((mc cn) t) ci) rt) n) mi) it) chn) an)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
  movie_companies AS mc,
   movie_info AS mi,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(as Whitby Hertford)', '(as Michael Corby)', '(as Dan Mason)', '(as Merce Jimenez)', '(as JP Romano)')
AND cn.country_code = '[nl]'
AND it.info = 'goofs'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%H%' OR mc.note LIKE '%t%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%M%' OR mi.info LIKE '%p%')
AND n.gender = 'm'
AND n.name LIKE '%e%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1938 AND 2020;",99,/*+  SeqScan(mc) SeqScan(cn) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) SeqScan(it) IndexOnlyScan(chn char_name_pkey) IndexOnlyScan(an person_id_aka_name) HashJoin(mc cn) NestLoop(mc cn t) NestLoop(mc cn t ci) HashJoin(mc cn t ci rt) NestLoop(mc cn t ci rt n) NestLoop(mc cn t ci rt n mi) HashJoin(mc cn t ci rt n mi it) NestLoop(mc cn t ci rt n mi it chn) NestLoop(mc cn t ci rt n mi it chn an) Leading((((((((((mc cn) t) ci) rt) n) mi) it) chn) an)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
  movie_companies AS mc,
   movie_info AS mi,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(as Charles Tamburro)', '(as Johnny Cheng)', '(bottom)', '(student coach)', '(as Ione Morino)')
AND cn.country_code = '[es]'
AND it.info = 'book'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%l%' OR mc.note LIKE '%e%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%n%' OR mi.info LIKE '%g%')
AND n.gender = 'm'
AND n.name LIKE '%,%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1897 AND 1993;",99,/*+  SeqScan(mc) SeqScan(cn) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) SeqScan(it) IndexOnlyScan(chn char_name_pkey) IndexOnlyScan(an person_id_aka_name) HashJoin(mc cn) NestLoop(mc cn t) NestLoop(mc cn t ci) HashJoin(mc cn t ci rt) NestLoop(mc cn t ci rt n) NestLoop(mc cn t ci rt n mi) HashJoin(mc cn t ci rt n mi it) NestLoop(mc cn t ci rt n mi it chn) NestLoop(mc cn t ci rt n mi it chn an) Leading((((((((((mc cn) t) ci) rt) n) mi) it) chn) an)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
  movie_companies AS mc,
   movie_info AS mi,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(as Whitby Hertford)', '(as Pyrah Lee)', '(as Oma Violetta)', '(as Hansa)', '(as Steve Peace)')
AND cn.country_code = '[gb]'
AND it.info = 'gross'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%e%' OR mc.note LIKE '%)%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%O%' OR mi.info LIKE '%5%')
AND n.gender = 'm'
AND n.name LIKE '%H%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1966 AND 2004;",7,/*+  SeqScan(ci) IndexOnlyScan(an person_id_aka_name) SeqScan(rt) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexScan(mi movie_id_movie_info) SeqScan(it) IndexOnlyScan(chn char_name_pkey) IndexScan(n name_pkey) IndexScan(t title_pkey) NestLoop(ci an) HashJoin(ci an rt) NestLoop(ci an rt mc) NestLoop(ci an rt mc cn) NestLoop(ci an rt mc cn mi) HashJoin(ci an rt mc cn mi it) NestLoop(ci an rt mc cn mi it chn) NestLoop(ci an rt mc cn mi it chn n) NestLoop(ci an rt mc cn mi it chn n t) Leading((((((((((ci an) rt) mc) cn) mi) it) chn) n) t)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
  movie_companies AS mc,
   movie_info AS mi,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(as Whitby Hertford)', '(as Davee)', '(as Nougzar Sharia)', '(segment ""Vrtlog"")', '(as V. Susic)')
AND cn.country_code = '[nl]'
AND it.info = 'quotes'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%N%' OR mc.note LIKE '%(%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%n%' OR mi.info LIKE '%:%')
AND n.gender = 'm'
AND n.name LIKE '%H%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1958 AND 2019;",99,/*+  SeqScan(mc) SeqScan(cn) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) SeqScan(it) IndexOnlyScan(chn char_name_pkey) IndexOnlyScan(an person_id_aka_name) HashJoin(mc cn) NestLoop(mc cn t) NestLoop(mc cn t ci) HashJoin(mc cn t ci rt) NestLoop(mc cn t ci rt n) NestLoop(mc cn t ci rt n mi) HashJoin(mc cn t ci rt n mi it) NestLoop(mc cn t ci rt n mi it chn) NestLoop(mc cn t ci rt n mi it chn an) Leading((((((((((mc cn) t) ci) rt) n) mi) it) chn) an)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
  movie_companies AS mc,
   movie_info AS mi,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(as Whitby Hertford)', '(as Ingrid Dohse)', '(as Brett Schaefer)', '(as K@rl Pfeifer)', '(as Mary Ryan)')
AND cn.country_code = '[au]'
AND it.info = 'goofs'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%9%' OR mc.note LIKE '%i%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%''%' OR mi.info LIKE '%n%')
AND n.gender = 'm'
AND n.name LIKE '%,%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1951 AND 1998;",99,/*+  SeqScan(mc) SeqScan(cn) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) SeqScan(it) IndexOnlyScan(chn char_name_pkey) IndexOnlyScan(an person_id_aka_name) HashJoin(mc cn) NestLoop(mc cn t) NestLoop(mc cn t ci) HashJoin(mc cn t ci rt) NestLoop(mc cn t ci rt n) NestLoop(mc cn t ci rt n mi) HashJoin(mc cn t ci rt n mi it) NestLoop(mc cn t ci rt n mi it chn) NestLoop(mc cn t ci rt n mi it chn an) Leading((((((((((mc cn) t) ci) rt) n) mi) it) chn) an)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
  movie_companies AS mc,
   movie_info AS mi,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(as Whitby Hertford)', '(2001-2004)', '(as Kate Vonep)', '(as L. Oshanin)', '(as Mary De Wolff)')
AND cn.country_code = '[us]'
AND it.info = 'release dates'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%i%' OR mc.note LIKE '%)%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%1%' OR mi.info LIKE '%e%')
AND n.gender = 'm'
AND n.name LIKE '%e%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1965 AND 2016;",99,/*+  SeqScan(mc) SeqScan(cn) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) SeqScan(it) IndexOnlyScan(chn char_name_pkey) IndexOnlyScan(an person_id_aka_name) HashJoin(mc cn) NestLoop(mc cn t) NestLoop(mc cn t ci) HashJoin(mc cn t ci rt) NestLoop(mc cn t ci rt n) NestLoop(mc cn t ci rt n mi) HashJoin(mc cn t ci rt n mi it) NestLoop(mc cn t ci rt n mi it chn) NestLoop(mc cn t ci rt n mi it chn an) Leading((((((((((mc cn) t) ci) rt) n) mi) it) chn) an)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
  movie_companies AS mc,
   movie_info AS mi,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(as Whitby Hertford)', '(as Wez)', '(as Dara Modglin)', '(as Sammy Bright)', '(as Allan Tower)')
AND cn.country_code = '[us]'
AND it.info = 'weekend gross'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%U%' OR mc.note LIKE '%(%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%3%' OR mi.info LIKE '%(%')
AND n.gender = 'm'
AND n.name LIKE '%r%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1990 AND 1995;",99,/*+  SeqScan(mc) SeqScan(cn) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) SeqScan(it) IndexOnlyScan(chn char_name_pkey) IndexOnlyScan(an person_id_aka_name) HashJoin(mc cn) NestLoop(mc cn t) NestLoop(mc cn t ci) HashJoin(mc cn t ci rt) NestLoop(mc cn t ci rt n) NestLoop(mc cn t ci rt n mi) HashJoin(mc cn t ci rt n mi it) NestLoop(mc cn t ci rt n mi it chn) NestLoop(mc cn t ci rt n mi it chn an) Leading((((((((((mc cn) t) ci) rt) n) mi) it) chn) an)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
  movie_companies AS mc,
   movie_info AS mi,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(uncredited)', '(as Maria Gil)', '(as E. Obraztsova)', '(as MercÃ¨ Vila)', '(as Kevin Beggs)')
AND cn.country_code = '[us]'
AND it.info = 'release dates'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%2%' OR mc.note LIKE '%)%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%0%' OR mi.info LIKE '%3%')
AND n.gender = 'f'
AND n.name LIKE '%K%'
AND rt.role = 'actress'
AND t.production_year BETWEEN 1973 AND 2010;",99,/*+  SeqScan(mc) SeqScan(cn) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) SeqScan(it) IndexOnlyScan(chn char_name_pkey) IndexOnlyScan(an person_id_aka_name) HashJoin(mc cn) NestLoop(mc cn t) NestLoop(mc cn t ci) HashJoin(mc cn t ci rt) NestLoop(mc cn t ci rt n) NestLoop(mc cn t ci rt n mi) HashJoin(mc cn t ci rt n mi it) NestLoop(mc cn t ci rt n mi it chn) NestLoop(mc cn t ci rt n mi it chn an) Leading((((((((((mc cn) t) ci) rt) n) mi) it) chn) an)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
  movie_companies AS mc,
   movie_info AS mi,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(as Whitby Hertford)', '(as Vince Voyer)', '(as Raquel Divine)', '(as Roas Almirall)', '(the caretaker)')
AND cn.country_code = '[us]'
AND it.info = 'quotes'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%2%' OR mc.note LIKE '%(%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%e%' OR mi.info LIKE '%e%')
AND n.gender = 'm'
AND n.name LIKE '%W%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1928 AND 2004;",99,/*+  SeqScan(mc) SeqScan(cn) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) SeqScan(it) IndexOnlyScan(chn char_name_pkey) IndexOnlyScan(an person_id_aka_name) HashJoin(mc cn) NestLoop(mc cn t) NestLoop(mc cn t ci) HashJoin(mc cn t ci rt) NestLoop(mc cn t ci rt n) NestLoop(mc cn t ci rt n mi) HashJoin(mc cn t ci rt n mi it) NestLoop(mc cn t ci rt n mi it chn) NestLoop(mc cn t ci rt n mi it chn an) Leading((((((((((mc cn) t) ci) rt) n) mi) it) chn) an)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
  movie_companies AS mc,
   movie_info AS mi,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(as Whitby Hertford)', '(as The Roots)', '(as Ann Fonsayn)', '(as Alica Monet)', '(as Chisco Amdo)')
AND cn.country_code = '[au]'
AND it.info = 'weekend gross'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%)%' OR mc.note LIKE '%(%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%7%' OR mi.info LIKE '%9%')
AND n.gender = 'm'
AND n.name LIKE '%o%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1896 AND 2010;",99,/*+  SeqScan(mc) SeqScan(cn) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) SeqScan(it) IndexOnlyScan(chn char_name_pkey) IndexOnlyScan(an person_id_aka_name) HashJoin(mc cn) NestLoop(mc cn t) NestLoop(mc cn t ci) HashJoin(mc cn t ci rt) NestLoop(mc cn t ci rt n) NestLoop(mc cn t ci rt n mi) HashJoin(mc cn t ci rt n mi it) NestLoop(mc cn t ci rt n mi it chn) NestLoop(mc cn t ci rt n mi it chn an) Leading((((((((((mc cn) t) ci) rt) n) mi) it) chn) an)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
  movie_companies AS mc,
   movie_info AS mi,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(as Whitby Hertford)', '(as Ahmet Zirek)', '(as Ken Moss)', '(office accountant)', '(as Joseph Sladek)')
AND cn.country_code = '[at]'
AND it.info = 'release dates'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%1%' OR mc.note LIKE '%u%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%1%' OR mi.info LIKE '%t%')
AND n.gender = 'm'
AND n.name LIKE '%r%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1955 AND 2003;",99,/*+  SeqScan(mc) SeqScan(cn) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) SeqScan(it) IndexOnlyScan(chn char_name_pkey) IndexOnlyScan(an person_id_aka_name) HashJoin(mc cn) NestLoop(mc cn t) NestLoop(mc cn t ci) HashJoin(mc cn t ci rt) NestLoop(mc cn t ci rt n) NestLoop(mc cn t ci rt n mi) HashJoin(mc cn t ci rt n mi it) NestLoop(mc cn t ci rt n mi it chn) NestLoop(mc cn t ci rt n mi it chn an) Leading((((((((((mc cn) t) ci) rt) n) mi) it) chn) an)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
  movie_companies AS mc,
   movie_info AS mi,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(as Charles Tamburro)', '(as Aggy)', '(as Harve Selsby)', '(as M. Gres)', '(# 11)')
AND cn.country_code = '[nl]'
AND it.info = 'printed media reviews'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%D%' OR mc.note LIKE '%)%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%e%' OR mi.info LIKE '%e%')
AND n.gender = 'm'
AND n.name LIKE '%u%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1975 AND 2004;",99,/*+  SeqScan(mc) SeqScan(cn) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) SeqScan(it) IndexOnlyScan(chn char_name_pkey) IndexOnlyScan(an person_id_aka_name) HashJoin(mc cn) NestLoop(mc cn t) NestLoop(mc cn t ci) HashJoin(mc cn t ci rt) NestLoop(mc cn t ci rt n) NestLoop(mc cn t ci rt n mi) HashJoin(mc cn t ci rt n mi it) NestLoop(mc cn t ci rt n mi it chn) NestLoop(mc cn t ci rt n mi it chn an) Leading((((((((((mc cn) t) ci) rt) n) mi) it) chn) an)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
  movie_companies AS mc,
   movie_info AS mi,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(segment ""La Signora Ci Marcia"")', '(as Ãgi DÃ¡vid)', '(as Rey HernÃ¡ndez)', '(as Sandip)', '(writer ""Sandmann"")')
AND cn.country_code = '[es]'
AND it.info = 'plot'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%d%' OR mc.note LIKE '%i%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%,%' OR mi.info LIKE '%C%')
AND n.gender = 'm'
AND n.name LIKE '%W%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1925 AND 1967;",99,/*+  SeqScan(mc) SeqScan(cn) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) SeqScan(it) IndexOnlyScan(chn char_name_pkey) IndexOnlyScan(an person_id_aka_name) HashJoin(mc cn) NestLoop(mc cn t) NestLoop(mc cn t ci) HashJoin(mc cn t ci rt) NestLoop(mc cn t ci rt n) NestLoop(mc cn t ci rt n mi) HashJoin(mc cn t ci rt n mi it) NestLoop(mc cn t ci rt n mi it chn) NestLoop(mc cn t ci rt n mi it chn an) Leading((((((((((mc cn) t) ci) rt) n) mi) it) chn) an)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
  movie_companies AS mc,
   movie_info AS mi,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(as Whitby Hertford)', '(as FÃ©lix Franchy)', '(night watch)', '(as Sneila)', '(as Sue Garay)')
AND cn.country_code = '[us]'
AND it.info = 'gross'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%3%' OR mc.note LIKE '%A%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%(%' OR mi.info LIKE '%,%')
AND n.gender = 'm'
AND n.name LIKE '%,%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1917 AND 1995;",7,/*+  SeqScan(ci) IndexOnlyScan(an person_id_aka_name) SeqScan(rt) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexScan(mi movie_id_movie_info) SeqScan(it) IndexOnlyScan(chn char_name_pkey) IndexScan(n name_pkey) IndexScan(t title_pkey) NestLoop(ci an) HashJoin(ci an rt) NestLoop(ci an rt mc) NestLoop(ci an rt mc cn) NestLoop(ci an rt mc cn mi) HashJoin(ci an rt mc cn mi it) NestLoop(ci an rt mc cn mi it chn) NestLoop(ci an rt mc cn mi it chn n) NestLoop(ci an rt mc cn mi it chn n t) Leading((((((((((ci an) rt) mc) cn) mi) it) chn) n) t)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
  movie_companies AS mc,
   movie_info AS mi,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(as Whitby Hertford)', '(novel ""Hannibal"")', '(as S. Gunathilake)', '(as Bartek Ruda)', '(as E. Gaman)')
AND cn.country_code = '[at]'
AND it.info = 'trivia'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%a%' OR mc.note LIKE '%e%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%)%' OR mi.info LIKE '%)%')
AND n.gender = 'm'
AND n.name LIKE '%r%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1908 AND 2005;",99,/*+  SeqScan(mc) SeqScan(cn) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) SeqScan(it) IndexOnlyScan(chn char_name_pkey) IndexOnlyScan(an person_id_aka_name) HashJoin(mc cn) NestLoop(mc cn t) NestLoop(mc cn t ci) HashJoin(mc cn t ci rt) NestLoop(mc cn t ci rt n) NestLoop(mc cn t ci rt n mi) HashJoin(mc cn t ci rt n mi it) NestLoop(mc cn t ci rt n mi it chn) NestLoop(mc cn t ci rt n mi it chn an) Leading((((((((((mc cn) t) ci) rt) n) mi) it) chn) an)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
  movie_companies AS mc,
   movie_info AS mi,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(as Whitby Hertford)', '(as Layla)', '(as Ye. Tsymbal)', '(as Hossein Mahjub)', '(as Karim Latiff)')
AND cn.country_code = '[au]'
AND it.info = 'languages'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%V%' OR mc.note LIKE '%l%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%h%' OR mi.info LIKE '%g%')
AND n.gender = 'm'
AND n.name LIKE '%H%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1959 AND 2010;",99,/*+  SeqScan(mc) SeqScan(cn) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) SeqScan(it) IndexOnlyScan(chn char_name_pkey) IndexOnlyScan(an person_id_aka_name) HashJoin(mc cn) NestLoop(mc cn t) NestLoop(mc cn t ci) HashJoin(mc cn t ci rt) NestLoop(mc cn t ci rt n) NestLoop(mc cn t ci rt n mi) HashJoin(mc cn t ci rt n mi it) NestLoop(mc cn t ci rt n mi it chn) NestLoop(mc cn t ci rt n mi it chn an) Leading((((((((((mc cn) t) ci) rt) n) mi) it) chn) an)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
  movie_companies AS mc,
   movie_info AS mi,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(as Whitby Hertford)', '(as Moniya)', '(as Arturo Feliz)', '(as Cat Woman)', '(as Lavar Veale)')
AND cn.country_code = '[nl]'
AND it.info = 'gross'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%r%' OR mc.note LIKE '%l%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%y%' OR mi.info LIKE '%0%')
AND n.gender = 'm'
AND n.name LIKE '%e%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1898 AND 2014;",99,/*+  SeqScan(mc) SeqScan(cn) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) SeqScan(it) IndexOnlyScan(chn char_name_pkey) IndexOnlyScan(an person_id_aka_name) HashJoin(mc cn) NestLoop(mc cn t) NestLoop(mc cn t ci) HashJoin(mc cn t ci rt) NestLoop(mc cn t ci rt n) NestLoop(mc cn t ci rt n mi) HashJoin(mc cn t ci rt n mi it) NestLoop(mc cn t ci rt n mi it chn) NestLoop(mc cn t ci rt n mi it chn an) Leading((((((((((mc cn) t) ci) rt) n) mi) it) chn) an)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
  movie_companies AS mc,
   movie_info AS mi,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(as Charles Tamburro)', '(as Rosalia Triana)', '(as Nina Derek)', '(as Bella Marie)', '(as Sudagar Singh)')
AND cn.country_code = '[nl]'
AND it.info = 'weekend gross'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%u%' OR mc.note LIKE '%)%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%y%' OR mi.info LIKE '%1%')
AND n.gender = 'm'
AND n.name LIKE '%r%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1944 AND 2004;",99,/*+  SeqScan(mc) SeqScan(cn) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) SeqScan(it) IndexOnlyScan(chn char_name_pkey) IndexOnlyScan(an person_id_aka_name) HashJoin(mc cn) NestLoop(mc cn t) NestLoop(mc cn t ci) HashJoin(mc cn t ci rt) NestLoop(mc cn t ci rt n) NestLoop(mc cn t ci rt n mi) HashJoin(mc cn t ci rt n mi it) NestLoop(mc cn t ci rt n mi it chn) NestLoop(mc cn t ci rt n mi it chn an) Leading((((((((((mc cn) t) ci) rt) n) mi) it) chn) an)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
  movie_companies AS mc,
   movie_info AS mi,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(as Whitby Hertford)', '(as Ata Hayati)', '(as Peter Wimmer)', '(as Dr. H. Pal)', '(as Andria Patet)')
AND cn.country_code = '[nl]'
AND it.info = 'opening weekend'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%N%' OR mc.note LIKE '%)%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%1%' OR mi.info LIKE '%y%')
AND n.gender = 'm'
AND n.name LIKE '%h%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1950 AND 2001;",99,/*+  SeqScan(mc) SeqScan(cn) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) SeqScan(it) IndexOnlyScan(chn char_name_pkey) IndexOnlyScan(an person_id_aka_name) HashJoin(mc cn) NestLoop(mc cn t) NestLoop(mc cn t ci) HashJoin(mc cn t ci rt) NestLoop(mc cn t ci rt n) NestLoop(mc cn t ci rt n mi) HashJoin(mc cn t ci rt n mi it) NestLoop(mc cn t ci rt n mi it chn) NestLoop(mc cn t ci rt n mi it chn an) Leading((((((((((mc cn) t) ci) rt) n) mi) it) chn) an)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
  movie_companies AS mc,
   movie_info AS mi,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(as Whitby Hertford)', '(as Gregor Trass)', '(video conversion)', '(as Gigliola Reyna)', '(as Juan Doria)')
AND cn.country_code = '[au]'
AND it.info = 'trivia'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%)%' OR mc.note LIKE '%H%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%a%' OR mi.info LIKE '%e%')
AND n.gender = 'm'
AND n.name LIKE '%r%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1979 AND 2008;",99,/*+  SeqScan(mc) SeqScan(cn) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) SeqScan(it) IndexOnlyScan(chn char_name_pkey) IndexOnlyScan(an person_id_aka_name) HashJoin(mc cn) NestLoop(mc cn t) NestLoop(mc cn t ci) HashJoin(mc cn t ci rt) NestLoop(mc cn t ci rt n) NestLoop(mc cn t ci rt n mi) HashJoin(mc cn t ci rt n mi it) NestLoop(mc cn t ci rt n mi it chn) NestLoop(mc cn t ci rt n mi it chn an) Leading((((((((((mc cn) t) ci) rt) n) mi) it) chn) an)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
  movie_companies AS mc,
   movie_info AS mi,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(as Charles Tamburro)', '(trade marketer)', '(as Dr Jago Cooper)', '(as Iain Hanmore)', '(as Alex McCaslin)')
AND cn.country_code = '[gb]'
AND it.info = 'other literature'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%8%' OR mc.note LIKE '%i%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%""%' OR mi.info LIKE '%K%')
AND n.gender = 'm'
AND n.name LIKE '%r%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1921 AND 2020;",99,/*+  SeqScan(mc) SeqScan(cn) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) SeqScan(it) IndexOnlyScan(chn char_name_pkey) IndexOnlyScan(an person_id_aka_name) HashJoin(mc cn) NestLoop(mc cn t) NestLoop(mc cn t ci) HashJoin(mc cn t ci rt) NestLoop(mc cn t ci rt n) NestLoop(mc cn t ci rt n mi) HashJoin(mc cn t ci rt n mi it) NestLoop(mc cn t ci rt n mi it chn) NestLoop(mc cn t ci rt n mi it chn an) Leading((((((((((mc cn) t) ci) rt) n) mi) it) chn) an)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
  movie_companies AS mc,
   movie_info AS mi,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(as Charles Tamburro)', '(as Nancy DeMayo)', '(as Greg Kane)', '(as Luce Premer)', '(as Lynn)')
AND cn.country_code = '[gb]'
AND it.info = 'taglines'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%i%' OR mc.note LIKE '%e%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%l%' OR mi.info LIKE '%h%')
AND n.gender = 'm'
AND n.name LIKE '%m%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1946 AND 2015;",99,/*+  SeqScan(mc) SeqScan(cn) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) SeqScan(it) IndexOnlyScan(chn char_name_pkey) IndexOnlyScan(an person_id_aka_name) HashJoin(mc cn) NestLoop(mc cn t) NestLoop(mc cn t ci) HashJoin(mc cn t ci rt) NestLoop(mc cn t ci rt n) NestLoop(mc cn t ci rt n mi) HashJoin(mc cn t ci rt n mi it) NestLoop(mc cn t ci rt n mi it chn) NestLoop(mc cn t ci rt n mi it chn an) Leading((((((((((mc cn) t) ci) rt) n) mi) it) chn) an)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
  movie_companies AS mc,
   movie_info AS mi,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(as Whitby Hertford)', '(as Nina McKinney)', '(as James Horan)', '(as Joao Fernandez)', '(as Mike Chapman)')
AND cn.country_code = '[au]'
AND it.info = 'release dates'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%1%' OR mc.note LIKE '%i%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%n%' OR mi.info LIKE '%a%')
AND n.gender = 'm'
AND n.name LIKE '%o%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1917 AND 2017;",99,/*+  SeqScan(mc) SeqScan(cn) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) SeqScan(it) IndexOnlyScan(chn char_name_pkey) IndexOnlyScan(an person_id_aka_name) HashJoin(mc cn) NestLoop(mc cn t) NestLoop(mc cn t ci) HashJoin(mc cn t ci rt) NestLoop(mc cn t ci rt n) NestLoop(mc cn t ci rt n mi) HashJoin(mc cn t ci rt n mi it) NestLoop(mc cn t ci rt n mi it chn) NestLoop(mc cn t ci rt n mi it chn an) Leading((((((((((mc cn) t) ci) rt) n) mi) it) chn) an)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
  movie_companies AS mc,
   movie_info AS mi,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(as Whitby Hertford)', '(epk: sound)', '(as Hans A. Lettow)', '(as Sau-yin Lee)', '(as J.F. Gurbindo)')
AND cn.country_code = '[au]'
AND it.info = 'quotes'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%S%' OR mc.note LIKE '%u%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%a%' OR mi.info LIKE '%e%')
AND n.gender = 'm'
AND n.name LIKE '%W%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1987 AND 2016;",99,/*+  SeqScan(mc) SeqScan(cn) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) SeqScan(it) IndexOnlyScan(chn char_name_pkey) IndexOnlyScan(an person_id_aka_name) HashJoin(mc cn) NestLoop(mc cn t) NestLoop(mc cn t ci) HashJoin(mc cn t ci rt) NestLoop(mc cn t ci rt n) NestLoop(mc cn t ci rt n mi) HashJoin(mc cn t ci rt n mi it) NestLoop(mc cn t ci rt n mi it chn) NestLoop(mc cn t ci rt n mi it chn an) Leading((((((((((mc cn) t) ci) rt) n) mi) it) chn) an)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
  movie_companies AS mc,
   movie_info AS mi,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(as Whitby Hertford)', '(as Hynynen)', '(as Hyr)', '(as Ãric Sampieri)', '(French passenger)')
AND cn.country_code = '[gb]'
AND it.info = 'goofs'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%e%' OR mc.note LIKE '%v%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%n%' OR mi.info LIKE '%i%')
AND n.gender = 'm'
AND n.name LIKE '%W%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1941 AND 2010;",99,/*+  SeqScan(mc) SeqScan(cn) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) SeqScan(it) IndexOnlyScan(chn char_name_pkey) IndexOnlyScan(an person_id_aka_name) HashJoin(mc cn) NestLoop(mc cn t) NestLoop(mc cn t ci) HashJoin(mc cn t ci rt) NestLoop(mc cn t ci rt n) NestLoop(mc cn t ci rt n mi) HashJoin(mc cn t ci rt n mi it) NestLoop(mc cn t ci rt n mi it chn) NestLoop(mc cn t ci rt n mi it chn an) Leading((((((((((mc cn) t) ci) rt) n) mi) it) chn) an)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
  movie_companies AS mc,
   movie_info AS mi,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(as Charles Tamburro)', '(DK)', '(as Siu-keung Tsui)', '(as Lucas Rooney)', '(as Suzkaiden)')
AND cn.country_code = '[gb]'
AND it.info = 'screenplay-teleplay'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%)%' OR mc.note LIKE '%K%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%m%' OR mi.info LIKE '%W%')
AND n.gender = 'm'
AND n.name LIKE '%m%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1928 AND 2012;",99,/*+  SeqScan(mc) SeqScan(cn) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) SeqScan(it) IndexOnlyScan(chn char_name_pkey) IndexOnlyScan(an person_id_aka_name) HashJoin(mc cn) NestLoop(mc cn t) NestLoop(mc cn t ci) HashJoin(mc cn t ci rt) NestLoop(mc cn t ci rt n) NestLoop(mc cn t ci rt n mi) HashJoin(mc cn t ci rt n mi it) NestLoop(mc cn t ci rt n mi it chn) NestLoop(mc cn t ci rt n mi it chn an) Leading((((((((((mc cn) t) ci) rt) n) mi) it) chn) an)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
  movie_companies AS mc,
   movie_info AS mi,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(as Charles Tamburro)', '(as T. Murina)', '(as Benny Farber)', '(as Benry)', '(Russian Student)')
AND cn.country_code = '[se]'
AND it.info = 'opening weekend'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%d%' OR mc.note LIKE '%e%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%2%' OR mi.info LIKE '%e%')
AND n.gender = 'm'
AND n.name LIKE '%h%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1952 AND 2014;",99,/*+  SeqScan(mc) SeqScan(cn) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) SeqScan(it) IndexOnlyScan(chn char_name_pkey) IndexOnlyScan(an person_id_aka_name) HashJoin(mc cn) NestLoop(mc cn t) NestLoop(mc cn t ci) HashJoin(mc cn t ci rt) NestLoop(mc cn t ci rt n) NestLoop(mc cn t ci rt n mi) HashJoin(mc cn t ci rt n mi it) NestLoop(mc cn t ci rt n mi it chn) NestLoop(mc cn t ci rt n mi it chn an) Leading((((((((((mc cn) t) ci) rt) n) mi) it) chn) an)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
  movie_companies AS mc,
   movie_info AS mi,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(as Whitby Hertford)', '(as B. HÃ¼bner)', '(as I. Tolchanov)', '(as Rex Rienets)', '(as Harsha Vardhan)')
AND cn.country_code = '[us]'
AND it.info = 'trivia'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%i%' OR mc.note LIKE '%)%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%o%' OR mi.info LIKE '%t%')
AND n.gender = 'm'
AND n.name LIKE '%i%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1908 AND 2011;",99,/*+  SeqScan(mc) SeqScan(cn) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) SeqScan(it) IndexOnlyScan(chn char_name_pkey) IndexOnlyScan(an person_id_aka_name) HashJoin(mc cn) NestLoop(mc cn t) NestLoop(mc cn t ci) HashJoin(mc cn t ci rt) NestLoop(mc cn t ci rt n) NestLoop(mc cn t ci rt n mi) HashJoin(mc cn t ci rt n mi it) NestLoop(mc cn t ci rt n mi it chn) NestLoop(mc cn t ci rt n mi it chn an) Leading((((((((((mc cn) t) ci) rt) n) mi) it) chn) an)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
  movie_companies AS mc,
   movie_info AS mi,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(as Andrea Miltnerova)', '(as Eric Delabarre)', '(as Yasha Louie)', '(as Sven PrÃ¼ver)', '(as Zia Moyheddin)')
AND cn.country_code = '[fi]'
AND it.info = 'tech info'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%0%' OR mc.note LIKE '%0%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%5%' OR mi.info LIKE '%C%')
AND n.gender = 'f'
AND n.name LIKE '%i%'
AND rt.role = 'actress'
AND t.production_year BETWEEN 1961 AND 2015;",99,/*+  SeqScan(mc) SeqScan(cn) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) SeqScan(it) IndexOnlyScan(chn char_name_pkey) IndexOnlyScan(an person_id_aka_name) HashJoin(mc cn) NestLoop(mc cn t) NestLoop(mc cn t ci) HashJoin(mc cn t ci rt) NestLoop(mc cn t ci rt n) NestLoop(mc cn t ci rt n mi) HashJoin(mc cn t ci rt n mi it) NestLoop(mc cn t ci rt n mi it chn) NestLoop(mc cn t ci rt n mi it chn an) Leading((((((((((mc cn) t) ci) rt) n) mi) it) chn) an)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
  movie_companies AS mc,
   movie_info AS mi,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(as Charles Tamburro)', '(as Johnny Tyrrell)', '(as Trouble Royale)', '(as A. Chemodurov)', '(as Anne Hauger)')
AND cn.country_code = '[gb]'
AND it.info = 'trivia'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%)%' OR mc.note LIKE '%c%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%e%' OR mi.info LIKE '%h%')
AND n.gender = 'm'
AND n.name LIKE '%,%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1987 AND 2001;",99,/*+  SeqScan(mc) SeqScan(cn) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) SeqScan(it) IndexOnlyScan(chn char_name_pkey) IndexOnlyScan(an person_id_aka_name) HashJoin(mc cn) NestLoop(mc cn t) NestLoop(mc cn t ci) HashJoin(mc cn t ci rt) NestLoop(mc cn t ci rt n) NestLoop(mc cn t ci rt n mi) HashJoin(mc cn t ci rt n mi it) NestLoop(mc cn t ci rt n mi it chn) NestLoop(mc cn t ci rt n mi it chn an) Leading((((((((((mc cn) t) ci) rt) n) mi) it) chn) an)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
  movie_companies AS mc,
   movie_info AS mi,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(uncredited)', '(as Linc Foster)', '(as Courtney Palm)', '(as Susan Canelly)', '(as Bernado Jativa)')
AND cn.country_code = '[de]'
AND it.info = 'tech info'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%0%' OR mc.note LIKE '%0%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%M%' OR mi.info LIKE '%3%')
AND n.gender = 'f'
AND n.name LIKE '%s%'
AND rt.role = 'actress'
AND t.production_year BETWEEN 1948 AND 2011;",99,/*+  SeqScan(mc) SeqScan(cn) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) SeqScan(it) IndexOnlyScan(chn char_name_pkey) IndexOnlyScan(an person_id_aka_name) HashJoin(mc cn) NestLoop(mc cn t) NestLoop(mc cn t ci) HashJoin(mc cn t ci rt) NestLoop(mc cn t ci rt n) NestLoop(mc cn t ci rt n mi) HashJoin(mc cn t ci rt n mi it) NestLoop(mc cn t ci rt n mi it chn) NestLoop(mc cn t ci rt n mi it chn an) Leading((((((((((mc cn) t) ci) rt) n) mi) it) chn) an)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
  movie_companies AS mc,
   movie_info AS mi,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(as Whitby Hertford)', '(as Chris Petit)', '(as Cliff Thompson)', '(as Sam Matambo)', '(as FaberhaftGuth)')
AND cn.country_code = '[gb]'
AND it.info = 'release dates'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%9%' OR mc.note LIKE '%c%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%U%' OR mi.info LIKE '%2%')
AND n.gender = 'm'
AND n.name LIKE '%W%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1937 AND 2007;",99,/*+  SeqScan(mc) SeqScan(cn) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) SeqScan(it) IndexOnlyScan(chn char_name_pkey) IndexOnlyScan(an person_id_aka_name) HashJoin(mc cn) NestLoop(mc cn t) NestLoop(mc cn t ci) HashJoin(mc cn t ci rt) NestLoop(mc cn t ci rt n) NestLoop(mc cn t ci rt n mi) HashJoin(mc cn t ci rt n mi it) NestLoop(mc cn t ci rt n mi it chn) NestLoop(mc cn t ci rt n mi it chn an) Leading((((((((((mc cn) t) ci) rt) n) mi) it) chn) an)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
  movie_companies AS mc,
   movie_info AS mi,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(as Andrea Miltnerova)', '(as Jason Hardiman)', '(as Mariam Cooper)', '(as Hussenot)', '(chum Dodo)')
AND cn.country_code = '[gr]'
AND it.info = 'tech info'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%m%' OR mc.note LIKE '%m%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%d%' OR mi.info LIKE '%L%')
AND n.gender = 'f'
AND n.name LIKE '%d%'
AND rt.role = 'actress'
AND t.production_year BETWEEN 1958 AND 2013;",7,/*+  SeqScan(ci) IndexOnlyScan(an person_id_aka_name) SeqScan(rt) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexScan(mi movie_id_movie_info) SeqScan(it) IndexOnlyScan(chn char_name_pkey) IndexScan(n name_pkey) IndexScan(t title_pkey) NestLoop(ci an) HashJoin(ci an rt) NestLoop(ci an rt mc) NestLoop(ci an rt mc cn) NestLoop(ci an rt mc cn mi) HashJoin(ci an rt mc cn mi it) NestLoop(ci an rt mc cn mi it chn) NestLoop(ci an rt mc cn mi it chn n) NestLoop(ci an rt mc cn mi it chn n t) Leading((((((((((ci an) rt) mc) cn) mi) it) chn) n) t)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
  movie_companies AS mc,
   movie_info AS mi,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(as Whitby Hertford)', '(as Rob Davis)', '(as Mehdi Zit)', '(stand-in: Paikea)', '(as Juan Zaizar)')
AND cn.country_code = '[us]'
AND it.info = 'rentals'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%(%' OR mc.note LIKE '%)%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%3%' OR mi.info LIKE '%(%')
AND n.gender = 'm'
AND n.name LIKE '%o%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1903 AND 2012;",99,/*+  SeqScan(mc) SeqScan(cn) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) SeqScan(it) IndexOnlyScan(chn char_name_pkey) IndexOnlyScan(an person_id_aka_name) HashJoin(mc cn) NestLoop(mc cn t) NestLoop(mc cn t ci) HashJoin(mc cn t ci rt) NestLoop(mc cn t ci rt n) NestLoop(mc cn t ci rt n mi) HashJoin(mc cn t ci rt n mi it) NestLoop(mc cn t ci rt n mi it chn) NestLoop(mc cn t ci rt n mi it chn an) Leading((((((((((mc cn) t) ci) rt) n) mi) it) chn) an)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
  movie_companies AS mc,
   movie_info AS mi,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(uncredited)', '(as Monika Tajma)', '(as A. Inozemtsev)', '(as Dave Buzzota)', '(as Celia de Burgh)')
AND cn.country_code = '[de]'
AND it.info = 'release dates'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%n%' OR mc.note LIKE '%t%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%e%' OR mi.info LIKE '%U%')
AND n.gender = 'm'
AND n.name LIKE '%y%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1938 AND 2015;",99,/*+  SeqScan(mc) SeqScan(cn) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) SeqScan(it) IndexOnlyScan(chn char_name_pkey) IndexOnlyScan(an person_id_aka_name) HashJoin(mc cn) NestLoop(mc cn t) NestLoop(mc cn t ci) HashJoin(mc cn t ci rt) NestLoop(mc cn t ci rt n) NestLoop(mc cn t ci rt n mi) HashJoin(mc cn t ci rt n mi it) NestLoop(mc cn t ci rt n mi it chn) NestLoop(mc cn t ci rt n mi it chn an) Leading((((((((((mc cn) t) ci) rt) n) mi) it) chn) an)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
  movie_companies AS mc,
   movie_info AS mi,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(as Whitby Hertford)', '(as Sara B. Charno)', '(as Jaques Ardnt)', '(as Maria Swallowa)', '(Dad)')
AND cn.country_code = '[gb]'
AND it.info = 'trivia'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%d%' OR mc.note LIKE '%K%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%o%' OR mi.info LIKE '%n%')
AND n.gender = 'm'
AND n.name LIKE '%e%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1967 AND 2012;",99,/*+  SeqScan(mc) SeqScan(cn) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) SeqScan(it) IndexOnlyScan(chn char_name_pkey) IndexOnlyScan(an person_id_aka_name) HashJoin(mc cn) NestLoop(mc cn t) NestLoop(mc cn t ci) HashJoin(mc cn t ci rt) NestLoop(mc cn t ci rt n) NestLoop(mc cn t ci rt n mi) HashJoin(mc cn t ci rt n mi it) NestLoop(mc cn t ci rt n mi it chn) NestLoop(mc cn t ci rt n mi it chn an) Leading((((((((((mc cn) t) ci) rt) n) mi) it) chn) an)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
  movie_companies AS mc,
   movie_info AS mi,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(as Whitby Hertford)', '(as Begonia Plaza)', '(as Gavin Mac Leod)', '(as Paul Mark)', '(as Karon Riley)')
AND cn.country_code = '[ar]'
AND it.info = 'release dates'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%(%' OR mc.note LIKE '%1%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%M%' OR mi.info LIKE '%a%')
AND n.gender = 'm'
AND n.name LIKE '%,%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1929 AND 1994;",99,/*+  SeqScan(mc) SeqScan(cn) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) SeqScan(it) IndexOnlyScan(chn char_name_pkey) IndexOnlyScan(an person_id_aka_name) HashJoin(mc cn) NestLoop(mc cn t) NestLoop(mc cn t ci) HashJoin(mc cn t ci rt) NestLoop(mc cn t ci rt n) NestLoop(mc cn t ci rt n mi) HashJoin(mc cn t ci rt n mi it) NestLoop(mc cn t ci rt n mi it chn) NestLoop(mc cn t ci rt n mi it chn an) Leading((((((((((mc cn) t) ci) rt) n) mi) it) chn) an)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
  movie_companies AS mc,
   movie_info AS mi,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(as Whitby Hertford)', '(as Henry Potter)', '(as Derrick Brady)', '(Rradio-Canada)', '(story) (as DLZ)')
AND cn.country_code = '[us]'
AND it.info = 'trivia'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%t%' OR mc.note LIKE '%t%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%t%' OR mi.info LIKE '%u%')
AND n.gender = 'm'
AND n.name LIKE '%d%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1888 AND 2020;",99,/*+  SeqScan(mc) SeqScan(cn) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) SeqScan(it) IndexOnlyScan(chn char_name_pkey) IndexOnlyScan(an person_id_aka_name) HashJoin(mc cn) NestLoop(mc cn t) NestLoop(mc cn t ci) HashJoin(mc cn t ci rt) NestLoop(mc cn t ci rt n) NestLoop(mc cn t ci rt n mi) HashJoin(mc cn t ci rt n mi it) NestLoop(mc cn t ci rt n mi it chn) NestLoop(mc cn t ci rt n mi it chn an) Leading((((((((((mc cn) t) ci) rt) n) mi) it) chn) an)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
  movie_companies AS mc,
   movie_info AS mi,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(as Whitby Hertford)', '(as Witold Biegaj)', '(as Jack Sheehan)', '(as Hristo Mitskov)', '(Jocko)')
AND cn.country_code = '[nl]'
AND it.info = 'quotes'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%d%' OR mc.note LIKE '%r%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%i%' OR mi.info LIKE '%a%')
AND n.gender = 'm'
AND n.name LIKE '%f%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1987 AND 2010;",99,/*+  SeqScan(mc) SeqScan(cn) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) SeqScan(it) IndexOnlyScan(chn char_name_pkey) IndexOnlyScan(an person_id_aka_name) HashJoin(mc cn) NestLoop(mc cn t) NestLoop(mc cn t ci) HashJoin(mc cn t ci rt) NestLoop(mc cn t ci rt n) NestLoop(mc cn t ci rt n mi) HashJoin(mc cn t ci rt n mi it) NestLoop(mc cn t ci rt n mi it chn) NestLoop(mc cn t ci rt n mi it chn an) Leading((((((((((mc cn) t) ci) rt) n) mi) it) chn) an)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
  movie_companies AS mc,
   movie_info AS mi,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(as Benjamin Torrijo)', '(Ep 22-24)', '(as Olga Obradov)', '(as Dr. Brent Hale)', '(as Kitty Lester)')
AND cn.country_code = '[us]'
AND it.info = 'certificates'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%U%' OR mc.note LIKE '%u%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%M%' OR mi.info LIKE '%2%')
AND n.gender = 'm'
AND n.name LIKE '%r%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1987 AND 2011;",99,/*+  SeqScan(mc) SeqScan(cn) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) SeqScan(it) IndexOnlyScan(chn char_name_pkey) IndexOnlyScan(an person_id_aka_name) HashJoin(mc cn) NestLoop(mc cn t) NestLoop(mc cn t ci) HashJoin(mc cn t ci rt) NestLoop(mc cn t ci rt n) NestLoop(mc cn t ci rt n mi) HashJoin(mc cn t ci rt n mi it) NestLoop(mc cn t ci rt n mi it chn) NestLoop(mc cn t ci rt n mi it chn an) Leading((((((((((mc cn) t) ci) rt) n) mi) it) chn) an)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
  movie_companies AS mc,
   movie_info AS mi,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(as Andrea Miltnerova)', '(police services)', '(Axeman)', '(as Jos Pijls)', '(as Chike Okonkwo)')
AND cn.country_code = '[sg]'
AND it.info = 'genres'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%t%' OR mc.note LIKE '%1%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%t%' OR mi.info LIKE '%a%')
AND n.gender = 'f'
AND n.name LIKE '%e%'
AND rt.role = 'actress'
AND t.production_year BETWEEN 1974 AND 2013;",99,/*+  SeqScan(mc) SeqScan(cn) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) SeqScan(it) IndexOnlyScan(chn char_name_pkey) IndexOnlyScan(an person_id_aka_name) HashJoin(mc cn) NestLoop(mc cn t) NestLoop(mc cn t ci) HashJoin(mc cn t ci rt) NestLoop(mc cn t ci rt n) NestLoop(mc cn t ci rt n mi) HashJoin(mc cn t ci rt n mi it) NestLoop(mc cn t ci rt n mi it chn) NestLoop(mc cn t ci rt n mi it chn an) Leading((((((((((mc cn) t) ci) rt) n) mi) it) chn) an)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
  movie_companies AS mc,
   movie_info AS mi,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(as Charles Tamburro)', '(epk: camera)', '(as Allan Royce)', '(as Wilhem Lund)', '(as Ian Babilee)')
AND cn.country_code = '[gb]'
AND it.info = 'taglines'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%y%' OR mc.note LIKE '%s%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%o%' OR mi.info LIKE '%a%')
AND n.gender = 'm'
AND n.name LIKE '%m%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1892 AND 2014;",99,/*+  SeqScan(mc) SeqScan(cn) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) SeqScan(it) IndexOnlyScan(chn char_name_pkey) IndexOnlyScan(an person_id_aka_name) HashJoin(mc cn) NestLoop(mc cn t) NestLoop(mc cn t ci) HashJoin(mc cn t ci rt) NestLoop(mc cn t ci rt n) NestLoop(mc cn t ci rt n mi) HashJoin(mc cn t ci rt n mi it) NestLoop(mc cn t ci rt n mi it chn) NestLoop(mc cn t ci rt n mi it chn an) Leading((((((((((mc cn) t) ci) rt) n) mi) it) chn) an)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
  movie_companies AS mc,
   movie_info AS mi,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(as Cesar Burgos)', '(Bee Keeper)', '(as Chen Yung Yu)', '(accountant: SAFC)', '(as Miss Dowling)')
AND cn.country_code = '[us]'
AND it.info = 'genres'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%b%' OR mc.note LIKE '%A%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%a%' OR mi.info LIKE '%a%')
AND n.gender = 'm'
AND n.name LIKE '%g%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1950 AND 2008;",99,/*+  SeqScan(mc) SeqScan(cn) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) SeqScan(it) IndexOnlyScan(chn char_name_pkey) IndexOnlyScan(an person_id_aka_name) HashJoin(mc cn) NestLoop(mc cn t) NestLoop(mc cn t ci) HashJoin(mc cn t ci rt) NestLoop(mc cn t ci rt n) NestLoop(mc cn t ci rt n mi) HashJoin(mc cn t ci rt n mi it) NestLoop(mc cn t ci rt n mi it chn) NestLoop(mc cn t ci rt n mi it chn an) Leading((((((((((mc cn) t) ci) rt) n) mi) it) chn) an)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
  movie_companies AS mc,
   movie_info AS mi,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(as Whitby Hertford)', '(as Rick Callinan)', '(as Nino Celeste)', '(as Zh. Bolotova)', '(2004 Spec Pilot 2)')
AND cn.country_code = '[gb]'
AND it.info = 'release dates'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%o%' OR mc.note LIKE '%(%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%r%' OR mi.info LIKE '%1%')
AND n.gender = 'm'
AND n.name LIKE '%r%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1928 AND 2016;",99,/*+  SeqScan(mc) SeqScan(cn) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) SeqScan(it) IndexOnlyScan(chn char_name_pkey) IndexOnlyScan(an person_id_aka_name) HashJoin(mc cn) NestLoop(mc cn t) NestLoop(mc cn t ci) HashJoin(mc cn t ci rt) NestLoop(mc cn t ci rt n) NestLoop(mc cn t ci rt n mi) HashJoin(mc cn t ci rt n mi it) NestLoop(mc cn t ci rt n mi it chn) NestLoop(mc cn t ci rt n mi it chn an) Leading((((((((((mc cn) t) ci) rt) n) mi) it) chn) an)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
  movie_companies AS mc,
   movie_info AS mi,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(as Charles Tamburro)', '(baby)', '(as Joey DiGaetano)', '(as Devin Rodger)', '(as Lubo Zitta)')
AND cn.country_code = '[fr]'
AND it.info = 'trivia'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%t%' OR mc.note LIKE '%9%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%h%' OR mi.info LIKE '%.%')
AND n.gender = 'm'
AND n.name LIKE '%a%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1962 AND 1998;",99,/*+  SeqScan(mc) SeqScan(cn) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) SeqScan(it) IndexOnlyScan(chn char_name_pkey) IndexOnlyScan(an person_id_aka_name) HashJoin(mc cn) NestLoop(mc cn t) NestLoop(mc cn t ci) HashJoin(mc cn t ci rt) NestLoop(mc cn t ci rt n) NestLoop(mc cn t ci rt n mi) HashJoin(mc cn t ci rt n mi it) NestLoop(mc cn t ci rt n mi it chn) NestLoop(mc cn t ci rt n mi it chn an) Leading((((((((((mc cn) t) ci) rt) n) mi) it) chn) an)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
  movie_companies AS mc,
   movie_info AS mi,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(as Whitby Hertford)', '(as Ho Sik Pak)', '(as Karen Chandler)', '(as Peter Windrum)', '(as Corinne Lorain)')
AND cn.country_code = '[nl]'
AND it.info = 'trivia'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%t%' OR mc.note LIKE '%1%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%h%' OR mi.info LIKE '%e%')
AND n.gender = 'm'
AND n.name LIKE '%t%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1917 AND 2012;",99,/*+  SeqScan(mc) SeqScan(cn) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) SeqScan(it) IndexOnlyScan(chn char_name_pkey) IndexOnlyScan(an person_id_aka_name) HashJoin(mc cn) NestLoop(mc cn t) NestLoop(mc cn t ci) HashJoin(mc cn t ci rt) NestLoop(mc cn t ci rt n) NestLoop(mc cn t ci rt n mi) HashJoin(mc cn t ci rt n mi it) NestLoop(mc cn t ci rt n mi it chn) NestLoop(mc cn t ci rt n mi it chn an) Leading((((((((((mc cn) t) ci) rt) n) mi) it) chn) an)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
  movie_companies AS mc,
   movie_info AS mi,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(as Charles Tamburro)', '(as Jascha Richter)', '(as Alma Yvonne)', '(as Joe de la Cruz)', '(as Pam Cook)')
AND cn.country_code = '[nl]'
AND it.info = 'filming dates'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%a%' OR mc.note LIKE '%(%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%r%' OR mi.info LIKE '%r%')
AND n.gender = 'm'
AND n.name LIKE '%,%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1888 AND 2014;",99,/*+  SeqScan(mc) SeqScan(cn) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) SeqScan(it) IndexOnlyScan(chn char_name_pkey) IndexOnlyScan(an person_id_aka_name) HashJoin(mc cn) NestLoop(mc cn t) NestLoop(mc cn t ci) HashJoin(mc cn t ci rt) NestLoop(mc cn t ci rt n) NestLoop(mc cn t ci rt n mi) HashJoin(mc cn t ci rt n mi it) NestLoop(mc cn t ci rt n mi it chn) NestLoop(mc cn t ci rt n mi it chn an) Leading((((((((((mc cn) t) ci) rt) n) mi) it) chn) an)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
  movie_companies AS mc,
   movie_info AS mi,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(as Whitby Hertford)', '(novel ""Strachy"")', '(Hell Sequence)', '(as Pat Wright)', '(as Jessica Pillar)')
AND cn.country_code = '[gb]'
AND it.info = 'release dates'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%s%' OR mc.note LIKE '%4%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%:%' OR mi.info LIKE '%:%')
AND n.gender = 'm'
AND n.name LIKE '%i%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1947 AND 2010;",99,/*+  SeqScan(mc) SeqScan(cn) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) SeqScan(it) IndexOnlyScan(chn char_name_pkey) IndexOnlyScan(an person_id_aka_name) HashJoin(mc cn) NestLoop(mc cn t) NestLoop(mc cn t ci) HashJoin(mc cn t ci rt) NestLoop(mc cn t ci rt n) NestLoop(mc cn t ci rt n mi) HashJoin(mc cn t ci rt n mi it) NestLoop(mc cn t ci rt n mi it chn) NestLoop(mc cn t ci rt n mi it chn an) Leading((((((((((mc cn) t) ci) rt) n) mi) it) chn) an)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
  movie_companies AS mc,
   movie_info AS mi,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(as Andrea Miltnerova)', '(as Carol Cook)', '(as A. Oblakov)', '(novel ""Rya-Rya"")', '(Ana''s journal)')
AND cn.country_code = '[sg]'
AND it.info = 'tech info'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%g%' OR mc.note LIKE '%1%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%t%' OR mi.info LIKE '%l%')
AND n.gender = 'f'
AND n.name LIKE '%,%'
AND rt.role = 'actress'
AND t.production_year BETWEEN 1977 AND 2016;",7,/*+  SeqScan(ci) IndexOnlyScan(an person_id_aka_name) SeqScan(rt) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexScan(mi movie_id_movie_info) SeqScan(it) IndexOnlyScan(chn char_name_pkey) IndexScan(n name_pkey) IndexScan(t title_pkey) NestLoop(ci an) HashJoin(ci an rt) NestLoop(ci an rt mc) NestLoop(ci an rt mc cn) NestLoop(ci an rt mc cn mi) HashJoin(ci an rt mc cn mi it) NestLoop(ci an rt mc cn mi it chn) NestLoop(ci an rt mc cn mi it chn n) NestLoop(ci an rt mc cn mi it chn n t) Leading((((((((((ci an) rt) mc) cn) mi) it) chn) n) t)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
  movie_companies AS mc,
   movie_info AS mi,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(as Whitby Hertford)', '(stand-in: Stewart)', '(as Shan Shang)', '(as Shigehito Miki)', '(gun expert)')
AND cn.country_code = '[at]'
AND it.info = 'goofs'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%1%' OR mc.note LIKE '%)%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%h%' OR mi.info LIKE '%a%')
AND n.gender = 'm'
AND n.name LIKE '%r%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1949 AND 2007;",99,/*+  SeqScan(mc) SeqScan(cn) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) SeqScan(it) IndexOnlyScan(chn char_name_pkey) IndexOnlyScan(an person_id_aka_name) HashJoin(mc cn) NestLoop(mc cn t) NestLoop(mc cn t ci) HashJoin(mc cn t ci rt) NestLoop(mc cn t ci rt n) NestLoop(mc cn t ci rt n mi) HashJoin(mc cn t ci rt n mi it) NestLoop(mc cn t ci rt n mi it chn) NestLoop(mc cn t ci rt n mi it chn an) Leading((((((((((mc cn) t) ci) rt) n) mi) it) chn) an)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
  movie_companies AS mc,
   movie_info AS mi,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(as Whitby Hertford)', '(as Garbage)', '(as Sharon needles)', '(as Ryan M. Main)', '(play ""Jeff"")')
AND cn.country_code = '[nl]'
AND it.info = 'goofs'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%a%' OR mc.note LIKE '%?%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%W%' OR mi.info LIKE '%h%')
AND n.gender = 'm'
AND n.name LIKE '%t%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1984 AND 2007;",99,/*+  SeqScan(mc) SeqScan(cn) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) SeqScan(it) IndexOnlyScan(chn char_name_pkey) IndexOnlyScan(an person_id_aka_name) HashJoin(mc cn) NestLoop(mc cn t) NestLoop(mc cn t ci) HashJoin(mc cn t ci rt) NestLoop(mc cn t ci rt n) NestLoop(mc cn t ci rt n mi) HashJoin(mc cn t ci rt n mi it) NestLoop(mc cn t ci rt n mi it chn) NestLoop(mc cn t ci rt n mi it chn an) Leading((((((((((mc cn) t) ci) rt) n) mi) it) chn) an)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
  movie_companies AS mc,
   movie_info AS mi,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(as Whitby Hertford)', '(as Sascha Strange)', '(as Otto Ferrari)', '(as Barri Pitersen)', '(as Pam Miras)')
AND cn.country_code = '[ar]'
AND it.info = 'release dates'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%(%' OR mc.note LIKE '%n%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%:%' OR mi.info LIKE '%A%')
AND n.gender = 'm'
AND n.name LIKE '%t%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1937 AND 1994;",99,/*+  SeqScan(mc) SeqScan(cn) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) SeqScan(it) IndexOnlyScan(chn char_name_pkey) IndexOnlyScan(an person_id_aka_name) HashJoin(mc cn) NestLoop(mc cn t) NestLoop(mc cn t ci) HashJoin(mc cn t ci rt) NestLoop(mc cn t ci rt n) NestLoop(mc cn t ci rt n mi) HashJoin(mc cn t ci rt n mi it) NestLoop(mc cn t ci rt n mi it chn) NestLoop(mc cn t ci rt n mi it chn an) Leading((((((((((mc cn) t) ci) rt) n) mi) it) chn) an)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
  movie_companies AS mc,
   movie_info AS mi,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(as Charles Tamburro)', '(as Alison Rosen)', '(as Mohamed Kamara)', '(as Alvaro Moreno)', '(as Bourbon)')
AND cn.country_code = '[gb]'
AND it.info = 'book'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%1%' OR mc.note LIKE '%1%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%g%' OR mi.info LIKE '%M%')
AND n.gender = 'm'
AND n.name LIKE '%r%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1933 AND 2005;",99,/*+  SeqScan(mc) SeqScan(cn) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) SeqScan(it) IndexOnlyScan(chn char_name_pkey) IndexOnlyScan(an person_id_aka_name) HashJoin(mc cn) NestLoop(mc cn t) NestLoop(mc cn t ci) HashJoin(mc cn t ci rt) NestLoop(mc cn t ci rt n) NestLoop(mc cn t ci rt n mi) HashJoin(mc cn t ci rt n mi it) NestLoop(mc cn t ci rt n mi it chn) NestLoop(mc cn t ci rt n mi it chn an) Leading((((((((((mc cn) t) ci) rt) n) mi) it) chn) an)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
  movie_companies AS mc,
   movie_info AS mi,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(as Whitby Hertford)', '(as James Caviezel)', '(as Daisy CariÃ±o)', '(as Frank De Niro)', '(as Shabbaz Khan)')
AND cn.country_code = '[us]'
AND it.info = 'goofs'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%r%' OR mc.note LIKE '%(%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%o%' OR mi.info LIKE '%p%')
AND n.gender = 'm'
AND n.name LIKE '%H%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1898 AND 2006;",7,/*+  SeqScan(ci) IndexOnlyScan(an person_id_aka_name) SeqScan(rt) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexScan(mi movie_id_movie_info) SeqScan(it) IndexOnlyScan(chn char_name_pkey) IndexScan(n name_pkey) IndexScan(t title_pkey) NestLoop(ci an) HashJoin(ci an rt) NestLoop(ci an rt mc) NestLoop(ci an rt mc cn) NestLoop(ci an rt mc cn mi) HashJoin(ci an rt mc cn mi it) NestLoop(ci an rt mc cn mi it chn) NestLoop(ci an rt mc cn mi it chn n) NestLoop(ci an rt mc cn mi it chn n t) Leading((((((((((ci an) rt) mc) cn) mi) it) chn) n) t)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
  movie_companies AS mc,
   movie_info AS mi,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(as Whitby Hertford)', '(as Sergei Passov)', '(as Rudi Bergmann)', '(as Mehsud Dedovic)', '(as Nicole Roberts)')
AND cn.country_code = '[at]'
AND it.info = 'trivia'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%3%' OR mc.note LIKE '%a%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%u%' OR mi.info LIKE '%v%')
AND n.gender = 'm'
AND n.name LIKE '%W%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1894 AND 2013;",99,/*+  SeqScan(mc) SeqScan(cn) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) SeqScan(it) IndexOnlyScan(chn char_name_pkey) IndexOnlyScan(an person_id_aka_name) HashJoin(mc cn) NestLoop(mc cn t) NestLoop(mc cn t ci) HashJoin(mc cn t ci rt) NestLoop(mc cn t ci rt n) NestLoop(mc cn t ci rt n mi) HashJoin(mc cn t ci rt n mi it) NestLoop(mc cn t ci rt n mi it chn) NestLoop(mc cn t ci rt n mi it chn an) Leading((((((((((mc cn) t) ci) rt) n) mi) it) chn) an)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
  movie_companies AS mc,
   movie_info AS mi,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(as Charles Tamburro)', '(as Alex LÃ¶ffler)', '(as Dice)', '(checkpoint)', '(as Ivaylo Mimchev)')
AND cn.country_code = '[nl]'
AND it.info = 'opening weekend'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%0%' OR mc.note LIKE '%0%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%,%' OR mi.info LIKE '%1%')
AND n.gender = 'm'
AND n.name LIKE '%r%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1925 AND 1992;",99,/*+  SeqScan(mc) SeqScan(cn) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) SeqScan(it) IndexOnlyScan(chn char_name_pkey) IndexOnlyScan(an person_id_aka_name) HashJoin(mc cn) NestLoop(mc cn t) NestLoop(mc cn t ci) HashJoin(mc cn t ci rt) NestLoop(mc cn t ci rt n) NestLoop(mc cn t ci rt n mi) HashJoin(mc cn t ci rt n mi it) NestLoop(mc cn t ci rt n mi it chn) NestLoop(mc cn t ci rt n mi it chn an) Leading((((((((((mc cn) t) ci) rt) n) mi) it) chn) an)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
  movie_companies AS mc,
   movie_info AS mi,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(as Andrea Miltnerova)', '(as Bozena Frait)', '(as Pvt. Adams)', '(as Linda Styles)', '(weather)')
AND cn.country_code = '[nl]'
AND it.info = 'gross'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%0%' OR mc.note LIKE '%D%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%Â%' OR mi.info LIKE '%e%')
AND n.gender = 'f'
AND n.name LIKE '%M%'
AND rt.role = 'actress'
AND t.production_year BETWEEN 1937 AND 2012;",99,/*+  SeqScan(mc) SeqScan(cn) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) SeqScan(it) IndexOnlyScan(chn char_name_pkey) IndexOnlyScan(an person_id_aka_name) HashJoin(mc cn) NestLoop(mc cn t) NestLoop(mc cn t ci) HashJoin(mc cn t ci rt) NestLoop(mc cn t ci rt n) NestLoop(mc cn t ci rt n mi) HashJoin(mc cn t ci rt n mi it) NestLoop(mc cn t ci rt n mi it chn) NestLoop(mc cn t ci rt n mi it chn an) Leading((((((((((mc cn) t) ci) rt) n) mi) it) chn) an)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
  movie_companies AS mc,
   movie_info AS mi,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(as Charles Tamburro)', '(as Dani Segev)', '(researcher/writer)', '(The Poodle)', '(Gauri''s dad)')
AND cn.country_code = '[nl]'
AND it.info = 'rentals'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%r%' OR mc.note LIKE '%d%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%2%' OR mi.info LIKE '%(%')
AND n.gender = 'm'
AND n.name LIKE '%a%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1952 AND 2004;",99,/*+  SeqScan(mc) SeqScan(cn) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) SeqScan(it) IndexOnlyScan(chn char_name_pkey) IndexOnlyScan(an person_id_aka_name) HashJoin(mc cn) NestLoop(mc cn t) NestLoop(mc cn t ci) HashJoin(mc cn t ci rt) NestLoop(mc cn t ci rt n) NestLoop(mc cn t ci rt n mi) HashJoin(mc cn t ci rt n mi it) NestLoop(mc cn t ci rt n mi it chn) NestLoop(mc cn t ci rt n mi it chn an) Leading((((((((((mc cn) t) ci) rt) n) mi) it) chn) an)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
  movie_companies AS mc,
   movie_info AS mi,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(as Whitby Hertford)', '(as Kathrin)', '(as Ãlisa Servier)', '(as Shastri)', '(as Marion Nixon)')
AND cn.country_code = '[ar]'
AND it.info = 'release dates'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%c%' OR mc.note LIKE '%t%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%l%' OR mi.info LIKE '%d%')
AND n.gender = 'm'
AND n.name LIKE '%H%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1987 AND 2017;",99,/*+  SeqScan(mc) SeqScan(cn) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) SeqScan(it) IndexOnlyScan(chn char_name_pkey) IndexOnlyScan(an person_id_aka_name) HashJoin(mc cn) NestLoop(mc cn t) NestLoop(mc cn t ci) HashJoin(mc cn t ci rt) NestLoop(mc cn t ci rt n) NestLoop(mc cn t ci rt n mi) HashJoin(mc cn t ci rt n mi it) NestLoop(mc cn t ci rt n mi it chn) NestLoop(mc cn t ci rt n mi it chn an) Leading((((((((((mc cn) t) ci) rt) n) mi) it) chn) an)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
  movie_companies AS mc,
   movie_info AS mi,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(2003 Pioneer version)', '(as Laura Altan)', '(as Gen. Weidling)', '(as Dorka)', '(as Inge Steinbach)')
AND cn.country_code = '[gb]'
AND it.info = 'budget'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%9%' OR mc.note LIKE '%(%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%,%' OR mi.info LIKE '%0%')
AND n.gender = 'm'
AND n.name LIKE '%,%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1896 AND 2001;",99,/*+  SeqScan(mc) SeqScan(cn) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) SeqScan(it) IndexOnlyScan(chn char_name_pkey) IndexOnlyScan(an person_id_aka_name) HashJoin(mc cn) NestLoop(mc cn t) NestLoop(mc cn t ci) HashJoin(mc cn t ci rt) NestLoop(mc cn t ci rt n) NestLoop(mc cn t ci rt n mi) HashJoin(mc cn t ci rt n mi it) NestLoop(mc cn t ci rt n mi it chn) NestLoop(mc cn t ci rt n mi it chn an) Leading((((((((((mc cn) t) ci) rt) n) mi) it) chn) an)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
  movie_companies AS mc,
   movie_info AS mi,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(as Charles Tamburro)', '(2007-2011)', '(bikini wrangler)', '(as Iler Kochi)', '(as B. Rytsarev)')
AND cn.country_code = '[br]'
AND it.info = 'rentals'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%a%' OR mc.note LIKE '%(%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%0%' OR mi.info LIKE '%8%')
AND n.gender = 'm'
AND n.name LIKE '%r%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1880 AND 1995;",99,/*+  SeqScan(mc) SeqScan(cn) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) SeqScan(it) IndexOnlyScan(chn char_name_pkey) IndexOnlyScan(an person_id_aka_name) HashJoin(mc cn) NestLoop(mc cn t) NestLoop(mc cn t ci) HashJoin(mc cn t ci rt) NestLoop(mc cn t ci rt n) NestLoop(mc cn t ci rt n mi) HashJoin(mc cn t ci rt n mi it) NestLoop(mc cn t ci rt n mi it chn) NestLoop(mc cn t ci rt n mi it chn an) Leading((((((((((mc cn) t) ci) rt) n) mi) it) chn) an)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
  movie_companies AS mc,
   movie_info AS mi,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(as Whitby Hertford)', '(cooking advisor)', '(cultural advisor)', '(as Tami Mor Wyman)', '(trailer producer)')
AND cn.country_code = '[us]'
AND it.info = 'weekend gross'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%(%' OR mc.note LIKE '%9%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%m%' OR mi.info LIKE '%9%')
AND n.gender = 'm'
AND n.name LIKE '%t%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1936 AND 2007;",99,/*+  SeqScan(mc) SeqScan(cn) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) SeqScan(it) IndexOnlyScan(chn char_name_pkey) IndexOnlyScan(an person_id_aka_name) HashJoin(mc cn) NestLoop(mc cn t) NestLoop(mc cn t ci) HashJoin(mc cn t ci rt) NestLoop(mc cn t ci rt n) NestLoop(mc cn t ci rt n mi) HashJoin(mc cn t ci rt n mi it) NestLoop(mc cn t ci rt n mi it chn) NestLoop(mc cn t ci rt n mi it chn an) Leading((((((((((mc cn) t) ci) rt) n) mi) it) chn) an)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
  movie_companies AS mc,
   movie_info AS mi,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(as Whitby Hertford)', '(as Louis LeRay)', '(as Rafael Soques)', '(as Karl Gustavson)', '(as Phil Ryder)')
AND cn.country_code = '[gb]'
AND it.info = 'admissions'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%a%' OR mc.note LIKE '%s%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%9%' OR mi.info LIKE '%a%')
AND n.gender = 'm'
AND n.name LIKE '%r%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1979 AND 2005;",99,/*+  SeqScan(mc) SeqScan(cn) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) SeqScan(it) IndexOnlyScan(chn char_name_pkey) IndexOnlyScan(an person_id_aka_name) HashJoin(mc cn) NestLoop(mc cn t) NestLoop(mc cn t ci) HashJoin(mc cn t ci rt) NestLoop(mc cn t ci rt n) NestLoop(mc cn t ci rt n mi) HashJoin(mc cn t ci rt n mi it) NestLoop(mc cn t ci rt n mi it chn) NestLoop(mc cn t ci rt n mi it chn an) Leading((((((((((mc cn) t) ci) rt) n) mi) it) chn) an)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
  movie_companies AS mc,
   movie_info AS mi,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(as Charles Tamburro)', '(as L. Pushi)', '(as Master Babji)', '(as RJ Baretto)', '(as Todes)')
AND cn.country_code = '[gb]'
AND it.info = 'book'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%i%' OR mc.note LIKE '%a%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%,%' OR mi.info LIKE '%""%')
AND n.gender = 'm'
AND n.name LIKE '%l%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1982 AND 1998;",99,/*+  SeqScan(mc) SeqScan(cn) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) SeqScan(it) IndexOnlyScan(chn char_name_pkey) IndexOnlyScan(an person_id_aka_name) HashJoin(mc cn) NestLoop(mc cn t) NestLoop(mc cn t ci) HashJoin(mc cn t ci rt) NestLoop(mc cn t ci rt n) NestLoop(mc cn t ci rt n mi) HashJoin(mc cn t ci rt n mi it) NestLoop(mc cn t ci rt n mi it chn) NestLoop(mc cn t ci rt n mi it chn an) Leading((((((((((mc cn) t) ci) rt) n) mi) it) chn) an)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
  movie_companies AS mc,
   movie_info AS mi,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(uncredited)', '(as Mike Marcantel)', '(as A. Dulay)', '(poor white trash)', '(as Ronnie Blevens)')
AND cn.country_code = '[ar]'
AND it.info = 'printed media reviews'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%e%' OR mc.note LIKE '%(%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%,%' OR mi.info LIKE '%,%')
AND n.gender = 'f'
AND n.name LIKE '%A%'
AND rt.role = 'actress'
AND t.production_year BETWEEN 1984 AND 2003;",99,/*+  SeqScan(mc) SeqScan(cn) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) SeqScan(it) IndexOnlyScan(chn char_name_pkey) IndexOnlyScan(an person_id_aka_name) HashJoin(mc cn) NestLoop(mc cn t) NestLoop(mc cn t ci) HashJoin(mc cn t ci rt) NestLoop(mc cn t ci rt n) NestLoop(mc cn t ci rt n mi) HashJoin(mc cn t ci rt n mi it) NestLoop(mc cn t ci rt n mi it chn) NestLoop(mc cn t ci rt n mi it chn an) Leading((((((((((mc cn) t) ci) rt) n) mi) it) chn) an)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
  movie_companies AS mc,
   movie_info AS mi,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(as Whitby Hertford)', '(logger) (season 2)', '(as LucÃ­a Cabrera)', '(as Carlos Gomez)', '(as Lj. Drazenovic)')
AND cn.country_code = '[nl]'
AND it.info = 'budget'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%h%' OR mc.note LIKE '%(%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%0%' OR mi.info LIKE '%6%')
AND n.gender = 'm'
AND n.name LIKE '%,%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1954 AND 1994;",99,/*+  SeqScan(mc) SeqScan(cn) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) SeqScan(it) IndexOnlyScan(chn char_name_pkey) IndexOnlyScan(an person_id_aka_name) HashJoin(mc cn) NestLoop(mc cn t) NestLoop(mc cn t ci) HashJoin(mc cn t ci rt) NestLoop(mc cn t ci rt n) NestLoop(mc cn t ci rt n mi) HashJoin(mc cn t ci rt n mi it) NestLoop(mc cn t ci rt n mi it chn) NestLoop(mc cn t ci rt n mi it chn an) Leading((((((((((mc cn) t) ci) rt) n) mi) it) chn) an)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
  movie_companies AS mc,
   movie_info AS mi,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(as Whitby Hertford)', '(Cisjordania)', '(as Matt McNeil)', '(as Carlos Pana)', '(as Santa Harami)')
AND cn.country_code = '[nl]'
AND it.info = 'quotes'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%d%' OR mc.note LIKE '%a%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%U%' OR mi.info LIKE '%t%')
AND n.gender = 'm'
AND n.name LIKE '%W%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1987 AND 2020;",99,/*+  SeqScan(mc) SeqScan(cn) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) SeqScan(it) IndexOnlyScan(chn char_name_pkey) IndexOnlyScan(an person_id_aka_name) HashJoin(mc cn) NestLoop(mc cn t) NestLoop(mc cn t ci) HashJoin(mc cn t ci rt) NestLoop(mc cn t ci rt n) NestLoop(mc cn t ci rt n mi) HashJoin(mc cn t ci rt n mi it) NestLoop(mc cn t ci rt n mi it chn) NestLoop(mc cn t ci rt n mi it chn an) Leading((((((((((mc cn) t) ci) rt) n) mi) it) chn) an)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
  movie_companies AS mc,
   movie_info AS mi,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(as Andrea Miltnerova)', '(as Marjolaine)', '(as Angela Bailey)', '(vessel broker)', '(as Phil Tobus)')
AND cn.country_code = '[nl]'
AND it.info = 'weekend gross'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%)%' OR mc.note LIKE '%)%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%)%' OR mi.info LIKE '%u%')
AND n.gender = 'f'
AND n.name LIKE '%i%'
AND rt.role = 'actress'
AND t.production_year BETWEEN 2004 AND 2012;",99,/*+  SeqScan(mc) SeqScan(cn) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) SeqScan(it) IndexOnlyScan(chn char_name_pkey) IndexOnlyScan(an person_id_aka_name) HashJoin(mc cn) NestLoop(mc cn t) NestLoop(mc cn t ci) HashJoin(mc cn t ci rt) NestLoop(mc cn t ci rt n) NestLoop(mc cn t ci rt n mi) HashJoin(mc cn t ci rt n mi it) NestLoop(mc cn t ci rt n mi it chn) NestLoop(mc cn t ci rt n mi it chn an) Leading((((((((((mc cn) t) ci) rt) n) mi) it) chn) an)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
  movie_companies AS mc,
   movie_info AS mi,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(as Whitby Hertford)', '(finance trainee)', '(medical advice)', '(as Fabiana Gugli)', '(as Betty Howard)')
AND cn.country_code = '[nl]'
AND it.info = 'weekend gross'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%D%' OR mc.note LIKE '%)%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%y%' OR mi.info LIKE '%u%')
AND n.gender = 'm'
AND n.name LIKE '%t%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1963 AND 2000;",99,/*+  SeqScan(mc) SeqScan(cn) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) SeqScan(it) IndexOnlyScan(chn char_name_pkey) IndexOnlyScan(an person_id_aka_name) HashJoin(mc cn) NestLoop(mc cn t) NestLoop(mc cn t ci) HashJoin(mc cn t ci rt) NestLoop(mc cn t ci rt n) NestLoop(mc cn t ci rt n mi) HashJoin(mc cn t ci rt n mi it) NestLoop(mc cn t ci rt n mi it chn) NestLoop(mc cn t ci rt n mi it chn an) Leading((((((((((mc cn) t) ci) rt) n) mi) it) chn) an)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
  movie_companies AS mc,
   movie_info AS mi,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(as Charles Tamburro)', '(as Aran Kumar)', '(as Tex Maynard)', '(as Helen Weer)', '(as Amy Jacobson)')
AND cn.country_code = '[gb]'
AND it.info = 'tech info'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%c%' OR mc.note LIKE '%r%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%P%' OR mi.info LIKE '%F%')
AND n.gender = 'm'
AND n.name LIKE '%h%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1941 AND 1997;",99,/*+  SeqScan(mc) SeqScan(cn) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) SeqScan(it) IndexOnlyScan(chn char_name_pkey) IndexOnlyScan(an person_id_aka_name) HashJoin(mc cn) NestLoop(mc cn t) NestLoop(mc cn t ci) HashJoin(mc cn t ci rt) NestLoop(mc cn t ci rt n) NestLoop(mc cn t ci rt n mi) HashJoin(mc cn t ci rt n mi it) NestLoop(mc cn t ci rt n mi it chn) NestLoop(mc cn t ci rt n mi it chn an) Leading((((((((((mc cn) t) ci) rt) n) mi) it) chn) an)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
  movie_companies AS mc,
   movie_info AS mi,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(as Charles Tamburro)', '(as Larry Schuler)', '(as William White)', '(as Ranata S. Aly)', '(as Biru Robinson)')
AND cn.country_code = '[es]'
AND it.info = 'budget'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%)%' OR mc.note LIKE '%i%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%0%' OR mi.info LIKE '%4%')
AND n.gender = 'm'
AND n.name LIKE '%l%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1932 AND 2012;",99,/*+  SeqScan(mc) SeqScan(cn) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) SeqScan(it) IndexOnlyScan(chn char_name_pkey) IndexOnlyScan(an person_id_aka_name) HashJoin(mc cn) NestLoop(mc cn t) NestLoop(mc cn t ci) HashJoin(mc cn t ci rt) NestLoop(mc cn t ci rt n) NestLoop(mc cn t ci rt n mi) HashJoin(mc cn t ci rt n mi it) NestLoop(mc cn t ci rt n mi it chn) NestLoop(mc cn t ci rt n mi it chn an) Leading((((((((((mc cn) t) ci) rt) n) mi) it) chn) an)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
  movie_companies AS mc,
   movie_info AS mi,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(as Charles Tamburro)', '(as Andy Cryer)', '(teleplay) (2007)', '(as John Warnock)', '(as Pang Lee Chun)')
AND cn.country_code = '[se]'
AND it.info = 'book'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%e%' OR mc.note LIKE '%)%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%""%' OR mi.info LIKE '%k%')
AND n.gender = 'm'
AND n.name LIKE '%s%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1946 AND 2006;",99,/*+  SeqScan(mc) SeqScan(cn) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) SeqScan(it) IndexOnlyScan(chn char_name_pkey) IndexOnlyScan(an person_id_aka_name) HashJoin(mc cn) NestLoop(mc cn t) NestLoop(mc cn t ci) HashJoin(mc cn t ci rt) NestLoop(mc cn t ci rt n) NestLoop(mc cn t ci rt n mi) HashJoin(mc cn t ci rt n mi it) NestLoop(mc cn t ci rt n mi it chn) NestLoop(mc cn t ci rt n mi it chn an) Leading((((((((((mc cn) t) ci) rt) n) mi) it) chn) an)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
  movie_companies AS mc,
   movie_info AS mi,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(as Whitby Hertford)', '(as Pete Hock)', '(novel ""Na boku"")', '(as Matt Crossett)', '(as Roesja Lacunes)')
AND cn.country_code = '[nl]'
AND it.info = 'goofs'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%a%' OR mc.note LIKE '%9%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%t%' OR mi.info LIKE '%e%')
AND n.gender = 'm'
AND n.name LIKE '%h%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1904 AND 2006;",99,/*+  SeqScan(mc) SeqScan(cn) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) SeqScan(it) IndexOnlyScan(chn char_name_pkey) IndexOnlyScan(an person_id_aka_name) HashJoin(mc cn) NestLoop(mc cn t) NestLoop(mc cn t ci) HashJoin(mc cn t ci rt) NestLoop(mc cn t ci rt n) NestLoop(mc cn t ci rt n mi) HashJoin(mc cn t ci rt n mi it) NestLoop(mc cn t ci rt n mi it chn) NestLoop(mc cn t ci rt n mi it chn an) Leading((((((((((mc cn) t) ci) rt) n) mi) it) chn) an)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
  movie_companies AS mc,
   movie_info AS mi,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(as Mike Ragan)', '(""Chewbacca"")', '(as Ron Martin)', '(as Will Packer)', '(Annabelle)')
AND cn.country_code = '[us]'
AND it.info = 'certificates'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%i%' OR mc.note LIKE '%U%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%2%' OR mi.info LIKE '%K%')
AND n.gender = 'm'
AND n.name LIKE '%o%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1935 AND 1991;",99,/*+  SeqScan(mc) SeqScan(cn) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) SeqScan(it) IndexOnlyScan(chn char_name_pkey) IndexOnlyScan(an person_id_aka_name) HashJoin(mc cn) NestLoop(mc cn t) NestLoop(mc cn t ci) HashJoin(mc cn t ci rt) NestLoop(mc cn t ci rt n) NestLoop(mc cn t ci rt n mi) HashJoin(mc cn t ci rt n mi it) NestLoop(mc cn t ci rt n mi it chn) NestLoop(mc cn t ci rt n mi it chn an) Leading((((((((((mc cn) t) ci) rt) n) mi) it) chn) an)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
  movie_companies AS mc,
   movie_info AS mi,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(as Andrea Miltnerova)', '(as V. Nesterov)', '(as Tom Dawson)', '(as Airelle Rebroc)', '(as Paolo Banana)')
AND cn.country_code = '[fi]'
AND it.info = 'runtimes'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%)%' OR mc.note LIKE '%)%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%0%' OR mi.info LIKE '%0%')
AND n.gender = 'f'
AND n.name LIKE '%a%'
AND rt.role = 'actress'
AND t.production_year BETWEEN 1950 AND 2012;",99,/*+  SeqScan(mc) SeqScan(cn) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) SeqScan(it) IndexOnlyScan(chn char_name_pkey) IndexOnlyScan(an person_id_aka_name) HashJoin(mc cn) NestLoop(mc cn t) NestLoop(mc cn t ci) HashJoin(mc cn t ci rt) NestLoop(mc cn t ci rt n) NestLoop(mc cn t ci rt n mi) HashJoin(mc cn t ci rt n mi it) NestLoop(mc cn t ci rt n mi it chn) NestLoop(mc cn t ci rt n mi it chn an) Leading((((((((((mc cn) t) ci) rt) n) mi) it) chn) an)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
  movie_companies AS mc,
   movie_info AS mi,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(as Andrea Miltnerova)', '(efp manager)', '(as Kurt Salden)', '(Dortes far)', '(as Les Silvers)')
AND cn.country_code = '[fi]'
AND it.info = 'tech info'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%a%' OR mc.note LIKE '%y%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%1%' OR mi.info LIKE '%A%')
AND n.gender = 'f'
AND n.name LIKE '%l%'
AND rt.role = 'actress'
AND t.production_year BETWEEN 1879 AND 2010;",7,/*+  SeqScan(ci) IndexOnlyScan(an person_id_aka_name) SeqScan(rt) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexScan(mi movie_id_movie_info) SeqScan(it) IndexOnlyScan(chn char_name_pkey) IndexScan(n name_pkey) IndexScan(t title_pkey) NestLoop(ci an) HashJoin(ci an rt) NestLoop(ci an rt mc) NestLoop(ci an rt mc cn) NestLoop(ci an rt mc cn mi) HashJoin(ci an rt mc cn mi it) NestLoop(ci an rt mc cn mi it chn) NestLoop(ci an rt mc cn mi it chn n) NestLoop(ci an rt mc cn mi it chn n t) Leading((((((((((ci an) rt) mc) cn) mi) it) chn) n) t)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
  movie_companies AS mc,
   movie_info AS mi,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(as Whitby Hertford)', '(as Sybil Collier)', '(as Richard Sircom)', '(as Mike Lundin)', '(as Miss Selwynne)')
AND cn.country_code = '[gb]'
AND it.info = 'weekend gross'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%)%' OR mc.note LIKE '%9%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%m%' OR mi.info LIKE '%r%')
AND n.gender = 'm'
AND n.name LIKE '%i%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1964 AND 1999;",99,/*+  SeqScan(mc) SeqScan(cn) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) SeqScan(it) IndexOnlyScan(chn char_name_pkey) IndexOnlyScan(an person_id_aka_name) HashJoin(mc cn) NestLoop(mc cn t) NestLoop(mc cn t ci) HashJoin(mc cn t ci rt) NestLoop(mc cn t ci rt n) NestLoop(mc cn t ci rt n mi) HashJoin(mc cn t ci rt n mi it) NestLoop(mc cn t ci rt n mi it chn) NestLoop(mc cn t ci rt n mi it chn an) Leading((((((((((mc cn) t) ci) rt) n) mi) it) chn) an)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
  movie_companies AS mc,
   movie_info AS mi,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(as Whitby Hertford)', '(as Strahil Dobrev)', '(as Otfried Knorr)', '(as Dino Hodzic)', '(as Dimce Gesevski)')
AND cn.country_code = '[gb]'
AND it.info = 'gross'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%i%' OR mc.note LIKE '%i%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%U%' OR mi.info LIKE '%U%')
AND n.gender = 'm'
AND n.name LIKE '%i%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1939 AND 2002;",99,/*+  SeqScan(mc) SeqScan(cn) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) SeqScan(it) IndexOnlyScan(chn char_name_pkey) IndexOnlyScan(an person_id_aka_name) HashJoin(mc cn) NestLoop(mc cn t) NestLoop(mc cn t ci) HashJoin(mc cn t ci rt) NestLoop(mc cn t ci rt n) NestLoop(mc cn t ci rt n mi) HashJoin(mc cn t ci rt n mi it) NestLoop(mc cn t ci rt n mi it chn) NestLoop(mc cn t ci rt n mi it chn an) Leading((((((((((mc cn) t) ci) rt) n) mi) it) chn) an)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
  movie_companies AS mc,
   movie_info AS mi,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(as Charles Tamburro)', '(as Dr. Steve Yang)', '(as Joel Fithian)', '(as Maxine Elliott)', '(as Kamaya Jones)')
AND cn.country_code = '[fr]'
AND it.info = 'taglines'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%l%' OR mc.note LIKE '%a%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%o%' OR mi.info LIKE '%w%')
AND n.gender = 'm'
AND n.name LIKE '%b%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1938 AND 2000;",99,/*+  SeqScan(mc) SeqScan(cn) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) SeqScan(it) IndexOnlyScan(chn char_name_pkey) IndexOnlyScan(an person_id_aka_name) HashJoin(mc cn) NestLoop(mc cn t) NestLoop(mc cn t ci) HashJoin(mc cn t ci rt) NestLoop(mc cn t ci rt n) NestLoop(mc cn t ci rt n mi) HashJoin(mc cn t ci rt n mi it) NestLoop(mc cn t ci rt n mi it chn) NestLoop(mc cn t ci rt n mi it chn an) Leading((((((((((mc cn) t) ci) rt) n) mi) it) chn) an)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
  movie_companies AS mc,
   movie_info AS mi,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(as Whitby Hertford)', '(as Jeff Druce)', '(as Kasey F. Kirby)', '(as Rex Roth)', '(as Foy Martin)')
AND cn.country_code = '[ar]'
AND it.info = 'trivia'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%e%' OR mc.note LIKE '%1%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%r%' OR mi.info LIKE '%o%')
AND n.gender = 'm'
AND n.name LIKE '%r%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1981 AND 2009;",99,/*+  SeqScan(mc) SeqScan(cn) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) SeqScan(it) IndexOnlyScan(chn char_name_pkey) IndexOnlyScan(an person_id_aka_name) HashJoin(mc cn) NestLoop(mc cn t) NestLoop(mc cn t ci) HashJoin(mc cn t ci rt) NestLoop(mc cn t ci rt n) NestLoop(mc cn t ci rt n mi) HashJoin(mc cn t ci rt n mi it) NestLoop(mc cn t ci rt n mi it chn) NestLoop(mc cn t ci rt n mi it chn an) Leading((((((((((mc cn) t) ci) rt) n) mi) it) chn) an)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
  movie_companies AS mc,
   movie_info AS mi,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(uncredited)', '(as Nancy Trites)', '(assistant medic)', '(April-May 1989)', '(dramatic report)')
AND cn.country_code = '[us]'
AND it.info = 'release dates'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%0%' OR mc.note LIKE '%)%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%a%' OR mi.info LIKE '%r%')
AND n.gender = 'f'
AND n.name LIKE '%s%'
AND rt.role = 'actress'
AND t.production_year BETWEEN 1916 AND 2008;",99,/*+  SeqScan(mc) SeqScan(cn) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) SeqScan(it) IndexOnlyScan(chn char_name_pkey) IndexOnlyScan(an person_id_aka_name) HashJoin(mc cn) NestLoop(mc cn t) NestLoop(mc cn t ci) HashJoin(mc cn t ci rt) NestLoop(mc cn t ci rt n) NestLoop(mc cn t ci rt n mi) HashJoin(mc cn t ci rt n mi it) NestLoop(mc cn t ci rt n mi it chn) NestLoop(mc cn t ci rt n mi it chn an) Leading((((((((((mc cn) t) ci) rt) n) mi) it) chn) an)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
  movie_companies AS mc,
   movie_info AS mi,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(as Charles Tamburro)', '(as Mrudula)', '(as Eila Teikko)', '(as Alfredo Nicola)', '(as Roland Pacis)')
AND cn.country_code = '[br]'
AND it.info = 'opening weekend'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%a%' OR mc.note LIKE '%(%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%9%' OR mi.info LIKE '%1%')
AND n.gender = 'm'
AND n.name LIKE '%e%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1897 AND 2005;",99,/*+  SeqScan(mc) SeqScan(cn) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) SeqScan(it) IndexOnlyScan(chn char_name_pkey) IndexOnlyScan(an person_id_aka_name) HashJoin(mc cn) NestLoop(mc cn t) NestLoop(mc cn t ci) HashJoin(mc cn t ci rt) NestLoop(mc cn t ci rt n) NestLoop(mc cn t ci rt n mi) HashJoin(mc cn t ci rt n mi it) NestLoop(mc cn t ci rt n mi it chn) NestLoop(mc cn t ci rt n mi it chn an) Leading((((((((((mc cn) t) ci) rt) n) mi) it) chn) an)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
  movie_companies AS mc,
   movie_info AS mi,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(as Whitby Hertford)', '(as Karen T. Ahern)', '(2002, 2004-2005)', '(as Javier Cruz)', '(as Torling)')
AND cn.country_code = '[au]'
AND it.info = 'release dates'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%9%' OR mc.note LIKE '%(%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%n%' OR mi.info LIKE '%A%')
AND n.gender = 'm'
AND n.name LIKE '%t%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1938 AND 2014;",99,/*+  SeqScan(mc) SeqScan(cn) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) SeqScan(it) IndexOnlyScan(chn char_name_pkey) IndexOnlyScan(an person_id_aka_name) HashJoin(mc cn) NestLoop(mc cn t) NestLoop(mc cn t ci) HashJoin(mc cn t ci rt) NestLoop(mc cn t ci rt n) NestLoop(mc cn t ci rt n mi) HashJoin(mc cn t ci rt n mi it) NestLoop(mc cn t ci rt n mi it chn) NestLoop(mc cn t ci rt n mi it chn an) Leading((((((((((mc cn) t) ci) rt) n) mi) it) chn) an)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
  movie_companies AS mc,
   movie_info AS mi,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(as Whitby Hertford)', '(as Pam Hart)', '(as Abad Ojuel)', '(as Ko Chun-Kit)', '(as Li Ying Ying)')
AND cn.country_code = '[nl]'
AND it.info = 'release dates'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%(%' OR mc.note LIKE '%S%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%r%' OR mi.info LIKE '%2%')
AND n.gender = 'm'
AND n.name LIKE '%f%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1980 AND 2012;",99,/*+  SeqScan(mc) SeqScan(cn) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) SeqScan(it) IndexOnlyScan(chn char_name_pkey) IndexOnlyScan(an person_id_aka_name) HashJoin(mc cn) NestLoop(mc cn t) NestLoop(mc cn t ci) HashJoin(mc cn t ci rt) NestLoop(mc cn t ci rt n) NestLoop(mc cn t ci rt n mi) HashJoin(mc cn t ci rt n mi it) NestLoop(mc cn t ci rt n mi it chn) NestLoop(mc cn t ci rt n mi it chn an) Leading((((((((((mc cn) t) ci) rt) n) mi) it) chn) an)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
  movie_companies AS mc,
   movie_info AS mi,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(as Whitby Hertford)', '(as E. Solyakov)', '(as PatÃ© de FuÃ¡)', '(as Milos Hlavak)', '(nightclub singer)')
AND cn.country_code = '[us]'
AND it.info = 'weekend gross'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%n%' OR mc.note LIKE '%)%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%(%' OR mi.info LIKE '%y%')
AND n.gender = 'm'
AND n.name LIKE '%,%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1966 AND 2015;",99,/*+  SeqScan(mc) SeqScan(cn) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) SeqScan(it) IndexOnlyScan(chn char_name_pkey) IndexOnlyScan(an person_id_aka_name) HashJoin(mc cn) NestLoop(mc cn t) NestLoop(mc cn t ci) HashJoin(mc cn t ci rt) NestLoop(mc cn t ci rt n) NestLoop(mc cn t ci rt n mi) HashJoin(mc cn t ci rt n mi it) NestLoop(mc cn t ci rt n mi it chn) NestLoop(mc cn t ci rt n mi it chn an) Leading((((((((((mc cn) t) ci) rt) n) mi) it) chn) an)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
  movie_companies AS mc,
   movie_info AS mi,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(as Whitby Hertford)', '(as Barry M. Lando)', '(as Richard Dahm)', '(as Indriati Iskak)', '(as Michele Mais)')
AND cn.country_code = '[nl]'
AND it.info = 'weekend gross'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%?%' OR mc.note LIKE '%s%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%u%' OR mi.info LIKE '%1%')
AND n.gender = 'm'
AND n.name LIKE '%h%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1946 AND 2017;",99,/*+  SeqScan(mc) SeqScan(cn) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) SeqScan(it) IndexOnlyScan(chn char_name_pkey) IndexOnlyScan(an person_id_aka_name) HashJoin(mc cn) NestLoop(mc cn t) NestLoop(mc cn t ci) HashJoin(mc cn t ci rt) NestLoop(mc cn t ci rt n) NestLoop(mc cn t ci rt n mi) HashJoin(mc cn t ci rt n mi it) NestLoop(mc cn t ci rt n mi it chn) NestLoop(mc cn t ci rt n mi it chn an) Leading((((((((((mc cn) t) ci) rt) n) mi) it) chn) an)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
  movie_companies AS mc,
   movie_info AS mi,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(as Charles Tamburro)', '(1996-2004, 2006-)', '(as Oscar Hso)', '(game analyst)', '(as James Carter)')
AND cn.country_code = '[gb]'
AND it.info = 'weekend gross'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%d%' OR mc.note LIKE '%U%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%1%' OR mi.info LIKE '%S%')
AND n.gender = 'm'
AND n.name LIKE '%e%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1923 AND 2019;",99,/*+  SeqScan(mc) SeqScan(cn) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) SeqScan(it) IndexOnlyScan(chn char_name_pkey) IndexOnlyScan(an person_id_aka_name) HashJoin(mc cn) NestLoop(mc cn t) NestLoop(mc cn t ci) HashJoin(mc cn t ci rt) NestLoop(mc cn t ci rt n) NestLoop(mc cn t ci rt n mi) HashJoin(mc cn t ci rt n mi it) NestLoop(mc cn t ci rt n mi it chn) NestLoop(mc cn t ci rt n mi it chn an) Leading((((((((((mc cn) t) ci) rt) n) mi) it) chn) an)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
  movie_companies AS mc,
   movie_info AS mi,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(uncredited)', '(Pinky''s dad)', '(as Bill Brown)', '(as Lalette Reder)', '(as Chiu Tsang Hei)')
AND cn.country_code = '[jp]'
AND it.info = 'release dates'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%l%' OR mc.note LIKE '%a%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%c%' OR mi.info LIKE '%t%')
AND n.gender = 'f'
AND n.name LIKE '%i%'
AND rt.role = 'actress'
AND t.production_year BETWEEN 1995 AND 2006;",99,/*+  SeqScan(mc) SeqScan(cn) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) SeqScan(it) IndexOnlyScan(chn char_name_pkey) IndexOnlyScan(an person_id_aka_name) HashJoin(mc cn) NestLoop(mc cn t) NestLoop(mc cn t ci) HashJoin(mc cn t ci rt) NestLoop(mc cn t ci rt n) NestLoop(mc cn t ci rt n mi) HashJoin(mc cn t ci rt n mi it) NestLoop(mc cn t ci rt n mi it chn) NestLoop(mc cn t ci rt n mi it chn an) Leading((((((((((mc cn) t) ci) rt) n) mi) it) chn) an)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
  movie_companies AS mc,
   movie_info AS mi,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(as Whitby Hertford)', '(as Mr. WC)', '(hippie girl)', '(segment ""The Box"")', '(as Kat Grudzien)')
AND cn.country_code = '[us]'
AND it.info = 'quotes'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%t%' OR mc.note LIKE '%S%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%u%' OR mi.info LIKE '%!%')
AND n.gender = 'm'
AND n.name LIKE '%,%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1880 AND 1996;",99,/*+  SeqScan(mc) SeqScan(cn) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) SeqScan(it) IndexOnlyScan(chn char_name_pkey) IndexOnlyScan(an person_id_aka_name) HashJoin(mc cn) NestLoop(mc cn t) NestLoop(mc cn t ci) HashJoin(mc cn t ci rt) NestLoop(mc cn t ci rt n) NestLoop(mc cn t ci rt n mi) HashJoin(mc cn t ci rt n mi it) NestLoop(mc cn t ci rt n mi it chn) NestLoop(mc cn t ci rt n mi it chn an) Leading((((((((((mc cn) t) ci) rt) n) mi) it) chn) an)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
  movie_companies AS mc,
   movie_info AS mi,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(as Charles Tamburro)', '(as Tabitha Bleu)', '(as J. Nikolic)', '(as Jimmy Nah)', '(segment ""Maxine"")')
AND cn.country_code = '[br]'
AND it.info = 'tech info'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%a%' OR mc.note LIKE '%(%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%m%' OR mi.info LIKE '%M%')
AND n.gender = 'm'
AND n.name LIKE '%a%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1973 AND 1995;",99,/*+  SeqScan(mc) SeqScan(cn) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) SeqScan(it) IndexOnlyScan(chn char_name_pkey) IndexOnlyScan(an person_id_aka_name) HashJoin(mc cn) NestLoop(mc cn t) NestLoop(mc cn t ci) HashJoin(mc cn t ci rt) NestLoop(mc cn t ci rt n) NestLoop(mc cn t ci rt n mi) HashJoin(mc cn t ci rt n mi it) NestLoop(mc cn t ci rt n mi it chn) NestLoop(mc cn t ci rt n mi it chn an) Leading((((((((((mc cn) t) ci) rt) n) mi) it) chn) an)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
  movie_companies AS mc,
   movie_info AS mi,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(as Whitby Hertford)', '(as Michael Amos)', '(support program)', '(as Lirie Lushi)', '(as Paul Rowlston)')
AND cn.country_code = '[nl]'
AND it.info = 'release dates'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%)%' OR mc.note LIKE '%)%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%G%' OR mi.info LIKE '%r%')
AND n.gender = 'm'
AND n.name LIKE '%W%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1979 AND 2019;",99,/*+  SeqScan(mc) SeqScan(cn) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) SeqScan(it) IndexOnlyScan(chn char_name_pkey) IndexOnlyScan(an person_id_aka_name) HashJoin(mc cn) NestLoop(mc cn t) NestLoop(mc cn t ci) HashJoin(mc cn t ci rt) NestLoop(mc cn t ci rt n) NestLoop(mc cn t ci rt n mi) HashJoin(mc cn t ci rt n mi it) NestLoop(mc cn t ci rt n mi it chn) NestLoop(mc cn t ci rt n mi it chn an) Leading((((((((((mc cn) t) ci) rt) n) mi) it) chn) an)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
  movie_companies AS mc,
   movie_info AS mi,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(as Andrea Miltnerova)', '(as E. Dalmases)', '(as Walter Heller)', '(episodes 21, 30)', '(as Zak Priest)')
AND cn.country_code = '[sg]'
AND it.info = 'gross'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%0%' OR mc.note LIKE '%l%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%2%' OR mi.info LIKE '%,%')
AND n.gender = 'f'
AND n.name LIKE '%t%'
AND rt.role = 'actress'
AND t.production_year BETWEEN 1954 AND 2020;",7,/*+  SeqScan(ci) IndexOnlyScan(an person_id_aka_name) SeqScan(rt) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexScan(mi movie_id_movie_info) SeqScan(it) IndexOnlyScan(chn char_name_pkey) IndexScan(n name_pkey) IndexScan(t title_pkey) NestLoop(ci an) HashJoin(ci an rt) NestLoop(ci an rt mc) NestLoop(ci an rt mc cn) NestLoop(ci an rt mc cn mi) HashJoin(ci an rt mc cn mi it) NestLoop(ci an rt mc cn mi it chn) NestLoop(ci an rt mc cn mi it chn n) NestLoop(ci an rt mc cn mi it chn n t) Leading((((((((((ci an) rt) mc) cn) mi) it) chn) n) t)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
  movie_companies AS mc,
   movie_info AS mi,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(as Andrea Miltnerova)', '(as Yuen Kam Lun)', '(as William Amakye)', '(as E. Kolmanovsky)', '(as Maria Arias)')
AND cn.country_code = '[us]'
AND it.info = 'filming dates'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%9%' OR mc.note LIKE '%l%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%8%' OR mi.info LIKE '%8%')
AND n.gender = 'f'
AND n.name LIKE '%r%'
AND rt.role = 'actress'
AND t.production_year BETWEEN 1935 AND 2016;",7,/*+  SeqScan(ci) IndexOnlyScan(an person_id_aka_name) SeqScan(rt) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexScan(mi movie_id_movie_info) SeqScan(it) IndexOnlyScan(chn char_name_pkey) IndexScan(n name_pkey) IndexScan(t title_pkey) NestLoop(ci an) HashJoin(ci an rt) NestLoop(ci an rt mc) NestLoop(ci an rt mc cn) NestLoop(ci an rt mc cn mi) HashJoin(ci an rt mc cn mi it) NestLoop(ci an rt mc cn mi it chn) NestLoop(ci an rt mc cn mi it chn n) NestLoop(ci an rt mc cn mi it chn n t) Leading((((((((((ci an) rt) mc) cn) mi) it) chn) n) t)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
  movie_companies AS mc,
   movie_info AS mi,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(as Andrea Miltnerova)', '(1980-????)', '(still photography)', '(le curÃ©)', '(as R.A. Rikas)')
AND cn.country_code = '[gr]'
AND it.info = 'gross'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%a%' OR mc.note LIKE '%c%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%e%' OR mi.info LIKE '%,%')
AND n.gender = 'f'
AND n.name LIKE '%M%'
AND rt.role = 'actress'
AND t.production_year BETWEEN 1910 AND 2019;",7,/*+  SeqScan(ci) IndexOnlyScan(an person_id_aka_name) SeqScan(rt) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexScan(mi movie_id_movie_info) SeqScan(it) IndexOnlyScan(chn char_name_pkey) IndexScan(n name_pkey) IndexScan(t title_pkey) NestLoop(ci an) HashJoin(ci an rt) NestLoop(ci an rt mc) NestLoop(ci an rt mc cn) NestLoop(ci an rt mc cn mi) HashJoin(ci an rt mc cn mi it) NestLoop(ci an rt mc cn mi it chn) NestLoop(ci an rt mc cn mi it chn n) NestLoop(ci an rt mc cn mi it chn n t) Leading((((((((((ci an) rt) mc) cn) mi) it) chn) n) t)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
  movie_companies AS mc,
   movie_info AS mi,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(as Whitby Hertford)', '(head of F1)', '(as Erno)', '(as Phil Carter)', '(47)')
AND cn.country_code = '[at]'
AND it.info = 'release dates'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%)%' OR mc.note LIKE '%i%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%2%' OR mi.info LIKE '%1%')
AND n.gender = 'm'
AND n.name LIKE '%t%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1921 AND 2016;",99,/*+  SeqScan(mc) SeqScan(cn) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) SeqScan(it) IndexOnlyScan(chn char_name_pkey) IndexOnlyScan(an person_id_aka_name) HashJoin(mc cn) NestLoop(mc cn t) NestLoop(mc cn t ci) HashJoin(mc cn t ci rt) NestLoop(mc cn t ci rt n) NestLoop(mc cn t ci rt n mi) HashJoin(mc cn t ci rt n mi it) NestLoop(mc cn t ci rt n mi it chn) NestLoop(mc cn t ci rt n mi it chn an) Leading((((((((((mc cn) t) ci) rt) n) mi) it) chn) an)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
  movie_companies AS mc,
   movie_info AS mi,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(uncredited)', '(as Chema Barco)', '(on-screen talent)', '(as Gerhard Herter)', '(Idris Price)')
AND cn.country_code = '[de]'
AND it.info = 'release dates'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%e%' OR mc.note LIKE '%e%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%l%' OR mi.info LIKE '%3%')
AND n.gender = 'f'
AND n.name LIKE '%o%'
AND rt.role = 'actress'
AND t.production_year BETWEEN 1879 AND 2010;",99,/*+  SeqScan(mc) SeqScan(cn) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) SeqScan(it) IndexOnlyScan(chn char_name_pkey) IndexOnlyScan(an person_id_aka_name) HashJoin(mc cn) NestLoop(mc cn t) NestLoop(mc cn t ci) HashJoin(mc cn t ci rt) NestLoop(mc cn t ci rt n) NestLoop(mc cn t ci rt n mi) HashJoin(mc cn t ci rt n mi it) NestLoop(mc cn t ci rt n mi it chn) NestLoop(mc cn t ci rt n mi it chn an) Leading((((((((((mc cn) t) ci) rt) n) mi) it) chn) an)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
  movie_companies AS mc,
   movie_info AS mi,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(as Charles Tamburro)', '(segment ""1915"")', '(as Phyllis Diller)', '(as Long)', '(first unit medic)')
AND cn.country_code = '[nl]'
AND it.info = 'tech info'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%(%' OR mc.note LIKE '%(%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%r%' OR mi.info LIKE '%r%')
AND n.gender = 'm'
AND n.name LIKE '%m%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1896 AND 2011;",99,/*+  SeqScan(mc) SeqScan(cn) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) SeqScan(it) IndexOnlyScan(chn char_name_pkey) IndexOnlyScan(an person_id_aka_name) HashJoin(mc cn) NestLoop(mc cn t) NestLoop(mc cn t ci) HashJoin(mc cn t ci rt) NestLoop(mc cn t ci rt n) NestLoop(mc cn t ci rt n mi) HashJoin(mc cn t ci rt n mi it) NestLoop(mc cn t ci rt n mi it chn) NestLoop(mc cn t ci rt n mi it chn an) Leading((((((((((mc cn) t) ci) rt) n) mi) it) chn) an)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
  movie_companies AS mc,
   movie_info AS mi,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(uncredited)', '(as G. Tokadze)', '(as Marcel Moreau)', '(fight instructor)', '(as Laska Winter)')
AND cn.country_code = '[us]'
AND it.info = 'release dates'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%U%' OR mc.note LIKE '%i%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%1%' OR mi.info LIKE '%K%')
AND n.gender = 'm'
AND n.name LIKE '%H%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1889 AND 1968;",99,/*+  SeqScan(mc) SeqScan(cn) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) SeqScan(it) IndexOnlyScan(chn char_name_pkey) IndexOnlyScan(an person_id_aka_name) HashJoin(mc cn) NestLoop(mc cn t) NestLoop(mc cn t ci) HashJoin(mc cn t ci rt) NestLoop(mc cn t ci rt n) NestLoop(mc cn t ci rt n mi) HashJoin(mc cn t ci rt n mi it) NestLoop(mc cn t ci rt n mi it chn) NestLoop(mc cn t ci rt n mi it chn an) Leading((((((((((mc cn) t) ci) rt) n) mi) it) chn) an)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
  movie_companies AS mc,
   movie_info AS mi,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(as Whitby Hertford)', '(as Steve Nijjar)', '(signing)', '(as Carmen Jay)', '(action sequences)')
AND cn.country_code = '[at]'
AND it.info = 'trivia'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%s%' OR mc.note LIKE '%(%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%,%' OR mi.info LIKE '%o%')
AND n.gender = 'm'
AND n.name LIKE '%h%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1888 AND 2015;",99,/*+  SeqScan(mc) SeqScan(cn) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) SeqScan(it) IndexOnlyScan(chn char_name_pkey) IndexOnlyScan(an person_id_aka_name) HashJoin(mc cn) NestLoop(mc cn t) NestLoop(mc cn t ci) HashJoin(mc cn t ci rt) NestLoop(mc cn t ci rt n) NestLoop(mc cn t ci rt n mi) HashJoin(mc cn t ci rt n mi it) NestLoop(mc cn t ci rt n mi it chn) NestLoop(mc cn t ci rt n mi it chn an) Leading((((((((((mc cn) t) ci) rt) n) mi) it) chn) an)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
  movie_companies AS mc,
   movie_info AS mi,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(as Whitby Hertford)', '(as Tania Strecker)', '(segment ""Raul"")', '(as Rammstein)', '(as Bob Irwin)')
AND cn.country_code = '[gb]'
AND it.info = 'release dates'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%(%' OR mc.note LIKE '%)%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%w%' OR mi.info LIKE '%e%')
AND n.gender = 'm'
AND n.name LIKE '%h%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1953 AND 1994;",99,/*+  SeqScan(mc) SeqScan(cn) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) SeqScan(it) IndexOnlyScan(chn char_name_pkey) IndexOnlyScan(an person_id_aka_name) HashJoin(mc cn) NestLoop(mc cn t) NestLoop(mc cn t ci) HashJoin(mc cn t ci rt) NestLoop(mc cn t ci rt n) NestLoop(mc cn t ci rt n mi) HashJoin(mc cn t ci rt n mi it) NestLoop(mc cn t ci rt n mi it chn) NestLoop(mc cn t ci rt n mi it chn an) Leading((((((((((mc cn) t) ci) rt) n) mi) it) chn) an)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
  movie_companies AS mc,
   movie_info AS mi,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(as Whitby Hertford)', '(as Sophie Moon)', '(as George Wood)', '(builder: angels)', '(as Yuuji Oono)')
AND cn.country_code = '[nl]'
AND it.info = 'trivia'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%S%' OR mc.note LIKE '%(%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%c%' OR mi.info LIKE '%n%')
AND n.gender = 'm'
AND n.name LIKE '%t%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1913 AND 2013;",99,/*+  SeqScan(mc) SeqScan(cn) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) SeqScan(it) IndexOnlyScan(chn char_name_pkey) IndexOnlyScan(an person_id_aka_name) HashJoin(mc cn) NestLoop(mc cn t) NestLoop(mc cn t ci) HashJoin(mc cn t ci rt) NestLoop(mc cn t ci rt n) NestLoop(mc cn t ci rt n mi) HashJoin(mc cn t ci rt n mi it) NestLoop(mc cn t ci rt n mi it chn) NestLoop(mc cn t ci rt n mi it chn an) Leading((((((((((mc cn) t) ci) rt) n) mi) it) chn) an)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
  movie_companies AS mc,
   movie_info AS mi,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(as Whitby Hertford)', '(as Chris Phipps)', '(as Aldo Sandrell)', '(as Lynn Green)', '(as A. Porzio)')
AND cn.country_code = '[at]'
AND it.info = 'trivia'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%(%' OR mc.note LIKE '%t%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%m%' OR mi.info LIKE '%a%')
AND n.gender = 'm'
AND n.name LIKE '%i%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1957 AND 2006;",99,/*+  SeqScan(mc) SeqScan(cn) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) SeqScan(it) IndexOnlyScan(chn char_name_pkey) IndexOnlyScan(an person_id_aka_name) HashJoin(mc cn) NestLoop(mc cn t) NestLoop(mc cn t ci) HashJoin(mc cn t ci rt) NestLoop(mc cn t ci rt n) NestLoop(mc cn t ci rt n mi) HashJoin(mc cn t ci rt n mi it) NestLoop(mc cn t ci rt n mi it chn) NestLoop(mc cn t ci rt n mi it chn an) Leading((((((((((mc cn) t) ci) rt) n) mi) it) chn) an)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
  movie_companies AS mc,
   movie_info AS mi,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(as Andrea Miltnerova)', '(Michel)', '(Cowboy)', '(as DJ Neil)', '(as Val Biscoglio)')
AND cn.country_code = '[nl]'
AND it.info = 'genres'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%N%' OR mc.note LIKE '%)%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%n%' OR mi.info LIKE '%n%')
AND n.gender = 'f'
AND n.name LIKE '%,%'
AND rt.role = 'actress'
AND t.production_year BETWEEN 1893 AND 2011;",99,/*+  SeqScan(mc) SeqScan(cn) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) SeqScan(it) IndexOnlyScan(chn char_name_pkey) IndexOnlyScan(an person_id_aka_name) HashJoin(mc cn) NestLoop(mc cn t) NestLoop(mc cn t ci) HashJoin(mc cn t ci rt) NestLoop(mc cn t ci rt n) NestLoop(mc cn t ci rt n mi) HashJoin(mc cn t ci rt n mi it) NestLoop(mc cn t ci rt n mi it chn) NestLoop(mc cn t ci rt n mi it chn an) Leading((((((((((mc cn) t) ci) rt) n) mi) it) chn) an)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
  movie_companies AS mc,
   movie_info AS mi,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(as Whitby Hertford)', '(as J. Nermut)', '(as Lazar)', '(as GyÃµry Emil)', '(as Jane Norris)')
AND cn.country_code = '[nl]'
AND it.info = 'quotes'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%)%' OR mc.note LIKE '%(%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%l%' OR mi.info LIKE '%t%')
AND n.gender = 'm'
AND n.name LIKE '%t%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1963 AND 1999;",99,/*+  SeqScan(mc) SeqScan(cn) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) SeqScan(it) IndexOnlyScan(chn char_name_pkey) IndexOnlyScan(an person_id_aka_name) HashJoin(mc cn) NestLoop(mc cn t) NestLoop(mc cn t ci) HashJoin(mc cn t ci rt) NestLoop(mc cn t ci rt n) NestLoop(mc cn t ci rt n mi) HashJoin(mc cn t ci rt n mi it) NestLoop(mc cn t ci rt n mi it chn) NestLoop(mc cn t ci rt n mi it chn an) Leading((((((((((mc cn) t) ci) rt) n) mi) it) chn) an)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
  movie_companies AS mc,
   movie_info AS mi,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(as Whitby Hertford)', '(as Ed Le Sainte)', '(as Sharon Lee)', '(publicity artist)', '(as Ilosvay Kati)')
AND cn.country_code = '[gb]'
AND it.info = 'release dates'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%1%' OR mc.note LIKE '%s%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%o%' OR mi.info LIKE '%:%')
AND n.gender = 'm'
AND n.name LIKE '%f%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1953 AND 2002;",7,/*+  SeqScan(ci) IndexOnlyScan(an person_id_aka_name) SeqScan(rt) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexScan(mi movie_id_movie_info) SeqScan(it) IndexOnlyScan(chn char_name_pkey) IndexScan(n name_pkey) IndexScan(t title_pkey) NestLoop(ci an) HashJoin(ci an rt) NestLoop(ci an rt mc) NestLoop(ci an rt mc cn) NestLoop(ci an rt mc cn mi) HashJoin(ci an rt mc cn mi it) NestLoop(ci an rt mc cn mi it chn) NestLoop(ci an rt mc cn mi it chn n) NestLoop(ci an rt mc cn mi it chn n t) Leading((((((((((ci an) rt) mc) cn) mi) it) chn) n) t)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
  movie_companies AS mc,
   movie_info AS mi,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(as Whitby Hertford)', '(as Miss Piss)', '(as Marlene Henny)', '(as C. Recors)', '(as Ben Willem)')
AND cn.country_code = '[us]'
AND it.info = 'quotes'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%9%' OR mc.note LIKE '%U%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%e%' OR mi.info LIKE '%:%')
AND n.gender = 'm'
AND n.name LIKE '%o%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1924 AND 2020;",99,/*+  SeqScan(mc) SeqScan(cn) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) SeqScan(it) IndexOnlyScan(chn char_name_pkey) IndexOnlyScan(an person_id_aka_name) HashJoin(mc cn) NestLoop(mc cn t) NestLoop(mc cn t ci) HashJoin(mc cn t ci rt) NestLoop(mc cn t ci rt n) NestLoop(mc cn t ci rt n mi) HashJoin(mc cn t ci rt n mi it) NestLoop(mc cn t ci rt n mi it chn) NestLoop(mc cn t ci rt n mi it chn an) Leading((((((((((mc cn) t) ci) rt) n) mi) it) chn) an)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
  movie_companies AS mc,
   movie_info AS mi,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(uncredited)', '(Meade''s driver)', '(as Pedro Martinez)', '(as Kaitlin Ashley)', '(Honourary Award)')
AND cn.country_code = '[de]'
AND it.info = 'release dates'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%)%' OR mc.note LIKE '%0%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%2%' OR mi.info LIKE '%0%')
AND n.gender = 'f'
AND n.name LIKE '%o%'
AND rt.role = 'actress'
AND t.production_year BETWEEN 1955 AND 2011;",99,/*+  SeqScan(mc) SeqScan(cn) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) SeqScan(it) IndexOnlyScan(chn char_name_pkey) IndexOnlyScan(an person_id_aka_name) HashJoin(mc cn) NestLoop(mc cn t) NestLoop(mc cn t ci) HashJoin(mc cn t ci rt) NestLoop(mc cn t ci rt n) NestLoop(mc cn t ci rt n mi) HashJoin(mc cn t ci rt n mi it) NestLoop(mc cn t ci rt n mi it chn) NestLoop(mc cn t ci rt n mi it chn an) Leading((((((((((mc cn) t) ci) rt) n) mi) it) chn) an)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
  movie_companies AS mc,
   movie_info AS mi,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(uncredited)', '(as Melenie)', '(as Eric LaSalle)', '(as Lili)', '(as Pierre NÃ©ron)')
AND cn.country_code = '[jp]'
AND it.info = 'sound mix'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%r%' OR mc.note LIKE '%e%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%g%' OR mi.info LIKE '%i%')
AND n.gender = 'f'
AND n.name LIKE '%o%'
AND rt.role = 'actress'
AND t.production_year BETWEEN 1932 AND 2007;",7,/*+  SeqScan(ci) IndexOnlyScan(an person_id_aka_name) SeqScan(rt) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexScan(mi movie_id_movie_info) SeqScan(it) IndexOnlyScan(chn char_name_pkey) IndexScan(n name_pkey) IndexScan(t title_pkey) NestLoop(ci an) HashJoin(ci an rt) NestLoop(ci an rt mc) NestLoop(ci an rt mc cn) NestLoop(ci an rt mc cn mi) HashJoin(ci an rt mc cn mi it) NestLoop(ci an rt mc cn mi it chn) NestLoop(ci an rt mc cn mi it chn n) NestLoop(ci an rt mc cn mi it chn n t) Leading((((((((((ci an) rt) mc) cn) mi) it) chn) n) t)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
  movie_companies AS mc,
   movie_info AS mi,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(as Charles Tamburro)', '(as Gharrett Paon)', '(as Lindsey Platt)', '(as Tilly Golding)', '(as Cody Richards)')
AND cn.country_code = '[se]'
AND it.info = 'book'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%1%' OR mc.note LIKE '%e%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%1%' OR mi.info LIKE '%g%')
AND n.gender = 'm'
AND n.name LIKE '%r%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1990 AND 2009;",99,/*+  SeqScan(mc) SeqScan(cn) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) SeqScan(it) IndexOnlyScan(chn char_name_pkey) IndexOnlyScan(an person_id_aka_name) HashJoin(mc cn) NestLoop(mc cn t) NestLoop(mc cn t ci) HashJoin(mc cn t ci rt) NestLoop(mc cn t ci rt n) NestLoop(mc cn t ci rt n mi) HashJoin(mc cn t ci rt n mi it) NestLoop(mc cn t ci rt n mi it chn) NestLoop(mc cn t ci rt n mi it chn an) Leading((((((((((mc cn) t) ci) rt) n) mi) it) chn) an)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
  movie_companies AS mc,
   movie_info AS mi,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(as Whitby Hertford)', '(as Andy Tenant)', '(as Nina Kronjager)', '(cleaner)', '(as Raymond Reed)')
AND cn.country_code = '[nl]'
AND it.info = 'trivia'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%e%' OR mc.note LIKE '%1%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%''%' OR mi.info LIKE '%o%')
AND n.gender = 'm'
AND n.name LIKE '%,%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1915 AND 2000;",99,/*+  SeqScan(mc) SeqScan(cn) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) SeqScan(it) IndexOnlyScan(chn char_name_pkey) IndexOnlyScan(an person_id_aka_name) HashJoin(mc cn) NestLoop(mc cn t) NestLoop(mc cn t ci) HashJoin(mc cn t ci rt) NestLoop(mc cn t ci rt n) NestLoop(mc cn t ci rt n mi) HashJoin(mc cn t ci rt n mi it) NestLoop(mc cn t ci rt n mi it chn) NestLoop(mc cn t ci rt n mi it chn an) Leading((((((((((mc cn) t) ci) rt) n) mi) it) chn) an)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
  movie_companies AS mc,
   movie_info AS mi,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(as Charles Tamburro)', '(as Lan-shan Ho)', '(2005/06)', '(as Peppy)', '(as Lee De Lano)')
AND cn.country_code = '[se]'
AND it.info = 'weekend gross'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%0%' OR mc.note LIKE '%)%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%r%' OR mi.info LIKE '%3%')
AND n.gender = 'm'
AND n.name LIKE '%a%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1986 AND 1995;",99,/*+  SeqScan(mc) SeqScan(cn) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) SeqScan(it) IndexOnlyScan(chn char_name_pkey) IndexOnlyScan(an person_id_aka_name) HashJoin(mc cn) NestLoop(mc cn t) NestLoop(mc cn t ci) HashJoin(mc cn t ci rt) NestLoop(mc cn t ci rt n) NestLoop(mc cn t ci rt n mi) HashJoin(mc cn t ci rt n mi it) NestLoop(mc cn t ci rt n mi it chn) NestLoop(mc cn t ci rt n mi it chn an) Leading((((((((((mc cn) t) ci) rt) n) mi) it) chn) an)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
  movie_companies AS mc,
   movie_info AS mi,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(as Whitby Hertford)', '(as Lory Bianco)', '(as Arthur Rowell)', '(as I. Fednev)', '(as Scott Ikagem)')
AND cn.country_code = '[gb]'
AND it.info = 'budget'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%(%' OR mc.note LIKE '%)%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%,%' OR mi.info LIKE '%0%')
AND n.gender = 'm'
AND n.name LIKE '%o%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1935 AND 2009;",99,/*+  SeqScan(mc) SeqScan(cn) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) SeqScan(it) IndexOnlyScan(chn char_name_pkey) IndexOnlyScan(an person_id_aka_name) HashJoin(mc cn) NestLoop(mc cn t) NestLoop(mc cn t ci) HashJoin(mc cn t ci rt) NestLoop(mc cn t ci rt n) NestLoop(mc cn t ci rt n mi) HashJoin(mc cn t ci rt n mi it) NestLoop(mc cn t ci rt n mi it chn) NestLoop(mc cn t ci rt n mi it chn an) Leading((((((((((mc cn) t) ci) rt) n) mi) it) chn) an)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
  movie_companies AS mc,
   movie_info AS mi,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(as Whitby Hertford)', '(as S. Sadalskiy)', '(as Det. Dan Lusty)', '(as Ryan Browne)', '(director''s shadow)')
AND cn.country_code = '[at]'
AND it.info = 'goofs'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%t%' OR mc.note LIKE '%r%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%a%' OR mi.info LIKE '%i%')
AND n.gender = 'm'
AND n.name LIKE '%r%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1973 AND 2011;",99,/*+  SeqScan(mc) SeqScan(cn) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) SeqScan(it) IndexOnlyScan(chn char_name_pkey) IndexOnlyScan(an person_id_aka_name) HashJoin(mc cn) NestLoop(mc cn t) NestLoop(mc cn t ci) HashJoin(mc cn t ci rt) NestLoop(mc cn t ci rt n) NestLoop(mc cn t ci rt n mi) HashJoin(mc cn t ci rt n mi it) NestLoop(mc cn t ci rt n mi it chn) NestLoop(mc cn t ci rt n mi it chn an) Leading((((((((((mc cn) t) ci) rt) n) mi) it) chn) an)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
  movie_companies AS mc,
   movie_info AS mi,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(uncredited)', '(Season 1) (Zambia)', '(as I. Mazurkevich)', '(as Charlie Rocket)', '(as Callum Renney)')
AND cn.country_code = '[de]'
AND it.info = 'tech info'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%m%' OR mc.note LIKE '%l%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%m%' OR mi.info LIKE '%F%')
AND n.gender = 'f'
AND n.name LIKE '%h%'
AND rt.role = 'actress'
AND t.production_year BETWEEN 1899 AND 2005;",7,/*+  SeqScan(ci) IndexOnlyScan(an person_id_aka_name) SeqScan(rt) IndexScan(mc movie_id_movie_companies) IndexScan(cn company_name_pkey) IndexScan(mi movie_id_movie_info) SeqScan(it) IndexOnlyScan(chn char_name_pkey) IndexScan(n name_pkey) IndexScan(t title_pkey) NestLoop(ci an) HashJoin(ci an rt) NestLoop(ci an rt mc) NestLoop(ci an rt mc cn) NestLoop(ci an rt mc cn mi) HashJoin(ci an rt mc cn mi it) NestLoop(ci an rt mc cn mi it chn) NestLoop(ci an rt mc cn mi it chn n) NestLoop(ci an rt mc cn mi it chn n t) Leading((((((((((ci an) rt) mc) cn) mi) it) chn) n) t)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM aka_name AS an,
   char_name AS chn,
   cast_info AS ci,
   company_name AS cn,
   info_type AS it,
  movie_companies AS mc,
   movie_info AS mi,
   name AS n,
   role_type AS rt,
   title AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(as Whitby Hertford)', '(as Vlad Vetrov)', '(roommate)', '(trapeze advisor)', '(as Pamela Larson)')
AND cn.country_code = '[ar]'
AND it.info = 'trivia'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%(%' OR mc.note LIKE '%a%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%e%' OR mi.info LIKE '%d%')
AND n.gender = 'm'
AND n.name LIKE '%r%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1911 AND 2001;",99,/*+  SeqScan(mc) SeqScan(cn) IndexScan(t title_pkey) IndexScan(ci movie_id_cast_info) SeqScan(rt) IndexScan(n name_pkey) IndexScan(mi movie_id_movie_info) SeqScan(it) IndexOnlyScan(chn char_name_pkey) IndexOnlyScan(an person_id_aka_name) HashJoin(mc cn) NestLoop(mc cn t) NestLoop(mc cn t ci) HashJoin(mc cn t ci rt) NestLoop(mc cn t ci rt n) NestLoop(mc cn t ci rt n mi) HashJoin(mc cn t ci rt n mi it) NestLoop(mc cn t ci rt n mi it chn) NestLoop(mc cn t ci rt n mi it chn an) Leading((((((((((mc cn) t) ci) rt) n) mi) it) chn) an)) */
