query,plan_id,plan_content
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM cat_aka_name_1 AS an,
   cat_char_name_1 AS chn,
   cat_cast_info_1 AS ci,
   cat_company_name_1 AS cn,
   cat_info_type_1 AS it,
  cat_movie_companies_1 AS mc,
   cat_movie_info_1 AS mi,
   cat_name_1 AS n,
   cat_role_type_1 AS rt,
   cat_title_1 AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(uncredited)', '(Dee Vasquez)', '(as Arturo Moran)', '(as Jade Marx)', '(costume chief)')
AND cn.country_code = '[us]'
AND it.info = 'trivia'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%l%' OR mc.note LIKE '%2%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%u%' OR mi.info LIKE '%s%')
AND n.gender = 'm'
AND n.name LIKE '%l%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1937 AND 1980;",384,/*+  SeqScan(n) IndexOnlyScan(an person_id_aka_name_cat_1) IndexScan(ci person_id_cast_info_cat_1) SeqScan(rt) IndexScan(t cat_title_1_pkey) IndexScan(mi movie_id_movie_info_cat_1) SeqScan(it) IndexScan(mc movie_id_movie_companies_cat_1) IndexScan(cn cat_company_name_1_pkey) IndexOnlyScan(chn cat_char_name_1_pkey) NestLoop(n an) NestLoop(n an ci) HashJoin(n an ci rt) NestLoop(n an ci rt t) NestLoop(n an ci rt t mi) HashJoin(n an ci rt t mi it) NestLoop(n an ci rt t mi it mc) NestLoop(n an ci rt t mi it mc cn) NestLoop(n an ci rt t mi it mc cn chn) Leading((((((((((n an) ci) rt) t) mi) it) mc) cn) chn)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM cat_aka_name_1 AS an,
   cat_char_name_1 AS chn,
   cat_cast_info_1 AS ci,
   cat_company_name_1 AS cn,
   cat_info_type_1 AS it,
  cat_movie_companies_1 AS mc,
   cat_movie_info_1 AS mi,
   cat_name_1 AS n,
   cat_role_type_1 AS rt,
   cat_title_1 AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(uncredited)', '(as Mrs. La Varnie)', '(animal services)', '(as Anne Randall)', '(as Carol Schlecht)')
AND cn.country_code = '[us]'
AND it.info = 'release dates'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%y%' OR mc.note LIKE '%)%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%l%' OR mi.info LIKE '%v%')
AND n.gender = 'm'
AND n.name LIKE '%r%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1933 AND 2012;",384,/*+  SeqScan(n) IndexOnlyScan(an person_id_aka_name_cat_1) IndexScan(ci person_id_cast_info_cat_1) SeqScan(rt) IndexScan(t cat_title_1_pkey) IndexScan(mi movie_id_movie_info_cat_1) SeqScan(it) IndexScan(mc movie_id_movie_companies_cat_1) IndexScan(cn cat_company_name_1_pkey) IndexOnlyScan(chn cat_char_name_1_pkey) NestLoop(n an) NestLoop(n an ci) HashJoin(n an ci rt) NestLoop(n an ci rt t) NestLoop(n an ci rt t mi) HashJoin(n an ci rt t mi it) NestLoop(n an ci rt t mi it mc) NestLoop(n an ci rt t mi it mc cn) NestLoop(n an ci rt t mi it mc cn chn) Leading((((((((((n an) ci) rt) t) mi) it) mc) cn) chn)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM cat_aka_name_1 AS an,
   cat_char_name_1 AS chn,
   cat_cast_info_1 AS ci,
   cat_company_name_1 AS cn,
   cat_info_type_1 AS it,
  cat_movie_companies_1 AS mc,
   cat_movie_info_1 AS mi,
   cat_name_1 AS n,
   cat_role_type_1 AS rt,
   cat_title_1 AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(uncredited)', '(as Ravi Shankar)', '(as RocÃ­o Freixe)', '(novel ""Law Man"")', '(vocal coach)')
AND cn.country_code = '[us]'
AND it.info = 'alternate versions'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%a%' OR mc.note LIKE '%(%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%y%' OR mi.info LIKE '%r%')
AND n.gender = 'm'
AND n.name LIKE '%l%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1929 AND 1983;",384,/*+  SeqScan(n) IndexOnlyScan(an person_id_aka_name_cat_1) IndexScan(ci person_id_cast_info_cat_1) SeqScan(rt) IndexScan(t cat_title_1_pkey) IndexScan(mi movie_id_movie_info_cat_1) SeqScan(it) IndexScan(mc movie_id_movie_companies_cat_1) IndexScan(cn cat_company_name_1_pkey) IndexOnlyScan(chn cat_char_name_1_pkey) NestLoop(n an) NestLoop(n an ci) HashJoin(n an ci rt) NestLoop(n an ci rt t) NestLoop(n an ci rt t mi) HashJoin(n an ci rt t mi it) NestLoop(n an ci rt t mi it mc) NestLoop(n an ci rt t mi it mc cn) NestLoop(n an ci rt t mi it mc cn chn) Leading((((((((((n an) ci) rt) t) mi) it) mc) cn) chn)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM cat_aka_name_1 AS an,
   cat_char_name_1 AS chn,
   cat_cast_info_1 AS ci,
   cat_company_name_1 AS cn,
   cat_info_type_1 AS it,
  cat_movie_companies_1 AS mc,
   cat_movie_info_1 AS mi,
   cat_name_1 AS n,
   cat_role_type_1 AS rt,
   cat_title_1 AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(as James M. King)', '(as Raul Merced)', '(cheese consultant)', '(as Lalita Powar)', '(legal: music)')
AND cn.country_code = '[us]'
AND it.info = 'release dates'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%e%' OR mc.note LIKE '%i%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%2%' OR mi.info LIKE '%d%')
AND n.gender = 'm'
AND n.name LIKE '%m%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1964 AND 2010;",384,/*+  SeqScan(n) IndexOnlyScan(an person_id_aka_name_cat_1) IndexScan(ci person_id_cast_info_cat_1) SeqScan(rt) IndexScan(t cat_title_1_pkey) IndexScan(mi movie_id_movie_info_cat_1) SeqScan(it) IndexScan(mc movie_id_movie_companies_cat_1) IndexScan(cn cat_company_name_1_pkey) IndexOnlyScan(chn cat_char_name_1_pkey) NestLoop(n an) NestLoop(n an ci) HashJoin(n an ci rt) NestLoop(n an ci rt t) NestLoop(n an ci rt t mi) HashJoin(n an ci rt t mi it) NestLoop(n an ci rt t mi it mc) NestLoop(n an ci rt t mi it mc cn) NestLoop(n an ci rt t mi it mc cn chn) Leading((((((((((n an) ci) rt) t) mi) it) mc) cn) chn)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM cat_aka_name_1 AS an,
   cat_char_name_1 AS chn,
   cat_cast_info_1 AS ci,
   cat_company_name_1 AS cn,
   cat_info_type_1 AS it,
  cat_movie_companies_1 AS mc,
   cat_movie_info_1 AS mi,
   cat_name_1 AS n,
   cat_role_type_1 AS rt,
   cat_title_1 AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(uncredited)', '(as Kevin Blair)', '(as Sammy Fry)', '(as Hal Moore)', '(as Tony Zita)')
AND cn.country_code = '[fi]'
AND it.info = 'goofs'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%)%' OR mc.note LIKE '%l%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%h%' OR mi.info LIKE '%K%')
AND n.gender = 'm'
AND n.name LIKE '%F%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1947 AND 1990;",384,/*+  SeqScan(n) IndexOnlyScan(an person_id_aka_name_cat_1) IndexScan(ci person_id_cast_info_cat_1) SeqScan(rt) IndexScan(t cat_title_1_pkey) IndexScan(mi movie_id_movie_info_cat_1) SeqScan(it) IndexScan(mc movie_id_movie_companies_cat_1) IndexScan(cn cat_company_name_1_pkey) IndexOnlyScan(chn cat_char_name_1_pkey) NestLoop(n an) NestLoop(n an ci) HashJoin(n an ci rt) NestLoop(n an ci rt t) NestLoop(n an ci rt t mi) HashJoin(n an ci rt t mi it) NestLoop(n an ci rt t mi it mc) NestLoop(n an ci rt t mi it mc cn) NestLoop(n an ci rt t mi it mc cn chn) Leading((((((((((n an) ci) rt) t) mi) it) mc) cn) chn)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM cat_aka_name_1 AS an,
   cat_char_name_1 AS chn,
   cat_cast_info_1 AS ci,
   cat_company_name_1 AS cn,
   cat_info_type_1 AS it,
  cat_movie_companies_1 AS mc,
   cat_movie_info_1 AS mi,
   cat_name_1 AS n,
   cat_role_type_1 AS rt,
   cat_title_1 AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(voice) (uncredited)', '(as Sammy Chow)', '(as Teddy Li)', '(as I. Sokolovskiy)', '(as Tin Kaiman)')
AND cn.country_code = '[fi]'
AND it.info = 'quotes'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%(%' OR mc.note LIKE '%F%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%z%' OR mi.info LIKE '%h%')
AND n.gender = 'm'
AND n.name LIKE '%R%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1900 AND 2010;",384,/*+  SeqScan(n) IndexOnlyScan(an person_id_aka_name_cat_1) IndexScan(ci person_id_cast_info_cat_1) SeqScan(rt) IndexScan(t cat_title_1_pkey) IndexScan(mi movie_id_movie_info_cat_1) SeqScan(it) IndexScan(mc movie_id_movie_companies_cat_1) IndexScan(cn cat_company_name_1_pkey) IndexOnlyScan(chn cat_char_name_1_pkey) NestLoop(n an) NestLoop(n an ci) HashJoin(n an ci rt) NestLoop(n an ci rt t) NestLoop(n an ci rt t mi) HashJoin(n an ci rt t mi it) NestLoop(n an ci rt t mi it mc) NestLoop(n an ci rt t mi it mc cn) NestLoop(n an ci rt t mi it mc cn chn) Leading((((((((((n an) ci) rt) t) mi) it) mc) cn) chn)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM cat_aka_name_1 AS an,
   cat_char_name_1 AS chn,
   cat_cast_info_1 AS ci,
   cat_company_name_1 AS cn,
   cat_info_type_1 AS it,
  cat_movie_companies_1 AS mc,
   cat_movie_info_1 AS mi,
   cat_name_1 AS n,
   cat_role_type_1 AS rt,
   cat_title_1 AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(as James M. King)', '(as Wong Yat Ping)', '(as Stefan Verne)', '(as Jo Marie Ward)', '(as Doug Hamilton)')
AND cn.country_code = '[us]'
AND it.info = 'sound mix'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%t%' OR mc.note LIKE '%i%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%T%' OR mi.info LIKE '%T%')
AND n.gender = 'm'
AND n.name LIKE '%m%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1931 AND 2016;",384,/*+  SeqScan(n) IndexOnlyScan(an person_id_aka_name_cat_1) IndexScan(ci person_id_cast_info_cat_1) SeqScan(rt) IndexScan(t cat_title_1_pkey) IndexScan(mi movie_id_movie_info_cat_1) SeqScan(it) IndexScan(mc movie_id_movie_companies_cat_1) IndexScan(cn cat_company_name_1_pkey) IndexOnlyScan(chn cat_char_name_1_pkey) NestLoop(n an) NestLoop(n an ci) HashJoin(n an ci rt) NestLoop(n an ci rt t) NestLoop(n an ci rt t mi) HashJoin(n an ci rt t mi it) NestLoop(n an ci rt t mi it mc) NestLoop(n an ci rt t mi it mc cn) NestLoop(n an ci rt t mi it mc cn chn) Leading((((((((((n an) ci) rt) t) mi) it) mc) cn) chn)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM cat_aka_name_1 AS an,
   cat_char_name_1 AS chn,
   cat_cast_info_1 AS ci,
   cat_company_name_1 AS cn,
   cat_info_type_1 AS it,
  cat_movie_companies_1 AS mc,
   cat_movie_info_1 AS mi,
   cat_name_1 AS n,
   cat_role_type_1 AS rt,
   cat_title_1 AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(uncredited)', '(as ZoÃ© Trope)', '(as R. Kurkina)', '(as Pick & Pat)', '(as Dan Ronin)')
AND cn.country_code = '[us]'
AND it.info = 'trivia'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%(%' OR mc.note LIKE '%n%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%o%' OR mi.info LIKE '%t%')
AND n.gender = 'm'
AND n.name LIKE '%E%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1931 AND 1995;",384,/*+  SeqScan(n) IndexOnlyScan(an person_id_aka_name_cat_1) IndexScan(ci person_id_cast_info_cat_1) SeqScan(rt) IndexScan(t cat_title_1_pkey) IndexScan(mi movie_id_movie_info_cat_1) SeqScan(it) IndexScan(mc movie_id_movie_companies_cat_1) IndexScan(cn cat_company_name_1_pkey) IndexOnlyScan(chn cat_char_name_1_pkey) NestLoop(n an) NestLoop(n an ci) HashJoin(n an ci rt) NestLoop(n an ci rt t) NestLoop(n an ci rt t mi) HashJoin(n an ci rt t mi it) NestLoop(n an ci rt t mi it mc) NestLoop(n an ci rt t mi it mc cn) NestLoop(n an ci rt t mi it mc cn chn) Leading((((((((((n an) ci) rt) t) mi) it) mc) cn) chn)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM cat_aka_name_1 AS an,
   cat_char_name_1 AS chn,
   cat_cast_info_1 AS ci,
   cat_company_name_1 AS cn,
   cat_info_type_1 AS it,
  cat_movie_companies_1 AS mc,
   cat_movie_info_1 AS mi,
   cat_name_1 AS n,
   cat_role_type_1 AS rt,
   cat_title_1 AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(uncredited)', '(as John Rousaris)', '(as Nick Terry)', '(as Manuel Caro)', '(as Liza Moreno)')
AND cn.country_code = '[nl]'
AND it.info = 'certificates'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%3%' OR mc.note LIKE '%1%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%:%' OR mi.info LIKE '%a%')
AND n.gender = 'm'
AND n.name LIKE '%J%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1909 AND 1955;",384,/*+  SeqScan(n) IndexOnlyScan(an person_id_aka_name_cat_1) IndexScan(ci person_id_cast_info_cat_1) SeqScan(rt) IndexScan(t cat_title_1_pkey) IndexScan(mi movie_id_movie_info_cat_1) SeqScan(it) IndexScan(mc movie_id_movie_companies_cat_1) IndexScan(cn cat_company_name_1_pkey) IndexOnlyScan(chn cat_char_name_1_pkey) NestLoop(n an) NestLoop(n an ci) HashJoin(n an ci rt) NestLoop(n an ci rt t) NestLoop(n an ci rt t mi) HashJoin(n an ci rt t mi it) NestLoop(n an ci rt t mi it mc) NestLoop(n an ci rt t mi it mc cn) NestLoop(n an ci rt t mi it mc cn chn) Leading((((((((((n an) ci) rt) t) mi) it) mc) cn) chn)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM cat_aka_name_1 AS an,
   cat_char_name_1 AS chn,
   cat_cast_info_1 AS ci,
   cat_company_name_1 AS cn,
   cat_info_type_1 AS it,
  cat_movie_companies_1 AS mc,
   cat_movie_info_1 AS mi,
   cat_name_1 AS n,
   cat_role_type_1 AS rt,
   cat_title_1 AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(voice) (uncredited)', '(as Bea)', '(adr talent)', '(as Bhanu Mati)', '(as Jack C. Huang)')
AND cn.country_code = '[de]'
AND it.info = 'quotes'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%e%' OR mc.note LIKE '%0%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%p%' OR mi.info LIKE '%?%')
AND n.gender = 'm'
AND n.name LIKE '%o%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1958 AND 2009;",384,/*+  SeqScan(n) IndexOnlyScan(an person_id_aka_name_cat_1) IndexScan(ci person_id_cast_info_cat_1) SeqScan(rt) IndexScan(t cat_title_1_pkey) IndexScan(mi movie_id_movie_info_cat_1) SeqScan(it) IndexScan(mc movie_id_movie_companies_cat_1) IndexScan(cn cat_company_name_1_pkey) IndexOnlyScan(chn cat_char_name_1_pkey) NestLoop(n an) NestLoop(n an ci) HashJoin(n an ci rt) NestLoop(n an ci rt t) NestLoop(n an ci rt t mi) HashJoin(n an ci rt t mi it) NestLoop(n an ci rt t mi it mc) NestLoop(n an ci rt t mi it mc cn) NestLoop(n an ci rt t mi it mc cn chn) Leading((((((((((n an) ci) rt) t) mi) it) mc) cn) chn)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM cat_aka_name_1 AS an,
   cat_char_name_1 AS chn,
   cat_cast_info_1 AS ci,
   cat_company_name_1 AS cn,
   cat_info_type_1 AS it,
  cat_movie_companies_1 AS mc,
   cat_movie_info_1 AS mi,
   cat_name_1 AS n,
   cat_role_type_1 AS rt,
   cat_title_1 AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(uncredited)', '(as Lili Boulogne)', '(as Henneley)', '(as Jeffrey Levine)', '(as Sasha Lebedev)')
AND cn.country_code = '[fi]'
AND it.info = 'goofs'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%1%' OR mc.note LIKE '%(%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%h%' OR mi.info LIKE '%t%')
AND n.gender = 'm'
AND n.name LIKE '%e%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1944 AND 1962;",384,/*+  SeqScan(n) IndexOnlyScan(an person_id_aka_name_cat_1) IndexScan(ci person_id_cast_info_cat_1) SeqScan(rt) IndexScan(t cat_title_1_pkey) IndexScan(mi movie_id_movie_info_cat_1) SeqScan(it) IndexScan(mc movie_id_movie_companies_cat_1) IndexScan(cn cat_company_name_1_pkey) IndexOnlyScan(chn cat_char_name_1_pkey) NestLoop(n an) NestLoop(n an ci) HashJoin(n an ci rt) NestLoop(n an ci rt t) NestLoop(n an ci rt t mi) HashJoin(n an ci rt t mi it) NestLoop(n an ci rt t mi it mc) NestLoop(n an ci rt t mi it mc cn) NestLoop(n an ci rt t mi it mc cn chn) Leading((((((((((n an) ci) rt) t) mi) it) mc) cn) chn)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM cat_aka_name_1 AS an,
   cat_char_name_1 AS chn,
   cat_cast_info_1 AS ci,
   cat_company_name_1 AS cn,
   cat_info_type_1 AS it,
  cat_movie_companies_1 AS mc,
   cat_movie_info_1 AS mi,
   cat_name_1 AS n,
   cat_role_type_1 AS rt,
   cat_title_1 AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(as James M. King)', '(as Robert Burns)', '(as PÃ¡ll PÃ¡lsson)', '(as V. Chekmaryev)', '(as Daniel Orskes)')
AND cn.country_code = '[us]'
AND it.info = 'locations'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%n%' OR mc.note LIKE '%t%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%U%' OR mi.info LIKE '%e%')
AND n.gender = 'm'
AND n.name LIKE '%m%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 2003 AND 2009;",384,/*+  SeqScan(n) IndexOnlyScan(an person_id_aka_name_cat_1) IndexScan(ci person_id_cast_info_cat_1) SeqScan(rt) IndexScan(t cat_title_1_pkey) IndexScan(mi movie_id_movie_info_cat_1) SeqScan(it) IndexScan(mc movie_id_movie_companies_cat_1) IndexScan(cn cat_company_name_1_pkey) IndexOnlyScan(chn cat_char_name_1_pkey) NestLoop(n an) NestLoop(n an ci) HashJoin(n an ci rt) NestLoop(n an ci rt t) NestLoop(n an ci rt t mi) HashJoin(n an ci rt t mi it) NestLoop(n an ci rt t mi it mc) NestLoop(n an ci rt t mi it mc cn) NestLoop(n an ci rt t mi it mc cn chn) Leading((((((((((n an) ci) rt) t) mi) it) mc) cn) chn)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM cat_aka_name_1 AS an,
   cat_char_name_1 AS chn,
   cat_cast_info_1 AS ci,
   cat_company_name_1 AS cn,
   cat_info_type_1 AS it,
  cat_movie_companies_1 AS mc,
   cat_movie_info_1 AS mi,
   cat_name_1 AS n,
   cat_role_type_1 AS rt,
   cat_title_1 AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(uncredited)', '(as Paul Simmion)', '(as Chris Hansen)', '(as Patt Parker)', '(studio secretary)')
AND cn.country_code = '[us]'
AND it.info = 'trivia'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%1%' OR mc.note LIKE '%a%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%t%' OR mi.info LIKE '%s%')
AND n.gender = 'm'
AND n.name LIKE '%l%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1907 AND 1983;",384,/*+  SeqScan(n) IndexOnlyScan(an person_id_aka_name_cat_1) IndexScan(ci person_id_cast_info_cat_1) SeqScan(rt) IndexScan(t cat_title_1_pkey) IndexScan(mi movie_id_movie_info_cat_1) SeqScan(it) IndexScan(mc movie_id_movie_companies_cat_1) IndexScan(cn cat_company_name_1_pkey) IndexOnlyScan(chn cat_char_name_1_pkey) NestLoop(n an) NestLoop(n an ci) HashJoin(n an ci rt) NestLoop(n an ci rt t) NestLoop(n an ci rt t mi) HashJoin(n an ci rt t mi it) NestLoop(n an ci rt t mi it mc) NestLoop(n an ci rt t mi it mc cn) NestLoop(n an ci rt t mi it mc cn chn) Leading((((((((((n an) ci) rt) t) mi) it) mc) cn) chn)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM cat_aka_name_1 AS an,
   cat_char_name_1 AS chn,
   cat_cast_info_1 AS ci,
   cat_company_name_1 AS cn,
   cat_info_type_1 AS it,
  cat_movie_companies_1 AS mc,
   cat_movie_info_1 AS mi,
   cat_name_1 AS n,
   cat_role_type_1 AS rt,
   cat_title_1 AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(uncredited)', '(Episode #9)', '(as Sam CupÃ¡e)', '(21 Club Greeter)', '(as Jeff Balinski)')
AND cn.country_code = '[nl]'
AND it.info = 'budget'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%t%' OR mc.note LIKE '%t%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%0%' OR mi.info LIKE '%5%')
AND n.gender = 'm'
AND n.name LIKE '%,%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1901 AND 1964;",384,/*+  SeqScan(n) IndexOnlyScan(an person_id_aka_name_cat_1) IndexScan(ci person_id_cast_info_cat_1) SeqScan(rt) IndexScan(t cat_title_1_pkey) IndexScan(mi movie_id_movie_info_cat_1) SeqScan(it) IndexScan(mc movie_id_movie_companies_cat_1) IndexScan(cn cat_company_name_1_pkey) IndexOnlyScan(chn cat_char_name_1_pkey) NestLoop(n an) NestLoop(n an ci) HashJoin(n an ci rt) NestLoop(n an ci rt t) NestLoop(n an ci rt t mi) HashJoin(n an ci rt t mi it) NestLoop(n an ci rt t mi it mc) NestLoop(n an ci rt t mi it mc cn) NestLoop(n an ci rt t mi it mc cn chn) Leading((((((((((n an) ci) rt) t) mi) it) mc) cn) chn)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM cat_aka_name_1 AS an,
   cat_char_name_1 AS chn,
   cat_cast_info_1 AS ci,
   cat_company_name_1 AS cn,
   cat_info_type_1 AS it,
  cat_movie_companies_1 AS mc,
   cat_movie_info_1 AS mi,
   cat_name_1 AS n,
   cat_role_type_1 AS rt,
   cat_title_1 AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(as James M. King)', '(as Richard Lair)', '(novel ""The Dream"")', '(as Marta Roth)', '(caravan)')
AND cn.country_code = '[us]'
AND it.info = 'tech info'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%e%' OR mc.note LIKE '%u%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%R%' OR mi.info LIKE '%:%')
AND n.gender = 'm'
AND n.name LIKE '%g%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1949 AND 2011;",384,/*+  SeqScan(n) IndexOnlyScan(an person_id_aka_name_cat_1) IndexScan(ci person_id_cast_info_cat_1) SeqScan(rt) IndexScan(t cat_title_1_pkey) IndexScan(mi movie_id_movie_info_cat_1) SeqScan(it) IndexScan(mc movie_id_movie_companies_cat_1) IndexScan(cn cat_company_name_1_pkey) IndexOnlyScan(chn cat_char_name_1_pkey) NestLoop(n an) NestLoop(n an ci) HashJoin(n an ci rt) NestLoop(n an ci rt t) NestLoop(n an ci rt t mi) HashJoin(n an ci rt t mi it) NestLoop(n an ci rt t mi it mc) NestLoop(n an ci rt t mi it mc cn) NestLoop(n an ci rt t mi it mc cn chn) Leading((((((((((n an) ci) rt) t) mi) it) mc) cn) chn)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM cat_aka_name_1 AS an,
   cat_char_name_1 AS chn,
   cat_cast_info_1 AS ci,
   cat_company_name_1 AS cn,
   cat_info_type_1 AS it,
  cat_movie_companies_1 AS mc,
   cat_movie_info_1 AS mi,
   cat_name_1 AS n,
   cat_role_type_1 AS rt,
   cat_title_1 AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(as James M. King)', '(as Todd Mooney)', '(as Gloria Rudolf)', '(as V. Shalevich)', '(as Alex Barrios)')
AND cn.country_code = '[us]'
AND it.info = 'tech info'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%n%' OR mc.note LIKE '%)%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%:%' OR mi.info LIKE '%M%')
AND n.gender = 'm'
AND n.name LIKE '%y%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1967 AND 2015;",384,/*+  SeqScan(n) IndexOnlyScan(an person_id_aka_name_cat_1) IndexScan(ci person_id_cast_info_cat_1) SeqScan(rt) IndexScan(t cat_title_1_pkey) IndexScan(mi movie_id_movie_info_cat_1) SeqScan(it) IndexScan(mc movie_id_movie_companies_cat_1) IndexScan(cn cat_company_name_1_pkey) IndexOnlyScan(chn cat_char_name_1_pkey) NestLoop(n an) NestLoop(n an ci) HashJoin(n an ci rt) NestLoop(n an ci rt t) NestLoop(n an ci rt t mi) HashJoin(n an ci rt t mi it) NestLoop(n an ci rt t mi it mc) NestLoop(n an ci rt t mi it mc cn) NestLoop(n an ci rt t mi it mc cn chn) Leading((((((((((n an) ci) rt) t) mi) it) mc) cn) chn)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM cat_aka_name_1 AS an,
   cat_char_name_1 AS chn,
   cat_cast_info_1 AS ci,
   cat_company_name_1 AS cn,
   cat_info_type_1 AS it,
  cat_movie_companies_1 AS mc,
   cat_movie_info_1 AS mi,
   cat_name_1 AS n,
   cat_role_type_1 AS rt,
   cat_title_1 AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(uncredited)', '(as Marco BretÃ³n)', '(as Joe Dowling)', '(project leader)', '(as Brian Carlson)')
AND cn.country_code = '[us]'
AND it.info = 'trivia'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%)%' OR mc.note LIKE '%0%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%y%' OR mi.info LIKE '%l%')
AND n.gender = 'm'
AND n.name LIKE '%w%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1900 AND 2020;",384,/*+  SeqScan(n) IndexOnlyScan(an person_id_aka_name_cat_1) IndexScan(ci person_id_cast_info_cat_1) SeqScan(rt) IndexScan(t cat_title_1_pkey) IndexScan(mi movie_id_movie_info_cat_1) SeqScan(it) IndexScan(mc movie_id_movie_companies_cat_1) IndexScan(cn cat_company_name_1_pkey) IndexOnlyScan(chn cat_char_name_1_pkey) NestLoop(n an) NestLoop(n an ci) HashJoin(n an ci rt) NestLoop(n an ci rt t) NestLoop(n an ci rt t mi) HashJoin(n an ci rt t mi it) NestLoop(n an ci rt t mi it mc) NestLoop(n an ci rt t mi it mc cn) NestLoop(n an ci rt t mi it mc cn chn) Leading((((((((((n an) ci) rt) t) mi) it) mc) cn) chn)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM cat_aka_name_1 AS an,
   cat_char_name_1 AS chn,
   cat_cast_info_1 AS ci,
   cat_company_name_1 AS cn,
   cat_info_type_1 AS it,
  cat_movie_companies_1 AS mc,
   cat_movie_info_1 AS mi,
   cat_name_1 AS n,
   cat_role_type_1 AS rt,
   cat_title_1 AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(uncredited)', '(as Nadezhda Kail)', '(as Giorgio Rossi)', '(end titles theme)', '(as A. Barushnoy)')
AND cn.country_code = '[ca]'
AND it.info = 'countries'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%a%' OR mc.note LIKE '%(%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%A%' OR mi.info LIKE '%S%')
AND n.gender = 'm'
AND n.name LIKE '%W%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1931 AND 1998;",384,/*+  SeqScan(n) IndexOnlyScan(an person_id_aka_name_cat_1) IndexScan(ci person_id_cast_info_cat_1) SeqScan(rt) IndexScan(t cat_title_1_pkey) IndexScan(mi movie_id_movie_info_cat_1) SeqScan(it) IndexScan(mc movie_id_movie_companies_cat_1) IndexScan(cn cat_company_name_1_pkey) IndexOnlyScan(chn cat_char_name_1_pkey) NestLoop(n an) NestLoop(n an ci) HashJoin(n an ci rt) NestLoop(n an ci rt t) NestLoop(n an ci rt t mi) HashJoin(n an ci rt t mi it) NestLoop(n an ci rt t mi it mc) NestLoop(n an ci rt t mi it mc cn) NestLoop(n an ci rt t mi it mc cn chn) Leading((((((((((n an) ci) rt) t) mi) it) mc) cn) chn)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM cat_aka_name_1 AS an,
   cat_char_name_1 AS chn,
   cat_cast_info_1 AS ci,
   cat_company_name_1 AS cn,
   cat_info_type_1 AS it,
  cat_movie_companies_1 AS mc,
   cat_movie_info_1 AS mi,
   cat_name_1 AS n,
   cat_role_type_1 AS rt,
   cat_title_1 AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(as Anthony Fridjhon)', '(as TetsurÃ´ Tamba)', '(as Robia La Morte)', '(as Teddi Moore)', '(as Jack Chute)')
AND cn.country_code = '[nl]'
AND it.info = 'color info'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%m%' OR mc.note LIKE '%9%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%r%' OR mi.info LIKE '%o%')
AND n.gender = 'm'
AND n.name LIKE '%n%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1888 AND 2002;",384,/*+  SeqScan(n) IndexOnlyScan(an person_id_aka_name_cat_1) IndexScan(ci person_id_cast_info_cat_1) SeqScan(rt) IndexScan(t cat_title_1_pkey) IndexScan(mi movie_id_movie_info_cat_1) SeqScan(it) IndexScan(mc movie_id_movie_companies_cat_1) IndexScan(cn cat_company_name_1_pkey) IndexOnlyScan(chn cat_char_name_1_pkey) NestLoop(n an) NestLoop(n an ci) HashJoin(n an ci rt) NestLoop(n an ci rt t) NestLoop(n an ci rt t mi) HashJoin(n an ci rt t mi it) NestLoop(n an ci rt t mi it mc) NestLoop(n an ci rt t mi it mc cn) NestLoop(n an ci rt t mi it mc cn chn) Leading((((((((((n an) ci) rt) t) mi) it) mc) cn) chn)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM cat_aka_name_1 AS an,
   cat_char_name_1 AS chn,
   cat_cast_info_1 AS ci,
   cat_company_name_1 AS cn,
   cat_info_type_1 AS it,
  cat_movie_companies_1 AS mc,
   cat_movie_info_1 AS mi,
   cat_name_1 AS n,
   cat_role_type_1 AS rt,
   cat_title_1 AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(as James M. King)', '(as Bachan Pachera)', '(as James Kleeman)', '(as Surinder Sodhi)', '(as Sasha Prodan)')
AND cn.country_code = '[us]'
AND it.info = 'release dates'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%d%' OR mc.note LIKE '%d%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%w%' OR mi.info LIKE '%t%')
AND n.gender = 'm'
AND n.name LIKE '%y%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1945 AND 2009;",384,/*+  SeqScan(n) IndexOnlyScan(an person_id_aka_name_cat_1) IndexScan(ci person_id_cast_info_cat_1) SeqScan(rt) IndexScan(t cat_title_1_pkey) IndexScan(mi movie_id_movie_info_cat_1) SeqScan(it) IndexScan(mc movie_id_movie_companies_cat_1) IndexScan(cn cat_company_name_1_pkey) IndexOnlyScan(chn cat_char_name_1_pkey) NestLoop(n an) NestLoop(n an ci) HashJoin(n an ci rt) NestLoop(n an ci rt t) NestLoop(n an ci rt t mi) HashJoin(n an ci rt t mi it) NestLoop(n an ci rt t mi it mc) NestLoop(n an ci rt t mi it mc cn) NestLoop(n an ci rt t mi it mc cn chn) Leading((((((((((n an) ci) rt) t) mi) it) mc) cn) chn)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM cat_aka_name_1 AS an,
   cat_char_name_1 AS chn,
   cat_cast_info_1 AS ci,
   cat_company_name_1 AS cn,
   cat_info_type_1 AS it,
  cat_movie_companies_1 AS mc,
   cat_movie_info_1 AS mi,
   cat_name_1 AS n,
   cat_role_type_1 AS rt,
   cat_title_1 AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(as James M. King)', '(as Duane BouttÃ©)', '(as M. Galkin)', '(as Angel Caprice)', '(as Zaheer)')
AND cn.country_code = '[us]'
AND it.info = 'locations'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%n%' OR mc.note LIKE '%u%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%t%' OR mi.info LIKE '%r%')
AND n.gender = 'm'
AND n.name LIKE '%,%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1952 AND 2009;",384,/*+  SeqScan(n) IndexOnlyScan(an person_id_aka_name_cat_1) IndexScan(ci person_id_cast_info_cat_1) SeqScan(rt) IndexScan(t cat_title_1_pkey) IndexScan(mi movie_id_movie_info_cat_1) SeqScan(it) IndexScan(mc movie_id_movie_companies_cat_1) IndexScan(cn cat_company_name_1_pkey) IndexOnlyScan(chn cat_char_name_1_pkey) NestLoop(n an) NestLoop(n an ci) HashJoin(n an ci rt) NestLoop(n an ci rt t) NestLoop(n an ci rt t mi) HashJoin(n an ci rt t mi it) NestLoop(n an ci rt t mi it mc) NestLoop(n an ci rt t mi it mc cn) NestLoop(n an ci rt t mi it mc cn chn) Leading((((((((((n an) ci) rt) t) mi) it) mc) cn) chn)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM cat_aka_name_1 AS an,
   cat_char_name_1 AS chn,
   cat_cast_info_1 AS ci,
   cat_company_name_1 AS cn,
   cat_info_type_1 AS it,
  cat_movie_companies_1 AS mc,
   cat_movie_info_1 AS mi,
   cat_name_1 AS n,
   cat_role_type_1 AS rt,
   cat_title_1 AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(uncredited)', '(as Shannon Walsh)', '(firearms)', '(Veterinario)', '(as Frankie Nasso)')
AND cn.country_code = '[us]'
AND it.info = 'release dates'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%)%' OR mc.note LIKE '%U%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%c%' OR mi.info LIKE '%5%')
AND n.gender = 'm'
AND n.name LIKE '%n%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1907 AND 1967;",384,/*+  SeqScan(n) IndexOnlyScan(an person_id_aka_name_cat_1) IndexScan(ci person_id_cast_info_cat_1) SeqScan(rt) IndexScan(t cat_title_1_pkey) IndexScan(mi movie_id_movie_info_cat_1) SeqScan(it) IndexScan(mc movie_id_movie_companies_cat_1) IndexScan(cn cat_company_name_1_pkey) IndexOnlyScan(chn cat_char_name_1_pkey) NestLoop(n an) NestLoop(n an ci) HashJoin(n an ci rt) NestLoop(n an ci rt t) NestLoop(n an ci rt t mi) HashJoin(n an ci rt t mi it) NestLoop(n an ci rt t mi it mc) NestLoop(n an ci rt t mi it mc cn) NestLoop(n an ci rt t mi it mc cn chn) Leading((((((((((n an) ci) rt) t) mi) it) mc) cn) chn)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM cat_aka_name_1 AS an,
   cat_char_name_1 AS chn,
   cat_cast_info_1 AS ci,
   cat_company_name_1 AS cn,
   cat_info_type_1 AS it,
  cat_movie_companies_1 AS mc,
   cat_movie_info_1 AS mi,
   cat_name_1 AS n,
   cat_role_type_1 AS rt,
   cat_title_1 AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(uncredited)', '(""Earth"")', '(as Ciprian Gilles)', '(stand-in: R. Lowe)', '(Michael''s Son)')
AND cn.country_code = '[us]'
AND it.info = 'release dates'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%S%' OR mc.note LIKE '%(%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%1%' OR mi.info LIKE '%o%')
AND n.gender = 'm'
AND n.name LIKE '%,%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1929 AND 2002;",384,/*+  SeqScan(n) IndexOnlyScan(an person_id_aka_name_cat_1) IndexScan(ci person_id_cast_info_cat_1) SeqScan(rt) IndexScan(t cat_title_1_pkey) IndexScan(mi movie_id_movie_info_cat_1) SeqScan(it) IndexScan(mc movie_id_movie_companies_cat_1) IndexScan(cn cat_company_name_1_pkey) IndexOnlyScan(chn cat_char_name_1_pkey) NestLoop(n an) NestLoop(n an ci) HashJoin(n an ci rt) NestLoop(n an ci rt t) NestLoop(n an ci rt t mi) HashJoin(n an ci rt t mi it) NestLoop(n an ci rt t mi it mc) NestLoop(n an ci rt t mi it mc cn) NestLoop(n an ci rt t mi it mc cn chn) Leading((((((((((n an) ci) rt) t) mi) it) mc) cn) chn)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM cat_aka_name_1 AS an,
   cat_char_name_1 AS chn,
   cat_cast_info_1 AS ci,
   cat_company_name_1 AS cn,
   cat_info_type_1 AS it,
  cat_movie_companies_1 AS mc,
   cat_movie_info_1 AS mi,
   cat_name_1 AS n,
   cat_role_type_1 AS rt,
   cat_title_1 AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(voice) (uncredited)', '(diving engineer)', '(rushes contact)', '(telefon operator)', '(Shaw)')
AND cn.country_code = '[fi]'
AND it.info = 'quotes'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%)%' OR mc.note LIKE '%H%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%a%' OR mi.info LIKE '%y%')
AND n.gender = 'm'
AND n.name LIKE '%y%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1968 AND 2008;",384,/*+  SeqScan(n) IndexOnlyScan(an person_id_aka_name_cat_1) IndexScan(ci person_id_cast_info_cat_1) SeqScan(rt) IndexScan(t cat_title_1_pkey) IndexScan(mi movie_id_movie_info_cat_1) SeqScan(it) IndexScan(mc movie_id_movie_companies_cat_1) IndexScan(cn cat_company_name_1_pkey) IndexOnlyScan(chn cat_char_name_1_pkey) NestLoop(n an) NestLoop(n an ci) HashJoin(n an ci rt) NestLoop(n an ci rt t) NestLoop(n an ci rt t mi) HashJoin(n an ci rt t mi it) NestLoop(n an ci rt t mi it mc) NestLoop(n an ci rt t mi it mc cn) NestLoop(n an ci rt t mi it mc cn chn) Leading((((((((((n an) ci) rt) t) mi) it) mc) cn) chn)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM cat_aka_name_1 AS an,
   cat_char_name_1 AS chn,
   cat_cast_info_1 AS ci,
   cat_company_name_1 AS cn,
   cat_info_type_1 AS it,
  cat_movie_companies_1 AS mc,
   cat_movie_info_1 AS mi,
   cat_name_1 AS n,
   cat_role_type_1 AS rt,
   cat_title_1 AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(as Anthony Fridjhon)', '(as Zell Covington)', '(voice: US version)', '(Luisa)', '(as James Hilbun)')
AND cn.country_code = '[nl]'
AND it.info = 'alternate versions'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%)%' OR mc.note LIKE '%r%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%o%' OR mi.info LIKE '%t%')
AND n.gender = 'm'
AND n.name LIKE '%i%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1891 AND 2020;",384,/*+  SeqScan(n) IndexOnlyScan(an person_id_aka_name_cat_1) IndexScan(ci person_id_cast_info_cat_1) SeqScan(rt) IndexScan(t cat_title_1_pkey) IndexScan(mi movie_id_movie_info_cat_1) SeqScan(it) IndexScan(mc movie_id_movie_companies_cat_1) IndexScan(cn cat_company_name_1_pkey) IndexOnlyScan(chn cat_char_name_1_pkey) NestLoop(n an) NestLoop(n an ci) HashJoin(n an ci rt) NestLoop(n an ci rt t) NestLoop(n an ci rt t mi) HashJoin(n an ci rt t mi it) NestLoop(n an ci rt t mi it mc) NestLoop(n an ci rt t mi it mc cn) NestLoop(n an ci rt t mi it mc cn chn) Leading((((((((((n an) ci) rt) t) mi) it) mc) cn) chn)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM cat_aka_name_1 AS an,
   cat_char_name_1 AS chn,
   cat_cast_info_1 AS ci,
   cat_company_name_1 AS cn,
   cat_info_type_1 AS it,
  cat_movie_companies_1 AS mc,
   cat_movie_info_1 AS mi,
   cat_name_1 AS n,
   cat_role_type_1 AS rt,
   cat_title_1 AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(voice) (uncredited)', '(segment ""Bone"")', '(Boss 2)', '(as Sonja Clifton)', '(as Lu Yang)')
AND cn.country_code = '[de]'
AND it.info = 'quotes'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%0%' OR mc.note LIKE '%t%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%y%' OR mi.info LIKE '%w%')
AND n.gender = 'm'
AND n.name LIKE '%o%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1920 AND 2011;",384,/*+  SeqScan(n) IndexOnlyScan(an person_id_aka_name_cat_1) IndexScan(ci person_id_cast_info_cat_1) SeqScan(rt) IndexScan(t cat_title_1_pkey) IndexScan(mi movie_id_movie_info_cat_1) SeqScan(it) IndexScan(mc movie_id_movie_companies_cat_1) IndexScan(cn cat_company_name_1_pkey) IndexOnlyScan(chn cat_char_name_1_pkey) NestLoop(n an) NestLoop(n an ci) HashJoin(n an ci rt) NestLoop(n an ci rt t) NestLoop(n an ci rt t mi) HashJoin(n an ci rt t mi it) NestLoop(n an ci rt t mi it mc) NestLoop(n an ci rt t mi it mc cn) NestLoop(n an ci rt t mi it mc cn chn) Leading((((((((((n an) ci) rt) t) mi) it) mc) cn) chn)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM cat_aka_name_1 AS an,
   cat_char_name_1 AS chn,
   cat_cast_info_1 AS ci,
   cat_company_name_1 AS cn,
   cat_info_type_1 AS it,
  cat_movie_companies_1 AS mc,
   cat_movie_info_1 AS mi,
   cat_name_1 AS n,
   cat_role_type_1 AS rt,
   cat_title_1 AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(uncredited)', '(as Ed Lewis)', '(as Bela Karolyi)', '(as Miguel Deeney)', '(as Hoyt Smith)')
AND cn.country_code = '[us]'
AND it.info = 'trivia'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%r%' OR mc.note LIKE '%6%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%.%' OR mi.info LIKE '%H%')
AND n.gender = 'm'
AND n.name LIKE '%i%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1916 AND 2019;",384,/*+  SeqScan(n) IndexOnlyScan(an person_id_aka_name_cat_1) IndexScan(ci person_id_cast_info_cat_1) SeqScan(rt) IndexScan(t cat_title_1_pkey) IndexScan(mi movie_id_movie_info_cat_1) SeqScan(it) IndexScan(mc movie_id_movie_companies_cat_1) IndexScan(cn cat_company_name_1_pkey) IndexOnlyScan(chn cat_char_name_1_pkey) NestLoop(n an) NestLoop(n an ci) HashJoin(n an ci rt) NestLoop(n an ci rt t) NestLoop(n an ci rt t mi) HashJoin(n an ci rt t mi it) NestLoop(n an ci rt t mi it mc) NestLoop(n an ci rt t mi it mc cn) NestLoop(n an ci rt t mi it mc cn chn) Leading((((((((((n an) ci) rt) t) mi) it) mc) cn) chn)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM cat_aka_name_1 AS an,
   cat_char_name_1 AS chn,
   cat_cast_info_1 AS ci,
   cat_company_name_1 AS cn,
   cat_info_type_1 AS it,
  cat_movie_companies_1 AS mc,
   cat_movie_info_1 AS mi,
   cat_name_1 AS n,
   cat_role_type_1 AS rt,
   cat_title_1 AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(uncredited)', '(as Tonia Dimou)', '(as Gianni Glori)', '(as Roscoe DeSpain)', '(as Teo Corban)')
AND cn.country_code = '[us]'
AND it.info = 'release dates'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%V%' OR mc.note LIKE '%(%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%c%' OR mi.info LIKE '%e%')
AND n.gender = 'm'
AND n.name LIKE '%l%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1905 AND 1961;",384,/*+  SeqScan(n) IndexOnlyScan(an person_id_aka_name_cat_1) IndexScan(ci person_id_cast_info_cat_1) SeqScan(rt) IndexScan(t cat_title_1_pkey) IndexScan(mi movie_id_movie_info_cat_1) SeqScan(it) IndexScan(mc movie_id_movie_companies_cat_1) IndexScan(cn cat_company_name_1_pkey) IndexOnlyScan(chn cat_char_name_1_pkey) NestLoop(n an) NestLoop(n an ci) HashJoin(n an ci rt) NestLoop(n an ci rt t) NestLoop(n an ci rt t mi) HashJoin(n an ci rt t mi it) NestLoop(n an ci rt t mi it mc) NestLoop(n an ci rt t mi it mc cn) NestLoop(n an ci rt t mi it mc cn chn) Leading((((((((((n an) ci) rt) t) mi) it) mc) cn) chn)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM cat_aka_name_1 AS an,
   cat_char_name_1 AS chn,
   cat_cast_info_1 AS ci,
   cat_company_name_1 AS cn,
   cat_info_type_1 AS it,
  cat_movie_companies_1 AS mc,
   cat_movie_info_1 AS mi,
   cat_name_1 AS n,
   cat_role_type_1 AS rt,
   cat_title_1 AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(uncredited)', '(as Rajinder Nath)', '(as Phil Cahn)', '(Dan''s sister)', '(leader)')
AND cn.country_code = '[us]'
AND it.info = 'color info'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%)%' OR mc.note LIKE '%A%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%o%' OR mi.info LIKE '%o%')
AND n.gender = 'm'
AND n.name LIKE '%i%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1932 AND 2012;",384,/*+  SeqScan(n) IndexOnlyScan(an person_id_aka_name_cat_1) IndexScan(ci person_id_cast_info_cat_1) SeqScan(rt) IndexScan(t cat_title_1_pkey) IndexScan(mi movie_id_movie_info_cat_1) SeqScan(it) IndexScan(mc movie_id_movie_companies_cat_1) IndexScan(cn cat_company_name_1_pkey) IndexOnlyScan(chn cat_char_name_1_pkey) NestLoop(n an) NestLoop(n an ci) HashJoin(n an ci rt) NestLoop(n an ci rt t) NestLoop(n an ci rt t mi) HashJoin(n an ci rt t mi it) NestLoop(n an ci rt t mi it mc) NestLoop(n an ci rt t mi it mc cn) NestLoop(n an ci rt t mi it mc cn chn) Leading((((((((((n an) ci) rt) t) mi) it) mc) cn) chn)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM cat_aka_name_1 AS an,
   cat_char_name_1 AS chn,
   cat_cast_info_1 AS ci,
   cat_company_name_1 AS cn,
   cat_info_type_1 AS it,
  cat_movie_companies_1 AS mc,
   cat_movie_info_1 AS mi,
   cat_name_1 AS n,
   cat_role_type_1 AS rt,
   cat_title_1 AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(as James M. King)', '(as Bartha JÃ¡nos)', '(assistant: DIT)', '(as Lil Bob McCall)', '(as Bjorn Piron)')
AND cn.country_code = '[us]'
AND it.info = 'locations'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%n%' OR mc.note LIKE '%i%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%S%' OR mi.info LIKE '%h%')
AND n.gender = 'm'
AND n.name LIKE '%m%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1891 AND 2015;",384,/*+  SeqScan(n) IndexOnlyScan(an person_id_aka_name_cat_1) IndexScan(ci person_id_cast_info_cat_1) SeqScan(rt) IndexScan(t cat_title_1_pkey) IndexScan(mi movie_id_movie_info_cat_1) SeqScan(it) IndexScan(mc movie_id_movie_companies_cat_1) IndexScan(cn cat_company_name_1_pkey) IndexOnlyScan(chn cat_char_name_1_pkey) NestLoop(n an) NestLoop(n an ci) HashJoin(n an ci rt) NestLoop(n an ci rt t) NestLoop(n an ci rt t mi) HashJoin(n an ci rt t mi it) NestLoop(n an ci rt t mi it mc) NestLoop(n an ci rt t mi it mc cn) NestLoop(n an ci rt t mi it mc cn chn) Leading((((((((((n an) ci) rt) t) mi) it) mc) cn) chn)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM cat_aka_name_1 AS an,
   cat_char_name_1 AS chn,
   cat_cast_info_1 AS ci,
   cat_company_name_1 AS cn,
   cat_info_type_1 AS it,
  cat_movie_companies_1 AS mc,
   cat_movie_info_1 AS mi,
   cat_name_1 AS n,
   cat_role_type_1 AS rt,
   cat_title_1 AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(as Anthony Fridjhon)', '(as Jules KrÃ¼ger)', '(as ArtÃ­z Gener)', '(as Lise Brial)', '(as Dimitri Bitenc)')
AND cn.country_code = '[nl]'
AND it.info = 'tech info'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%(%' OR mc.note LIKE '%(%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%3%' OR mi.info LIKE '%P%')
AND n.gender = 'm'
AND n.name LIKE '%j%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1965 AND 2015;",384,/*+  SeqScan(n) IndexOnlyScan(an person_id_aka_name_cat_1) IndexScan(ci person_id_cast_info_cat_1) SeqScan(rt) IndexScan(t cat_title_1_pkey) IndexScan(mi movie_id_movie_info_cat_1) SeqScan(it) IndexScan(mc movie_id_movie_companies_cat_1) IndexScan(cn cat_company_name_1_pkey) IndexOnlyScan(chn cat_char_name_1_pkey) NestLoop(n an) NestLoop(n an ci) HashJoin(n an ci rt) NestLoop(n an ci rt t) NestLoop(n an ci rt t mi) HashJoin(n an ci rt t mi it) NestLoop(n an ci rt t mi it mc) NestLoop(n an ci rt t mi it mc cn) NestLoop(n an ci rt t mi it mc cn chn) Leading((((((((((n an) ci) rt) t) mi) it) mc) cn) chn)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM cat_aka_name_1 AS an,
   cat_char_name_1 AS chn,
   cat_cast_info_1 AS ci,
   cat_company_name_1 AS cn,
   cat_info_type_1 AS it,
  cat_movie_companies_1 AS mc,
   cat_movie_info_1 AS mi,
   cat_name_1 AS n,
   cat_role_type_1 AS rt,
   cat_title_1 AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(uncredited)', '(as Tommy Born)', '(as Yuliis Ruval)', '(as Rose M. Abdoo)', '(Dead)')
AND cn.country_code = '[us]'
AND it.info = 'goofs'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%l%' OR mc.note LIKE '%t%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%p%' OR mi.info LIKE '%o%')
AND n.gender = 'm'
AND n.name LIKE '%e%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1934 AND 1989;",384,/*+  SeqScan(n) IndexOnlyScan(an person_id_aka_name_cat_1) IndexScan(ci person_id_cast_info_cat_1) SeqScan(rt) IndexScan(t cat_title_1_pkey) IndexScan(mi movie_id_movie_info_cat_1) SeqScan(it) IndexScan(mc movie_id_movie_companies_cat_1) IndexScan(cn cat_company_name_1_pkey) IndexOnlyScan(chn cat_char_name_1_pkey) NestLoop(n an) NestLoop(n an ci) HashJoin(n an ci rt) NestLoop(n an ci rt t) NestLoop(n an ci rt t mi) HashJoin(n an ci rt t mi it) NestLoop(n an ci rt t mi it mc) NestLoop(n an ci rt t mi it mc cn) NestLoop(n an ci rt t mi it mc cn chn) Leading((((((((((n an) ci) rt) t) mi) it) mc) cn) chn)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM cat_aka_name_1 AS an,
   cat_char_name_1 AS chn,
   cat_cast_info_1 AS ci,
   cat_company_name_1 AS cn,
   cat_info_type_1 AS it,
  cat_movie_companies_1 AS mc,
   cat_movie_info_1 AS mi,
   cat_name_1 AS n,
   cat_role_type_1 AS rt,
   cat_title_1 AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(voice) (uncredited)', '(as Jorg Fockele)', '(as Michael Dayton)', '(story ""Klin"")', '(as Matt Saldivar)')
AND cn.country_code = '[fi]'
AND it.info = 'quotes'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%4%' OR mc.note LIKE '%D%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%y%' OR mi.info LIKE '%l%')
AND n.gender = 'm'
AND n.name LIKE '%d%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1933 AND 2011;",384,/*+  SeqScan(n) IndexOnlyScan(an person_id_aka_name_cat_1) IndexScan(ci person_id_cast_info_cat_1) SeqScan(rt) IndexScan(t cat_title_1_pkey) IndexScan(mi movie_id_movie_info_cat_1) SeqScan(it) IndexScan(mc movie_id_movie_companies_cat_1) IndexScan(cn cat_company_name_1_pkey) IndexOnlyScan(chn cat_char_name_1_pkey) NestLoop(n an) NestLoop(n an ci) HashJoin(n an ci rt) NestLoop(n an ci rt t) NestLoop(n an ci rt t mi) HashJoin(n an ci rt t mi it) NestLoop(n an ci rt t mi it mc) NestLoop(n an ci rt t mi it mc cn) NestLoop(n an ci rt t mi it mc cn chn) Leading((((((((((n an) ci) rt) t) mi) it) mc) cn) chn)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM cat_aka_name_1 AS an,
   cat_char_name_1 AS chn,
   cat_cast_info_1 AS ci,
   cat_company_name_1 AS cn,
   cat_info_type_1 AS it,
  cat_movie_companies_1 AS mc,
   cat_movie_info_1 AS mi,
   cat_name_1 AS n,
   cat_role_type_1 AS rt,
   cat_title_1 AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(as James M. King)', '(as Volodya Savin)', '(as Anthony Meyer)', '(as Roy D''arcy)', '(as Giblets)')
AND cn.country_code = '[us]'
AND it.info = 'locations'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%(%' OR mc.note LIKE '%d%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%S%' OR mi.info LIKE '%A%')
AND n.gender = 'm'
AND n.name LIKE '%n%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1891 AND 2008;",384,/*+  SeqScan(n) IndexOnlyScan(an person_id_aka_name_cat_1) IndexScan(ci person_id_cast_info_cat_1) SeqScan(rt) IndexScan(t cat_title_1_pkey) IndexScan(mi movie_id_movie_info_cat_1) SeqScan(it) IndexScan(mc movie_id_movie_companies_cat_1) IndexScan(cn cat_company_name_1_pkey) IndexOnlyScan(chn cat_char_name_1_pkey) NestLoop(n an) NestLoop(n an ci) HashJoin(n an ci rt) NestLoop(n an ci rt t) NestLoop(n an ci rt t mi) HashJoin(n an ci rt t mi it) NestLoop(n an ci rt t mi it mc) NestLoop(n an ci rt t mi it mc cn) NestLoop(n an ci rt t mi it mc cn chn) Leading((((((((((n an) ci) rt) t) mi) it) mc) cn) chn)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM cat_aka_name_1 AS an,
   cat_char_name_1 AS chn,
   cat_cast_info_1 AS ci,
   cat_company_name_1 AS cn,
   cat_info_type_1 AS it,
  cat_movie_companies_1 AS mc,
   cat_movie_info_1 AS mi,
   cat_name_1 AS n,
   cat_role_type_1 AS rt,
   cat_title_1 AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(as James M. King)', '(as Ferrara)', '(as Stephen Day)', '(as Josmar)', '(as Zion Baruch)')
AND cn.country_code = '[us]'
AND it.info = 'release dates'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%n%' OR mc.note LIKE '%d%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%0%' OR mi.info LIKE '%i%')
AND n.gender = 'm'
AND n.name LIKE '%m%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1934 AND 2015;",384,/*+  SeqScan(n) IndexOnlyScan(an person_id_aka_name_cat_1) IndexScan(ci person_id_cast_info_cat_1) SeqScan(rt) IndexScan(t cat_title_1_pkey) IndexScan(mi movie_id_movie_info_cat_1) SeqScan(it) IndexScan(mc movie_id_movie_companies_cat_1) IndexScan(cn cat_company_name_1_pkey) IndexOnlyScan(chn cat_char_name_1_pkey) NestLoop(n an) NestLoop(n an ci) HashJoin(n an ci rt) NestLoop(n an ci rt t) NestLoop(n an ci rt t mi) HashJoin(n an ci rt t mi it) NestLoop(n an ci rt t mi it mc) NestLoop(n an ci rt t mi it mc cn) NestLoop(n an ci rt t mi it mc cn chn) Leading((((((((((n an) ci) rt) t) mi) it) mc) cn) chn)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM cat_aka_name_1 AS an,
   cat_char_name_1 AS chn,
   cat_cast_info_1 AS ci,
   cat_company_name_1 AS cn,
   cat_info_type_1 AS it,
  cat_movie_companies_1 AS mc,
   cat_movie_info_1 AS mi,
   cat_name_1 AS n,
   cat_role_type_1 AS rt,
   cat_title_1 AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(uncredited)', '(as Brian Schaefer)', '(as Kayla Keatley)', '(as Jeremy Shern)', '(as Matthew Yuan)')
AND cn.country_code = '[us]'
AND it.info = 'release dates'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%o%' OR mc.note LIKE '%g%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%m%' OR mi.info LIKE '%e%')
AND n.gender = 'm'
AND n.name LIKE '%B%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1918 AND 1968;",384,/*+  SeqScan(n) IndexOnlyScan(an person_id_aka_name_cat_1) IndexScan(ci person_id_cast_info_cat_1) SeqScan(rt) IndexScan(t cat_title_1_pkey) IndexScan(mi movie_id_movie_info_cat_1) SeqScan(it) IndexScan(mc movie_id_movie_companies_cat_1) IndexScan(cn cat_company_name_1_pkey) IndexOnlyScan(chn cat_char_name_1_pkey) NestLoop(n an) NestLoop(n an ci) HashJoin(n an ci rt) NestLoop(n an ci rt t) NestLoop(n an ci rt t mi) HashJoin(n an ci rt t mi it) NestLoop(n an ci rt t mi it mc) NestLoop(n an ci rt t mi it mc cn) NestLoop(n an ci rt t mi it mc cn chn) Leading((((((((((n an) ci) rt) t) mi) it) mc) cn) chn)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM cat_aka_name_1 AS an,
   cat_char_name_1 AS chn,
   cat_cast_info_1 AS ci,
   cat_company_name_1 AS cn,
   cat_info_type_1 AS it,
  cat_movie_companies_1 AS mc,
   cat_movie_info_1 AS mi,
   cat_name_1 AS n,
   cat_role_type_1 AS rt,
   cat_title_1 AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(voice) (uncredited)', '(as Raj Kishor)', '(as Eric Neve)', '(Ecologist)', '(9.)')
AND cn.country_code = '[fi]'
AND it.info = 'quotes'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%i%' OR mc.note LIKE '%0%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%r%' OR mi.info LIKE '%i%')
AND n.gender = 'm'
AND n.name LIKE '%n%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1956 AND 2015;",384,/*+  SeqScan(n) IndexOnlyScan(an person_id_aka_name_cat_1) IndexScan(ci person_id_cast_info_cat_1) SeqScan(rt) IndexScan(t cat_title_1_pkey) IndexScan(mi movie_id_movie_info_cat_1) SeqScan(it) IndexScan(mc movie_id_movie_companies_cat_1) IndexScan(cn cat_company_name_1_pkey) IndexOnlyScan(chn cat_char_name_1_pkey) NestLoop(n an) NestLoop(n an ci) HashJoin(n an ci rt) NestLoop(n an ci rt t) NestLoop(n an ci rt t mi) HashJoin(n an ci rt t mi it) NestLoop(n an ci rt t mi it mc) NestLoop(n an ci rt t mi it mc cn) NestLoop(n an ci rt t mi it mc cn chn) Leading((((((((((n an) ci) rt) t) mi) it) mc) cn) chn)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM cat_aka_name_1 AS an,
   cat_char_name_1 AS chn,
   cat_cast_info_1 AS ci,
   cat_company_name_1 AS cn,
   cat_info_type_1 AS it,
  cat_movie_companies_1 AS mc,
   cat_movie_info_1 AS mi,
   cat_name_1 AS n,
   cat_role_type_1 AS rt,
   cat_title_1 AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(uncredited)', '(as Jess De Gouw)', '(as Cesar Burgos)', '(as James Christy)', '(as Theresa Sheer)')
AND cn.country_code = '[fi]'
AND it.info = 'goofs'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%l%' OR mc.note LIKE '%)%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%n%' OR mi.info LIKE '%u%')
AND n.gender = 'm'
AND n.name LIKE '%u%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1927 AND 1968;",384,/*+  SeqScan(n) IndexOnlyScan(an person_id_aka_name_cat_1) IndexScan(ci person_id_cast_info_cat_1) SeqScan(rt) IndexScan(t cat_title_1_pkey) IndexScan(mi movie_id_movie_info_cat_1) SeqScan(it) IndexScan(mc movie_id_movie_companies_cat_1) IndexScan(cn cat_company_name_1_pkey) IndexOnlyScan(chn cat_char_name_1_pkey) NestLoop(n an) NestLoop(n an ci) HashJoin(n an ci rt) NestLoop(n an ci rt t) NestLoop(n an ci rt t mi) HashJoin(n an ci rt t mi it) NestLoop(n an ci rt t mi it mc) NestLoop(n an ci rt t mi it mc cn) NestLoop(n an ci rt t mi it mc cn chn) Leading((((((((((n an) ci) rt) t) mi) it) mc) cn) chn)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM cat_aka_name_1 AS an,
   cat_char_name_1 AS chn,
   cat_cast_info_1 AS ci,
   cat_company_name_1 AS cn,
   cat_info_type_1 AS it,
  cat_movie_companies_1 AS mc,
   cat_movie_info_1 AS mi,
   cat_name_1 AS n,
   cat_role_type_1 AS rt,
   cat_title_1 AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(uncredited)', '(as Michael Gates)', '(as Rob Reimer)', '(as Lazaro Perez)', '(as Rajiv Grover)')
AND cn.country_code = '[us]'
AND it.info = 'goofs'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%a%' OR mc.note LIKE '%t%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%a%' OR mi.info LIKE '%r%')
AND n.gender = 'm'
AND n.name LIKE '%m%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1951 AND 1967;",384,/*+  SeqScan(n) IndexOnlyScan(an person_id_aka_name_cat_1) IndexScan(ci person_id_cast_info_cat_1) SeqScan(rt) IndexScan(t cat_title_1_pkey) IndexScan(mi movie_id_movie_info_cat_1) SeqScan(it) IndexScan(mc movie_id_movie_companies_cat_1) IndexScan(cn cat_company_name_1_pkey) IndexOnlyScan(chn cat_char_name_1_pkey) NestLoop(n an) NestLoop(n an ci) HashJoin(n an ci rt) NestLoop(n an ci rt t) NestLoop(n an ci rt t mi) HashJoin(n an ci rt t mi it) NestLoop(n an ci rt t mi it mc) NestLoop(n an ci rt t mi it mc cn) NestLoop(n an ci rt t mi it mc cn chn) Leading((((((((((n an) ci) rt) t) mi) it) mc) cn) chn)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM cat_aka_name_1 AS an,
   cat_char_name_1 AS chn,
   cat_cast_info_1 AS ci,
   cat_company_name_1 AS cn,
   cat_info_type_1 AS it,
  cat_movie_companies_1 AS mc,
   cat_movie_info_1 AS mi,
   cat_name_1 AS n,
   cat_role_type_1 AS rt,
   cat_title_1 AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(voice) (uncredited)', '(Beulah Bass)', '(as Tory Maurer)', '(as Bob Osborne)', '(as Edward Zammit)')
AND cn.country_code = '[fi]'
AND it.info = 'quotes'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%(%' OR mc.note LIKE '%V%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%a%' OR mi.info LIKE '%e%')
AND n.gender = 'm'
AND n.name LIKE '%R%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1897 AND 2011;",384,/*+  SeqScan(n) IndexOnlyScan(an person_id_aka_name_cat_1) IndexScan(ci person_id_cast_info_cat_1) SeqScan(rt) IndexScan(t cat_title_1_pkey) IndexScan(mi movie_id_movie_info_cat_1) SeqScan(it) IndexScan(mc movie_id_movie_companies_cat_1) IndexScan(cn cat_company_name_1_pkey) IndexOnlyScan(chn cat_char_name_1_pkey) NestLoop(n an) NestLoop(n an ci) HashJoin(n an ci rt) NestLoop(n an ci rt t) NestLoop(n an ci rt t mi) HashJoin(n an ci rt t mi it) NestLoop(n an ci rt t mi it mc) NestLoop(n an ci rt t mi it mc cn) NestLoop(n an ci rt t mi it mc cn chn) Leading((((((((((n an) ci) rt) t) mi) it) mc) cn) chn)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM cat_aka_name_1 AS an,
   cat_char_name_1 AS chn,
   cat_cast_info_1 AS ci,
   cat_company_name_1 AS cn,
   cat_info_type_1 AS it,
  cat_movie_companies_1 AS mc,
   cat_movie_info_1 AS mi,
   cat_name_1 AS n,
   cat_role_type_1 AS rt,
   cat_title_1 AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(uncredited)', '(as Martin Slipack)', '(BCI Banker)', '(as Shawna Riley)', '(as Greg Pace)')
AND cn.country_code = '[us]'
AND it.info = 'trivia'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%1%' OR mc.note LIKE '%r%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%Y%' OR mi.info LIKE '%d%')
AND n.gender = 'm'
AND n.name LIKE '%i%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1947 AND 1981;",384,/*+  SeqScan(n) IndexOnlyScan(an person_id_aka_name_cat_1) IndexScan(ci person_id_cast_info_cat_1) SeqScan(rt) IndexScan(t cat_title_1_pkey) IndexScan(mi movie_id_movie_info_cat_1) SeqScan(it) IndexScan(mc movie_id_movie_companies_cat_1) IndexScan(cn cat_company_name_1_pkey) IndexOnlyScan(chn cat_char_name_1_pkey) NestLoop(n an) NestLoop(n an ci) HashJoin(n an ci rt) NestLoop(n an ci rt t) NestLoop(n an ci rt t mi) HashJoin(n an ci rt t mi it) NestLoop(n an ci rt t mi it mc) NestLoop(n an ci rt t mi it mc cn) NestLoop(n an ci rt t mi it mc cn chn) Leading((((((((((n an) ci) rt) t) mi) it) mc) cn) chn)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM cat_aka_name_1 AS an,
   cat_char_name_1 AS chn,
   cat_cast_info_1 AS ci,
   cat_company_name_1 AS cn,
   cat_info_type_1 AS it,
  cat_movie_companies_1 AS mc,
   cat_movie_info_1 AS mi,
   cat_name_1 AS n,
   cat_role_type_1 AS rt,
   cat_title_1 AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(uncredited)', '(as Sophie Pycroft)', '(as Esther Vazquez)', '(as JirÃ­ Krejcik)', '(Pablo''s Rider)')
AND cn.country_code = '[us]'
AND it.info = 'taglines'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%1%' OR mc.note LIKE '%(%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%i%' OR mi.info LIKE '%n%')
AND n.gender = 'm'
AND n.name LIKE '%r%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1895 AND 1967;",384,/*+  SeqScan(n) IndexOnlyScan(an person_id_aka_name_cat_1) IndexScan(ci person_id_cast_info_cat_1) SeqScan(rt) IndexScan(t cat_title_1_pkey) IndexScan(mi movie_id_movie_info_cat_1) SeqScan(it) IndexScan(mc movie_id_movie_companies_cat_1) IndexScan(cn cat_company_name_1_pkey) IndexOnlyScan(chn cat_char_name_1_pkey) NestLoop(n an) NestLoop(n an ci) HashJoin(n an ci rt) NestLoop(n an ci rt t) NestLoop(n an ci rt t mi) HashJoin(n an ci rt t mi it) NestLoop(n an ci rt t mi it mc) NestLoop(n an ci rt t mi it mc cn) NestLoop(n an ci rt t mi it mc cn chn) Leading((((((((((n an) ci) rt) t) mi) it) mc) cn) chn)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM cat_aka_name_1 AS an,
   cat_char_name_1 AS chn,
   cat_cast_info_1 AS ci,
   cat_company_name_1 AS cn,
   cat_info_type_1 AS it,
  cat_movie_companies_1 AS mc,
   cat_movie_info_1 AS mi,
   cat_name_1 AS n,
   cat_role_type_1 AS rt,
   cat_title_1 AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(uncredited)', '(triffid puppeteer)', '(as Ashley Potts)', '(as Chris Simpson)', '(labor coordinator)')
AND cn.country_code = '[us]'
AND it.info = 'quotes'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%D%' OR mc.note LIKE '%)%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%s%' OR mi.info LIKE '%t%')
AND n.gender = 'm'
AND n.name LIKE '%i%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1902 AND 2011;",384,/*+  SeqScan(n) IndexOnlyScan(an person_id_aka_name_cat_1) IndexScan(ci person_id_cast_info_cat_1) SeqScan(rt) IndexScan(t cat_title_1_pkey) IndexScan(mi movie_id_movie_info_cat_1) SeqScan(it) IndexScan(mc movie_id_movie_companies_cat_1) IndexScan(cn cat_company_name_1_pkey) IndexOnlyScan(chn cat_char_name_1_pkey) NestLoop(n an) NestLoop(n an ci) HashJoin(n an ci rt) NestLoop(n an ci rt t) NestLoop(n an ci rt t mi) HashJoin(n an ci rt t mi it) NestLoop(n an ci rt t mi it mc) NestLoop(n an ci rt t mi it mc cn) NestLoop(n an ci rt t mi it mc cn chn) Leading((((((((((n an) ci) rt) t) mi) it) mc) cn) chn)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM cat_aka_name_1 AS an,
   cat_char_name_1 AS chn,
   cat_cast_info_1 AS ci,
   cat_company_name_1 AS cn,
   cat_info_type_1 AS it,
  cat_movie_companies_1 AS mc,
   cat_movie_info_1 AS mi,
   cat_name_1 AS n,
   cat_role_type_1 AS rt,
   cat_title_1 AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(voice) (uncredited)', '(as Dee Plakas)', '(general)', '(as Wolfgang Hofer)', '(as Marisa Stober)')
AND cn.country_code = '[fi]'
AND it.info = 'quotes'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%(%' OR mc.note LIKE '%(%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%n%' OR mi.info LIKE '%""%')
AND n.gender = 'm'
AND n.name LIKE '%y%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1917 AND 2012;",384,/*+  SeqScan(n) IndexOnlyScan(an person_id_aka_name_cat_1) IndexScan(ci person_id_cast_info_cat_1) SeqScan(rt) IndexScan(t cat_title_1_pkey) IndexScan(mi movie_id_movie_info_cat_1) SeqScan(it) IndexScan(mc movie_id_movie_companies_cat_1) IndexScan(cn cat_company_name_1_pkey) IndexOnlyScan(chn cat_char_name_1_pkey) NestLoop(n an) NestLoop(n an ci) HashJoin(n an ci rt) NestLoop(n an ci rt t) NestLoop(n an ci rt t mi) HashJoin(n an ci rt t mi it) NestLoop(n an ci rt t mi it mc) NestLoop(n an ci rt t mi it mc cn) NestLoop(n an ci rt t mi it mc cn chn) Leading((((((((((n an) ci) rt) t) mi) it) mc) cn) chn)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM cat_aka_name_1 AS an,
   cat_char_name_1 AS chn,
   cat_cast_info_1 AS ci,
   cat_company_name_1 AS cn,
   cat_info_type_1 AS it,
  cat_movie_companies_1 AS mc,
   cat_movie_info_1 AS mi,
   cat_name_1 AS n,
   cat_role_type_1 AS rt,
   cat_title_1 AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(uncredited)', '(as Leopold Silos)', '(photoballerism)', '(as Andrea Renda)', '(as Gloria Brown)')
AND cn.country_code = '[nl]'
AND it.info = 'LD sound encoding'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%a%' OR mc.note LIKE '%i%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%a%' OR mi.info LIKE '%t%')
AND n.gender = 'm'
AND n.name LIKE '%l%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1923 AND 1940;",384,/*+  SeqScan(n) IndexOnlyScan(an person_id_aka_name_cat_1) IndexScan(ci person_id_cast_info_cat_1) SeqScan(rt) IndexScan(t cat_title_1_pkey) IndexScan(mi movie_id_movie_info_cat_1) SeqScan(it) IndexScan(mc movie_id_movie_companies_cat_1) IndexScan(cn cat_company_name_1_pkey) IndexOnlyScan(chn cat_char_name_1_pkey) NestLoop(n an) NestLoop(n an ci) HashJoin(n an ci rt) NestLoop(n an ci rt t) NestLoop(n an ci rt t mi) HashJoin(n an ci rt t mi it) NestLoop(n an ci rt t mi it mc) NestLoop(n an ci rt t mi it mc cn) NestLoop(n an ci rt t mi it mc cn chn) Leading((((((((((n an) ci) rt) t) mi) it) mc) cn) chn)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM cat_aka_name_1 AS an,
   cat_char_name_1 AS chn,
   cat_cast_info_1 AS ci,
   cat_company_name_1 AS cn,
   cat_info_type_1 AS it,
  cat_movie_companies_1 AS mc,
   cat_movie_info_1 AS mi,
   cat_name_1 AS n,
   cat_role_type_1 AS rt,
   cat_title_1 AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(uncredited)', '(lead stand in)', '(field researcher)', '(as Giorgos Palios)', '(as Sidney Kearns)')
AND cn.country_code = '[us]'
AND it.info = 'alternate versions'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%(%' OR mc.note LIKE '%l%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%e%' OR mi.info LIKE '%(%')
AND n.gender = 'm'
AND n.name LIKE '%l%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1905 AND 2020;",384,/*+  SeqScan(n) IndexOnlyScan(an person_id_aka_name_cat_1) IndexScan(ci person_id_cast_info_cat_1) SeqScan(rt) IndexScan(t cat_title_1_pkey) IndexScan(mi movie_id_movie_info_cat_1) SeqScan(it) IndexScan(mc movie_id_movie_companies_cat_1) IndexScan(cn cat_company_name_1_pkey) IndexOnlyScan(chn cat_char_name_1_pkey) NestLoop(n an) NestLoop(n an ci) HashJoin(n an ci rt) NestLoop(n an ci rt t) NestLoop(n an ci rt t mi) HashJoin(n an ci rt t mi it) NestLoop(n an ci rt t mi it mc) NestLoop(n an ci rt t mi it mc cn) NestLoop(n an ci rt t mi it mc cn chn) Leading((((((((((n an) ci) rt) t) mi) it) mc) cn) chn)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM cat_aka_name_1 AS an,
   cat_char_name_1 AS chn,
   cat_cast_info_1 AS ci,
   cat_company_name_1 AS cn,
   cat_info_type_1 AS it,
  cat_movie_companies_1 AS mc,
   cat_movie_info_1 AS mi,
   cat_name_1 AS n,
   cat_role_type_1 AS rt,
   cat_title_1 AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(uncredited)', '(nÂ°1005/1988)', '(as Sherry Cloth)', '(novel ""Moths"")', '(as Gudrun Rammler)')
AND cn.country_code = '[us]'
AND it.info = 'tech info'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%C%' OR mc.note LIKE '%1%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%c%' OR mi.info LIKE '%c%')
AND n.gender = 'm'
AND n.name LIKE '%B%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1945 AND 1991;",384,/*+  SeqScan(n) IndexOnlyScan(an person_id_aka_name_cat_1) IndexScan(ci person_id_cast_info_cat_1) SeqScan(rt) IndexScan(t cat_title_1_pkey) IndexScan(mi movie_id_movie_info_cat_1) SeqScan(it) IndexScan(mc movie_id_movie_companies_cat_1) IndexScan(cn cat_company_name_1_pkey) IndexOnlyScan(chn cat_char_name_1_pkey) NestLoop(n an) NestLoop(n an ci) HashJoin(n an ci rt) NestLoop(n an ci rt t) NestLoop(n an ci rt t mi) HashJoin(n an ci rt t mi it) NestLoop(n an ci rt t mi it mc) NestLoop(n an ci rt t mi it mc cn) NestLoop(n an ci rt t mi it mc cn chn) Leading((((((((((n an) ci) rt) t) mi) it) mc) cn) chn)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM cat_aka_name_1 AS an,
   cat_char_name_1 AS chn,
   cat_cast_info_1 AS ci,
   cat_company_name_1 AS cn,
   cat_info_type_1 AS it,
  cat_movie_companies_1 AS mc,
   cat_movie_info_1 AS mi,
   cat_name_1 AS n,
   cat_role_type_1 AS rt,
   cat_title_1 AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(as Anthony Fridjhon)', '(as Marco)', '(as Hans W. Pemmer)', '(as JP Marston)', '(as Tajia Rae)')
AND cn.country_code = '[nl]'
AND it.info = 'certificates'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%n%' OR mc.note LIKE '%N%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%W%' OR mi.info LIKE '%n%')
AND n.gender = 'm'
AND n.name LIKE '%n%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1964 AND 2011;",384,/*+  SeqScan(n) IndexOnlyScan(an person_id_aka_name_cat_1) IndexScan(ci person_id_cast_info_cat_1) SeqScan(rt) IndexScan(t cat_title_1_pkey) IndexScan(mi movie_id_movie_info_cat_1) SeqScan(it) IndexScan(mc movie_id_movie_companies_cat_1) IndexScan(cn cat_company_name_1_pkey) IndexOnlyScan(chn cat_char_name_1_pkey) NestLoop(n an) NestLoop(n an ci) HashJoin(n an ci rt) NestLoop(n an ci rt t) NestLoop(n an ci rt t mi) HashJoin(n an ci rt t mi it) NestLoop(n an ci rt t mi it mc) NestLoop(n an ci rt t mi it mc cn) NestLoop(n an ci rt t mi it mc cn chn) Leading((((((((((n an) ci) rt) t) mi) it) mc) cn) chn)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM cat_aka_name_1 AS an,
   cat_char_name_1 AS chn,
   cat_cast_info_1 AS ci,
   cat_company_name_1 AS cn,
   cat_info_type_1 AS it,
  cat_movie_companies_1 AS mc,
   cat_movie_info_1 AS mi,
   cat_name_1 AS n,
   cat_role_type_1 AS rt,
   cat_title_1 AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(voice) (uncredited)', '(as Himaliya Wala)', '(as Vojta Jasny)', '(as Fanny Gonties)', '(as Pat Becket)')
AND cn.country_code = '[ca]'
AND it.info = 'quotes'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%a%' OR mc.note LIKE '%4%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%:%' OR mi.info LIKE '%o%')
AND n.gender = 'm'
AND n.name LIKE '%d%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1963 AND 2011;",384,/*+  SeqScan(n) IndexOnlyScan(an person_id_aka_name_cat_1) IndexScan(ci person_id_cast_info_cat_1) SeqScan(rt) IndexScan(t cat_title_1_pkey) IndexScan(mi movie_id_movie_info_cat_1) SeqScan(it) IndexScan(mc movie_id_movie_companies_cat_1) IndexScan(cn cat_company_name_1_pkey) IndexOnlyScan(chn cat_char_name_1_pkey) NestLoop(n an) NestLoop(n an ci) HashJoin(n an ci rt) NestLoop(n an ci rt t) NestLoop(n an ci rt t mi) HashJoin(n an ci rt t mi it) NestLoop(n an ci rt t mi it mc) NestLoop(n an ci rt t mi it mc cn) NestLoop(n an ci rt t mi it mc cn chn) Leading((((((((((n an) ci) rt) t) mi) it) mc) cn) chn)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM cat_aka_name_1 AS an,
   cat_char_name_1 AS chn,
   cat_cast_info_1 AS ci,
   cat_company_name_1 AS cn,
   cat_info_type_1 AS it,
  cat_movie_companies_1 AS mc,
   cat_movie_info_1 AS mi,
   cat_name_1 AS n,
   cat_role_type_1 AS rt,
   cat_title_1 AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(as James M. King)', '(computer playback)', '(as Toi Svane)', '(as George DeVries)', '(as Julien St. Jox)')
AND cn.country_code = '[us]'
AND it.info = 'release dates'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%e%' OR mc.note LIKE '%r%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%I%' OR mi.info LIKE '%0%')
AND n.gender = 'm'
AND n.name LIKE '%K%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1910 AND 2012;",384,/*+  SeqScan(n) IndexOnlyScan(an person_id_aka_name_cat_1) IndexScan(ci person_id_cast_info_cat_1) SeqScan(rt) IndexScan(t cat_title_1_pkey) IndexScan(mi movie_id_movie_info_cat_1) SeqScan(it) IndexScan(mc movie_id_movie_companies_cat_1) IndexScan(cn cat_company_name_1_pkey) IndexOnlyScan(chn cat_char_name_1_pkey) NestLoop(n an) NestLoop(n an ci) HashJoin(n an ci rt) NestLoop(n an ci rt t) NestLoop(n an ci rt t mi) HashJoin(n an ci rt t mi it) NestLoop(n an ci rt t mi it mc) NestLoop(n an ci rt t mi it mc cn) NestLoop(n an ci rt t mi it mc cn chn) Leading((((((((((n an) ci) rt) t) mi) it) mc) cn) chn)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM cat_aka_name_1 AS an,
   cat_char_name_1 AS chn,
   cat_cast_info_1 AS ci,
   cat_company_name_1 AS cn,
   cat_info_type_1 AS it,
  cat_movie_companies_1 AS mc,
   cat_movie_info_1 AS mi,
   cat_name_1 AS n,
   cat_role_type_1 AS rt,
   cat_title_1 AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(uncredited)', '(talent buyer)', '(as Eivind Harum)', '(as Premee)', '(as Susie Vernon)')
AND cn.country_code = '[us]'
AND it.info = 'certificates'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%0%' OR mc.note LIKE '%)%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%e%' OR mi.info LIKE '%n%')
AND n.gender = 'm'
AND n.name LIKE '%J%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1896 AND 1997;",384,/*+  SeqScan(n) IndexOnlyScan(an person_id_aka_name_cat_1) IndexScan(ci person_id_cast_info_cat_1) SeqScan(rt) IndexScan(t cat_title_1_pkey) IndexScan(mi movie_id_movie_info_cat_1) SeqScan(it) IndexScan(mc movie_id_movie_companies_cat_1) IndexScan(cn cat_company_name_1_pkey) IndexOnlyScan(chn cat_char_name_1_pkey) NestLoop(n an) NestLoop(n an ci) HashJoin(n an ci rt) NestLoop(n an ci rt t) NestLoop(n an ci rt t mi) HashJoin(n an ci rt t mi it) NestLoop(n an ci rt t mi it mc) NestLoop(n an ci rt t mi it mc cn) NestLoop(n an ci rt t mi it mc cn chn) Leading((((((((((n an) ci) rt) t) mi) it) mc) cn) chn)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM cat_aka_name_1 AS an,
   cat_char_name_1 AS chn,
   cat_cast_info_1 AS ci,
   cat_company_name_1 AS cn,
   cat_info_type_1 AS it,
  cat_movie_companies_1 AS mc,
   cat_movie_info_1 AS mi,
   cat_name_1 AS n,
   cat_role_type_1 AS rt,
   cat_title_1 AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(as James M. King)', '(as Niels Hansen)', '(young man)', '(broadcast rf)', '(as Robert Page)')
AND cn.country_code = '[us]'
AND it.info = 'release dates'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%)%' OR mc.note LIKE '%c%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%a%' OR mi.info LIKE '%2%')
AND n.gender = 'm'
AND n.name LIKE '%,%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1910 AND 2008;",384,/*+  SeqScan(n) IndexOnlyScan(an person_id_aka_name_cat_1) IndexScan(ci person_id_cast_info_cat_1) SeqScan(rt) IndexScan(t cat_title_1_pkey) IndexScan(mi movie_id_movie_info_cat_1) SeqScan(it) IndexScan(mc movie_id_movie_companies_cat_1) IndexScan(cn cat_company_name_1_pkey) IndexOnlyScan(chn cat_char_name_1_pkey) NestLoop(n an) NestLoop(n an ci) HashJoin(n an ci rt) NestLoop(n an ci rt t) NestLoop(n an ci rt t mi) HashJoin(n an ci rt t mi it) NestLoop(n an ci rt t mi it mc) NestLoop(n an ci rt t mi it mc cn) NestLoop(n an ci rt t mi it mc cn chn) Leading((((((((((n an) ci) rt) t) mi) it) mc) cn) chn)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM cat_aka_name_1 AS an,
   cat_char_name_1 AS chn,
   cat_cast_info_1 AS ci,
   cat_company_name_1 AS cn,
   cat_info_type_1 AS it,
  cat_movie_companies_1 AS mc,
   cat_movie_info_1 AS mi,
   cat_name_1 AS n,
   cat_role_type_1 AS rt,
   cat_title_1 AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(uncredited)', '(as Shamar Drew)', '(segment ""Oh G!"")', '(as Zeus Quijano)', '(as Baobao Feng)')
AND cn.country_code = '[us]'
AND it.info = 'locations'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%n%' OR mc.note LIKE '%(%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%i%' OR mi.info LIKE '%S%')
AND n.gender = 'm'
AND n.name LIKE '%,%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1922 AND 1983;",384,/*+  SeqScan(n) IndexOnlyScan(an person_id_aka_name_cat_1) IndexScan(ci person_id_cast_info_cat_1) SeqScan(rt) IndexScan(t cat_title_1_pkey) IndexScan(mi movie_id_movie_info_cat_1) SeqScan(it) IndexScan(mc movie_id_movie_companies_cat_1) IndexScan(cn cat_company_name_1_pkey) IndexOnlyScan(chn cat_char_name_1_pkey) NestLoop(n an) NestLoop(n an ci) HashJoin(n an ci rt) NestLoop(n an ci rt t) NestLoop(n an ci rt t mi) HashJoin(n an ci rt t mi it) NestLoop(n an ci rt t mi it mc) NestLoop(n an ci rt t mi it mc cn) NestLoop(n an ci rt t mi it mc cn chn) Leading((((((((((n an) ci) rt) t) mi) it) mc) cn) chn)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM cat_aka_name_1 AS an,
   cat_char_name_1 AS chn,
   cat_cast_info_1 AS ci,
   cat_company_name_1 AS cn,
   cat_info_type_1 AS it,
  cat_movie_companies_1 AS mc,
   cat_movie_info_1 AS mi,
   cat_name_1 AS n,
   cat_role_type_1 AS rt,
   cat_title_1 AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(as James M. King)', '(anda delegate)', '(as Yelena Petrova)', '(as Ginger Griep)', '(as Martha Milan)')
AND cn.country_code = '[us]'
AND it.info = 'release dates'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%e%' OR mc.note LIKE '%d%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%A%' OR mi.info LIKE '%7%')
AND n.gender = 'm'
AND n.name LIKE '%g%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1956 AND 2014;",384,/*+  SeqScan(n) IndexOnlyScan(an person_id_aka_name_cat_1) IndexScan(ci person_id_cast_info_cat_1) SeqScan(rt) IndexScan(t cat_title_1_pkey) IndexScan(mi movie_id_movie_info_cat_1) SeqScan(it) IndexScan(mc movie_id_movie_companies_cat_1) IndexScan(cn cat_company_name_1_pkey) IndexOnlyScan(chn cat_char_name_1_pkey) NestLoop(n an) NestLoop(n an ci) HashJoin(n an ci rt) NestLoop(n an ci rt t) NestLoop(n an ci rt t mi) HashJoin(n an ci rt t mi it) NestLoop(n an ci rt t mi it mc) NestLoop(n an ci rt t mi it mc cn) NestLoop(n an ci rt t mi it mc cn chn) Leading((((((((((n an) ci) rt) t) mi) it) mc) cn) chn)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM cat_aka_name_1 AS an,
   cat_char_name_1 AS chn,
   cat_cast_info_1 AS ci,
   cat_company_name_1 AS cn,
   cat_info_type_1 AS it,
  cat_movie_companies_1 AS mc,
   cat_movie_info_1 AS mi,
   cat_name_1 AS n,
   cat_role_type_1 AS rt,
   cat_title_1 AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(uncredited)', '(as Steve Tannen)', '(as Ellen Woodston)', '(tank technician)', '(as Anja Sovagovic)')
AND cn.country_code = '[us]'
AND it.info = 'budget'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%r%' OR mc.note LIKE '%2%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%$%' OR mi.info LIKE '%0%')
AND n.gender = 'm'
AND n.name LIKE '%B%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1953 AND 2015;",384,/*+  SeqScan(n) IndexOnlyScan(an person_id_aka_name_cat_1) IndexScan(ci person_id_cast_info_cat_1) SeqScan(rt) IndexScan(t cat_title_1_pkey) IndexScan(mi movie_id_movie_info_cat_1) SeqScan(it) IndexScan(mc movie_id_movie_companies_cat_1) IndexScan(cn cat_company_name_1_pkey) IndexOnlyScan(chn cat_char_name_1_pkey) NestLoop(n an) NestLoop(n an ci) HashJoin(n an ci rt) NestLoop(n an ci rt t) NestLoop(n an ci rt t mi) HashJoin(n an ci rt t mi it) NestLoop(n an ci rt t mi it mc) NestLoop(n an ci rt t mi it mc cn) NestLoop(n an ci rt t mi it mc cn chn) Leading((((((((((n an) ci) rt) t) mi) it) mc) cn) chn)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM cat_aka_name_1 AS an,
   cat_char_name_1 AS chn,
   cat_cast_info_1 AS ci,
   cat_company_name_1 AS cn,
   cat_info_type_1 AS it,
  cat_movie_companies_1 AS mc,
   cat_movie_info_1 AS mi,
   cat_name_1 AS n,
   cat_role_type_1 AS rt,
   cat_title_1 AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(uncredited)', '(as Wiliam Carroll)', '(Raghav)', '(as Vic Belano)', '(stand-in: ""Joe"")')
AND cn.country_code = '[us]'
AND it.info = 'locations'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%)%' OR mc.note LIKE '%(%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%a%' OR mi.info LIKE '%,%')
AND n.gender = 'm'
AND n.name LIKE '%r%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1902 AND 1959;",384,/*+  SeqScan(n) IndexOnlyScan(an person_id_aka_name_cat_1) IndexScan(ci person_id_cast_info_cat_1) SeqScan(rt) IndexScan(t cat_title_1_pkey) IndexScan(mi movie_id_movie_info_cat_1) SeqScan(it) IndexScan(mc movie_id_movie_companies_cat_1) IndexScan(cn cat_company_name_1_pkey) IndexOnlyScan(chn cat_char_name_1_pkey) NestLoop(n an) NestLoop(n an ci) HashJoin(n an ci rt) NestLoop(n an ci rt t) NestLoop(n an ci rt t mi) HashJoin(n an ci rt t mi it) NestLoop(n an ci rt t mi it mc) NestLoop(n an ci rt t mi it mc cn) NestLoop(n an ci rt t mi it mc cn chn) Leading((((((((((n an) ci) rt) t) mi) it) mc) cn) chn)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM cat_aka_name_1 AS an,
   cat_char_name_1 AS chn,
   cat_cast_info_1 AS ci,
   cat_company_name_1 AS cn,
   cat_info_type_1 AS it,
  cat_movie_companies_1 AS mc,
   cat_movie_info_1 AS mi,
   cat_name_1 AS n,
   cat_role_type_1 AS rt,
   cat_title_1 AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(as James M. King)', '(as Selma GÃ¼neri)', '(as S. Borodokin)', '(as Greenstreet)', '(as Angel Satre)')
AND cn.country_code = '[us]'
AND it.info = 'locations'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%d%' OR mc.note LIKE '%r%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%k%' OR mi.info LIKE '%Y%')
AND n.gender = 'm'
AND n.name LIKE '%m%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1928 AND 2015;",384,/*+  SeqScan(n) IndexOnlyScan(an person_id_aka_name_cat_1) IndexScan(ci person_id_cast_info_cat_1) SeqScan(rt) IndexScan(t cat_title_1_pkey) IndexScan(mi movie_id_movie_info_cat_1) SeqScan(it) IndexScan(mc movie_id_movie_companies_cat_1) IndexScan(cn cat_company_name_1_pkey) IndexOnlyScan(chn cat_char_name_1_pkey) NestLoop(n an) NestLoop(n an ci) HashJoin(n an ci rt) NestLoop(n an ci rt t) NestLoop(n an ci rt t mi) HashJoin(n an ci rt t mi it) NestLoop(n an ci rt t mi it mc) NestLoop(n an ci rt t mi it mc cn) NestLoop(n an ci rt t mi it mc cn chn) Leading((((((((((n an) ci) rt) t) mi) it) mc) cn) chn)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM cat_aka_name_1 AS an,
   cat_char_name_1 AS chn,
   cat_cast_info_1 AS ci,
   cat_company_name_1 AS cn,
   cat_info_type_1 AS it,
  cat_movie_companies_1 AS mc,
   cat_movie_info_1 AS mi,
   cat_name_1 AS n,
   cat_role_type_1 AS rt,
   cat_title_1 AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(voice) (uncredited)', '(as Dieter Cole)', '(as Erich Onasch)', '(as Kriti Pant)', '(as V. Kupcha)')
AND cn.country_code = '[ca]'
AND it.info = 'quotes'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%a%' OR mc.note LIKE '%2%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%y%' OR mi.info LIKE '%D%')
AND n.gender = 'm'
AND n.name LIKE '%n%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1906 AND 2017;",384,/*+  SeqScan(n) IndexOnlyScan(an person_id_aka_name_cat_1) IndexScan(ci person_id_cast_info_cat_1) SeqScan(rt) IndexScan(t cat_title_1_pkey) IndexScan(mi movie_id_movie_info_cat_1) SeqScan(it) IndexScan(mc movie_id_movie_companies_cat_1) IndexScan(cn cat_company_name_1_pkey) IndexOnlyScan(chn cat_char_name_1_pkey) NestLoop(n an) NestLoop(n an ci) HashJoin(n an ci rt) NestLoop(n an ci rt t) NestLoop(n an ci rt t mi) HashJoin(n an ci rt t mi it) NestLoop(n an ci rt t mi it mc) NestLoop(n an ci rt t mi it mc cn) NestLoop(n an ci rt t mi it mc cn chn) Leading((((((((((n an) ci) rt) t) mi) it) mc) cn) chn)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM cat_aka_name_1 AS an,
   cat_char_name_1 AS chn,
   cat_cast_info_1 AS ci,
   cat_company_name_1 AS cn,
   cat_info_type_1 AS it,
  cat_movie_companies_1 AS mc,
   cat_movie_info_1 AS mi,
   cat_name_1 AS n,
   cat_role_type_1 AS rt,
   cat_title_1 AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(uncredited)', '(as Simon Valcroze)', '(as Roberto Spriu)', '(as Peter Taite)', '(as Rudy Adams)')
AND cn.country_code = '[us]'
AND it.info = 'copyright holder'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%(%' OR mc.note LIKE '%B%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%i%' OR mi.info LIKE '%u%')
AND n.gender = 'm'
AND n.name LIKE '%l%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1908 AND 1972;",384,/*+  SeqScan(n) IndexOnlyScan(an person_id_aka_name_cat_1) IndexScan(ci person_id_cast_info_cat_1) SeqScan(rt) IndexScan(t cat_title_1_pkey) IndexScan(mi movie_id_movie_info_cat_1) SeqScan(it) IndexScan(mc movie_id_movie_companies_cat_1) IndexScan(cn cat_company_name_1_pkey) IndexOnlyScan(chn cat_char_name_1_pkey) NestLoop(n an) NestLoop(n an ci) HashJoin(n an ci rt) NestLoop(n an ci rt t) NestLoop(n an ci rt t mi) HashJoin(n an ci rt t mi it) NestLoop(n an ci rt t mi it mc) NestLoop(n an ci rt t mi it mc cn) NestLoop(n an ci rt t mi it mc cn chn) Leading((((((((((n an) ci) rt) t) mi) it) mc) cn) chn)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM cat_aka_name_1 AS an,
   cat_char_name_1 AS chn,
   cat_cast_info_1 AS ci,
   cat_company_name_1 AS cn,
   cat_info_type_1 AS it,
  cat_movie_companies_1 AS mc,
   cat_movie_info_1 AS mi,
   cat_name_1 AS n,
   cat_role_type_1 AS rt,
   cat_title_1 AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(voice) (uncredited)', '(as Shriman Partha)', '(as Joy Narayan)', '(as Edwin Roseman)', '(as Jessica R.p.)')
AND cn.country_code = '[de]'
AND it.info = 'quotes'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%a%' OR mc.note LIKE '%r%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%a%' OR mi.info LIKE '%:%')
AND n.gender = 'm'
AND n.name LIKE '%r%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 2000 AND 2017;",384,/*+  SeqScan(n) IndexOnlyScan(an person_id_aka_name_cat_1) IndexScan(ci person_id_cast_info_cat_1) SeqScan(rt) IndexScan(t cat_title_1_pkey) IndexScan(mi movie_id_movie_info_cat_1) SeqScan(it) IndexScan(mc movie_id_movie_companies_cat_1) IndexScan(cn cat_company_name_1_pkey) IndexOnlyScan(chn cat_char_name_1_pkey) NestLoop(n an) NestLoop(n an ci) HashJoin(n an ci rt) NestLoop(n an ci rt t) NestLoop(n an ci rt t mi) HashJoin(n an ci rt t mi it) NestLoop(n an ci rt t mi it mc) NestLoop(n an ci rt t mi it mc cn) NestLoop(n an ci rt t mi it mc cn chn) Leading((((((((((n an) ci) rt) t) mi) it) mc) cn) chn)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM cat_aka_name_1 AS an,
   cat_char_name_1 AS chn,
   cat_cast_info_1 AS ci,
   cat_company_name_1 AS cn,
   cat_info_type_1 AS it,
  cat_movie_companies_1 AS mc,
   cat_movie_info_1 AS mi,
   cat_name_1 AS n,
   cat_role_type_1 AS rt,
   cat_title_1 AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(as James M. King)', '(as Jose Sola)', '(as Baboo Rao)', '(as Lalo Pabano)', '(crianÃ§a 1)')
AND cn.country_code = '[us]'
AND it.info = 'locations'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%c%' OR mc.note LIKE '%(%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%s%' OR mi.info LIKE '%,%')
AND n.gender = 'm'
AND n.name LIKE '%i%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1999 AND 2007;",384,/*+  SeqScan(n) IndexOnlyScan(an person_id_aka_name_cat_1) IndexScan(ci person_id_cast_info_cat_1) SeqScan(rt) IndexScan(t cat_title_1_pkey) IndexScan(mi movie_id_movie_info_cat_1) SeqScan(it) IndexScan(mc movie_id_movie_companies_cat_1) IndexScan(cn cat_company_name_1_pkey) IndexOnlyScan(chn cat_char_name_1_pkey) NestLoop(n an) NestLoop(n an ci) HashJoin(n an ci rt) NestLoop(n an ci rt t) NestLoop(n an ci rt t mi) HashJoin(n an ci rt t mi it) NestLoop(n an ci rt t mi it mc) NestLoop(n an ci rt t mi it mc cn) NestLoop(n an ci rt t mi it mc cn chn) Leading((((((((((n an) ci) rt) t) mi) it) mc) cn) chn)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM cat_aka_name_1 AS an,
   cat_char_name_1 AS chn,
   cat_cast_info_1 AS ci,
   cat_company_name_1 AS cn,
   cat_info_type_1 AS it,
  cat_movie_companies_1 AS mc,
   cat_movie_info_1 AS mi,
   cat_name_1 AS n,
   cat_role_type_1 AS rt,
   cat_title_1 AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(voice) (uncredited)', '(guardrobe)', '(as Lucille Ewing)', '(as ThÃ©o Meurisse)', '(as Chang Leih)')
AND cn.country_code = '[fi]'
AND it.info = 'quotes'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%i%' OR mc.note LIKE '%)%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%h%' OR mi.info LIKE '%.%')
AND n.gender = 'm'
AND n.name LIKE '%B%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1911 AND 2014;",384,/*+  SeqScan(n) IndexOnlyScan(an person_id_aka_name_cat_1) IndexScan(ci person_id_cast_info_cat_1) SeqScan(rt) IndexScan(t cat_title_1_pkey) IndexScan(mi movie_id_movie_info_cat_1) SeqScan(it) IndexScan(mc movie_id_movie_companies_cat_1) IndexScan(cn cat_company_name_1_pkey) IndexOnlyScan(chn cat_char_name_1_pkey) NestLoop(n an) NestLoop(n an ci) HashJoin(n an ci rt) NestLoop(n an ci rt t) NestLoop(n an ci rt t mi) HashJoin(n an ci rt t mi it) NestLoop(n an ci rt t mi it mc) NestLoop(n an ci rt t mi it mc cn) NestLoop(n an ci rt t mi it mc cn chn) Leading((((((((((n an) ci) rt) t) mi) it) mc) cn) chn)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM cat_aka_name_1 AS an,
   cat_char_name_1 AS chn,
   cat_cast_info_1 AS ci,
   cat_company_name_1 AS cn,
   cat_info_type_1 AS it,
  cat_movie_companies_1 AS mc,
   cat_movie_info_1 AS mi,
   cat_name_1 AS n,
   cat_role_type_1 AS rt,
   cat_title_1 AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(uncredited)', '(as Ivar Kantz)', '(as Esther Oldham)', '(as Avent Christie)', '(as Eddie Mann)')
AND cn.country_code = '[us]'
AND it.info = 'tech info'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%)%' OR mc.note LIKE '%(%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%A%' OR mi.info LIKE '%.%')
AND n.gender = 'm'
AND n.name LIKE '%l%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1890 AND 1961;",384,/*+  SeqScan(n) IndexOnlyScan(an person_id_aka_name_cat_1) IndexScan(ci person_id_cast_info_cat_1) SeqScan(rt) IndexScan(t cat_title_1_pkey) IndexScan(mi movie_id_movie_info_cat_1) SeqScan(it) IndexScan(mc movie_id_movie_companies_cat_1) IndexScan(cn cat_company_name_1_pkey) IndexOnlyScan(chn cat_char_name_1_pkey) NestLoop(n an) NestLoop(n an ci) HashJoin(n an ci rt) NestLoop(n an ci rt t) NestLoop(n an ci rt t mi) HashJoin(n an ci rt t mi it) NestLoop(n an ci rt t mi it mc) NestLoop(n an ci rt t mi it mc cn) NestLoop(n an ci rt t mi it mc cn chn) Leading((((((((((n an) ci) rt) t) mi) it) mc) cn) chn)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM cat_aka_name_1 AS an,
   cat_char_name_1 AS chn,
   cat_cast_info_1 AS ci,
   cat_company_name_1 AS cn,
   cat_info_type_1 AS it,
  cat_movie_companies_1 AS mc,
   cat_movie_info_1 AS mi,
   cat_name_1 AS n,
   cat_role_type_1 AS rt,
   cat_title_1 AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(as James M. King)', '(as Noro Ejaita)', '(as Jankidass)', '(as Dan Zanghi)', '(as P. Morskoi)')
AND cn.country_code = '[us]'
AND it.info = 'release dates'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%e%' OR mc.note LIKE '%n%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%1%' OR mi.info LIKE '%l%')
AND n.gender = 'm'
AND n.name LIKE '%g%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1906 AND 2013;",384,/*+  SeqScan(n) IndexOnlyScan(an person_id_aka_name_cat_1) IndexScan(ci person_id_cast_info_cat_1) SeqScan(rt) IndexScan(t cat_title_1_pkey) IndexScan(mi movie_id_movie_info_cat_1) SeqScan(it) IndexScan(mc movie_id_movie_companies_cat_1) IndexScan(cn cat_company_name_1_pkey) IndexOnlyScan(chn cat_char_name_1_pkey) NestLoop(n an) NestLoop(n an ci) HashJoin(n an ci rt) NestLoop(n an ci rt t) NestLoop(n an ci rt t mi) HashJoin(n an ci rt t mi it) NestLoop(n an ci rt t mi it mc) NestLoop(n an ci rt t mi it mc cn) NestLoop(n an ci rt t mi it mc cn chn) Leading((((((((((n an) ci) rt) t) mi) it) mc) cn) chn)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM cat_aka_name_1 AS an,
   cat_char_name_1 AS chn,
   cat_cast_info_1 AS ci,
   cat_company_name_1 AS cn,
   cat_info_type_1 AS it,
  cat_movie_companies_1 AS mc,
   cat_movie_info_1 AS mi,
   cat_name_1 AS n,
   cat_role_type_1 AS rt,
   cat_title_1 AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(uncredited)', '(as Alex Wells)', '(as Michael Weeks)', '(as Bhupinder)', '(executive: CBC)')
AND cn.country_code = '[us]'
AND it.info = 'budget'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%)%' OR mc.note LIKE '%6%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%0%' OR mi.info LIKE '%0%')
AND n.gender = 'm'
AND n.name LIKE '%l%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1917 AND 1974;",384,/*+  SeqScan(n) IndexOnlyScan(an person_id_aka_name_cat_1) IndexScan(ci person_id_cast_info_cat_1) SeqScan(rt) IndexScan(t cat_title_1_pkey) IndexScan(mi movie_id_movie_info_cat_1) SeqScan(it) IndexScan(mc movie_id_movie_companies_cat_1) IndexScan(cn cat_company_name_1_pkey) IndexOnlyScan(chn cat_char_name_1_pkey) NestLoop(n an) NestLoop(n an ci) HashJoin(n an ci rt) NestLoop(n an ci rt t) NestLoop(n an ci rt t mi) HashJoin(n an ci rt t mi it) NestLoop(n an ci rt t mi it mc) NestLoop(n an ci rt t mi it mc cn) NestLoop(n an ci rt t mi it mc cn chn) Leading((((((((((n an) ci) rt) t) mi) it) mc) cn) chn)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM cat_aka_name_1 AS an,
   cat_char_name_1 AS chn,
   cat_cast_info_1 AS ci,
   cat_company_name_1 AS cn,
   cat_info_type_1 AS it,
  cat_movie_companies_1 AS mc,
   cat_movie_info_1 AS mi,
   cat_name_1 AS n,
   cat_role_type_1 AS rt,
   cat_title_1 AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(as James M. King)', '(the poet)', '(as Zhongwen Zhang)', '(as Angela Herrera)', '(as Gabrielle West)')
AND cn.country_code = '[us]'
AND it.info = 'locations'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%(%' OR mc.note LIKE '%n%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%u%' OR mi.info LIKE '%S%')
AND n.gender = 'm'
AND n.name LIKE '%J%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1999 AND 2016;",384,/*+  SeqScan(n) IndexOnlyScan(an person_id_aka_name_cat_1) IndexScan(ci person_id_cast_info_cat_1) SeqScan(rt) IndexScan(t cat_title_1_pkey) IndexScan(mi movie_id_movie_info_cat_1) SeqScan(it) IndexScan(mc movie_id_movie_companies_cat_1) IndexScan(cn cat_company_name_1_pkey) IndexOnlyScan(chn cat_char_name_1_pkey) NestLoop(n an) NestLoop(n an ci) HashJoin(n an ci rt) NestLoop(n an ci rt t) NestLoop(n an ci rt t mi) HashJoin(n an ci rt t mi it) NestLoop(n an ci rt t mi it mc) NestLoop(n an ci rt t mi it mc cn) NestLoop(n an ci rt t mi it mc cn chn) Leading((((((((((n an) ci) rt) t) mi) it) mc) cn) chn)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM cat_aka_name_1 AS an,
   cat_char_name_1 AS chn,
   cat_cast_info_1 AS ci,
   cat_company_name_1 AS cn,
   cat_info_type_1 AS it,
  cat_movie_companies_1 AS mc,
   cat_movie_info_1 AS mi,
   cat_name_1 AS n,
   cat_role_type_1 AS rt,
   cat_title_1 AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(uncredited)', '(as Jorge Fegan)', '(as H. Asmus)', '(Agathon)', '(as Saget)')
AND cn.country_code = '[us]'
AND it.info = 'languages'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%g%' OR mc.note LIKE '%)%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%s%' OR mi.info LIKE '%h%')
AND n.gender = 'm'
AND n.name LIKE '%n%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1910 AND 1963;",384,/*+  SeqScan(n) IndexOnlyScan(an person_id_aka_name_cat_1) IndexScan(ci person_id_cast_info_cat_1) SeqScan(rt) IndexScan(t cat_title_1_pkey) IndexScan(mi movie_id_movie_info_cat_1) SeqScan(it) IndexScan(mc movie_id_movie_companies_cat_1) IndexScan(cn cat_company_name_1_pkey) IndexOnlyScan(chn cat_char_name_1_pkey) NestLoop(n an) NestLoop(n an ci) HashJoin(n an ci rt) NestLoop(n an ci rt t) NestLoop(n an ci rt t mi) HashJoin(n an ci rt t mi it) NestLoop(n an ci rt t mi it mc) NestLoop(n an ci rt t mi it mc cn) NestLoop(n an ci rt t mi it mc cn chn) Leading((((((((((n an) ci) rt) t) mi) it) mc) cn) chn)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM cat_aka_name_1 AS an,
   cat_char_name_1 AS chn,
   cat_cast_info_1 AS ci,
   cat_company_name_1 AS cn,
   cat_info_type_1 AS it,
  cat_movie_companies_1 AS mc,
   cat_movie_info_1 AS mi,
   cat_name_1 AS n,
   cat_role_type_1 AS rt,
   cat_title_1 AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(uncredited)', '(as Dejean)', '(as Wong Long Ki)', '(as Dondon Aligaya)', '(as Brenda Hale)')
AND cn.country_code = '[nl]'
AND it.info = 'printed media reviews'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%e%' OR mc.note LIKE '%e%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%s%' OR mi.info LIKE '%a%')
AND n.gender = 'm'
AND n.name LIKE '%A%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1916 AND 1958;",384,/*+  SeqScan(n) IndexOnlyScan(an person_id_aka_name_cat_1) IndexScan(ci person_id_cast_info_cat_1) SeqScan(rt) IndexScan(t cat_title_1_pkey) IndexScan(mi movie_id_movie_info_cat_1) SeqScan(it) IndexScan(mc movie_id_movie_companies_cat_1) IndexScan(cn cat_company_name_1_pkey) IndexOnlyScan(chn cat_char_name_1_pkey) NestLoop(n an) NestLoop(n an ci) HashJoin(n an ci rt) NestLoop(n an ci rt t) NestLoop(n an ci rt t mi) HashJoin(n an ci rt t mi it) NestLoop(n an ci rt t mi it mc) NestLoop(n an ci rt t mi it mc cn) NestLoop(n an ci rt t mi it mc cn chn) Leading((((((((((n an) ci) rt) t) mi) it) mc) cn) chn)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM cat_aka_name_1 AS an,
   cat_char_name_1 AS chn,
   cat_cast_info_1 AS ci,
   cat_company_name_1 AS cn,
   cat_info_type_1 AS it,
  cat_movie_companies_1 AS mc,
   cat_movie_info_1 AS mi,
   cat_name_1 AS n,
   cat_role_type_1 AS rt,
   cat_title_1 AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(as James M. King)', '(as Jill Martin)', '(as Pepe Aguilar)', '(''CT'')', '(as Cesc Candini)')
AND cn.country_code = '[us]'
AND it.info = 'tech info'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%e%' OR mc.note LIKE '%n%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%b%' OR mi.info LIKE '%a%')
AND n.gender = 'm'
AND n.name LIKE '%m%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1934 AND 2019;",384,/*+  SeqScan(n) IndexOnlyScan(an person_id_aka_name_cat_1) IndexScan(ci person_id_cast_info_cat_1) SeqScan(rt) IndexScan(t cat_title_1_pkey) IndexScan(mi movie_id_movie_info_cat_1) SeqScan(it) IndexScan(mc movie_id_movie_companies_cat_1) IndexScan(cn cat_company_name_1_pkey) IndexOnlyScan(chn cat_char_name_1_pkey) NestLoop(n an) NestLoop(n an ci) HashJoin(n an ci rt) NestLoop(n an ci rt t) NestLoop(n an ci rt t mi) HashJoin(n an ci rt t mi it) NestLoop(n an ci rt t mi it mc) NestLoop(n an ci rt t mi it mc cn) NestLoop(n an ci rt t mi it mc cn chn) Leading((((((((((n an) ci) rt) t) mi) it) mc) cn) chn)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM cat_aka_name_1 AS an,
   cat_char_name_1 AS chn,
   cat_cast_info_1 AS ci,
   cat_company_name_1 AS cn,
   cat_info_type_1 AS it,
  cat_movie_companies_1 AS mc,
   cat_movie_info_1 AS mi,
   cat_name_1 AS n,
   cat_role_type_1 AS rt,
   cat_title_1 AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(voice) (uncredited)', '(as Zoe McConnel)', '(as Louie Moreno)', '(as Tang Kung Jen)', '(caterer: Rajkamal)')
AND cn.country_code = '[gb]'
AND it.info = 'quotes'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%)%' OR mc.note LIKE '%c%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%a%' OR mi.info LIKE '%l%')
AND n.gender = 'm'
AND n.name LIKE '%y%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1992 AND 2017;",384,/*+  SeqScan(n) IndexOnlyScan(an person_id_aka_name_cat_1) IndexScan(ci person_id_cast_info_cat_1) SeqScan(rt) IndexScan(t cat_title_1_pkey) IndexScan(mi movie_id_movie_info_cat_1) SeqScan(it) IndexScan(mc movie_id_movie_companies_cat_1) IndexScan(cn cat_company_name_1_pkey) IndexOnlyScan(chn cat_char_name_1_pkey) NestLoop(n an) NestLoop(n an ci) HashJoin(n an ci rt) NestLoop(n an ci rt t) NestLoop(n an ci rt t mi) HashJoin(n an ci rt t mi it) NestLoop(n an ci rt t mi it mc) NestLoop(n an ci rt t mi it mc cn) NestLoop(n an ci rt t mi it mc cn chn) Leading((((((((((n an) ci) rt) t) mi) it) mc) cn) chn)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM cat_aka_name_1 AS an,
   cat_char_name_1 AS chn,
   cat_cast_info_1 AS ci,
   cat_company_name_1 AS cn,
   cat_info_type_1 AS it,
  cat_movie_companies_1 AS mc,
   cat_movie_info_1 AS mi,
   cat_name_1 AS n,
   cat_role_type_1 AS rt,
   cat_title_1 AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(uncredited)', '(as Natalie Iwanow)', '(as W. Semitjov)', '(as Angelo Montano)', '(as Henry Goddard)')
AND cn.country_code = '[us]'
AND it.info = 'release dates'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%)%' OR mc.note LIKE '%D%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%:%' OR mi.info LIKE '%g%')
AND n.gender = 'm'
AND n.name LIKE '%,%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1941 AND 1976;",384,/*+  SeqScan(n) IndexOnlyScan(an person_id_aka_name_cat_1) IndexScan(ci person_id_cast_info_cat_1) SeqScan(rt) IndexScan(t cat_title_1_pkey) IndexScan(mi movie_id_movie_info_cat_1) SeqScan(it) IndexScan(mc movie_id_movie_companies_cat_1) IndexScan(cn cat_company_name_1_pkey) IndexOnlyScan(chn cat_char_name_1_pkey) NestLoop(n an) NestLoop(n an ci) HashJoin(n an ci rt) NestLoop(n an ci rt t) NestLoop(n an ci rt t mi) HashJoin(n an ci rt t mi it) NestLoop(n an ci rt t mi it mc) NestLoop(n an ci rt t mi it mc cn) NestLoop(n an ci rt t mi it mc cn chn) Leading((((((((((n an) ci) rt) t) mi) it) mc) cn) chn)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM cat_aka_name_1 AS an,
   cat_char_name_1 AS chn,
   cat_cast_info_1 AS ci,
   cat_company_name_1 AS cn,
   cat_info_type_1 AS it,
  cat_movie_companies_1 AS mc,
   cat_movie_info_1 AS mi,
   cat_name_1 AS n,
   cat_role_type_1 AS rt,
   cat_title_1 AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(uncredited)', '(as Helan)', '(as Puneet Ishar)', '(as Sandra Luna)', '(as Jaylin)')
AND cn.country_code = '[nl]'
AND it.info = 'LD number of sides'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%i%' OR mc.note LIKE '%h%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%4%' OR mi.info LIKE '%4%')
AND n.gender = 'm'
AND n.name LIKE '%e%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1918 AND 1936;",384,/*+  SeqScan(n) IndexOnlyScan(an person_id_aka_name_cat_1) IndexScan(ci person_id_cast_info_cat_1) SeqScan(rt) IndexScan(t cat_title_1_pkey) IndexScan(mi movie_id_movie_info_cat_1) SeqScan(it) IndexScan(mc movie_id_movie_companies_cat_1) IndexScan(cn cat_company_name_1_pkey) IndexOnlyScan(chn cat_char_name_1_pkey) NestLoop(n an) NestLoop(n an ci) HashJoin(n an ci rt) NestLoop(n an ci rt t) NestLoop(n an ci rt t mi) HashJoin(n an ci rt t mi it) NestLoop(n an ci rt t mi it mc) NestLoop(n an ci rt t mi it mc cn) NestLoop(n an ci rt t mi it mc cn chn) Leading((((((((((n an) ci) rt) t) mi) it) mc) cn) chn)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM cat_aka_name_1 AS an,
   cat_char_name_1 AS chn,
   cat_cast_info_1 AS ci,
   cat_company_name_1 AS cn,
   cat_info_type_1 AS it,
  cat_movie_companies_1 AS mc,
   cat_movie_info_1 AS mi,
   cat_name_1 AS n,
   cat_role_type_1 AS rt,
   cat_title_1 AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(uncredited)', '(as Pablo Garcia)', '(as Ko Chun-Kit)', '(as Chris Ayista)', '(''Misery'')')
AND cn.country_code = '[us]'
AND it.info = 'release dates'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%u%' OR mc.note LIKE '%(%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%9%' OR mi.info LIKE '%U%')
AND n.gender = 'm'
AND n.name LIKE '%i%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1924 AND 1966;",384,/*+  SeqScan(n) IndexOnlyScan(an person_id_aka_name_cat_1) IndexScan(ci person_id_cast_info_cat_1) SeqScan(rt) IndexScan(t cat_title_1_pkey) IndexScan(mi movie_id_movie_info_cat_1) SeqScan(it) IndexScan(mc movie_id_movie_companies_cat_1) IndexScan(cn cat_company_name_1_pkey) IndexOnlyScan(chn cat_char_name_1_pkey) NestLoop(n an) NestLoop(n an ci) HashJoin(n an ci rt) NestLoop(n an ci rt t) NestLoop(n an ci rt t mi) HashJoin(n an ci rt t mi it) NestLoop(n an ci rt t mi it mc) NestLoop(n an ci rt t mi it mc cn) NestLoop(n an ci rt t mi it mc cn chn) Leading((((((((((n an) ci) rt) t) mi) it) mc) cn) chn)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM cat_aka_name_1 AS an,
   cat_char_name_1 AS chn,
   cat_cast_info_1 AS ci,
   cat_company_name_1 AS cn,
   cat_info_type_1 AS it,
  cat_movie_companies_1 AS mc,
   cat_movie_info_1 AS mi,
   cat_name_1 AS n,
   cat_role_type_1 AS rt,
   cat_title_1 AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(as James M. King)', '(as Lefebvre-Bell)', '(as Tom Lee Jones)', '(as MÃ³nica Randel)', '(as Sophie Engelke)')
AND cn.country_code = '[us]'
AND it.info = 'locations'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%r%' OR mc.note LIKE '%r%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%e%' OR mi.info LIKE '%N%')
AND n.gender = 'm'
AND n.name LIKE '%i%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1985 AND 2019;",384,/*+  SeqScan(n) IndexOnlyScan(an person_id_aka_name_cat_1) IndexScan(ci person_id_cast_info_cat_1) SeqScan(rt) IndexScan(t cat_title_1_pkey) IndexScan(mi movie_id_movie_info_cat_1) SeqScan(it) IndexScan(mc movie_id_movie_companies_cat_1) IndexScan(cn cat_company_name_1_pkey) IndexOnlyScan(chn cat_char_name_1_pkey) NestLoop(n an) NestLoop(n an ci) HashJoin(n an ci rt) NestLoop(n an ci rt t) NestLoop(n an ci rt t mi) HashJoin(n an ci rt t mi it) NestLoop(n an ci rt t mi it mc) NestLoop(n an ci rt t mi it mc cn) NestLoop(n an ci rt t mi it mc cn chn) Leading((((((((((n an) ci) rt) t) mi) it) mc) cn) chn)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM cat_aka_name_1 AS an,
   cat_char_name_1 AS chn,
   cat_cast_info_1 AS ci,
   cat_company_name_1 AS cn,
   cat_info_type_1 AS it,
  cat_movie_companies_1 AS mc,
   cat_movie_info_1 AS mi,
   cat_name_1 AS n,
   cat_role_type_1 AS rt,
   cat_title_1 AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(uncredited)', '(as Kaburi)', '(oscr operator)', '(worm farmer)', '(as Vithal Banker)')
AND cn.country_code = '[us]'
AND it.info = 'trivia'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%U%' OR mc.note LIKE '%r%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%r%' OR mi.info LIKE '%e%')
AND n.gender = 'm'
AND n.name LIKE '%n%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1948 AND 1973;",384,/*+  SeqScan(n) IndexOnlyScan(an person_id_aka_name_cat_1) IndexScan(ci person_id_cast_info_cat_1) SeqScan(rt) IndexScan(t cat_title_1_pkey) IndexScan(mi movie_id_movie_info_cat_1) SeqScan(it) IndexScan(mc movie_id_movie_companies_cat_1) IndexScan(cn cat_company_name_1_pkey) IndexOnlyScan(chn cat_char_name_1_pkey) NestLoop(n an) NestLoop(n an ci) HashJoin(n an ci rt) NestLoop(n an ci rt t) NestLoop(n an ci rt t mi) HashJoin(n an ci rt t mi it) NestLoop(n an ci rt t mi it mc) NestLoop(n an ci rt t mi it mc cn) NestLoop(n an ci rt t mi it mc cn chn) Leading((((((((((n an) ci) rt) t) mi) it) mc) cn) chn)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM cat_aka_name_1 AS an,
   cat_char_name_1 AS chn,
   cat_cast_info_1 AS ci,
   cat_company_name_1 AS cn,
   cat_info_type_1 AS it,
  cat_movie_companies_1 AS mc,
   cat_movie_info_1 AS mi,
   cat_name_1 AS n,
   cat_role_type_1 AS rt,
   cat_title_1 AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(as Anthony Fridjhon)', '(as Kenneth Garcia)', '(as Greta Schmid)', '(Morse''s sister)', '(SABC News Report)')
AND cn.country_code = '[nl]'
AND it.info = 'tech info'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%S%' OR mc.note LIKE '%(%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%3%' OR mi.info LIKE '%O%')
AND n.gender = 'm'
AND n.name LIKE '%j%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1894 AND 2016;",384,/*+  SeqScan(n) IndexOnlyScan(an person_id_aka_name_cat_1) IndexScan(ci person_id_cast_info_cat_1) SeqScan(rt) IndexScan(t cat_title_1_pkey) IndexScan(mi movie_id_movie_info_cat_1) SeqScan(it) IndexScan(mc movie_id_movie_companies_cat_1) IndexScan(cn cat_company_name_1_pkey) IndexOnlyScan(chn cat_char_name_1_pkey) NestLoop(n an) NestLoop(n an ci) HashJoin(n an ci rt) NestLoop(n an ci rt t) NestLoop(n an ci rt t mi) HashJoin(n an ci rt t mi it) NestLoop(n an ci rt t mi it mc) NestLoop(n an ci rt t mi it mc cn) NestLoop(n an ci rt t mi it mc cn chn) Leading((((((((((n an) ci) rt) t) mi) it) mc) cn) chn)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM cat_aka_name_1 AS an,
   cat_char_name_1 AS chn,
   cat_cast_info_1 AS ci,
   cat_company_name_1 AS cn,
   cat_info_type_1 AS it,
  cat_movie_companies_1 AS mc,
   cat_movie_info_1 AS mi,
   cat_name_1 AS n,
   cat_role_type_1 AS rt,
   cat_title_1 AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(as Anthony Fridjhon)', '(Robin)', '(as Zodia Mclean)', '(as Tim Carhart)', '(as Z. Sheineman)')
AND cn.country_code = '[nl]'
AND it.info = 'genres'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%d%' OR mc.note LIKE '%1%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%e%' OR mi.info LIKE '%C%')
AND n.gender = 'm'
AND n.name LIKE '%i%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1928 AND 2002;",384,/*+  SeqScan(n) IndexOnlyScan(an person_id_aka_name_cat_1) IndexScan(ci person_id_cast_info_cat_1) SeqScan(rt) IndexScan(t cat_title_1_pkey) IndexScan(mi movie_id_movie_info_cat_1) SeqScan(it) IndexScan(mc movie_id_movie_companies_cat_1) IndexScan(cn cat_company_name_1_pkey) IndexOnlyScan(chn cat_char_name_1_pkey) NestLoop(n an) NestLoop(n an ci) HashJoin(n an ci rt) NestLoop(n an ci rt t) NestLoop(n an ci rt t mi) HashJoin(n an ci rt t mi it) NestLoop(n an ci rt t mi it mc) NestLoop(n an ci rt t mi it mc cn) NestLoop(n an ci rt t mi it mc cn chn) Leading((((((((((n an) ci) rt) t) mi) it) mc) cn) chn)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM cat_aka_name_1 AS an,
   cat_char_name_1 AS chn,
   cat_cast_info_1 AS ci,
   cat_company_name_1 AS cn,
   cat_info_type_1 AS it,
  cat_movie_companies_1 AS mc,
   cat_movie_info_1 AS mi,
   cat_name_1 AS n,
   cat_role_type_1 AS rt,
   cat_title_1 AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(as James M. King)', '(security: U.S.)', '(as Archie Hall)', '(segment 1 ""Enoch"")', '(as Hugo Baron)')
AND cn.country_code = '[us]'
AND it.info = 'release dates'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%i%' OR mc.note LIKE '%r%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%J%' OR mi.info LIKE '%u%')
AND n.gender = 'm'
AND n.name LIKE '%n%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1961 AND 2008;",384,/*+  SeqScan(n) IndexOnlyScan(an person_id_aka_name_cat_1) IndexScan(ci person_id_cast_info_cat_1) SeqScan(rt) IndexScan(t cat_title_1_pkey) IndexScan(mi movie_id_movie_info_cat_1) SeqScan(it) IndexScan(mc movie_id_movie_companies_cat_1) IndexScan(cn cat_company_name_1_pkey) IndexOnlyScan(chn cat_char_name_1_pkey) NestLoop(n an) NestLoop(n an ci) HashJoin(n an ci rt) NestLoop(n an ci rt t) NestLoop(n an ci rt t mi) HashJoin(n an ci rt t mi it) NestLoop(n an ci rt t mi it mc) NestLoop(n an ci rt t mi it mc cn) NestLoop(n an ci rt t mi it mc cn chn) Leading((((((((((n an) ci) rt) t) mi) it) mc) cn) chn)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM cat_aka_name_1 AS an,
   cat_char_name_1 AS chn,
   cat_cast_info_1 AS ci,
   cat_company_name_1 AS cn,
   cat_info_type_1 AS it,
  cat_movie_companies_1 AS mc,
   cat_movie_info_1 AS mi,
   cat_name_1 AS n,
   cat_role_type_1 AS rt,
   cat_title_1 AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(voice) (uncredited)', '(as Glen Pruett)', '(lead developer)', '(neighbor girl)', '(as Nick Yardley)')
AND cn.country_code = '[fi]'
AND it.info = 'quotes'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%2%' OR mc.note LIKE '%l%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%n%' OR mi.info LIKE '%d%')
AND n.gender = 'm'
AND n.name LIKE '%o%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1948 AND 2012;",384,/*+  SeqScan(n) IndexOnlyScan(an person_id_aka_name_cat_1) IndexScan(ci person_id_cast_info_cat_1) SeqScan(rt) IndexScan(t cat_title_1_pkey) IndexScan(mi movie_id_movie_info_cat_1) SeqScan(it) IndexScan(mc movie_id_movie_companies_cat_1) IndexScan(cn cat_company_name_1_pkey) IndexOnlyScan(chn cat_char_name_1_pkey) NestLoop(n an) NestLoop(n an ci) HashJoin(n an ci rt) NestLoop(n an ci rt t) NestLoop(n an ci rt t mi) HashJoin(n an ci rt t mi it) NestLoop(n an ci rt t mi it mc) NestLoop(n an ci rt t mi it mc cn) NestLoop(n an ci rt t mi it mc cn chn) Leading((((((((((n an) ci) rt) t) mi) it) mc) cn) chn)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM cat_aka_name_1 AS an,
   cat_char_name_1 AS chn,
   cat_cast_info_1 AS ci,
   cat_company_name_1 AS cn,
   cat_info_type_1 AS it,
  cat_movie_companies_1 AS mc,
   cat_movie_info_1 AS mi,
   cat_name_1 AS n,
   cat_role_type_1 AS rt,
   cat_title_1 AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(uncredited)', '(as RenÃ©e Sanz)', '(as Julio Braga)', '(as Sadique)', '(as Jean Sylvere)')
AND cn.country_code = '[us]'
AND it.info = 'trivia'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%(%' OR mc.note LIKE '%1%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%l%' OR mi.info LIKE '%f%')
AND n.gender = 'm'
AND n.name LIKE '%E%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1918 AND 2002;",384,/*+  SeqScan(n) IndexOnlyScan(an person_id_aka_name_cat_1) IndexScan(ci person_id_cast_info_cat_1) SeqScan(rt) IndexScan(t cat_title_1_pkey) IndexScan(mi movie_id_movie_info_cat_1) SeqScan(it) IndexScan(mc movie_id_movie_companies_cat_1) IndexScan(cn cat_company_name_1_pkey) IndexOnlyScan(chn cat_char_name_1_pkey) NestLoop(n an) NestLoop(n an ci) HashJoin(n an ci rt) NestLoop(n an ci rt t) NestLoop(n an ci rt t mi) HashJoin(n an ci rt t mi it) NestLoop(n an ci rt t mi it mc) NestLoop(n an ci rt t mi it mc cn) NestLoop(n an ci rt t mi it mc cn chn) Leading((((((((((n an) ci) rt) t) mi) it) mc) cn) chn)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM cat_aka_name_1 AS an,
   cat_char_name_1 AS chn,
   cat_cast_info_1 AS ci,
   cat_company_name_1 AS cn,
   cat_info_type_1 AS it,
  cat_movie_companies_1 AS mc,
   cat_movie_info_1 AS mi,
   cat_name_1 AS n,
   cat_role_type_1 AS rt,
   cat_title_1 AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(uncredited)', '(as Eralp HÃ¼seyin)', '(as Mahesh Kanwal)', '(as Chie Sawaguchi)', '(as Fadi Abi Samra)')
AND cn.country_code = '[us]'
AND it.info = 'release dates'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%(%' OR mc.note LIKE '%V%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%9%' OR mi.info LIKE '%M%')
AND n.gender = 'm'
AND n.name LIKE '%n%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1915 AND 1960;",384,/*+  SeqScan(n) IndexOnlyScan(an person_id_aka_name_cat_1) IndexScan(ci person_id_cast_info_cat_1) SeqScan(rt) IndexScan(t cat_title_1_pkey) IndexScan(mi movie_id_movie_info_cat_1) SeqScan(it) IndexScan(mc movie_id_movie_companies_cat_1) IndexScan(cn cat_company_name_1_pkey) IndexOnlyScan(chn cat_char_name_1_pkey) NestLoop(n an) NestLoop(n an ci) HashJoin(n an ci rt) NestLoop(n an ci rt t) NestLoop(n an ci rt t mi) HashJoin(n an ci rt t mi it) NestLoop(n an ci rt t mi it mc) NestLoop(n an ci rt t mi it mc cn) NestLoop(n an ci rt t mi it mc cn chn) Leading((((((((((n an) ci) rt) t) mi) it) mc) cn) chn)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM cat_aka_name_1 AS an,
   cat_char_name_1 AS chn,
   cat_cast_info_1 AS ci,
   cat_company_name_1 AS cn,
   cat_info_type_1 AS it,
  cat_movie_companies_1 AS mc,
   cat_movie_info_1 AS mi,
   cat_name_1 AS n,
   cat_role_type_1 AS rt,
   cat_title_1 AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(uncredited)', '(as William Wenkle)', '(risk manager)', '(Filmmaker)', '(as James Lipetsky)')
AND cn.country_code = '[us]'
AND it.info = 'trivia'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%1%' OR mc.note LIKE '%)%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%t%' OR mi.info LIKE '%n%')
AND n.gender = 'm'
AND n.name LIKE '%B%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1904 AND 1997;",384,/*+  SeqScan(n) IndexOnlyScan(an person_id_aka_name_cat_1) IndexScan(ci person_id_cast_info_cat_1) SeqScan(rt) IndexScan(t cat_title_1_pkey) IndexScan(mi movie_id_movie_info_cat_1) SeqScan(it) IndexScan(mc movie_id_movie_companies_cat_1) IndexScan(cn cat_company_name_1_pkey) IndexOnlyScan(chn cat_char_name_1_pkey) NestLoop(n an) NestLoop(n an ci) HashJoin(n an ci rt) NestLoop(n an ci rt t) NestLoop(n an ci rt t mi) HashJoin(n an ci rt t mi it) NestLoop(n an ci rt t mi it mc) NestLoop(n an ci rt t mi it mc cn) NestLoop(n an ci rt t mi it mc cn chn) Leading((((((((((n an) ci) rt) t) mi) it) mc) cn) chn)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM cat_aka_name_1 AS an,
   cat_char_name_1 AS chn,
   cat_cast_info_1 AS ci,
   cat_company_name_1 AS cn,
   cat_info_type_1 AS it,
  cat_movie_companies_1 AS mc,
   cat_movie_info_1 AS mi,
   cat_name_1 AS n,
   cat_role_type_1 AS rt,
   cat_title_1 AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(as James M. King)', '(as Rie Matsubara)', '(as Ken Matsumori)', '(as Lew Cooper)', '(as Josh Tickell)')
AND cn.country_code = '[us]'
AND it.info = 'release dates'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%n%' OR mc.note LIKE '%i%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%i%' OR mi.info LIKE '%A%')
AND n.gender = 'm'
AND n.name LIKE '%n%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1939 AND 2011;",384,/*+  SeqScan(n) IndexOnlyScan(an person_id_aka_name_cat_1) IndexScan(ci person_id_cast_info_cat_1) SeqScan(rt) IndexScan(t cat_title_1_pkey) IndexScan(mi movie_id_movie_info_cat_1) SeqScan(it) IndexScan(mc movie_id_movie_companies_cat_1) IndexScan(cn cat_company_name_1_pkey) IndexOnlyScan(chn cat_char_name_1_pkey) NestLoop(n an) NestLoop(n an ci) HashJoin(n an ci rt) NestLoop(n an ci rt t) NestLoop(n an ci rt t mi) HashJoin(n an ci rt t mi it) NestLoop(n an ci rt t mi it mc) NestLoop(n an ci rt t mi it mc cn) NestLoop(n an ci rt t mi it mc cn chn) Leading((((((((((n an) ci) rt) t) mi) it) mc) cn) chn)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM cat_aka_name_1 AS an,
   cat_char_name_1 AS chn,
   cat_cast_info_1 AS ci,
   cat_company_name_1 AS cn,
   cat_info_type_1 AS it,
  cat_movie_companies_1 AS mc,
   cat_movie_info_1 AS mi,
   cat_name_1 AS n,
   cat_role_type_1 AS rt,
   cat_title_1 AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(uncredited)', '(director: USA)', '(as Cupid Morgan)', '(as Ayumu Tokito)', '(as B. Aar Ishara)')
AND cn.country_code = '[us]'
AND it.info = 'release dates'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%1%' OR mc.note LIKE '%u%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%e%' OR mi.info LIKE '%1%')
AND n.gender = 'm'
AND n.name LIKE '%n%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1898 AND 2005;",384,/*+  SeqScan(n) IndexOnlyScan(an person_id_aka_name_cat_1) IndexScan(ci person_id_cast_info_cat_1) SeqScan(rt) IndexScan(t cat_title_1_pkey) IndexScan(mi movie_id_movie_info_cat_1) SeqScan(it) IndexScan(mc movie_id_movie_companies_cat_1) IndexScan(cn cat_company_name_1_pkey) IndexOnlyScan(chn cat_char_name_1_pkey) NestLoop(n an) NestLoop(n an ci) HashJoin(n an ci rt) NestLoop(n an ci rt t) NestLoop(n an ci rt t mi) HashJoin(n an ci rt t mi it) NestLoop(n an ci rt t mi it mc) NestLoop(n an ci rt t mi it mc cn) NestLoop(n an ci rt t mi it mc cn chn) Leading((((((((((n an) ci) rt) t) mi) it) mc) cn) chn)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM cat_aka_name_1 AS an,
   cat_char_name_1 AS chn,
   cat_cast_info_1 AS ci,
   cat_company_name_1 AS cn,
   cat_info_type_1 AS it,
  cat_movie_companies_1 AS mc,
   cat_movie_info_1 AS mi,
   cat_name_1 AS n,
   cat_role_type_1 AS rt,
   cat_title_1 AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(uncredited)', '(as Alexey Uchitel)', '(as Donald Galaher)', '(as Titus Poutanen)', '(""Yanagi"")')
AND cn.country_code = '[fi]'
AND it.info = 'alternate versions'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%(%' OR mc.note LIKE '%)%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%m%' OR mi.info LIKE '%s%')
AND n.gender = 'm'
AND n.name LIKE '%a%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1920 AND 1957;",384,/*+  SeqScan(n) IndexOnlyScan(an person_id_aka_name_cat_1) IndexScan(ci person_id_cast_info_cat_1) SeqScan(rt) IndexScan(t cat_title_1_pkey) IndexScan(mi movie_id_movie_info_cat_1) SeqScan(it) IndexScan(mc movie_id_movie_companies_cat_1) IndexScan(cn cat_company_name_1_pkey) IndexOnlyScan(chn cat_char_name_1_pkey) NestLoop(n an) NestLoop(n an ci) HashJoin(n an ci rt) NestLoop(n an ci rt t) NestLoop(n an ci rt t mi) HashJoin(n an ci rt t mi it) NestLoop(n an ci rt t mi it mc) NestLoop(n an ci rt t mi it mc cn) NestLoop(n an ci rt t mi it mc cn chn) Leading((((((((((n an) ci) rt) t) mi) it) mc) cn) chn)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM cat_aka_name_1 AS an,
   cat_char_name_1 AS chn,
   cat_cast_info_1 AS ci,
   cat_company_name_1 AS cn,
   cat_info_type_1 AS it,
  cat_movie_companies_1 AS mc,
   cat_movie_info_1 AS mi,
   cat_name_1 AS n,
   cat_role_type_1 AS rt,
   cat_title_1 AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(uncredited)', '(lead screenwriter)', '(as Davidelfin)', '(as Kineret Hai)', '(making of: Turkey)')
AND cn.country_code = '[us]'
AND it.info = 'adaption'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%0%' OR mc.note LIKE '%S%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%i%' OR mi.info LIKE '%1%')
AND n.gender = 'm'
AND n.name LIKE '%,%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1955 AND 1960;",384,/*+  SeqScan(n) IndexOnlyScan(an person_id_aka_name_cat_1) IndexScan(ci person_id_cast_info_cat_1) SeqScan(rt) IndexScan(t cat_title_1_pkey) IndexScan(mi movie_id_movie_info_cat_1) SeqScan(it) IndexScan(mc movie_id_movie_companies_cat_1) IndexScan(cn cat_company_name_1_pkey) IndexOnlyScan(chn cat_char_name_1_pkey) NestLoop(n an) NestLoop(n an ci) HashJoin(n an ci rt) NestLoop(n an ci rt t) NestLoop(n an ci rt t mi) HashJoin(n an ci rt t mi it) NestLoop(n an ci rt t mi it mc) NestLoop(n an ci rt t mi it mc cn) NestLoop(n an ci rt t mi it mc cn chn) Leading((((((((((n an) ci) rt) t) mi) it) mc) cn) chn)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM cat_aka_name_1 AS an,
   cat_char_name_1 AS chn,
   cat_cast_info_1 AS ci,
   cat_company_name_1 AS cn,
   cat_info_type_1 AS it,
  cat_movie_companies_1 AS mc,
   cat_movie_info_1 AS mi,
   cat_name_1 AS n,
   cat_role_type_1 AS rt,
   cat_title_1 AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(uncredited)', '(as Sinisa Sraga)', '(The Phantom Rider)', '(75 years old)', '(as James Shanahan)')
AND cn.country_code = '[us]'
AND it.info = 'budget'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%V%' OR mc.note LIKE '%n%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%0%' OR mi.info LIKE '%0%')
AND n.gender = 'm'
AND n.name LIKE '%l%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1913 AND 1986;",384,/*+  SeqScan(n) IndexOnlyScan(an person_id_aka_name_cat_1) IndexScan(ci person_id_cast_info_cat_1) SeqScan(rt) IndexScan(t cat_title_1_pkey) IndexScan(mi movie_id_movie_info_cat_1) SeqScan(it) IndexScan(mc movie_id_movie_companies_cat_1) IndexScan(cn cat_company_name_1_pkey) IndexOnlyScan(chn cat_char_name_1_pkey) NestLoop(n an) NestLoop(n an ci) HashJoin(n an ci rt) NestLoop(n an ci rt t) NestLoop(n an ci rt t mi) HashJoin(n an ci rt t mi it) NestLoop(n an ci rt t mi it mc) NestLoop(n an ci rt t mi it mc cn) NestLoop(n an ci rt t mi it mc cn chn) Leading((((((((((n an) ci) rt) t) mi) it) mc) cn) chn)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM cat_aka_name_1 AS an,
   cat_char_name_1 AS chn,
   cat_cast_info_1 AS ci,
   cat_company_name_1 AS cn,
   cat_info_type_1 AS it,
  cat_movie_companies_1 AS mc,
   cat_movie_info_1 AS mi,
   cat_name_1 AS n,
   cat_role_type_1 AS rt,
   cat_title_1 AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(uncredited)', '(as A.Licitis)', '(as Christain Kila)', '(as Jr. Mahmood)', '(as Razan)')
AND cn.country_code = '[fi]'
AND it.info = 'goofs'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%(%' OR mc.note LIKE '%h%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%m%' OR mi.info LIKE '%c%')
AND n.gender = 'm'
AND n.name LIKE '%r%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1926 AND 1985;",384,/*+  SeqScan(n) IndexOnlyScan(an person_id_aka_name_cat_1) IndexScan(ci person_id_cast_info_cat_1) SeqScan(rt) IndexScan(t cat_title_1_pkey) IndexScan(mi movie_id_movie_info_cat_1) SeqScan(it) IndexScan(mc movie_id_movie_companies_cat_1) IndexScan(cn cat_company_name_1_pkey) IndexOnlyScan(chn cat_char_name_1_pkey) NestLoop(n an) NestLoop(n an ci) HashJoin(n an ci rt) NestLoop(n an ci rt t) NestLoop(n an ci rt t mi) HashJoin(n an ci rt t mi it) NestLoop(n an ci rt t mi it mc) NestLoop(n an ci rt t mi it mc cn) NestLoop(n an ci rt t mi it mc cn chn) Leading((((((((((n an) ci) rt) t) mi) it) mc) cn) chn)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM cat_aka_name_1 AS an,
   cat_char_name_1 AS chn,
   cat_cast_info_1 AS ci,
   cat_company_name_1 AS cn,
   cat_info_type_1 AS it,
  cat_movie_companies_1 AS mc,
   cat_movie_info_1 AS mi,
   cat_name_1 AS n,
   cat_role_type_1 AS rt,
   cat_title_1 AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(voice) (uncredited)', '(la triste)', '(floor runner)', '(Pegamento)', '(as Teli Stalone)')
AND cn.country_code = '[gb]'
AND it.info = 'quotes'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%e%' OR mc.note LIKE '%n%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%]%' OR mi.info LIKE '%o%')
AND n.gender = 'm'
AND n.name LIKE '%o%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1938 AND 2011;",384,/*+  SeqScan(n) IndexOnlyScan(an person_id_aka_name_cat_1) IndexScan(ci person_id_cast_info_cat_1) SeqScan(rt) IndexScan(t cat_title_1_pkey) IndexScan(mi movie_id_movie_info_cat_1) SeqScan(it) IndexScan(mc movie_id_movie_companies_cat_1) IndexScan(cn cat_company_name_1_pkey) IndexOnlyScan(chn cat_char_name_1_pkey) NestLoop(n an) NestLoop(n an ci) HashJoin(n an ci rt) NestLoop(n an ci rt t) NestLoop(n an ci rt t mi) HashJoin(n an ci rt t mi it) NestLoop(n an ci rt t mi it mc) NestLoop(n an ci rt t mi it mc cn) NestLoop(n an ci rt t mi it mc cn chn) Leading((((((((((n an) ci) rt) t) mi) it) mc) cn) chn)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM cat_aka_name_1 AS an,
   cat_char_name_1 AS chn,
   cat_cast_info_1 AS ci,
   cat_company_name_1 AS cn,
   cat_info_type_1 AS it,
  cat_movie_companies_1 AS mc,
   cat_movie_info_1 AS mi,
   cat_name_1 AS n,
   cat_role_type_1 AS rt,
   cat_title_1 AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(uncredited)', '(on radio)', '(as Penny Ashcroft)', '(shipping services)', '(as Russell Hardy)')
AND cn.country_code = '[us]'
AND it.info = 'release dates'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%A%' OR mc.note LIKE '%i%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%i%' OR mi.info LIKE '%1%')
AND n.gender = 'm'
AND n.name LIKE '%n%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1901 AND 1992;",384,/*+  SeqScan(n) IndexOnlyScan(an person_id_aka_name_cat_1) IndexScan(ci person_id_cast_info_cat_1) SeqScan(rt) IndexScan(t cat_title_1_pkey) IndexScan(mi movie_id_movie_info_cat_1) SeqScan(it) IndexScan(mc movie_id_movie_companies_cat_1) IndexScan(cn cat_company_name_1_pkey) IndexOnlyScan(chn cat_char_name_1_pkey) NestLoop(n an) NestLoop(n an ci) HashJoin(n an ci rt) NestLoop(n an ci rt t) NestLoop(n an ci rt t mi) HashJoin(n an ci rt t mi it) NestLoop(n an ci rt t mi it mc) NestLoop(n an ci rt t mi it mc cn) NestLoop(n an ci rt t mi it mc cn chn) Leading((((((((((n an) ci) rt) t) mi) it) mc) cn) chn)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM cat_aka_name_1 AS an,
   cat_char_name_1 AS chn,
   cat_cast_info_1 AS ci,
   cat_company_name_1 AS cn,
   cat_info_type_1 AS it,
  cat_movie_companies_1 AS mc,
   cat_movie_info_1 AS mi,
   cat_name_1 AS n,
   cat_role_type_1 AS rt,
   cat_title_1 AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(as Anthony Fridjhon)', '(as Madhu Achrya)', '(as Savita)', '(as Ben Taylor)', '(Don Atanasio)')
AND cn.country_code = '[nl]'
AND it.info = 'runtimes'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%9%' OR mc.note LIKE '%1%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%8%' OR mi.info LIKE '%8%')
AND n.gender = 'm'
AND n.name LIKE '%F%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1914 AND 2011;",384,/*+  SeqScan(n) IndexOnlyScan(an person_id_aka_name_cat_1) IndexScan(ci person_id_cast_info_cat_1) SeqScan(rt) IndexScan(t cat_title_1_pkey) IndexScan(mi movie_id_movie_info_cat_1) SeqScan(it) IndexScan(mc movie_id_movie_companies_cat_1) IndexScan(cn cat_company_name_1_pkey) IndexOnlyScan(chn cat_char_name_1_pkey) NestLoop(n an) NestLoop(n an ci) HashJoin(n an ci rt) NestLoop(n an ci rt t) NestLoop(n an ci rt t mi) HashJoin(n an ci rt t mi it) NestLoop(n an ci rt t mi it mc) NestLoop(n an ci rt t mi it mc cn) NestLoop(n an ci rt t mi it mc cn chn) Leading((((((((((n an) ci) rt) t) mi) it) mc) cn) chn)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM cat_aka_name_1 AS an,
   cat_char_name_1 AS chn,
   cat_cast_info_1 AS ci,
   cat_company_name_1 AS cn,
   cat_info_type_1 AS it,
  cat_movie_companies_1 AS mc,
   cat_movie_info_1 AS mi,
   cat_name_1 AS n,
   cat_role_type_1 AS rt,
   cat_title_1 AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(uncredited)', '(as George Siougas)', '(as Andrew George)', '(as Mike Pavone)', '(as Greg Brazzel)')
AND cn.country_code = '[us]'
AND it.info = 'trivia'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%(%' OR mc.note LIKE '%C%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%e%' OR mi.info LIKE '%s%')
AND n.gender = 'm'
AND n.name LIKE '%r%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1914 AND 1982;",384,/*+  SeqScan(n) IndexOnlyScan(an person_id_aka_name_cat_1) IndexScan(ci person_id_cast_info_cat_1) SeqScan(rt) IndexScan(t cat_title_1_pkey) IndexScan(mi movie_id_movie_info_cat_1) SeqScan(it) IndexScan(mc movie_id_movie_companies_cat_1) IndexScan(cn cat_company_name_1_pkey) IndexOnlyScan(chn cat_char_name_1_pkey) NestLoop(n an) NestLoop(n an ci) HashJoin(n an ci rt) NestLoop(n an ci rt t) NestLoop(n an ci rt t mi) HashJoin(n an ci rt t mi it) NestLoop(n an ci rt t mi it mc) NestLoop(n an ci rt t mi it mc cn) NestLoop(n an ci rt t mi it mc cn chn) Leading((((((((((n an) ci) rt) t) mi) it) mc) cn) chn)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM cat_aka_name_1 AS an,
   cat_char_name_1 AS chn,
   cat_cast_info_1 AS ci,
   cat_company_name_1 AS cn,
   cat_info_type_1 AS it,
  cat_movie_companies_1 AS mc,
   cat_movie_info_1 AS mi,
   cat_name_1 AS n,
   cat_role_type_1 AS rt,
   cat_title_1 AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(voice) (uncredited)', '(as Maire Karila)', '(Thailand unit)', '(as Liquid)', '(Benny)')
AND cn.country_code = '[de]'
AND it.info = 'quotes'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%(%' OR mc.note LIKE '%)%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%f%' OR mi.info LIKE '%h%')
AND n.gender = 'm'
AND n.name LIKE '%n%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1903 AND 2010;",384,/*+  SeqScan(n) IndexOnlyScan(an person_id_aka_name_cat_1) IndexScan(ci person_id_cast_info_cat_1) SeqScan(rt) IndexScan(t cat_title_1_pkey) IndexScan(mi movie_id_movie_info_cat_1) SeqScan(it) IndexScan(mc movie_id_movie_companies_cat_1) IndexScan(cn cat_company_name_1_pkey) IndexOnlyScan(chn cat_char_name_1_pkey) NestLoop(n an) NestLoop(n an ci) HashJoin(n an ci rt) NestLoop(n an ci rt t) NestLoop(n an ci rt t mi) HashJoin(n an ci rt t mi it) NestLoop(n an ci rt t mi it mc) NestLoop(n an ci rt t mi it mc cn) NestLoop(n an ci rt t mi it mc cn chn) Leading((((((((((n an) ci) rt) t) mi) it) mc) cn) chn)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM cat_aka_name_1 AS an,
   cat_char_name_1 AS chn,
   cat_cast_info_1 AS ci,
   cat_company_name_1 AS cn,
   cat_info_type_1 AS it,
  cat_movie_companies_1 AS mc,
   cat_movie_info_1 AS mi,
   cat_name_1 AS n,
   cat_role_type_1 AS rt,
   cat_title_1 AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(uncredited)', '(as David Barnes)', '(as Conrad Corral)', '(as Ratanmala)', '(as Vijay Bhatodia)')
AND cn.country_code = '[us]'
AND it.info = 'locations'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%V%' OR mc.note LIKE '%i%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%n%' OR mi.info LIKE '%i%')
AND n.gender = 'm'
AND n.name LIKE '%i%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1931 AND 1964;",384,/*+  SeqScan(n) IndexOnlyScan(an person_id_aka_name_cat_1) IndexScan(ci person_id_cast_info_cat_1) SeqScan(rt) IndexScan(t cat_title_1_pkey) IndexScan(mi movie_id_movie_info_cat_1) SeqScan(it) IndexScan(mc movie_id_movie_companies_cat_1) IndexScan(cn cat_company_name_1_pkey) IndexOnlyScan(chn cat_char_name_1_pkey) NestLoop(n an) NestLoop(n an ci) HashJoin(n an ci rt) NestLoop(n an ci rt t) NestLoop(n an ci rt t mi) HashJoin(n an ci rt t mi it) NestLoop(n an ci rt t mi it mc) NestLoop(n an ci rt t mi it mc cn) NestLoop(n an ci rt t mi it mc cn chn) Leading((((((((((n an) ci) rt) t) mi) it) mc) cn) chn)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM cat_aka_name_1 AS an,
   cat_char_name_1 AS chn,
   cat_cast_info_1 AS ci,
   cat_company_name_1 AS cn,
   cat_info_type_1 AS it,
  cat_movie_companies_1 AS mc,
   cat_movie_info_1 AS mi,
   cat_name_1 AS n,
   cat_role_type_1 AS rt,
   cat_title_1 AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(as James M. King)', '(as A. Hossein)', '(basic story)', '(as Hanne Kuyt)', '(as Whong In Sik)')
AND cn.country_code = '[us]'
AND it.info = 'release dates'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%r%' OR mc.note LIKE '%d%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%0%' OR mi.info LIKE '%0%')
AND n.gender = 'm'
AND n.name LIKE '%,%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1925 AND 2015;",384,/*+  SeqScan(n) IndexOnlyScan(an person_id_aka_name_cat_1) IndexScan(ci person_id_cast_info_cat_1) SeqScan(rt) IndexScan(t cat_title_1_pkey) IndexScan(mi movie_id_movie_info_cat_1) SeqScan(it) IndexScan(mc movie_id_movie_companies_cat_1) IndexScan(cn cat_company_name_1_pkey) IndexOnlyScan(chn cat_char_name_1_pkey) NestLoop(n an) NestLoop(n an ci) HashJoin(n an ci rt) NestLoop(n an ci rt t) NestLoop(n an ci rt t mi) HashJoin(n an ci rt t mi it) NestLoop(n an ci rt t mi it mc) NestLoop(n an ci rt t mi it mc cn) NestLoop(n an ci rt t mi it mc cn chn) Leading((((((((((n an) ci) rt) t) mi) it) mc) cn) chn)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM cat_aka_name_1 AS an,
   cat_char_name_1 AS chn,
   cat_cast_info_1 AS ci,
   cat_company_name_1 AS cn,
   cat_info_type_1 AS it,
  cat_movie_companies_1 AS mc,
   cat_movie_info_1 AS mi,
   cat_name_1 AS n,
   cat_role_type_1 AS rt,
   cat_title_1 AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(as Anthony Fridjhon)', '(as Jay-M Perillo)', '(as Rao Gopal Rao)', '(as GB Sampedro)', '(as Cobra)')
AND cn.country_code = '[nl]'
AND it.info = 'release dates'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%(%' OR mc.note LIKE '%F%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%1%' OR mi.info LIKE '%t%')
AND n.gender = 'm'
AND n.name LIKE '%h%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1901 AND 2010;",384,/*+  SeqScan(n) IndexOnlyScan(an person_id_aka_name_cat_1) IndexScan(ci person_id_cast_info_cat_1) SeqScan(rt) IndexScan(t cat_title_1_pkey) IndexScan(mi movie_id_movie_info_cat_1) SeqScan(it) IndexScan(mc movie_id_movie_companies_cat_1) IndexScan(cn cat_company_name_1_pkey) IndexOnlyScan(chn cat_char_name_1_pkey) NestLoop(n an) NestLoop(n an ci) HashJoin(n an ci rt) NestLoop(n an ci rt t) NestLoop(n an ci rt t mi) HashJoin(n an ci rt t mi it) NestLoop(n an ci rt t mi it mc) NestLoop(n an ci rt t mi it mc cn) NestLoop(n an ci rt t mi it mc cn chn) Leading((((((((((n an) ci) rt) t) mi) it) mc) cn) chn)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM cat_aka_name_1 AS an,
   cat_char_name_1 AS chn,
   cat_cast_info_1 AS ci,
   cat_company_name_1 AS cn,
   cat_info_type_1 AS it,
  cat_movie_companies_1 AS mc,
   cat_movie_info_1 AS mi,
   cat_name_1 AS n,
   cat_role_type_1 AS rt,
   cat_title_1 AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(uncredited)', '(as C. Cron)', '(as Lee Whey)', '(Man in Wheelchair)', '(as Alex Diamond)')
AND cn.country_code = '[us]'
AND it.info = 'tech info'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%D%' OR mc.note LIKE '%(%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%T%' OR mi.info LIKE '%e%')
AND n.gender = 'm'
AND n.name LIKE '%i%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1907 AND 2003;",384,/*+  SeqScan(n) IndexOnlyScan(an person_id_aka_name_cat_1) IndexScan(ci person_id_cast_info_cat_1) SeqScan(rt) IndexScan(t cat_title_1_pkey) IndexScan(mi movie_id_movie_info_cat_1) SeqScan(it) IndexScan(mc movie_id_movie_companies_cat_1) IndexScan(cn cat_company_name_1_pkey) IndexOnlyScan(chn cat_char_name_1_pkey) NestLoop(n an) NestLoop(n an ci) HashJoin(n an ci rt) NestLoop(n an ci rt t) NestLoop(n an ci rt t mi) HashJoin(n an ci rt t mi it) NestLoop(n an ci rt t mi it mc) NestLoop(n an ci rt t mi it mc cn) NestLoop(n an ci rt t mi it mc cn chn) Leading((((((((((n an) ci) rt) t) mi) it) mc) cn) chn)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM cat_aka_name_1 AS an,
   cat_char_name_1 AS chn,
   cat_cast_info_1 AS ci,
   cat_company_name_1 AS cn,
   cat_info_type_1 AS it,
  cat_movie_companies_1 AS mc,
   cat_movie_info_1 AS mi,
   cat_name_1 AS n,
   cat_role_type_1 AS rt,
   cat_title_1 AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(as James M. King)', '(Nancy)', '(as J.R. Zdvorak)', '(1970 version)', '(as AndrÃ© Colbert)')
AND cn.country_code = '[us]'
AND it.info = 'locations'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%e%' OR mc.note LIKE '%e%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%o%' OR mi.info LIKE '%d%')
AND n.gender = 'm'
AND n.name LIKE '%m%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1911 AND 2007;",384,/*+  SeqScan(n) IndexOnlyScan(an person_id_aka_name_cat_1) IndexScan(ci person_id_cast_info_cat_1) SeqScan(rt) IndexScan(t cat_title_1_pkey) IndexScan(mi movie_id_movie_info_cat_1) SeqScan(it) IndexScan(mc movie_id_movie_companies_cat_1) IndexScan(cn cat_company_name_1_pkey) IndexOnlyScan(chn cat_char_name_1_pkey) NestLoop(n an) NestLoop(n an ci) HashJoin(n an ci rt) NestLoop(n an ci rt t) NestLoop(n an ci rt t mi) HashJoin(n an ci rt t mi it) NestLoop(n an ci rt t mi it mc) NestLoop(n an ci rt t mi it mc cn) NestLoop(n an ci rt t mi it mc cn chn) Leading((((((((((n an) ci) rt) t) mi) it) mc) cn) chn)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM cat_aka_name_1 AS an,
   cat_char_name_1 AS chn,
   cat_cast_info_1 AS ci,
   cat_company_name_1 AS cn,
   cat_info_type_1 AS it,
  cat_movie_companies_1 AS mc,
   cat_movie_info_1 AS mi,
   cat_name_1 AS n,
   cat_role_type_1 AS rt,
   cat_title_1 AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(uncredited)', '(as JÃ¤ppi)', '(as Bill Martins)', '(as Gordon Downie)', '(as Peter Smyth)')
AND cn.country_code = '[us]'
AND it.info = 'runtimes'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%)%' OR mc.note LIKE '%)%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%9%' OR mi.info LIKE '%1%')
AND n.gender = 'm'
AND n.name LIKE '%l%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1896 AND 2011;",384,/*+  SeqScan(n) IndexOnlyScan(an person_id_aka_name_cat_1) IndexScan(ci person_id_cast_info_cat_1) SeqScan(rt) IndexScan(t cat_title_1_pkey) IndexScan(mi movie_id_movie_info_cat_1) SeqScan(it) IndexScan(mc movie_id_movie_companies_cat_1) IndexScan(cn cat_company_name_1_pkey) IndexOnlyScan(chn cat_char_name_1_pkey) NestLoop(n an) NestLoop(n an ci) HashJoin(n an ci rt) NestLoop(n an ci rt t) NestLoop(n an ci rt t mi) HashJoin(n an ci rt t mi it) NestLoop(n an ci rt t mi it mc) NestLoop(n an ci rt t mi it mc cn) NestLoop(n an ci rt t mi it mc cn chn) Leading((((((((((n an) ci) rt) t) mi) it) mc) cn) chn)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM cat_aka_name_1 AS an,
   cat_char_name_1 AS chn,
   cat_cast_info_1 AS ci,
   cat_company_name_1 AS cn,
   cat_info_type_1 AS it,
  cat_movie_companies_1 AS mc,
   cat_movie_info_1 AS mi,
   cat_name_1 AS n,
   cat_role_type_1 AS rt,
   cat_title_1 AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(uncredited)', '(security sergeant)', '(as Dick Klinger)', '(as D. Balkovic)', '(as William Mahr)')
AND cn.country_code = '[us]'
AND it.info = 'copyright holder'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%S%' OR mc.note LIKE '%(%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%a%' OR mi.info LIKE '%i%')
AND n.gender = 'm'
AND n.name LIKE '%r%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1957 AND 2016;",384,/*+  SeqScan(n) IndexOnlyScan(an person_id_aka_name_cat_1) IndexScan(ci person_id_cast_info_cat_1) SeqScan(rt) IndexScan(t cat_title_1_pkey) IndexScan(mi movie_id_movie_info_cat_1) SeqScan(it) IndexScan(mc movie_id_movie_companies_cat_1) IndexScan(cn cat_company_name_1_pkey) IndexOnlyScan(chn cat_char_name_1_pkey) NestLoop(n an) NestLoop(n an ci) HashJoin(n an ci rt) NestLoop(n an ci rt t) NestLoop(n an ci rt t mi) HashJoin(n an ci rt t mi it) NestLoop(n an ci rt t mi it mc) NestLoop(n an ci rt t mi it mc cn) NestLoop(n an ci rt t mi it mc cn chn) Leading((((((((((n an) ci) rt) t) mi) it) mc) cn) chn)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM cat_aka_name_1 AS an,
   cat_char_name_1 AS chn,
   cat_cast_info_1 AS ci,
   cat_company_name_1 AS cn,
   cat_info_type_1 AS it,
  cat_movie_companies_1 AS mc,
   cat_movie_info_1 AS mi,
   cat_name_1 AS n,
   cat_role_type_1 AS rt,
   cat_title_1 AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(uncredited)', '(as Parks Jones)', '(as Antoine)', '(as Eric Sharkey)', '(as Von Vibar)')
AND cn.country_code = '[us]'
AND it.info = 'release dates'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%1%' OR mc.note LIKE '%)%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%e%' OR mi.info LIKE '%t%')
AND n.gender = 'm'
AND n.name LIKE '%B%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1904 AND 1990;",384,/*+  SeqScan(n) IndexOnlyScan(an person_id_aka_name_cat_1) IndexScan(ci person_id_cast_info_cat_1) SeqScan(rt) IndexScan(t cat_title_1_pkey) IndexScan(mi movie_id_movie_info_cat_1) SeqScan(it) IndexScan(mc movie_id_movie_companies_cat_1) IndexScan(cn cat_company_name_1_pkey) IndexOnlyScan(chn cat_char_name_1_pkey) NestLoop(n an) NestLoop(n an ci) HashJoin(n an ci rt) NestLoop(n an ci rt t) NestLoop(n an ci rt t mi) HashJoin(n an ci rt t mi it) NestLoop(n an ci rt t mi it mc) NestLoop(n an ci rt t mi it mc cn) NestLoop(n an ci rt t mi it mc cn chn) Leading((((((((((n an) ci) rt) t) mi) it) mc) cn) chn)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM cat_aka_name_1 AS an,
   cat_char_name_1 AS chn,
   cat_cast_info_1 AS ci,
   cat_company_name_1 AS cn,
   cat_info_type_1 AS it,
  cat_movie_companies_1 AS mc,
   cat_movie_info_1 AS mi,
   cat_name_1 AS n,
   cat_role_type_1 AS rt,
   cat_title_1 AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(uncredited)', '(Girl at Oak Park)', '(as Luca Cortese)', '(as Sofa Basirzada)', '(as Chin Tong Mai)')
AND cn.country_code = '[us]'
AND it.info = 'quotes'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%D%' OR mc.note LIKE '%a%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%t%' OR mi.info LIKE '%i%')
AND n.gender = 'm'
AND n.name LIKE '%E%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1913 AND 1998;",384,/*+  SeqScan(n) IndexOnlyScan(an person_id_aka_name_cat_1) IndexScan(ci person_id_cast_info_cat_1) SeqScan(rt) IndexScan(t cat_title_1_pkey) IndexScan(mi movie_id_movie_info_cat_1) SeqScan(it) IndexScan(mc movie_id_movie_companies_cat_1) IndexScan(cn cat_company_name_1_pkey) IndexOnlyScan(chn cat_char_name_1_pkey) NestLoop(n an) NestLoop(n an ci) HashJoin(n an ci rt) NestLoop(n an ci rt t) NestLoop(n an ci rt t mi) HashJoin(n an ci rt t mi it) NestLoop(n an ci rt t mi it mc) NestLoop(n an ci rt t mi it mc cn) NestLoop(n an ci rt t mi it mc cn chn) Leading((((((((((n an) ci) rt) t) mi) it) mc) cn) chn)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM cat_aka_name_1 AS an,
   cat_char_name_1 AS chn,
   cat_cast_info_1 AS ci,
   cat_company_name_1 AS cn,
   cat_info_type_1 AS it,
  cat_movie_companies_1 AS mc,
   cat_movie_info_1 AS mi,
   cat_name_1 AS n,
   cat_role_type_1 AS rt,
   cat_title_1 AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(as James M. King)', '(as Joey Travolta)', '(as D.Velasquez)', '(as Nabeela)', '(as Mark Ranger)')
AND cn.country_code = '[us]'
AND it.info = 'sound mix'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%c%' OR mc.note LIKE '%i%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%D%' OR mi.info LIKE '%D%')
AND n.gender = 'm'
AND n.name LIKE '%y%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1899 AND 2016;",384,/*+  SeqScan(n) IndexOnlyScan(an person_id_aka_name_cat_1) IndexScan(ci person_id_cast_info_cat_1) SeqScan(rt) IndexScan(t cat_title_1_pkey) IndexScan(mi movie_id_movie_info_cat_1) SeqScan(it) IndexScan(mc movie_id_movie_companies_cat_1) IndexScan(cn cat_company_name_1_pkey) IndexOnlyScan(chn cat_char_name_1_pkey) NestLoop(n an) NestLoop(n an ci) HashJoin(n an ci rt) NestLoop(n an ci rt t) NestLoop(n an ci rt t mi) HashJoin(n an ci rt t mi it) NestLoop(n an ci rt t mi it mc) NestLoop(n an ci rt t mi it mc cn) NestLoop(n an ci rt t mi it mc cn chn) Leading((((((((((n an) ci) rt) t) mi) it) mc) cn) chn)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM cat_aka_name_1 AS an,
   cat_char_name_1 AS chn,
   cat_cast_info_1 AS ci,
   cat_company_name_1 AS cn,
   cat_info_type_1 AS it,
  cat_movie_companies_1 AS mc,
   cat_movie_info_1 AS mi,
   cat_name_1 AS n,
   cat_role_type_1 AS rt,
   cat_title_1 AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(as Anthony Fridjhon)', '(as Lee Brown)', '(as Mehdi)', '(as Raoul Gelsini)', '(as Trever Hopper)')
AND cn.country_code = '[nl]'
AND it.info = 'sound mix'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%?%' OR mc.note LIKE '%L%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%o%' OR mi.info LIKE '%l%')
AND n.gender = 'm'
AND n.name LIKE '%o%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1947 AND 2019;",384,/*+  SeqScan(n) IndexOnlyScan(an person_id_aka_name_cat_1) IndexScan(ci person_id_cast_info_cat_1) SeqScan(rt) IndexScan(t cat_title_1_pkey) IndexScan(mi movie_id_movie_info_cat_1) SeqScan(it) IndexScan(mc movie_id_movie_companies_cat_1) IndexScan(cn cat_company_name_1_pkey) IndexOnlyScan(chn cat_char_name_1_pkey) NestLoop(n an) NestLoop(n an ci) HashJoin(n an ci rt) NestLoop(n an ci rt t) NestLoop(n an ci rt t mi) HashJoin(n an ci rt t mi it) NestLoop(n an ci rt t mi it mc) NestLoop(n an ci rt t mi it mc cn) NestLoop(n an ci rt t mi it mc cn chn) Leading((((((((((n an) ci) rt) t) mi) it) mc) cn) chn)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM cat_aka_name_1 AS an,
   cat_char_name_1 AS chn,
   cat_cast_info_1 AS ci,
   cat_company_name_1 AS cn,
   cat_info_type_1 AS it,
  cat_movie_companies_1 AS mc,
   cat_movie_info_1 AS mi,
   cat_name_1 AS n,
   cat_role_type_1 AS rt,
   cat_title_1 AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(uncredited)', '(as Gerry Briceno)', '(as Veerinder)', '(as Hamilton)', '(as Prasad Babu)')
AND cn.country_code = '[us]'
AND it.info = 'quotes'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%1%' OR mc.note LIKE '%(%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%e%' OR mi.info LIKE '%r%')
AND n.gender = 'm'
AND n.name LIKE '%w%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1931 AND 1978;",384,/*+  SeqScan(n) IndexOnlyScan(an person_id_aka_name_cat_1) IndexScan(ci person_id_cast_info_cat_1) SeqScan(rt) IndexScan(t cat_title_1_pkey) IndexScan(mi movie_id_movie_info_cat_1) SeqScan(it) IndexScan(mc movie_id_movie_companies_cat_1) IndexScan(cn cat_company_name_1_pkey) IndexOnlyScan(chn cat_char_name_1_pkey) NestLoop(n an) NestLoop(n an ci) HashJoin(n an ci rt) NestLoop(n an ci rt t) NestLoop(n an ci rt t mi) HashJoin(n an ci rt t mi it) NestLoop(n an ci rt t mi it mc) NestLoop(n an ci rt t mi it mc cn) NestLoop(n an ci rt t mi it mc cn chn) Leading((((((((((n an) ci) rt) t) mi) it) mc) cn) chn)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM cat_aka_name_1 AS an,
   cat_char_name_1 AS chn,
   cat_cast_info_1 AS ci,
   cat_company_name_1 AS cn,
   cat_info_type_1 AS it,
  cat_movie_companies_1 AS mc,
   cat_movie_info_1 AS mi,
   cat_name_1 AS n,
   cat_role_type_1 AS rt,
   cat_title_1 AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(uncredited)', '(as Dave Fordham)', '(as Jack Gorman)', '(as N.T.G.)', '(as Arron Gage)')
AND cn.country_code = '[us]'
AND it.info = 'tech info'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%)%' OR mc.note LIKE '%1%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%P%' OR mi.info LIKE '%5%')
AND n.gender = 'm'
AND n.name LIKE '%i%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1944 AND 1978;",384,/*+  SeqScan(n) IndexOnlyScan(an person_id_aka_name_cat_1) IndexScan(ci person_id_cast_info_cat_1) SeqScan(rt) IndexScan(t cat_title_1_pkey) IndexScan(mi movie_id_movie_info_cat_1) SeqScan(it) IndexScan(mc movie_id_movie_companies_cat_1) IndexScan(cn cat_company_name_1_pkey) IndexOnlyScan(chn cat_char_name_1_pkey) NestLoop(n an) NestLoop(n an ci) HashJoin(n an ci rt) NestLoop(n an ci rt t) NestLoop(n an ci rt t mi) HashJoin(n an ci rt t mi it) NestLoop(n an ci rt t mi it mc) NestLoop(n an ci rt t mi it mc cn) NestLoop(n an ci rt t mi it mc cn chn) Leading((((((((((n an) ci) rt) t) mi) it) mc) cn) chn)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM cat_aka_name_1 AS an,
   cat_char_name_1 AS chn,
   cat_cast_info_1 AS ci,
   cat_company_name_1 AS cn,
   cat_info_type_1 AS it,
  cat_movie_companies_1 AS mc,
   cat_movie_info_1 AS mi,
   cat_name_1 AS n,
   cat_role_type_1 AS rt,
   cat_title_1 AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(as Anthony Fridjhon)', '(Bad Man)', '(as D. Batuyev)', '(as Pete Sarimo)', '(as Piin Huah Lii)')
AND cn.country_code = '[nl]'
AND it.info = 'languages'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%n%' OR mc.note LIKE '%i%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%i%' OR mi.info LIKE '%g%')
AND n.gender = 'm'
AND n.name LIKE '%i%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1919 AND 1995;",384,/*+  SeqScan(n) IndexOnlyScan(an person_id_aka_name_cat_1) IndexScan(ci person_id_cast_info_cat_1) SeqScan(rt) IndexScan(t cat_title_1_pkey) IndexScan(mi movie_id_movie_info_cat_1) SeqScan(it) IndexScan(mc movie_id_movie_companies_cat_1) IndexScan(cn cat_company_name_1_pkey) IndexOnlyScan(chn cat_char_name_1_pkey) NestLoop(n an) NestLoop(n an ci) HashJoin(n an ci rt) NestLoop(n an ci rt t) NestLoop(n an ci rt t mi) HashJoin(n an ci rt t mi it) NestLoop(n an ci rt t mi it mc) NestLoop(n an ci rt t mi it mc cn) NestLoop(n an ci rt t mi it mc cn chn) Leading((((((((((n an) ci) rt) t) mi) it) mc) cn) chn)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM cat_aka_name_1 AS an,
   cat_char_name_1 AS chn,
   cat_cast_info_1 AS ci,
   cat_company_name_1 AS cn,
   cat_info_type_1 AS it,
  cat_movie_companies_1 AS mc,
   cat_movie_info_1 AS mi,
   cat_name_1 AS n,
   cat_role_type_1 AS rt,
   cat_title_1 AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(as James M. King)', '(hi-con processing)', '(as Ken Apache)', '(as William Platt)', '(stand-in: Sickan)')
AND cn.country_code = '[us]'
AND it.info = 'locations'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%e%' OR mc.note LIKE '%u%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%Y%' OR mi.info LIKE '%Y%')
AND n.gender = 'm'
AND n.name LIKE '%m%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1940 AND 2007;",384,/*+  SeqScan(n) IndexOnlyScan(an person_id_aka_name_cat_1) IndexScan(ci person_id_cast_info_cat_1) SeqScan(rt) IndexScan(t cat_title_1_pkey) IndexScan(mi movie_id_movie_info_cat_1) SeqScan(it) IndexScan(mc movie_id_movie_companies_cat_1) IndexScan(cn cat_company_name_1_pkey) IndexOnlyScan(chn cat_char_name_1_pkey) NestLoop(n an) NestLoop(n an ci) HashJoin(n an ci rt) NestLoop(n an ci rt t) NestLoop(n an ci rt t mi) HashJoin(n an ci rt t mi it) NestLoop(n an ci rt t mi it mc) NestLoop(n an ci rt t mi it mc cn) NestLoop(n an ci rt t mi it mc cn chn) Leading((((((((((n an) ci) rt) t) mi) it) mc) cn) chn)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM cat_aka_name_1 AS an,
   cat_char_name_1 AS chn,
   cat_cast_info_1 AS ci,
   cat_company_name_1 AS cn,
   cat_info_type_1 AS it,
  cat_movie_companies_1 AS mc,
   cat_movie_info_1 AS mi,
   cat_name_1 AS n,
   cat_role_type_1 AS rt,
   cat_title_1 AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(uncredited)', '(as Myra Stennet)', '(as Roeland Radier)', '(as Vera Illesu)', '(as The Crickets)')
AND cn.country_code = '[us]'
AND it.info = 'trivia'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%a%' OR mc.note LIKE '%2%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%r%' OR mi.info LIKE '%e%')
AND n.gender = 'm'
AND n.name LIKE '%,%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1917 AND 1980;",384,/*+  SeqScan(n) IndexOnlyScan(an person_id_aka_name_cat_1) IndexScan(ci person_id_cast_info_cat_1) SeqScan(rt) IndexScan(t cat_title_1_pkey) IndexScan(mi movie_id_movie_info_cat_1) SeqScan(it) IndexScan(mc movie_id_movie_companies_cat_1) IndexScan(cn cat_company_name_1_pkey) IndexOnlyScan(chn cat_char_name_1_pkey) NestLoop(n an) NestLoop(n an ci) HashJoin(n an ci rt) NestLoop(n an ci rt t) NestLoop(n an ci rt t mi) HashJoin(n an ci rt t mi it) NestLoop(n an ci rt t mi it mc) NestLoop(n an ci rt t mi it mc cn) NestLoop(n an ci rt t mi it mc cn chn) Leading((((((((((n an) ci) rt) t) mi) it) mc) cn) chn)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM cat_aka_name_1 AS an,
   cat_char_name_1 AS chn,
   cat_cast_info_1 AS ci,
   cat_company_name_1 AS cn,
   cat_info_type_1 AS it,
  cat_movie_companies_1 AS mc,
   cat_movie_info_1 AS mi,
   cat_name_1 AS n,
   cat_role_type_1 AS rt,
   cat_title_1 AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(voice) (uncredited)', '(as Lolo Navarro)', '(as Dante D''Paulo)', '(as Twyla Volkins)', '(as Jacas)')
AND cn.country_code = '[ca]'
AND it.info = 'quotes'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%C%' OR mc.note LIKE '%0%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%h%' OR mi.info LIKE '%o%')
AND n.gender = 'm'
AND n.name LIKE '%y%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 2001 AND 2007;",384,/*+  SeqScan(n) IndexOnlyScan(an person_id_aka_name_cat_1) IndexScan(ci person_id_cast_info_cat_1) SeqScan(rt) IndexScan(t cat_title_1_pkey) IndexScan(mi movie_id_movie_info_cat_1) SeqScan(it) IndexScan(mc movie_id_movie_companies_cat_1) IndexScan(cn cat_company_name_1_pkey) IndexOnlyScan(chn cat_char_name_1_pkey) NestLoop(n an) NestLoop(n an ci) HashJoin(n an ci rt) NestLoop(n an ci rt t) NestLoop(n an ci rt t mi) HashJoin(n an ci rt t mi it) NestLoop(n an ci rt t mi it mc) NestLoop(n an ci rt t mi it mc cn) NestLoop(n an ci rt t mi it mc cn chn) Leading((((((((((n an) ci) rt) t) mi) it) mc) cn) chn)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM cat_aka_name_1 AS an,
   cat_char_name_1 AS chn,
   cat_cast_info_1 AS ci,
   cat_company_name_1 AS cn,
   cat_info_type_1 AS it,
  cat_movie_companies_1 AS mc,
   cat_movie_info_1 AS mi,
   cat_name_1 AS n,
   cat_role_type_1 AS rt,
   cat_title_1 AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(as Anthony Fridjhon)', '(as Hallal Sahbi)', '(as Eta Bartolazzi)', '(as Eve Fizz)', '(as Lai Xi)')
AND cn.country_code = '[nl]'
AND it.info = 'certificates'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%a%' OR mc.note LIKE '%L%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%w%' OR mi.info LIKE '%N%')
AND n.gender = 'm'
AND n.name LIKE '%j%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1958 AND 1992;",384,/*+  SeqScan(n) IndexOnlyScan(an person_id_aka_name_cat_1) IndexScan(ci person_id_cast_info_cat_1) SeqScan(rt) IndexScan(t cat_title_1_pkey) IndexScan(mi movie_id_movie_info_cat_1) SeqScan(it) IndexScan(mc movie_id_movie_companies_cat_1) IndexScan(cn cat_company_name_1_pkey) IndexOnlyScan(chn cat_char_name_1_pkey) NestLoop(n an) NestLoop(n an ci) HashJoin(n an ci rt) NestLoop(n an ci rt t) NestLoop(n an ci rt t mi) HashJoin(n an ci rt t mi it) NestLoop(n an ci rt t mi it mc) NestLoop(n an ci rt t mi it mc cn) NestLoop(n an ci rt t mi it mc cn chn) Leading((((((((((n an) ci) rt) t) mi) it) mc) cn) chn)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM cat_aka_name_1 AS an,
   cat_char_name_1 AS chn,
   cat_cast_info_1 AS ci,
   cat_company_name_1 AS cn,
   cat_info_type_1 AS it,
  cat_movie_companies_1 AS mc,
   cat_movie_info_1 AS mi,
   cat_name_1 AS n,
   cat_role_type_1 AS rt,
   cat_title_1 AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(voice) (uncredited)', '(play ''Die Ratten'')', '(as Deepraz Rana)', '(as Marthe Mellot)', '(co-story writer)')
AND cn.country_code = '[gb]'
AND it.info = 'quotes'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%e%' OR mc.note LIKE '%a%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%g%' OR mi.info LIKE '%t%')
AND n.gender = 'm'
AND n.name LIKE '%o%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1985 AND 2009;",384,/*+  SeqScan(n) IndexOnlyScan(an person_id_aka_name_cat_1) IndexScan(ci person_id_cast_info_cat_1) SeqScan(rt) IndexScan(t cat_title_1_pkey) IndexScan(mi movie_id_movie_info_cat_1) SeqScan(it) IndexScan(mc movie_id_movie_companies_cat_1) IndexScan(cn cat_company_name_1_pkey) IndexOnlyScan(chn cat_char_name_1_pkey) NestLoop(n an) NestLoop(n an ci) HashJoin(n an ci rt) NestLoop(n an ci rt t) NestLoop(n an ci rt t mi) HashJoin(n an ci rt t mi it) NestLoop(n an ci rt t mi it mc) NestLoop(n an ci rt t mi it mc cn) NestLoop(n an ci rt t mi it mc cn chn) Leading((((((((((n an) ci) rt) t) mi) it) mc) cn) chn)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM cat_aka_name_1 AS an,
   cat_char_name_1 AS chn,
   cat_cast_info_1 AS ci,
   cat_company_name_1 AS cn,
   cat_info_type_1 AS it,
  cat_movie_companies_1 AS mc,
   cat_movie_info_1 AS mi,
   cat_name_1 AS n,
   cat_role_type_1 AS rt,
   cat_title_1 AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(as Anthony Fridjhon)', '(as Niko Hill)', '(as Pito Lungo)', '(as William Hunt)', '(as Robert O''Neill)')
AND cn.country_code = '[nl]'
AND it.info = 'genres'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%)%' OR mc.note LIKE '%H%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%c%' OR mi.info LIKE '%c%')
AND n.gender = 'm'
AND n.name LIKE '%n%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1888 AND 2016;",384,/*+  SeqScan(n) IndexOnlyScan(an person_id_aka_name_cat_1) IndexScan(ci person_id_cast_info_cat_1) SeqScan(rt) IndexScan(t cat_title_1_pkey) IndexScan(mi movie_id_movie_info_cat_1) SeqScan(it) IndexScan(mc movie_id_movie_companies_cat_1) IndexScan(cn cat_company_name_1_pkey) IndexOnlyScan(chn cat_char_name_1_pkey) NestLoop(n an) NestLoop(n an ci) HashJoin(n an ci rt) NestLoop(n an ci rt t) NestLoop(n an ci rt t mi) HashJoin(n an ci rt t mi it) NestLoop(n an ci rt t mi it mc) NestLoop(n an ci rt t mi it mc cn) NestLoop(n an ci rt t mi it mc cn chn) Leading((((((((((n an) ci) rt) t) mi) it) mc) cn) chn)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM cat_aka_name_1 AS an,
   cat_char_name_1 AS chn,
   cat_cast_info_1 AS ci,
   cat_company_name_1 AS cn,
   cat_info_type_1 AS it,
  cat_movie_companies_1 AS mc,
   cat_movie_info_1 AS mi,
   cat_name_1 AS n,
   cat_role_type_1 AS rt,
   cat_title_1 AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(as James M. King)', '(as Virginia Reid)', '(as Gomez Ramiro)', '(as Saroja Devi)', '(as Roger Dantis)')
AND cn.country_code = '[us]'
AND it.info = 'locations'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%u%' OR mc.note LIKE '%c%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%,%' OR mi.info LIKE '%,%')
AND n.gender = 'm'
AND n.name LIKE '%n%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1988 AND 2015;",384,/*+  SeqScan(n) IndexOnlyScan(an person_id_aka_name_cat_1) IndexScan(ci person_id_cast_info_cat_1) SeqScan(rt) IndexScan(t cat_title_1_pkey) IndexScan(mi movie_id_movie_info_cat_1) SeqScan(it) IndexScan(mc movie_id_movie_companies_cat_1) IndexScan(cn cat_company_name_1_pkey) IndexOnlyScan(chn cat_char_name_1_pkey) NestLoop(n an) NestLoop(n an ci) HashJoin(n an ci rt) NestLoop(n an ci rt t) NestLoop(n an ci rt t mi) HashJoin(n an ci rt t mi it) NestLoop(n an ci rt t mi it mc) NestLoop(n an ci rt t mi it mc cn) NestLoop(n an ci rt t mi it mc cn chn) Leading((((((((((n an) ci) rt) t) mi) it) mc) cn) chn)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM cat_aka_name_1 AS an,
   cat_char_name_1 AS chn,
   cat_cast_info_1 AS ci,
   cat_company_name_1 AS cn,
   cat_info_type_1 AS it,
  cat_movie_companies_1 AS mc,
   cat_movie_info_1 AS mi,
   cat_name_1 AS n,
   cat_role_type_1 AS rt,
   cat_title_1 AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(uncredited)', '(story) (as Fine)', '(LaMaide)', '(Die Unbekannte)', '(segment ""Egypt"")')
AND cn.country_code = '[us]'
AND it.info = 'quotes'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%)%' OR mc.note LIKE '%a%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%l%' OR mi.info LIKE '%b%')
AND n.gender = 'm'
AND n.name LIKE '%i%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1893 AND 2019;",384,/*+  SeqScan(n) IndexOnlyScan(an person_id_aka_name_cat_1) IndexScan(ci person_id_cast_info_cat_1) SeqScan(rt) IndexScan(t cat_title_1_pkey) IndexScan(mi movie_id_movie_info_cat_1) SeqScan(it) IndexScan(mc movie_id_movie_companies_cat_1) IndexScan(cn cat_company_name_1_pkey) IndexOnlyScan(chn cat_char_name_1_pkey) NestLoop(n an) NestLoop(n an ci) HashJoin(n an ci rt) NestLoop(n an ci rt t) NestLoop(n an ci rt t mi) HashJoin(n an ci rt t mi it) NestLoop(n an ci rt t mi it mc) NestLoop(n an ci rt t mi it mc cn) NestLoop(n an ci rt t mi it mc cn chn) Leading((((((((((n an) ci) rt) t) mi) it) mc) cn) chn)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM cat_aka_name_1 AS an,
   cat_char_name_1 AS chn,
   cat_cast_info_1 AS ci,
   cat_company_name_1 AS cn,
   cat_info_type_1 AS it,
  cat_movie_companies_1 AS mc,
   cat_movie_info_1 AS mi,
   cat_name_1 AS n,
   cat_role_type_1 AS rt,
   cat_title_1 AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(voice) (uncredited)', '(as Mikey Fox)', '(as Bobby Houston)', '(as Adam Coop)', '(as Kathy Spitz)')
AND cn.country_code = '[fi]'
AND it.info = 'quotes'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%i%' OR mc.note LIKE '%i%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%i%' OR mi.info LIKE '%a%')
AND n.gender = 'm'
AND n.name LIKE '%B%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1996 AND 2015;",384,/*+  SeqScan(n) IndexOnlyScan(an person_id_aka_name_cat_1) IndexScan(ci person_id_cast_info_cat_1) SeqScan(rt) IndexScan(t cat_title_1_pkey) IndexScan(mi movie_id_movie_info_cat_1) SeqScan(it) IndexScan(mc movie_id_movie_companies_cat_1) IndexScan(cn cat_company_name_1_pkey) IndexOnlyScan(chn cat_char_name_1_pkey) NestLoop(n an) NestLoop(n an ci) HashJoin(n an ci rt) NestLoop(n an ci rt t) NestLoop(n an ci rt t mi) HashJoin(n an ci rt t mi it) NestLoop(n an ci rt t mi it mc) NestLoop(n an ci rt t mi it mc cn) NestLoop(n an ci rt t mi it mc cn chn) Leading((((((((((n an) ci) rt) t) mi) it) mc) cn) chn)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM cat_aka_name_1 AS an,
   cat_char_name_1 AS chn,
   cat_cast_info_1 AS ci,
   cat_company_name_1 AS cn,
   cat_info_type_1 AS it,
  cat_movie_companies_1 AS mc,
   cat_movie_info_1 AS mi,
   cat_name_1 AS n,
   cat_role_type_1 AS rt,
   cat_title_1 AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(as James M. King)', '(as Mya Akerling)', '(as Taras Kostyuk)', '(catering: Halfweg)', '(as Ehat Alince)')
AND cn.country_code = '[us]'
AND it.info = 'release dates'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%e%' OR mc.note LIKE '%e%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%7%' OR mi.info LIKE '%u%')
AND n.gender = 'm'
AND n.name LIKE '%i%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1954 AND 2007;",384,/*+  SeqScan(n) IndexOnlyScan(an person_id_aka_name_cat_1) IndexScan(ci person_id_cast_info_cat_1) SeqScan(rt) IndexScan(t cat_title_1_pkey) IndexScan(mi movie_id_movie_info_cat_1) SeqScan(it) IndexScan(mc movie_id_movie_companies_cat_1) IndexScan(cn cat_company_name_1_pkey) IndexOnlyScan(chn cat_char_name_1_pkey) NestLoop(n an) NestLoop(n an ci) HashJoin(n an ci rt) NestLoop(n an ci rt t) NestLoop(n an ci rt t mi) HashJoin(n an ci rt t mi it) NestLoop(n an ci rt t mi it mc) NestLoop(n an ci rt t mi it mc cn) NestLoop(n an ci rt t mi it mc cn chn) Leading((((((((((n an) ci) rt) t) mi) it) mc) cn) chn)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM cat_aka_name_1 AS an,
   cat_char_name_1 AS chn,
   cat_cast_info_1 AS ci,
   cat_company_name_1 AS cn,
   cat_info_type_1 AS it,
  cat_movie_companies_1 AS mc,
   cat_movie_info_1 AS mi,
   cat_name_1 AS n,
   cat_role_type_1 AS rt,
   cat_title_1 AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(uncredited)', '(as Amelie)', '(as Herta Dolezal)', '(IT lead)', '(as Mervyn Le Roy)')
AND cn.country_code = '[us]'
AND it.info = 'novel'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%)%' OR mc.note LIKE '%9%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%0%' OR mi.info LIKE '%n%')
AND n.gender = 'm'
AND n.name LIKE '%B%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1955 AND 2005;",384,/*+  SeqScan(n) IndexOnlyScan(an person_id_aka_name_cat_1) IndexScan(ci person_id_cast_info_cat_1) SeqScan(rt) IndexScan(t cat_title_1_pkey) IndexScan(mi movie_id_movie_info_cat_1) SeqScan(it) IndexScan(mc movie_id_movie_companies_cat_1) IndexScan(cn cat_company_name_1_pkey) IndexOnlyScan(chn cat_char_name_1_pkey) NestLoop(n an) NestLoop(n an ci) HashJoin(n an ci rt) NestLoop(n an ci rt t) NestLoop(n an ci rt t mi) HashJoin(n an ci rt t mi it) NestLoop(n an ci rt t mi it mc) NestLoop(n an ci rt t mi it mc cn) NestLoop(n an ci rt t mi it mc cn chn) Leading((((((((((n an) ci) rt) t) mi) it) mc) cn) chn)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM cat_aka_name_1 AS an,
   cat_char_name_1 AS chn,
   cat_cast_info_1 AS ci,
   cat_company_name_1 AS cn,
   cat_info_type_1 AS it,
  cat_movie_companies_1 AS mc,
   cat_movie_info_1 AS mi,
   cat_name_1 AS n,
   cat_role_type_1 AS rt,
   cat_title_1 AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(uncredited)', '(as Luisa Colpeyn)', '(play ""Karriere"")', '(as Ravi Kant)', '(as Olli Gebauer)')
AND cn.country_code = '[us]'
AND it.info = 'release dates'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%-%' OR mc.note LIKE '%a%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%t%' OR mi.info LIKE '%W%')
AND n.gender = 'm'
AND n.name LIKE '%i%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1916 AND 1976;",384,/*+  SeqScan(n) IndexOnlyScan(an person_id_aka_name_cat_1) IndexScan(ci person_id_cast_info_cat_1) SeqScan(rt) IndexScan(t cat_title_1_pkey) IndexScan(mi movie_id_movie_info_cat_1) SeqScan(it) IndexScan(mc movie_id_movie_companies_cat_1) IndexScan(cn cat_company_name_1_pkey) IndexOnlyScan(chn cat_char_name_1_pkey) NestLoop(n an) NestLoop(n an ci) HashJoin(n an ci rt) NestLoop(n an ci rt t) NestLoop(n an ci rt t mi) HashJoin(n an ci rt t mi it) NestLoop(n an ci rt t mi it mc) NestLoop(n an ci rt t mi it mc cn) NestLoop(n an ci rt t mi it mc cn chn) Leading((((((((((n an) ci) rt) t) mi) it) mc) cn) chn)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM cat_aka_name_1 AS an,
   cat_char_name_1 AS chn,
   cat_cast_info_1 AS ci,
   cat_company_name_1 AS cn,
   cat_info_type_1 AS it,
  cat_movie_companies_1 AS mc,
   cat_movie_info_1 AS mi,
   cat_name_1 AS n,
   cat_role_type_1 AS rt,
   cat_title_1 AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(uncredited)', '(story ""The Cop"")', '(Posse)', '(as Rosaline Oscar)', '(as Ye. Kolegova)')
AND cn.country_code = '[us]'
AND it.info = 'certificates'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%0%' OR mc.note LIKE '%S%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%:%' OR mi.info LIKE '%A%')
AND n.gender = 'm'
AND n.name LIKE '%m%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1935 AND 1984;",384,/*+  SeqScan(n) IndexOnlyScan(an person_id_aka_name_cat_1) IndexScan(ci person_id_cast_info_cat_1) SeqScan(rt) IndexScan(t cat_title_1_pkey) IndexScan(mi movie_id_movie_info_cat_1) SeqScan(it) IndexScan(mc movie_id_movie_companies_cat_1) IndexScan(cn cat_company_name_1_pkey) IndexOnlyScan(chn cat_char_name_1_pkey) NestLoop(n an) NestLoop(n an ci) HashJoin(n an ci rt) NestLoop(n an ci rt t) NestLoop(n an ci rt t mi) HashJoin(n an ci rt t mi it) NestLoop(n an ci rt t mi it mc) NestLoop(n an ci rt t mi it mc cn) NestLoop(n an ci rt t mi it mc cn chn) Leading((((((((((n an) ci) rt) t) mi) it) mc) cn) chn)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM cat_aka_name_1 AS an,
   cat_char_name_1 AS chn,
   cat_cast_info_1 AS ci,
   cat_company_name_1 AS cn,
   cat_info_type_1 AS it,
  cat_movie_companies_1 AS mc,
   cat_movie_info_1 AS mi,
   cat_name_1 AS n,
   cat_role_type_1 AS rt,
   cat_title_1 AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(voice) (uncredited)', '(as Jin Namkung)', '(as Stanford Price)', '(as FÃ¡bio Canale)', '(as Shobhan Hunter)')
AND cn.country_code = '[fi]'
AND it.info = 'quotes'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%F%' OR mc.note LIKE '%)%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%n%' OR mi.info LIKE '%s%')
AND n.gender = 'm'
AND n.name LIKE '%b%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1996 AND 2013;",384,/*+  SeqScan(n) IndexOnlyScan(an person_id_aka_name_cat_1) IndexScan(ci person_id_cast_info_cat_1) SeqScan(rt) IndexScan(t cat_title_1_pkey) IndexScan(mi movie_id_movie_info_cat_1) SeqScan(it) IndexScan(mc movie_id_movie_companies_cat_1) IndexScan(cn cat_company_name_1_pkey) IndexOnlyScan(chn cat_char_name_1_pkey) NestLoop(n an) NestLoop(n an ci) HashJoin(n an ci rt) NestLoop(n an ci rt t) NestLoop(n an ci rt t mi) HashJoin(n an ci rt t mi it) NestLoop(n an ci rt t mi it mc) NestLoop(n an ci rt t mi it mc cn) NestLoop(n an ci rt t mi it mc cn chn) Leading((((((((((n an) ci) rt) t) mi) it) mc) cn) chn)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM cat_aka_name_1 AS an,
   cat_char_name_1 AS chn,
   cat_cast_info_1 AS ci,
   cat_company_name_1 AS cn,
   cat_info_type_1 AS it,
  cat_movie_companies_1 AS mc,
   cat_movie_info_1 AS mi,
   cat_name_1 AS n,
   cat_role_type_1 AS rt,
   cat_title_1 AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(uncredited)', '(as Mateo Guez)', '(as Harish Magan)', '(1969-1970)', '(as Cathy Larson)')
AND cn.country_code = '[us]'
AND it.info = 'trivia'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%1%' OR mc.note LIKE '%r%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%e%' OR mi.info LIKE '%o%')
AND n.gender = 'm'
AND n.name LIKE '%E%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1926 AND 2019;",384,/*+  SeqScan(n) IndexOnlyScan(an person_id_aka_name_cat_1) IndexScan(ci person_id_cast_info_cat_1) SeqScan(rt) IndexScan(t cat_title_1_pkey) IndexScan(mi movie_id_movie_info_cat_1) SeqScan(it) IndexScan(mc movie_id_movie_companies_cat_1) IndexScan(cn cat_company_name_1_pkey) IndexOnlyScan(chn cat_char_name_1_pkey) NestLoop(n an) NestLoop(n an ci) HashJoin(n an ci rt) NestLoop(n an ci rt t) NestLoop(n an ci rt t mi) HashJoin(n an ci rt t mi it) NestLoop(n an ci rt t mi it mc) NestLoop(n an ci rt t mi it mc cn) NestLoop(n an ci rt t mi it mc cn chn) Leading((((((((((n an) ci) rt) t) mi) it) mc) cn) chn)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM cat_aka_name_1 AS an,
   cat_char_name_1 AS chn,
   cat_cast_info_1 AS ci,
   cat_company_name_1 AS cn,
   cat_info_type_1 AS it,
  cat_movie_companies_1 AS mc,
   cat_movie_info_1 AS mi,
   cat_name_1 AS n,
   cat_role_type_1 AS rt,
   cat_title_1 AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(uncredited)', '(as Henry Bry)', '(as Michelle Baile)', '(as Tema Staig)', '(as Robert Nesh)')
AND cn.country_code = '[fi]'
AND it.info = 'goofs'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%a%' OR mc.note LIKE '%)%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%E%' OR mi.info LIKE '%e%')
AND n.gender = 'm'
AND n.name LIKE '%R%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1920 AND 1979;",384,/*+  SeqScan(n) IndexOnlyScan(an person_id_aka_name_cat_1) IndexScan(ci person_id_cast_info_cat_1) SeqScan(rt) IndexScan(t cat_title_1_pkey) IndexScan(mi movie_id_movie_info_cat_1) SeqScan(it) IndexScan(mc movie_id_movie_companies_cat_1) IndexScan(cn cat_company_name_1_pkey) IndexOnlyScan(chn cat_char_name_1_pkey) NestLoop(n an) NestLoop(n an ci) HashJoin(n an ci rt) NestLoop(n an ci rt t) NestLoop(n an ci rt t mi) HashJoin(n an ci rt t mi it) NestLoop(n an ci rt t mi it mc) NestLoop(n an ci rt t mi it mc cn) NestLoop(n an ci rt t mi it mc cn chn) Leading((((((((((n an) ci) rt) t) mi) it) mc) cn) chn)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM cat_aka_name_1 AS an,
   cat_char_name_1 AS chn,
   cat_cast_info_1 AS ci,
   cat_company_name_1 AS cn,
   cat_info_type_1 AS it,
  cat_movie_companies_1 AS mc,
   cat_movie_info_1 AS mi,
   cat_name_1 AS n,
   cat_role_type_1 AS rt,
   cat_title_1 AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(uncredited)', '(as C. Ram Prasad)', '(as Juian Barnes)', '(as Dylan Roy)', '(production medic)')
AND cn.country_code = '[us]'
AND it.info = 'release dates'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%0%' OR mc.note LIKE '%d%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%t%' OR mi.info LIKE '%t%')
AND n.gender = 'm'
AND n.name LIKE '%E%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1930 AND 1960;",384,/*+  SeqScan(n) IndexOnlyScan(an person_id_aka_name_cat_1) IndexScan(ci person_id_cast_info_cat_1) SeqScan(rt) IndexScan(t cat_title_1_pkey) IndexScan(mi movie_id_movie_info_cat_1) SeqScan(it) IndexScan(mc movie_id_movie_companies_cat_1) IndexScan(cn cat_company_name_1_pkey) IndexOnlyScan(chn cat_char_name_1_pkey) NestLoop(n an) NestLoop(n an ci) HashJoin(n an ci rt) NestLoop(n an ci rt t) NestLoop(n an ci rt t mi) HashJoin(n an ci rt t mi it) NestLoop(n an ci rt t mi it mc) NestLoop(n an ci rt t mi it mc cn) NestLoop(n an ci rt t mi it mc cn chn) Leading((((((((((n an) ci) rt) t) mi) it) mc) cn) chn)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM cat_aka_name_1 AS an,
   cat_char_name_1 AS chn,
   cat_cast_info_1 AS ci,
   cat_company_name_1 AS cn,
   cat_info_type_1 AS it,
  cat_movie_companies_1 AS mc,
   cat_movie_info_1 AS mi,
   cat_name_1 AS n,
   cat_role_type_1 AS rt,
   cat_title_1 AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(uncredited)', '(as G. Ployer)', '(as Regina Lee)', '(as Agnes Herring)', '(as Gadi Fur)')
AND cn.country_code = '[us]'
AND it.info = 'tech info'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%n%' OR mc.note LIKE '%)%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%:%' OR mi.info LIKE '%o%')
AND n.gender = 'm'
AND n.name LIKE '%B%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1892 AND 1995;",384,/*+  SeqScan(n) IndexOnlyScan(an person_id_aka_name_cat_1) IndexScan(ci person_id_cast_info_cat_1) SeqScan(rt) IndexScan(t cat_title_1_pkey) IndexScan(mi movie_id_movie_info_cat_1) SeqScan(it) IndexScan(mc movie_id_movie_companies_cat_1) IndexScan(cn cat_company_name_1_pkey) IndexOnlyScan(chn cat_char_name_1_pkey) NestLoop(n an) NestLoop(n an ci) HashJoin(n an ci rt) NestLoop(n an ci rt t) NestLoop(n an ci rt t mi) HashJoin(n an ci rt t mi it) NestLoop(n an ci rt t mi it mc) NestLoop(n an ci rt t mi it mc cn) NestLoop(n an ci rt t mi it mc cn chn) Leading((((((((((n an) ci) rt) t) mi) it) mc) cn) chn)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM cat_aka_name_1 AS an,
   cat_char_name_1 AS chn,
   cat_cast_info_1 AS ci,
   cat_company_name_1 AS cn,
   cat_info_type_1 AS it,
  cat_movie_companies_1 AS mc,
   cat_movie_info_1 AS mi,
   cat_name_1 AS n,
   cat_role_type_1 AS rt,
   cat_title_1 AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(as James M. King)', '(as Samantha Grey)', '(Phatu)', '(as TÃ¶rzs JenÃµ)', '(story ""Road Show"")')
AND cn.country_code = '[us]'
AND it.info = 'release dates'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%i%' OR mc.note LIKE '%i%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%d%' OR mi.info LIKE '%e%')
AND n.gender = 'm'
AND n.name LIKE '%i%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1916 AND 2008;",384,/*+  SeqScan(n) IndexOnlyScan(an person_id_aka_name_cat_1) IndexScan(ci person_id_cast_info_cat_1) SeqScan(rt) IndexScan(t cat_title_1_pkey) IndexScan(mi movie_id_movie_info_cat_1) SeqScan(it) IndexScan(mc movie_id_movie_companies_cat_1) IndexScan(cn cat_company_name_1_pkey) IndexOnlyScan(chn cat_char_name_1_pkey) NestLoop(n an) NestLoop(n an ci) HashJoin(n an ci rt) NestLoop(n an ci rt t) NestLoop(n an ci rt t mi) HashJoin(n an ci rt t mi it) NestLoop(n an ci rt t mi it mc) NestLoop(n an ci rt t mi it mc cn) NestLoop(n an ci rt t mi it mc cn chn) Leading((((((((((n an) ci) rt) t) mi) it) mc) cn) chn)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM cat_aka_name_1 AS an,
   cat_char_name_1 AS chn,
   cat_cast_info_1 AS ci,
   cat_company_name_1 AS cn,
   cat_info_type_1 AS it,
  cat_movie_companies_1 AS mc,
   cat_movie_info_1 AS mi,
   cat_name_1 AS n,
   cat_role_type_1 AS rt,
   cat_title_1 AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(uncredited)', '(as Besart Kallaku)', '(as Yin Chien-ping)', '(Mother)', '(as Chris Meehan)')
AND cn.country_code = '[us]'
AND it.info = 'tech info'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%S%' OR mc.note LIKE '%B%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%5%' OR mi.info LIKE '%5%')
AND n.gender = 'm'
AND n.name LIKE '%l%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1891 AND 2013;",384,/*+  SeqScan(n) IndexOnlyScan(an person_id_aka_name_cat_1) IndexScan(ci person_id_cast_info_cat_1) SeqScan(rt) IndexScan(t cat_title_1_pkey) IndexScan(mi movie_id_movie_info_cat_1) SeqScan(it) IndexScan(mc movie_id_movie_companies_cat_1) IndexScan(cn cat_company_name_1_pkey) IndexOnlyScan(chn cat_char_name_1_pkey) NestLoop(n an) NestLoop(n an ci) HashJoin(n an ci rt) NestLoop(n an ci rt t) NestLoop(n an ci rt t mi) HashJoin(n an ci rt t mi it) NestLoop(n an ci rt t mi it mc) NestLoop(n an ci rt t mi it mc cn) NestLoop(n an ci rt t mi it mc cn chn) Leading((((((((((n an) ci) rt) t) mi) it) mc) cn) chn)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM cat_aka_name_1 AS an,
   cat_char_name_1 AS chn,
   cat_cast_info_1 AS ci,
   cat_company_name_1 AS cn,
   cat_info_type_1 AS it,
  cat_movie_companies_1 AS mc,
   cat_movie_info_1 AS mi,
   cat_name_1 AS n,
   cat_role_type_1 AS rt,
   cat_title_1 AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(as James M. King)', '(as Starr Andreff)', '(catering: Lyon)', '(military trainer)', '(as Winfried Elste)')
AND cn.country_code = '[us]'
AND it.info = 'locations'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%)%' OR mc.note LIKE '%t%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%e%' OR mi.info LIKE '%R%')
AND n.gender = 'm'
AND n.name LIKE '%,%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1952 AND 2020;",384,/*+  SeqScan(n) IndexOnlyScan(an person_id_aka_name_cat_1) IndexScan(ci person_id_cast_info_cat_1) SeqScan(rt) IndexScan(t cat_title_1_pkey) IndexScan(mi movie_id_movie_info_cat_1) SeqScan(it) IndexScan(mc movie_id_movie_companies_cat_1) IndexScan(cn cat_company_name_1_pkey) IndexOnlyScan(chn cat_char_name_1_pkey) NestLoop(n an) NestLoop(n an ci) HashJoin(n an ci rt) NestLoop(n an ci rt t) NestLoop(n an ci rt t mi) HashJoin(n an ci rt t mi it) NestLoop(n an ci rt t mi it mc) NestLoop(n an ci rt t mi it mc cn) NestLoop(n an ci rt t mi it mc cn chn) Leading((((((((((n an) ci) rt) t) mi) it) mc) cn) chn)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM cat_aka_name_1 AS an,
   cat_char_name_1 AS chn,
   cat_cast_info_1 AS ci,
   cat_company_name_1 AS cn,
   cat_info_type_1 AS it,
  cat_movie_companies_1 AS mc,
   cat_movie_info_1 AS mi,
   cat_name_1 AS n,
   cat_role_type_1 AS rt,
   cat_title_1 AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(as Anthony Fridjhon)', '(as Sek Yu)', '(as RenÃ© Rivera)', '(as Kaka Dalpat)', '(Mohit''s Friend)')
AND cn.country_code = '[nl]'
AND it.info = 'genres'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%N%' OR mc.note LIKE '%s%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%e%' OR mi.info LIKE '%r%')
AND n.gender = 'm'
AND n.name LIKE '%F%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1950 AND 1995;",384,/*+  SeqScan(n) IndexOnlyScan(an person_id_aka_name_cat_1) IndexScan(ci person_id_cast_info_cat_1) SeqScan(rt) IndexScan(t cat_title_1_pkey) IndexScan(mi movie_id_movie_info_cat_1) SeqScan(it) IndexScan(mc movie_id_movie_companies_cat_1) IndexScan(cn cat_company_name_1_pkey) IndexOnlyScan(chn cat_char_name_1_pkey) NestLoop(n an) NestLoop(n an ci) HashJoin(n an ci rt) NestLoop(n an ci rt t) NestLoop(n an ci rt t mi) HashJoin(n an ci rt t mi it) NestLoop(n an ci rt t mi it mc) NestLoop(n an ci rt t mi it mc cn) NestLoop(n an ci rt t mi it mc cn chn) Leading((((((((((n an) ci) rt) t) mi) it) mc) cn) chn)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM cat_aka_name_1 AS an,
   cat_char_name_1 AS chn,
   cat_cast_info_1 AS ci,
   cat_company_name_1 AS cn,
   cat_info_type_1 AS it,
  cat_movie_companies_1 AS mc,
   cat_movie_info_1 AS mi,
   cat_name_1 AS n,
   cat_role_type_1 AS rt,
   cat_title_1 AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(uncredited)', '(as G.P. Hamilton)', '(as Chun-erh Lung)', '(as Carlos MoyÃ )', '(as Harry Newmann)')
AND cn.country_code = '[us]'
AND it.info = 'novel'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%a%' OR mc.note LIKE '%)%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%e%' OR mi.info LIKE '%r%')
AND n.gender = 'm'
AND n.name LIKE '%i%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1911 AND 1987;",384,/*+  SeqScan(n) IndexOnlyScan(an person_id_aka_name_cat_1) IndexScan(ci person_id_cast_info_cat_1) SeqScan(rt) IndexScan(t cat_title_1_pkey) IndexScan(mi movie_id_movie_info_cat_1) SeqScan(it) IndexScan(mc movie_id_movie_companies_cat_1) IndexScan(cn cat_company_name_1_pkey) IndexOnlyScan(chn cat_char_name_1_pkey) NestLoop(n an) NestLoop(n an ci) HashJoin(n an ci rt) NestLoop(n an ci rt t) NestLoop(n an ci rt t mi) HashJoin(n an ci rt t mi it) NestLoop(n an ci rt t mi it mc) NestLoop(n an ci rt t mi it mc cn) NestLoop(n an ci rt t mi it mc cn chn) Leading((((((((((n an) ci) rt) t) mi) it) mc) cn) chn)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM cat_aka_name_1 AS an,
   cat_char_name_1 AS chn,
   cat_cast_info_1 AS ci,
   cat_company_name_1 AS cn,
   cat_info_type_1 AS it,
  cat_movie_companies_1 AS mc,
   cat_movie_info_1 AS mi,
   cat_name_1 AS n,
   cat_role_type_1 AS rt,
   cat_title_1 AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(voice) (uncredited)', '(as LeylÃ¢ Sayar)', '(as Tutta Berntzen)', '(as Lito Anzurez)', '(film director)')
AND cn.country_code = '[fi]'
AND it.info = 'quotes'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%D%' OR mc.note LIKE '%(%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%!%' OR mi.info LIKE '%e%')
AND n.gender = 'm'
AND n.name LIKE '%,%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1924 AND 2012;",384,/*+  SeqScan(n) IndexOnlyScan(an person_id_aka_name_cat_1) IndexScan(ci person_id_cast_info_cat_1) SeqScan(rt) IndexScan(t cat_title_1_pkey) IndexScan(mi movie_id_movie_info_cat_1) SeqScan(it) IndexScan(mc movie_id_movie_companies_cat_1) IndexScan(cn cat_company_name_1_pkey) IndexOnlyScan(chn cat_char_name_1_pkey) NestLoop(n an) NestLoop(n an ci) HashJoin(n an ci rt) NestLoop(n an ci rt t) NestLoop(n an ci rt t mi) HashJoin(n an ci rt t mi it) NestLoop(n an ci rt t mi it mc) NestLoop(n an ci rt t mi it mc cn) NestLoop(n an ci rt t mi it mc cn chn) Leading((((((((((n an) ci) rt) t) mi) it) mc) cn) chn)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM cat_aka_name_1 AS an,
   cat_char_name_1 AS chn,
   cat_cast_info_1 AS ci,
   cat_company_name_1 AS cn,
   cat_info_type_1 AS it,
  cat_movie_companies_1 AS mc,
   cat_movie_info_1 AS mi,
   cat_name_1 AS n,
   cat_role_type_1 AS rt,
   cat_title_1 AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(as James M. King)', '(episode 1)', '(as Shen Junran)', '(as Will Plyer)', '(as Marv Engles)')
AND cn.country_code = '[us]'
AND it.info = 'release dates'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%)%' OR mc.note LIKE '%u%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%u%' OR mi.info LIKE '%7%')
AND n.gender = 'm'
AND n.name LIKE '%i%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1965 AND 2017;",384,/*+  SeqScan(n) IndexOnlyScan(an person_id_aka_name_cat_1) IndexScan(ci person_id_cast_info_cat_1) SeqScan(rt) IndexScan(t cat_title_1_pkey) IndexScan(mi movie_id_movie_info_cat_1) SeqScan(it) IndexScan(mc movie_id_movie_companies_cat_1) IndexScan(cn cat_company_name_1_pkey) IndexOnlyScan(chn cat_char_name_1_pkey) NestLoop(n an) NestLoop(n an ci) HashJoin(n an ci rt) NestLoop(n an ci rt t) NestLoop(n an ci rt t mi) HashJoin(n an ci rt t mi it) NestLoop(n an ci rt t mi it mc) NestLoop(n an ci rt t mi it mc cn) NestLoop(n an ci rt t mi it mc cn chn) Leading((((((((((n an) ci) rt) t) mi) it) mc) cn) chn)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM cat_aka_name_1 AS an,
   cat_char_name_1 AS chn,
   cat_cast_info_1 AS ci,
   cat_company_name_1 AS cn,
   cat_info_type_1 AS it,
  cat_movie_companies_1 AS mc,
   cat_movie_info_1 AS mi,
   cat_name_1 AS n,
   cat_role_type_1 AS rt,
   cat_title_1 AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(uncredited)', '(as Domino)', '(Voiceover)', '(as Zap)', '(play ""Taifun"")')
AND cn.country_code = '[us]'
AND it.info = 'locations'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%n%' OR mc.note LIKE '%r%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%l%' OR mi.info LIKE '%n%')
AND n.gender = 'm'
AND n.name LIKE '%B%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1893 AND 1969;",384,/*+  SeqScan(n) IndexOnlyScan(an person_id_aka_name_cat_1) IndexScan(ci person_id_cast_info_cat_1) SeqScan(rt) IndexScan(t cat_title_1_pkey) IndexScan(mi movie_id_movie_info_cat_1) SeqScan(it) IndexScan(mc movie_id_movie_companies_cat_1) IndexScan(cn cat_company_name_1_pkey) IndexOnlyScan(chn cat_char_name_1_pkey) NestLoop(n an) NestLoop(n an ci) HashJoin(n an ci rt) NestLoop(n an ci rt t) NestLoop(n an ci rt t mi) HashJoin(n an ci rt t mi it) NestLoop(n an ci rt t mi it mc) NestLoop(n an ci rt t mi it mc cn) NestLoop(n an ci rt t mi it mc cn chn) Leading((((((((((n an) ci) rt) t) mi) it) mc) cn) chn)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM cat_aka_name_1 AS an,
   cat_char_name_1 AS chn,
   cat_cast_info_1 AS ci,
   cat_company_name_1 AS cn,
   cat_info_type_1 AS it,
  cat_movie_companies_1 AS mc,
   cat_movie_info_1 AS mi,
   cat_name_1 AS n,
   cat_role_type_1 AS rt,
   cat_title_1 AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(voice) (uncredited)', '(as John Goldman)', '(as Robert Dolle)', '(novel ""An Exile"")', '(as Bob Bidaman)')
AND cn.country_code = '[fi]'
AND it.info = 'quotes'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%V%' OR mc.note LIKE '%a%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%''%' OR mi.info LIKE '%t%')
AND n.gender = 'm'
AND n.name LIKE '%y%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1914 AND 2017;",384,/*+  SeqScan(n) IndexOnlyScan(an person_id_aka_name_cat_1) IndexScan(ci person_id_cast_info_cat_1) SeqScan(rt) IndexScan(t cat_title_1_pkey) IndexScan(mi movie_id_movie_info_cat_1) SeqScan(it) IndexScan(mc movie_id_movie_companies_cat_1) IndexScan(cn cat_company_name_1_pkey) IndexOnlyScan(chn cat_char_name_1_pkey) NestLoop(n an) NestLoop(n an ci) HashJoin(n an ci rt) NestLoop(n an ci rt t) NestLoop(n an ci rt t mi) HashJoin(n an ci rt t mi it) NestLoop(n an ci rt t mi it mc) NestLoop(n an ci rt t mi it mc cn) NestLoop(n an ci rt t mi it mc cn chn) Leading((((((((((n an) ci) rt) t) mi) it) mc) cn) chn)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM cat_aka_name_1 AS an,
   cat_char_name_1 AS chn,
   cat_cast_info_1 AS ci,
   cat_company_name_1 AS cn,
   cat_info_type_1 AS it,
  cat_movie_companies_1 AS mc,
   cat_movie_info_1 AS mi,
   cat_name_1 AS n,
   cat_role_type_1 AS rt,
   cat_title_1 AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(uncredited)', '(as Evan Messaros)', '(as Richard Allen)', '(nurse: Australia)', '(as Daryl Parsons)')
AND cn.country_code = '[us]'
AND it.info = 'release dates'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%1%' OR mc.note LIKE '%)%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%t%' OR mi.info LIKE '%l%')
AND n.gender = 'm'
AND n.name LIKE '%i%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1930 AND 2004;",384,/*+  SeqScan(n) IndexOnlyScan(an person_id_aka_name_cat_1) IndexScan(ci person_id_cast_info_cat_1) SeqScan(rt) IndexScan(t cat_title_1_pkey) IndexScan(mi movie_id_movie_info_cat_1) SeqScan(it) IndexScan(mc movie_id_movie_companies_cat_1) IndexScan(cn cat_company_name_1_pkey) IndexOnlyScan(chn cat_char_name_1_pkey) NestLoop(n an) NestLoop(n an ci) HashJoin(n an ci rt) NestLoop(n an ci rt t) NestLoop(n an ci rt t mi) HashJoin(n an ci rt t mi it) NestLoop(n an ci rt t mi it mc) NestLoop(n an ci rt t mi it mc cn) NestLoop(n an ci rt t mi it mc cn chn) Leading((((((((((n an) ci) rt) t) mi) it) mc) cn) chn)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM cat_aka_name_1 AS an,
   cat_char_name_1 AS chn,
   cat_cast_info_1 AS ci,
   cat_company_name_1 AS cn,
   cat_info_type_1 AS it,
  cat_movie_companies_1 AS mc,
   cat_movie_info_1 AS mi,
   cat_name_1 AS n,
   cat_role_type_1 AS rt,
   cat_title_1 AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(as James M. King)', '(as Mathew Taylor)', '(as Jeremy Xu)', '(as Agustin Contel)', '(as Kishin)')
AND cn.country_code = '[us]'
AND it.info = 'tech info'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%u%' OR mc.note LIKE '%r%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%S%' OR mi.info LIKE '%p%')
AND n.gender = 'm'
AND n.name LIKE '%i%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1903 AND 2017;",384,/*+  SeqScan(n) IndexOnlyScan(an person_id_aka_name_cat_1) IndexScan(ci person_id_cast_info_cat_1) SeqScan(rt) IndexScan(t cat_title_1_pkey) IndexScan(mi movie_id_movie_info_cat_1) SeqScan(it) IndexScan(mc movie_id_movie_companies_cat_1) IndexScan(cn cat_company_name_1_pkey) IndexOnlyScan(chn cat_char_name_1_pkey) NestLoop(n an) NestLoop(n an ci) HashJoin(n an ci rt) NestLoop(n an ci rt t) NestLoop(n an ci rt t mi) HashJoin(n an ci rt t mi it) NestLoop(n an ci rt t mi it mc) NestLoop(n an ci rt t mi it mc cn) NestLoop(n an ci rt t mi it mc cn chn) Leading((((((((((n an) ci) rt) t) mi) it) mc) cn) chn)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM cat_aka_name_1 AS an,
   cat_char_name_1 AS chn,
   cat_cast_info_1 AS ci,
   cat_company_name_1 AS cn,
   cat_info_type_1 AS it,
  cat_movie_companies_1 AS mc,
   cat_movie_info_1 AS mi,
   cat_name_1 AS n,
   cat_role_type_1 AS rt,
   cat_title_1 AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(uncredited)', '(as Susan Shifrin)', '(as Ody Tolentino)', '(as Manolo Bravo)', '(as Bhiman Raghu)')
AND cn.country_code = '[us]'
AND it.info = 'tech info'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%u%' OR mc.note LIKE '%r%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%t%' OR mi.info LIKE '%C%')
AND n.gender = 'm'
AND n.name LIKE '%i%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1915 AND 1993;",384,/*+  SeqScan(n) IndexOnlyScan(an person_id_aka_name_cat_1) IndexScan(ci person_id_cast_info_cat_1) SeqScan(rt) IndexScan(t cat_title_1_pkey) IndexScan(mi movie_id_movie_info_cat_1) SeqScan(it) IndexScan(mc movie_id_movie_companies_cat_1) IndexScan(cn cat_company_name_1_pkey) IndexOnlyScan(chn cat_char_name_1_pkey) NestLoop(n an) NestLoop(n an ci) HashJoin(n an ci rt) NestLoop(n an ci rt t) NestLoop(n an ci rt t mi) HashJoin(n an ci rt t mi it) NestLoop(n an ci rt t mi it mc) NestLoop(n an ci rt t mi it mc cn) NestLoop(n an ci rt t mi it mc cn chn) Leading((((((((((n an) ci) rt) t) mi) it) mc) cn) chn)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM cat_aka_name_1 AS an,
   cat_char_name_1 AS chn,
   cat_cast_info_1 AS ci,
   cat_company_name_1 AS cn,
   cat_info_type_1 AS it,
  cat_movie_companies_1 AS mc,
   cat_movie_info_1 AS mi,
   cat_name_1 AS n,
   cat_role_type_1 AS rt,
   cat_title_1 AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(uncredited)', '(as Paco de Osca)', '(as Bret O''Hara)', '(as Nancy Sakovich)', '(as Natalie)')
AND cn.country_code = '[us]'
AND it.info = 'locations'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%a%' OR mc.note LIKE '%(%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%o%' OR mi.info LIKE '%L%')
AND n.gender = 'm'
AND n.name LIKE '%B%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1944 AND 1962;",384,/*+  SeqScan(n) IndexOnlyScan(an person_id_aka_name_cat_1) IndexScan(ci person_id_cast_info_cat_1) SeqScan(rt) IndexScan(t cat_title_1_pkey) IndexScan(mi movie_id_movie_info_cat_1) SeqScan(it) IndexScan(mc movie_id_movie_companies_cat_1) IndexScan(cn cat_company_name_1_pkey) IndexOnlyScan(chn cat_char_name_1_pkey) NestLoop(n an) NestLoop(n an ci) HashJoin(n an ci rt) NestLoop(n an ci rt t) NestLoop(n an ci rt t mi) HashJoin(n an ci rt t mi it) NestLoop(n an ci rt t mi it mc) NestLoop(n an ci rt t mi it mc cn) NestLoop(n an ci rt t mi it mc cn chn) Leading((((((((((n an) ci) rt) t) mi) it) mc) cn) chn)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM cat_aka_name_1 AS an,
   cat_char_name_1 AS chn,
   cat_cast_info_1 AS ci,
   cat_company_name_1 AS cn,
   cat_info_type_1 AS it,
  cat_movie_companies_1 AS mc,
   cat_movie_info_1 AS mi,
   cat_name_1 AS n,
   cat_role_type_1 AS rt,
   cat_title_1 AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(as Anthony Fridjhon)', '(as Chan Kit Yan)', '(as Ji-hye Han)', '(Therapist)', '(as Fritz Neumann)')
AND cn.country_code = '[nl]'
AND it.info = 'certificates'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%(%' OR mc.note LIKE '%9%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%d%' OR mi.info LIKE '%1%')
AND n.gender = 'm'
AND n.name LIKE '%o%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1931 AND 2017;",384,/*+  SeqScan(n) IndexOnlyScan(an person_id_aka_name_cat_1) IndexScan(ci person_id_cast_info_cat_1) SeqScan(rt) IndexScan(t cat_title_1_pkey) IndexScan(mi movie_id_movie_info_cat_1) SeqScan(it) IndexScan(mc movie_id_movie_companies_cat_1) IndexScan(cn cat_company_name_1_pkey) IndexOnlyScan(chn cat_char_name_1_pkey) NestLoop(n an) NestLoop(n an ci) HashJoin(n an ci rt) NestLoop(n an ci rt t) NestLoop(n an ci rt t mi) HashJoin(n an ci rt t mi it) NestLoop(n an ci rt t mi it mc) NestLoop(n an ci rt t mi it mc cn) NestLoop(n an ci rt t mi it mc cn chn) Leading((((((((((n an) ci) rt) t) mi) it) mc) cn) chn)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM cat_aka_name_1 AS an,
   cat_char_name_1 AS chn,
   cat_cast_info_1 AS ci,
   cat_company_name_1 AS cn,
   cat_info_type_1 AS it,
  cat_movie_companies_1 AS mc,
   cat_movie_info_1 AS mi,
   cat_name_1 AS n,
   cat_role_type_1 AS rt,
   cat_title_1 AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(voice) (uncredited)', '(as Eloise Broady)', '(as Dan Lounsberry)', '(publicist: MVSP)', '(im 2. Teil)')
AND cn.country_code = '[fi]'
AND it.info = 'quotes'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%H%' OR mc.note LIKE '%(%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%I%' OR mi.info LIKE '%l%')
AND n.gender = 'm'
AND n.name LIKE '%,%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1933 AND 2007;",384,/*+  SeqScan(n) IndexOnlyScan(an person_id_aka_name_cat_1) IndexScan(ci person_id_cast_info_cat_1) SeqScan(rt) IndexScan(t cat_title_1_pkey) IndexScan(mi movie_id_movie_info_cat_1) SeqScan(it) IndexScan(mc movie_id_movie_companies_cat_1) IndexScan(cn cat_company_name_1_pkey) IndexOnlyScan(chn cat_char_name_1_pkey) NestLoop(n an) NestLoop(n an ci) HashJoin(n an ci rt) NestLoop(n an ci rt t) NestLoop(n an ci rt t mi) HashJoin(n an ci rt t mi it) NestLoop(n an ci rt t mi it mc) NestLoop(n an ci rt t mi it mc cn) NestLoop(n an ci rt t mi it mc cn chn) Leading((((((((((n an) ci) rt) t) mi) it) mc) cn) chn)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM cat_aka_name_1 AS an,
   cat_char_name_1 AS chn,
   cat_cast_info_1 AS ci,
   cat_company_name_1 AS cn,
   cat_info_type_1 AS it,
  cat_movie_companies_1 AS mc,
   cat_movie_info_1 AS mi,
   cat_name_1 AS n,
   cat_role_type_1 AS rt,
   cat_title_1 AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(uncredited)', '(as Philip Selway)', '(novel ""Grelu"")', '(as Walt Lantz)', '(as Rob Malone)')
AND cn.country_code = '[us]'
AND it.info = 'goofs'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%e%' OR mc.note LIKE '%h%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%n%' OR mi.info LIKE '%s%')
AND n.gender = 'm'
AND n.name LIKE '%a%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1908 AND 1996;",384,/*+  SeqScan(n) IndexOnlyScan(an person_id_aka_name_cat_1) IndexScan(ci person_id_cast_info_cat_1) SeqScan(rt) IndexScan(t cat_title_1_pkey) IndexScan(mi movie_id_movie_info_cat_1) SeqScan(it) IndexScan(mc movie_id_movie_companies_cat_1) IndexScan(cn cat_company_name_1_pkey) IndexOnlyScan(chn cat_char_name_1_pkey) NestLoop(n an) NestLoop(n an ci) HashJoin(n an ci rt) NestLoop(n an ci rt t) NestLoop(n an ci rt t mi) HashJoin(n an ci rt t mi it) NestLoop(n an ci rt t mi it mc) NestLoop(n an ci rt t mi it mc cn) NestLoop(n an ci rt t mi it mc cn chn) Leading((((((((((n an) ci) rt) t) mi) it) mc) cn) chn)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM cat_aka_name_1 AS an,
   cat_char_name_1 AS chn,
   cat_cast_info_1 AS ci,
   cat_company_name_1 AS cn,
   cat_info_type_1 AS it,
  cat_movie_companies_1 AS mc,
   cat_movie_info_1 AS mi,
   cat_name_1 AS n,
   cat_role_type_1 AS rt,
   cat_title_1 AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(uncredited)', '(as Pedro Azorin)', '(bvi marketing)', '(as Ellen Nance)', '(story ""Mar''ka"")')
AND cn.country_code = '[us]'
AND it.info = 'release dates'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%1%' OR mc.note LIKE '%)%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%o%' OR mi.info LIKE '%e%')
AND n.gender = 'm'
AND n.name LIKE '%E%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1921 AND 2017;",384,/*+  SeqScan(n) IndexOnlyScan(an person_id_aka_name_cat_1) IndexScan(ci person_id_cast_info_cat_1) SeqScan(rt) IndexScan(t cat_title_1_pkey) IndexScan(mi movie_id_movie_info_cat_1) SeqScan(it) IndexScan(mc movie_id_movie_companies_cat_1) IndexScan(cn cat_company_name_1_pkey) IndexOnlyScan(chn cat_char_name_1_pkey) NestLoop(n an) NestLoop(n an ci) HashJoin(n an ci rt) NestLoop(n an ci rt t) NestLoop(n an ci rt t mi) HashJoin(n an ci rt t mi it) NestLoop(n an ci rt t mi it mc) NestLoop(n an ci rt t mi it mc cn) NestLoop(n an ci rt t mi it mc cn chn) Leading((((((((((n an) ci) rt) t) mi) it) mc) cn) chn)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM cat_aka_name_1 AS an,
   cat_char_name_1 AS chn,
   cat_cast_info_1 AS ci,
   cat_company_name_1 AS cn,
   cat_info_type_1 AS it,
  cat_movie_companies_1 AS mc,
   cat_movie_info_1 AS mi,
   cat_name_1 AS n,
   cat_role_type_1 AS rt,
   cat_title_1 AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(as James M. King)', '(as Gobi)', '(media liaison)', '(as Chou Shih)', '(as TomÃ¡s ZorÃ­)')
AND cn.country_code = '[us]'
AND it.info = 'locations'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%t%' OR mc.note LIKE '%e%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%t%' OR mi.info LIKE '%a%')
AND n.gender = 'm'
AND n.name LIKE '%i%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1962 AND 2020;",384,/*+  SeqScan(n) IndexOnlyScan(an person_id_aka_name_cat_1) IndexScan(ci person_id_cast_info_cat_1) SeqScan(rt) IndexScan(t cat_title_1_pkey) IndexScan(mi movie_id_movie_info_cat_1) SeqScan(it) IndexScan(mc movie_id_movie_companies_cat_1) IndexScan(cn cat_company_name_1_pkey) IndexOnlyScan(chn cat_char_name_1_pkey) NestLoop(n an) NestLoop(n an ci) HashJoin(n an ci rt) NestLoop(n an ci rt t) NestLoop(n an ci rt t mi) HashJoin(n an ci rt t mi it) NestLoop(n an ci rt t mi it mc) NestLoop(n an ci rt t mi it mc cn) NestLoop(n an ci rt t mi it mc cn chn) Leading((((((((((n an) ci) rt) t) mi) it) mc) cn) chn)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM cat_aka_name_1 AS an,
   cat_char_name_1 AS chn,
   cat_cast_info_1 AS ci,
   cat_company_name_1 AS cn,
   cat_info_type_1 AS it,
  cat_movie_companies_1 AS mc,
   cat_movie_info_1 AS mi,
   cat_name_1 AS n,
   cat_role_type_1 AS rt,
   cat_title_1 AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(uncredited)', '(as Lois de Banzie)', '(as Nikita Myhran)', '(as Jim Carabatsos)', '(as M. Yezepov)')
AND cn.country_code = '[us]'
AND it.info = 'trivia'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%g%' OR mc.note LIKE '%U%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%p%' OR mi.info LIKE '%w%')
AND n.gender = 'm'
AND n.name LIKE '%B%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1946 AND 2010;",384,/*+  SeqScan(n) IndexOnlyScan(an person_id_aka_name_cat_1) IndexScan(ci person_id_cast_info_cat_1) SeqScan(rt) IndexScan(t cat_title_1_pkey) IndexScan(mi movie_id_movie_info_cat_1) SeqScan(it) IndexScan(mc movie_id_movie_companies_cat_1) IndexScan(cn cat_company_name_1_pkey) IndexOnlyScan(chn cat_char_name_1_pkey) NestLoop(n an) NestLoop(n an ci) HashJoin(n an ci rt) NestLoop(n an ci rt t) NestLoop(n an ci rt t mi) HashJoin(n an ci rt t mi it) NestLoop(n an ci rt t mi it mc) NestLoop(n an ci rt t mi it mc cn) NestLoop(n an ci rt t mi it mc cn chn) Leading((((((((((n an) ci) rt) t) mi) it) mc) cn) chn)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM cat_aka_name_1 AS an,
   cat_char_name_1 AS chn,
   cat_cast_info_1 AS ci,
   cat_company_name_1 AS cn,
   cat_info_type_1 AS it,
  cat_movie_companies_1 AS mc,
   cat_movie_info_1 AS mi,
   cat_name_1 AS n,
   cat_role_type_1 AS rt,
   cat_title_1 AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(as James M. King)', '(as Jarek Zawadko)', '(as Suresh Krissna)', '(as John H. Allen)', '(as Diana Agostini)')
AND cn.country_code = '[us]'
AND it.info = 'release dates'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%i%' OR mc.note LIKE '%e%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%7%' OR mi.info LIKE '%a%')
AND n.gender = 'm'
AND n.name LIKE '%J%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1945 AND 2017;",384,/*+  SeqScan(n) IndexOnlyScan(an person_id_aka_name_cat_1) IndexScan(ci person_id_cast_info_cat_1) SeqScan(rt) IndexScan(t cat_title_1_pkey) IndexScan(mi movie_id_movie_info_cat_1) SeqScan(it) IndexScan(mc movie_id_movie_companies_cat_1) IndexScan(cn cat_company_name_1_pkey) IndexOnlyScan(chn cat_char_name_1_pkey) NestLoop(n an) NestLoop(n an ci) HashJoin(n an ci rt) NestLoop(n an ci rt t) NestLoop(n an ci rt t mi) HashJoin(n an ci rt t mi it) NestLoop(n an ci rt t mi it mc) NestLoop(n an ci rt t mi it mc cn) NestLoop(n an ci rt t mi it mc cn chn) Leading((((((((((n an) ci) rt) t) mi) it) mc) cn) chn)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM cat_aka_name_1 AS an,
   cat_char_name_1 AS chn,
   cat_cast_info_1 AS ci,
   cat_company_name_1 AS cn,
   cat_info_type_1 AS it,
  cat_movie_companies_1 AS mc,
   cat_movie_info_1 AS mi,
   cat_name_1 AS n,
   cat_role_type_1 AS rt,
   cat_title_1 AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(voice) (uncredited)', '(as Lee Grimanis)', '(as W.C. Hauber)', '(as Anna Howard)', '(as Miss Mayo)')
AND cn.country_code = '[de]'
AND it.info = 'quotes'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%)%' OR mc.note LIKE '%m%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%u%' OR mi.info LIKE '%c%')
AND n.gender = 'm'
AND n.name LIKE '%d%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1966 AND 2011;",384,/*+  SeqScan(n) IndexOnlyScan(an person_id_aka_name_cat_1) IndexScan(ci person_id_cast_info_cat_1) SeqScan(rt) IndexScan(t cat_title_1_pkey) IndexScan(mi movie_id_movie_info_cat_1) SeqScan(it) IndexScan(mc movie_id_movie_companies_cat_1) IndexScan(cn cat_company_name_1_pkey) IndexOnlyScan(chn cat_char_name_1_pkey) NestLoop(n an) NestLoop(n an ci) HashJoin(n an ci rt) NestLoop(n an ci rt t) NestLoop(n an ci rt t mi) HashJoin(n an ci rt t mi it) NestLoop(n an ci rt t mi it mc) NestLoop(n an ci rt t mi it mc cn) NestLoop(n an ci rt t mi it mc cn chn) Leading((((((((((n an) ci) rt) t) mi) it) mc) cn) chn)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM cat_aka_name_1 AS an,
   cat_char_name_1 AS chn,
   cat_cast_info_1 AS ci,
   cat_company_name_1 AS cn,
   cat_info_type_1 AS it,
  cat_movie_companies_1 AS mc,
   cat_movie_info_1 AS mi,
   cat_name_1 AS n,
   cat_role_type_1 AS rt,
   cat_title_1 AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(uncredited)', '(as Liu Chi-yu)', '(10 ans)', '(as T. Yeremeyeva)', '(as Alfred Howston)')
AND cn.country_code = '[us]'
AND it.info = 'sound mix'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%u%' OR mc.note LIKE '%(%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%o%' OR mi.info LIKE '%n%')
AND n.gender = 'm'
AND n.name LIKE '%B%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1951 AND 1982;",384,/*+  SeqScan(n) IndexOnlyScan(an person_id_aka_name_cat_1) IndexScan(ci person_id_cast_info_cat_1) SeqScan(rt) IndexScan(t cat_title_1_pkey) IndexScan(mi movie_id_movie_info_cat_1) SeqScan(it) IndexScan(mc movie_id_movie_companies_cat_1) IndexScan(cn cat_company_name_1_pkey) IndexOnlyScan(chn cat_char_name_1_pkey) NestLoop(n an) NestLoop(n an ci) HashJoin(n an ci rt) NestLoop(n an ci rt t) NestLoop(n an ci rt t mi) HashJoin(n an ci rt t mi it) NestLoop(n an ci rt t mi it mc) NestLoop(n an ci rt t mi it mc cn) NestLoop(n an ci rt t mi it mc cn chn) Leading((((((((((n an) ci) rt) t) mi) it) mc) cn) chn)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM cat_aka_name_1 AS an,
   cat_char_name_1 AS chn,
   cat_cast_info_1 AS ci,
   cat_company_name_1 AS cn,
   cat_info_type_1 AS it,
  cat_movie_companies_1 AS mc,
   cat_movie_info_1 AS mi,
   cat_name_1 AS n,
   cat_role_type_1 AS rt,
   cat_title_1 AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(as James M. King)', '(as Marieli Valero)', '(as Bojan Bazeli)', '(as Christine Ke)', '(as Daniel HuSong)')
AND cn.country_code = '[us]'
AND it.info = 'languages'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%t%' OR mc.note LIKE '%n%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%h%' OR mi.info LIKE '%l%')
AND n.gender = 'm'
AND n.name LIKE '%J%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 2001 AND 2016;",384,/*+  SeqScan(n) IndexOnlyScan(an person_id_aka_name_cat_1) IndexScan(ci person_id_cast_info_cat_1) SeqScan(rt) IndexScan(t cat_title_1_pkey) IndexScan(mi movie_id_movie_info_cat_1) SeqScan(it) IndexScan(mc movie_id_movie_companies_cat_1) IndexScan(cn cat_company_name_1_pkey) IndexOnlyScan(chn cat_char_name_1_pkey) NestLoop(n an) NestLoop(n an ci) HashJoin(n an ci rt) NestLoop(n an ci rt t) NestLoop(n an ci rt t mi) HashJoin(n an ci rt t mi it) NestLoop(n an ci rt t mi it mc) NestLoop(n an ci rt t mi it mc cn) NestLoop(n an ci rt t mi it mc cn chn) Leading((((((((((n an) ci) rt) t) mi) it) mc) cn) chn)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM cat_aka_name_1 AS an,
   cat_char_name_1 AS chn,
   cat_cast_info_1 AS ci,
   cat_company_name_1 AS cn,
   cat_info_type_1 AS it,
  cat_movie_companies_1 AS mc,
   cat_movie_info_1 AS mi,
   cat_name_1 AS n,
   cat_role_type_1 AS rt,
   cat_title_1 AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(uncredited)', '(as Dauzun)', '(bullrider)', '(Majnu)', '(as Nicole Abis)')
AND cn.country_code = '[us]'
AND it.info = 'quotes'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%S%' OR mc.note LIKE '%r%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%b%' OR mi.info LIKE '%C%')
AND n.gender = 'm'
AND n.name LIKE '%l%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1936 AND 1989;",384,/*+  SeqScan(n) IndexOnlyScan(an person_id_aka_name_cat_1) IndexScan(ci person_id_cast_info_cat_1) SeqScan(rt) IndexScan(t cat_title_1_pkey) IndexScan(mi movie_id_movie_info_cat_1) SeqScan(it) IndexScan(mc movie_id_movie_companies_cat_1) IndexScan(cn cat_company_name_1_pkey) IndexOnlyScan(chn cat_char_name_1_pkey) NestLoop(n an) NestLoop(n an ci) HashJoin(n an ci rt) NestLoop(n an ci rt t) NestLoop(n an ci rt t mi) HashJoin(n an ci rt t mi it) NestLoop(n an ci rt t mi it mc) NestLoop(n an ci rt t mi it mc cn) NestLoop(n an ci rt t mi it mc cn chn) Leading((((((((((n an) ci) rt) t) mi) it) mc) cn) chn)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM cat_aka_name_1 AS an,
   cat_char_name_1 AS chn,
   cat_cast_info_1 AS ci,
   cat_company_name_1 AS cn,
   cat_info_type_1 AS it,
  cat_movie_companies_1 AS mc,
   cat_movie_info_1 AS mi,
   cat_name_1 AS n,
   cat_role_type_1 AS rt,
   cat_title_1 AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(uncredited)', '(as Doug Purver II)', '(as Bill Black)', '(as Lugosi GyÃ¶rgy)', '(as Kumar Mangat)')
AND cn.country_code = '[us]'
AND it.info = 'tech info'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%D%' OR mc.note LIKE '%(%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%P%' OR mi.info LIKE '%P%')
AND n.gender = 'm'
AND n.name LIKE '%i%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1927 AND 1978;",384,/*+  SeqScan(n) IndexOnlyScan(an person_id_aka_name_cat_1) IndexScan(ci person_id_cast_info_cat_1) SeqScan(rt) IndexScan(t cat_title_1_pkey) IndexScan(mi movie_id_movie_info_cat_1) SeqScan(it) IndexScan(mc movie_id_movie_companies_cat_1) IndexScan(cn cat_company_name_1_pkey) IndexOnlyScan(chn cat_char_name_1_pkey) NestLoop(n an) NestLoop(n an ci) HashJoin(n an ci rt) NestLoop(n an ci rt t) NestLoop(n an ci rt t mi) HashJoin(n an ci rt t mi it) NestLoop(n an ci rt t mi it mc) NestLoop(n an ci rt t mi it mc cn) NestLoop(n an ci rt t mi it mc cn chn) Leading((((((((((n an) ci) rt) t) mi) it) mc) cn) chn)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM cat_aka_name_1 AS an,
   cat_char_name_1 AS chn,
   cat_cast_info_1 AS ci,
   cat_company_name_1 AS cn,
   cat_info_type_1 AS it,
  cat_movie_companies_1 AS mc,
   cat_movie_info_1 AS mi,
   cat_name_1 AS n,
   cat_role_type_1 AS rt,
   cat_title_1 AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(as Anthony Fridjhon)', '(Corporal)', '(as Victor Debor)', '(as Li Shiang)', '(Luisa)')
AND cn.country_code = '[nl]'
AND it.info = 'certificates'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%N%' OR mc.note LIKE '%m%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%R%' OR mi.info LIKE '%S%')
AND n.gender = 'm'
AND n.name LIKE '%j%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1972 AND 2016;",384,/*+  SeqScan(n) IndexOnlyScan(an person_id_aka_name_cat_1) IndexScan(ci person_id_cast_info_cat_1) SeqScan(rt) IndexScan(t cat_title_1_pkey) IndexScan(mi movie_id_movie_info_cat_1) SeqScan(it) IndexScan(mc movie_id_movie_companies_cat_1) IndexScan(cn cat_company_name_1_pkey) IndexOnlyScan(chn cat_char_name_1_pkey) NestLoop(n an) NestLoop(n an ci) HashJoin(n an ci rt) NestLoop(n an ci rt t) NestLoop(n an ci rt t mi) HashJoin(n an ci rt t mi it) NestLoop(n an ci rt t mi it mc) NestLoop(n an ci rt t mi it mc cn) NestLoop(n an ci rt t mi it mc cn chn) Leading((((((((((n an) ci) rt) t) mi) it) mc) cn) chn)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM cat_aka_name_1 AS an,
   cat_char_name_1 AS chn,
   cat_cast_info_1 AS ci,
   cat_company_name_1 AS cn,
   cat_info_type_1 AS it,
  cat_movie_companies_1 AS mc,
   cat_movie_info_1 AS mi,
   cat_name_1 AS n,
   cat_role_type_1 AS rt,
   cat_title_1 AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(uncredited)', '(as Florence McGee)', '(as Sean McHeny)', '(dvd artwork)', '(loop group)')
AND cn.country_code = '[us]'
AND it.info = 'trivia'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%i%' OR mc.note LIKE '%i%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%h%' OR mi.info LIKE '%l%')
AND n.gender = 'm'
AND n.name LIKE '%r%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1896 AND 1971;",384,/*+  SeqScan(n) IndexOnlyScan(an person_id_aka_name_cat_1) IndexScan(ci person_id_cast_info_cat_1) SeqScan(rt) IndexScan(t cat_title_1_pkey) IndexScan(mi movie_id_movie_info_cat_1) SeqScan(it) IndexScan(mc movie_id_movie_companies_cat_1) IndexScan(cn cat_company_name_1_pkey) IndexOnlyScan(chn cat_char_name_1_pkey) NestLoop(n an) NestLoop(n an ci) HashJoin(n an ci rt) NestLoop(n an ci rt t) NestLoop(n an ci rt t mi) HashJoin(n an ci rt t mi it) NestLoop(n an ci rt t mi it mc) NestLoop(n an ci rt t mi it mc cn) NestLoop(n an ci rt t mi it mc cn chn) Leading((((((((((n an) ci) rt) t) mi) it) mc) cn) chn)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM cat_aka_name_1 AS an,
   cat_char_name_1 AS chn,
   cat_cast_info_1 AS ci,
   cat_company_name_1 AS cn,
   cat_info_type_1 AS it,
  cat_movie_companies_1 AS mc,
   cat_movie_info_1 AS mi,
   cat_name_1 AS n,
   cat_role_type_1 AS rt,
   cat_title_1 AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(uncredited)', '(as Carl Moos)', '(as Steffany Ward)', '(as Jitender)', '(as Medusa)')
AND cn.country_code = '[us]'
AND it.info = 'locations'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%U%' OR mc.note LIKE '%y%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%A%' OR mi.info LIKE '%s%')
AND n.gender = 'm'
AND n.name LIKE '%l%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1898 AND 1971;",384,/*+  SeqScan(n) IndexOnlyScan(an person_id_aka_name_cat_1) IndexScan(ci person_id_cast_info_cat_1) SeqScan(rt) IndexScan(t cat_title_1_pkey) IndexScan(mi movie_id_movie_info_cat_1) SeqScan(it) IndexScan(mc movie_id_movie_companies_cat_1) IndexScan(cn cat_company_name_1_pkey) IndexOnlyScan(chn cat_char_name_1_pkey) NestLoop(n an) NestLoop(n an ci) HashJoin(n an ci rt) NestLoop(n an ci rt t) NestLoop(n an ci rt t mi) HashJoin(n an ci rt t mi it) NestLoop(n an ci rt t mi it mc) NestLoop(n an ci rt t mi it mc cn) NestLoop(n an ci rt t mi it mc cn chn) Leading((((((((((n an) ci) rt) t) mi) it) mc) cn) chn)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM cat_aka_name_1 AS an,
   cat_char_name_1 AS chn,
   cat_cast_info_1 AS ci,
   cat_company_name_1 AS cn,
   cat_info_type_1 AS it,
  cat_movie_companies_1 AS mc,
   cat_movie_info_1 AS mi,
   cat_name_1 AS n,
   cat_role_type_1 AS rt,
   cat_title_1 AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(uncredited)', '(story ""Lugu"")', '(source: video)', '(as Chung Fat)', '(as Mathew Jacobs)')
AND cn.country_code = '[us]'
AND it.info = 'copyright holder'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%)%' OR mc.note LIKE '%i%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%b%' OR mi.info LIKE '%p%')
AND n.gender = 'm'
AND n.name LIKE '%l%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1931 AND 1969;",384,/*+  SeqScan(n) IndexOnlyScan(an person_id_aka_name_cat_1) IndexScan(ci person_id_cast_info_cat_1) SeqScan(rt) IndexScan(t cat_title_1_pkey) IndexScan(mi movie_id_movie_info_cat_1) SeqScan(it) IndexScan(mc movie_id_movie_companies_cat_1) IndexScan(cn cat_company_name_1_pkey) IndexOnlyScan(chn cat_char_name_1_pkey) NestLoop(n an) NestLoop(n an ci) HashJoin(n an ci rt) NestLoop(n an ci rt t) NestLoop(n an ci rt t mi) HashJoin(n an ci rt t mi it) NestLoop(n an ci rt t mi it mc) NestLoop(n an ci rt t mi it mc cn) NestLoop(n an ci rt t mi it mc cn chn) Leading((((((((((n an) ci) rt) t) mi) it) mc) cn) chn)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM cat_aka_name_1 AS an,
   cat_char_name_1 AS chn,
   cat_cast_info_1 AS ci,
   cat_company_name_1 AS cn,
   cat_info_type_1 AS it,
  cat_movie_companies_1 AS mc,
   cat_movie_info_1 AS mi,
   cat_name_1 AS n,
   cat_role_type_1 AS rt,
   cat_title_1 AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(uncredited)', '(as Joshua Ferrell)', '(as A. Kamagarova)', '(as Gay Cowley)', '(as Leslie Boivee)')
AND cn.country_code = '[us]'
AND it.info = 'locations'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%)%' OR mc.note LIKE '%1%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%s%' OR mi.info LIKE '%a%')
AND n.gender = 'm'
AND n.name LIKE '%n%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1901 AND 1994;",384,/*+  SeqScan(n) IndexOnlyScan(an person_id_aka_name_cat_1) IndexScan(ci person_id_cast_info_cat_1) SeqScan(rt) IndexScan(t cat_title_1_pkey) IndexScan(mi movie_id_movie_info_cat_1) SeqScan(it) IndexScan(mc movie_id_movie_companies_cat_1) IndexScan(cn cat_company_name_1_pkey) IndexOnlyScan(chn cat_char_name_1_pkey) NestLoop(n an) NestLoop(n an ci) HashJoin(n an ci rt) NestLoop(n an ci rt t) NestLoop(n an ci rt t mi) HashJoin(n an ci rt t mi it) NestLoop(n an ci rt t mi it mc) NestLoop(n an ci rt t mi it mc cn) NestLoop(n an ci rt t mi it mc cn chn) Leading((((((((((n an) ci) rt) t) mi) it) mc) cn) chn)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM cat_aka_name_1 AS an,
   cat_char_name_1 AS chn,
   cat_cast_info_1 AS ci,
   cat_company_name_1 AS cn,
   cat_info_type_1 AS it,
  cat_movie_companies_1 AS mc,
   cat_movie_info_1 AS mi,
   cat_name_1 AS n,
   cat_role_type_1 AS rt,
   cat_title_1 AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(uncredited)', '(as Lyn Cole)', '(guest director)', '(as Fred Forrester)', '(as Mandy Highton)')
AND cn.country_code = '[nl]'
AND it.info = 'certificates'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%9%' OR mc.note LIKE '%9%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%n%' OR mi.info LIKE '%:%')
AND n.gender = 'm'
AND n.name LIKE '%A%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1879 AND 1958;",161,/*+  SeqScan(mc) SeqScan(cn) IndexScan(t cat_title_1_pkey) IndexScan(ci movie_id_cast_info_cat_1) IndexScan(rt cat_role_type_1_pkey) IndexOnlyScan(chn cat_char_name_1_pkey) IndexScan(n cat_name_1_pkey) IndexOnlyScan(an person_id_aka_name_cat_1) IndexScan(mi movie_id_movie_info_cat_1) SeqScan(it) HashJoin(mc cn) NestLoop(mc cn t) NestLoop(mc cn t ci) NestLoop(mc cn t ci rt) NestLoop(mc cn t ci rt chn) NestLoop(mc cn t ci rt chn n) NestLoop(mc cn t ci rt chn n an) NestLoop(mc cn t ci rt chn n an mi) HashJoin(mc cn t ci rt chn n an mi it) Leading((((((((((mc cn) t) ci) rt) chn) n) an) mi) it)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM cat_aka_name_1 AS an,
   cat_char_name_1 AS chn,
   cat_cast_info_1 AS ci,
   cat_company_name_1 AS cn,
   cat_info_type_1 AS it,
  cat_movie_companies_1 AS mc,
   cat_movie_info_1 AS mi,
   cat_name_1 AS n,
   cat_role_type_1 AS rt,
   cat_title_1 AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(as James M. King)', '(as J. Noyes Scher)', '(as Ewing M. Brown)', '(as Ron Skuron)', '(as Katja Fedulova)')
AND cn.country_code = '[us]'
AND it.info = 'locations'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%u%' OR mc.note LIKE '%t%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%n%' OR mi.info LIKE '%d%')
AND n.gender = 'm'
AND n.name LIKE '%g%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1902 AND 2007;",384,/*+  SeqScan(n) IndexOnlyScan(an person_id_aka_name_cat_1) IndexScan(ci person_id_cast_info_cat_1) SeqScan(rt) IndexScan(t cat_title_1_pkey) IndexScan(mi movie_id_movie_info_cat_1) SeqScan(it) IndexScan(mc movie_id_movie_companies_cat_1) IndexScan(cn cat_company_name_1_pkey) IndexOnlyScan(chn cat_char_name_1_pkey) NestLoop(n an) NestLoop(n an ci) HashJoin(n an ci rt) NestLoop(n an ci rt t) NestLoop(n an ci rt t mi) HashJoin(n an ci rt t mi it) NestLoop(n an ci rt t mi it mc) NestLoop(n an ci rt t mi it mc cn) NestLoop(n an ci rt t mi it mc cn chn) Leading((((((((((n an) ci) rt) t) mi) it) mc) cn) chn)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM cat_aka_name_1 AS an,
   cat_char_name_1 AS chn,
   cat_cast_info_1 AS ci,
   cat_company_name_1 AS cn,
   cat_info_type_1 AS it,
  cat_movie_companies_1 AS mc,
   cat_movie_info_1 AS mi,
   cat_name_1 AS n,
   cat_role_type_1 AS rt,
   cat_title_1 AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(uncredited)', '(grass suit maker)', '(Secrets)', '(event manager)', '(IV) (Krijumcar)')
AND cn.country_code = '[fi]'
AND it.info = 'goofs'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%o%' OR mc.note LIKE '%o%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%i%' OR mi.info LIKE '%s%')
AND n.gender = 'm'
AND n.name LIKE '%r%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1939 AND 1976;",384,/*+  SeqScan(n) IndexOnlyScan(an person_id_aka_name_cat_1) IndexScan(ci person_id_cast_info_cat_1) SeqScan(rt) IndexScan(t cat_title_1_pkey) IndexScan(mi movie_id_movie_info_cat_1) SeqScan(it) IndexScan(mc movie_id_movie_companies_cat_1) IndexScan(cn cat_company_name_1_pkey) IndexOnlyScan(chn cat_char_name_1_pkey) NestLoop(n an) NestLoop(n an ci) HashJoin(n an ci rt) NestLoop(n an ci rt t) NestLoop(n an ci rt t mi) HashJoin(n an ci rt t mi it) NestLoop(n an ci rt t mi it mc) NestLoop(n an ci rt t mi it mc cn) NestLoop(n an ci rt t mi it mc cn chn) Leading((((((((((n an) ci) rt) t) mi) it) mc) cn) chn)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM cat_aka_name_1 AS an,
   cat_char_name_1 AS chn,
   cat_cast_info_1 AS ci,
   cat_company_name_1 AS cn,
   cat_info_type_1 AS it,
  cat_movie_companies_1 AS mc,
   cat_movie_info_1 AS mi,
   cat_name_1 AS n,
   cat_role_type_1 AS rt,
   cat_title_1 AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(uncredited)', '(as Oscar Bosch)', '(as PJ Byrne)', '(as Luitz Morat)', '(as J Larose)')
AND cn.country_code = '[us]'
AND it.info = 'tech info'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%(%' OR mc.note LIKE '%V%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%5%' OR mi.info LIKE '%m%')
AND n.gender = 'm'
AND n.name LIKE '%i%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1933 AND 1977;",384,/*+  SeqScan(n) IndexOnlyScan(an person_id_aka_name_cat_1) IndexScan(ci person_id_cast_info_cat_1) SeqScan(rt) IndexScan(t cat_title_1_pkey) IndexScan(mi movie_id_movie_info_cat_1) SeqScan(it) IndexScan(mc movie_id_movie_companies_cat_1) IndexScan(cn cat_company_name_1_pkey) IndexOnlyScan(chn cat_char_name_1_pkey) NestLoop(n an) NestLoop(n an ci) HashJoin(n an ci rt) NestLoop(n an ci rt t) NestLoop(n an ci rt t mi) HashJoin(n an ci rt t mi it) NestLoop(n an ci rt t mi it mc) NestLoop(n an ci rt t mi it mc cn) NestLoop(n an ci rt t mi it mc cn chn) Leading((((((((((n an) ci) rt) t) mi) it) mc) cn) chn)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM cat_aka_name_1 AS an,
   cat_char_name_1 AS chn,
   cat_cast_info_1 AS ci,
   cat_company_name_1 AS cn,
   cat_info_type_1 AS it,
  cat_movie_companies_1 AS mc,
   cat_movie_info_1 AS mi,
   cat_name_1 AS n,
   cat_role_type_1 AS rt,
   cat_title_1 AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(uncredited)', '(as A.A. Methley)', '(Kurdish Advisor)', '(as Andrew Harvey)', '(as Hugh Stange)')
AND cn.country_code = '[us]'
AND it.info = 'trivia'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%l%' OR mc.note LIKE '%(%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%w%' OR mi.info LIKE '%n%')
AND n.gender = 'm'
AND n.name LIKE '%i%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1933 AND 1996;",384,/*+  SeqScan(n) IndexOnlyScan(an person_id_aka_name_cat_1) IndexScan(ci person_id_cast_info_cat_1) SeqScan(rt) IndexScan(t cat_title_1_pkey) IndexScan(mi movie_id_movie_info_cat_1) SeqScan(it) IndexScan(mc movie_id_movie_companies_cat_1) IndexScan(cn cat_company_name_1_pkey) IndexOnlyScan(chn cat_char_name_1_pkey) NestLoop(n an) NestLoop(n an ci) HashJoin(n an ci rt) NestLoop(n an ci rt t) NestLoop(n an ci rt t mi) HashJoin(n an ci rt t mi it) NestLoop(n an ci rt t mi it mc) NestLoop(n an ci rt t mi it mc cn) NestLoop(n an ci rt t mi it mc cn chn) Leading((((((((((n an) ci) rt) t) mi) it) mc) cn) chn)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM cat_aka_name_1 AS an,
   cat_char_name_1 AS chn,
   cat_cast_info_1 AS ci,
   cat_company_name_1 AS cn,
   cat_info_type_1 AS it,
  cat_movie_companies_1 AS mc,
   cat_movie_info_1 AS mi,
   cat_name_1 AS n,
   cat_role_type_1 AS rt,
   cat_title_1 AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(uncredited)', '(as Bruno Bossio)', '(as Gil Parra)', '(the glassy eye)', '(as Sidney Deane)')
AND cn.country_code = '[us]'
AND it.info = 'tech info'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%a%' OR mc.note LIKE '%(%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%8%' OR mi.info LIKE '%1%')
AND n.gender = 'm'
AND n.name LIKE '%l%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1954 AND 2010;",384,/*+  SeqScan(n) IndexOnlyScan(an person_id_aka_name_cat_1) IndexScan(ci person_id_cast_info_cat_1) SeqScan(rt) IndexScan(t cat_title_1_pkey) IndexScan(mi movie_id_movie_info_cat_1) SeqScan(it) IndexScan(mc movie_id_movie_companies_cat_1) IndexScan(cn cat_company_name_1_pkey) IndexOnlyScan(chn cat_char_name_1_pkey) NestLoop(n an) NestLoop(n an ci) HashJoin(n an ci rt) NestLoop(n an ci rt t) NestLoop(n an ci rt t mi) HashJoin(n an ci rt t mi it) NestLoop(n an ci rt t mi it mc) NestLoop(n an ci rt t mi it mc cn) NestLoop(n an ci rt t mi it mc cn chn) Leading((((((((((n an) ci) rt) t) mi) it) mc) cn) chn)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM cat_aka_name_1 AS an,
   cat_char_name_1 AS chn,
   cat_cast_info_1 AS ci,
   cat_company_name_1 AS cn,
   cat_info_type_1 AS it,
  cat_movie_companies_1 AS mc,
   cat_movie_info_1 AS mi,
   cat_name_1 AS n,
   cat_role_type_1 AS rt,
   cat_title_1 AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(uncredited)', '(as F. Krol)', '(as Claud Ennis)', '(segment ""Lewis"")', '(as M. Teisseire)')
AND cn.country_code = '[fi]'
AND it.info = 'alternate versions'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%a%' OR mc.note LIKE '%)%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%t%' OR mi.info LIKE '%f%')
AND n.gender = 'm'
AND n.name LIKE '%a%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1904 AND 1977;",384,/*+  SeqScan(n) IndexOnlyScan(an person_id_aka_name_cat_1) IndexScan(ci person_id_cast_info_cat_1) SeqScan(rt) IndexScan(t cat_title_1_pkey) IndexScan(mi movie_id_movie_info_cat_1) SeqScan(it) IndexScan(mc movie_id_movie_companies_cat_1) IndexScan(cn cat_company_name_1_pkey) IndexOnlyScan(chn cat_char_name_1_pkey) NestLoop(n an) NestLoop(n an ci) HashJoin(n an ci rt) NestLoop(n an ci rt t) NestLoop(n an ci rt t mi) HashJoin(n an ci rt t mi it) NestLoop(n an ci rt t mi it mc) NestLoop(n an ci rt t mi it mc cn) NestLoop(n an ci rt t mi it mc cn chn) Leading((((((((((n an) ci) rt) t) mi) it) mc) cn) chn)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM cat_aka_name_1 AS an,
   cat_char_name_1 AS chn,
   cat_cast_info_1 AS ci,
   cat_company_name_1 AS cn,
   cat_info_type_1 AS it,
  cat_movie_companies_1 AS mc,
   cat_movie_info_1 AS mi,
   cat_name_1 AS n,
   cat_role_type_1 AS rt,
   cat_title_1 AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(uncredited)', '(as Oana Pelea)', '(as Suk-lan Chan)', '(as Olita Otis)', '(as Sona Haciyeva)')
AND cn.country_code = '[us]'
AND it.info = 'tech info'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%(%' OR mc.note LIKE '%n%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%3%' OR mi.info LIKE '%M%')
AND n.gender = 'm'
AND n.name LIKE '%l%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1927 AND 1977;",384,/*+  SeqScan(n) IndexOnlyScan(an person_id_aka_name_cat_1) IndexScan(ci person_id_cast_info_cat_1) SeqScan(rt) IndexScan(t cat_title_1_pkey) IndexScan(mi movie_id_movie_info_cat_1) SeqScan(it) IndexScan(mc movie_id_movie_companies_cat_1) IndexScan(cn cat_company_name_1_pkey) IndexOnlyScan(chn cat_char_name_1_pkey) NestLoop(n an) NestLoop(n an ci) HashJoin(n an ci rt) NestLoop(n an ci rt t) NestLoop(n an ci rt t mi) HashJoin(n an ci rt t mi it) NestLoop(n an ci rt t mi it mc) NestLoop(n an ci rt t mi it mc cn) NestLoop(n an ci rt t mi it mc cn chn) Leading((((((((((n an) ci) rt) t) mi) it) mc) cn) chn)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM cat_aka_name_1 AS an,
   cat_char_name_1 AS chn,
   cat_cast_info_1 AS ci,
   cat_company_name_1 AS cn,
   cat_info_type_1 AS it,
  cat_movie_companies_1 AS mc,
   cat_movie_info_1 AS mi,
   cat_name_1 AS n,
   cat_role_type_1 AS rt,
   cat_title_1 AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(uncredited)', '(as Alice Barry)', '(Toshiko)', '(as Jim Burtis)', '(as Bhavna Munim)')
AND cn.country_code = '[us]'
AND it.info = 'trivia'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%(%' OR mc.note LIKE '%a%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%t%' OR mi.info LIKE '%i%')
AND n.gender = 'm'
AND n.name LIKE '%B%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1889 AND 1990;",384,/*+  SeqScan(n) IndexOnlyScan(an person_id_aka_name_cat_1) IndexScan(ci person_id_cast_info_cat_1) SeqScan(rt) IndexScan(t cat_title_1_pkey) IndexScan(mi movie_id_movie_info_cat_1) SeqScan(it) IndexScan(mc movie_id_movie_companies_cat_1) IndexScan(cn cat_company_name_1_pkey) IndexOnlyScan(chn cat_char_name_1_pkey) NestLoop(n an) NestLoop(n an ci) HashJoin(n an ci rt) NestLoop(n an ci rt t) NestLoop(n an ci rt t mi) HashJoin(n an ci rt t mi it) NestLoop(n an ci rt t mi it mc) NestLoop(n an ci rt t mi it mc cn) NestLoop(n an ci rt t mi it mc cn chn) Leading((((((((((n an) ci) rt) t) mi) it) mc) cn) chn)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM cat_aka_name_1 AS an,
   cat_char_name_1 AS chn,
   cat_cast_info_1 AS ci,
   cat_company_name_1 AS cn,
   cat_info_type_1 AS it,
  cat_movie_companies_1 AS mc,
   cat_movie_info_1 AS mi,
   cat_name_1 AS n,
   cat_role_type_1 AS rt,
   cat_title_1 AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(voice) (uncredited)', '(as GÃ©za Weisz)', '(as Kristin Birch)', '(as Sreeraman)', '(comic series)')
AND cn.country_code = '[ca]'
AND it.info = 'quotes'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%)%' OR mc.note LIKE '%(%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%n%' OR mi.info LIKE '%o%')
AND n.gender = 'm'
AND n.name LIKE '%d%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1969 AND 2015;",384,/*+  SeqScan(n) IndexOnlyScan(an person_id_aka_name_cat_1) IndexScan(ci person_id_cast_info_cat_1) SeqScan(rt) IndexScan(t cat_title_1_pkey) IndexScan(mi movie_id_movie_info_cat_1) SeqScan(it) IndexScan(mc movie_id_movie_companies_cat_1) IndexScan(cn cat_company_name_1_pkey) IndexOnlyScan(chn cat_char_name_1_pkey) NestLoop(n an) NestLoop(n an ci) HashJoin(n an ci rt) NestLoop(n an ci rt t) NestLoop(n an ci rt t mi) HashJoin(n an ci rt t mi it) NestLoop(n an ci rt t mi it mc) NestLoop(n an ci rt t mi it mc cn) NestLoop(n an ci rt t mi it mc cn chn) Leading((((((((((n an) ci) rt) t) mi) it) mc) cn) chn)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM cat_aka_name_1 AS an,
   cat_char_name_1 AS chn,
   cat_cast_info_1 AS ci,
   cat_company_name_1 AS cn,
   cat_info_type_1 AS it,
  cat_movie_companies_1 AS mc,
   cat_movie_info_1 AS mi,
   cat_name_1 AS n,
   cat_role_type_1 AS rt,
   cat_title_1 AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(uncredited)', '(as Jacques Murel)', '(as Jack Humphreys)', '(as Luchy Lopez)', '(as Alexandra Kelm)')
AND cn.country_code = '[nl]'
AND it.info = 'printed media reviews'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%c%' OR mc.note LIKE '%9%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%.%' OR mi.info LIKE '%e%')
AND n.gender = 'm'
AND n.name LIKE '%e%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1879 AND 1963;",384,/*+  SeqScan(n) IndexOnlyScan(an person_id_aka_name_cat_1) IndexScan(ci person_id_cast_info_cat_1) SeqScan(rt) IndexScan(t cat_title_1_pkey) IndexScan(mi movie_id_movie_info_cat_1) SeqScan(it) IndexScan(mc movie_id_movie_companies_cat_1) IndexScan(cn cat_company_name_1_pkey) IndexOnlyScan(chn cat_char_name_1_pkey) NestLoop(n an) NestLoop(n an ci) HashJoin(n an ci rt) NestLoop(n an ci rt t) NestLoop(n an ci rt t mi) HashJoin(n an ci rt t mi it) NestLoop(n an ci rt t mi it mc) NestLoop(n an ci rt t mi it mc cn) NestLoop(n an ci rt t mi it mc cn chn) Leading((((((((((n an) ci) rt) t) mi) it) mc) cn) chn)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM cat_aka_name_1 AS an,
   cat_char_name_1 AS chn,
   cat_cast_info_1 AS ci,
   cat_company_name_1 AS cn,
   cat_info_type_1 AS it,
  cat_movie_companies_1 AS mc,
   cat_movie_info_1 AS mi,
   cat_name_1 AS n,
   cat_role_type_1 AS rt,
   cat_title_1 AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(uncredited)', '(as Shahinda Baig)', '(big cheese)', '(as Jack Blystone)', '(as Gary Owen)')
AND cn.country_code = '[ca]'
AND it.info = 'certificates'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%d%' OR mc.note LIKE '%t%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%e%' OR mi.info LIKE '%5%')
AND n.gender = 'm'
AND n.name LIKE '%n%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1923 AND 1976;",384,/*+  SeqScan(n) IndexOnlyScan(an person_id_aka_name_cat_1) IndexScan(ci person_id_cast_info_cat_1) SeqScan(rt) IndexScan(t cat_title_1_pkey) IndexScan(mi movie_id_movie_info_cat_1) SeqScan(it) IndexScan(mc movie_id_movie_companies_cat_1) IndexScan(cn cat_company_name_1_pkey) IndexOnlyScan(chn cat_char_name_1_pkey) NestLoop(n an) NestLoop(n an ci) HashJoin(n an ci rt) NestLoop(n an ci rt t) NestLoop(n an ci rt t mi) HashJoin(n an ci rt t mi it) NestLoop(n an ci rt t mi it mc) NestLoop(n an ci rt t mi it mc cn) NestLoop(n an ci rt t mi it mc cn chn) Leading((((((((((n an) ci) rt) t) mi) it) mc) cn) chn)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM cat_aka_name_1 AS an,
   cat_char_name_1 AS chn,
   cat_cast_info_1 AS ci,
   cat_company_name_1 AS cn,
   cat_info_type_1 AS it,
  cat_movie_companies_1 AS mc,
   cat_movie_info_1 AS mi,
   cat_name_1 AS n,
   cat_role_type_1 AS rt,
   cat_title_1 AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(uncredited)', '(as Jo Anna Storm)', '(as Maria Bayo)', '(as Sharyn Ross)', '(as BBP)')
AND cn.country_code = '[us]'
AND it.info = 'trivia'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%)%' OR mc.note LIKE '%n%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%.%' OR mi.info LIKE '%k%')
AND n.gender = 'm'
AND n.name LIKE '%r%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1917 AND 1987;",384,/*+  SeqScan(n) IndexOnlyScan(an person_id_aka_name_cat_1) IndexScan(ci person_id_cast_info_cat_1) SeqScan(rt) IndexScan(t cat_title_1_pkey) IndexScan(mi movie_id_movie_info_cat_1) SeqScan(it) IndexScan(mc movie_id_movie_companies_cat_1) IndexScan(cn cat_company_name_1_pkey) IndexOnlyScan(chn cat_char_name_1_pkey) NestLoop(n an) NestLoop(n an ci) HashJoin(n an ci rt) NestLoop(n an ci rt t) NestLoop(n an ci rt t mi) HashJoin(n an ci rt t mi it) NestLoop(n an ci rt t mi it mc) NestLoop(n an ci rt t mi it mc cn) NestLoop(n an ci rt t mi it mc cn chn) Leading((((((((((n an) ci) rt) t) mi) it) mc) cn) chn)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM cat_aka_name_1 AS an,
   cat_char_name_1 AS chn,
   cat_cast_info_1 AS ci,
   cat_company_name_1 AS cn,
   cat_info_type_1 AS it,
  cat_movie_companies_1 AS mc,
   cat_movie_info_1 AS mi,
   cat_name_1 AS n,
   cat_role_type_1 AS rt,
   cat_title_1 AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(uncredited)', '(as Rob Hoffman)', '(intern director)', '(tech supervisor)', '(as Shigaya Fujita)')
AND cn.country_code = '[us]'
AND it.info = 'taglines'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%A%' OR mc.note LIKE '%U%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%a%' OR mi.info LIKE '%-%')
AND n.gender = 'm'
AND n.name LIKE '%B%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1946 AND 1991;",384,/*+  SeqScan(n) IndexOnlyScan(an person_id_aka_name_cat_1) IndexScan(ci person_id_cast_info_cat_1) SeqScan(rt) IndexScan(t cat_title_1_pkey) IndexScan(mi movie_id_movie_info_cat_1) SeqScan(it) IndexScan(mc movie_id_movie_companies_cat_1) IndexScan(cn cat_company_name_1_pkey) IndexOnlyScan(chn cat_char_name_1_pkey) NestLoop(n an) NestLoop(n an ci) HashJoin(n an ci rt) NestLoop(n an ci rt t) NestLoop(n an ci rt t mi) HashJoin(n an ci rt t mi it) NestLoop(n an ci rt t mi it mc) NestLoop(n an ci rt t mi it mc cn) NestLoop(n an ci rt t mi it mc cn chn) Leading((((((((((n an) ci) rt) t) mi) it) mc) cn) chn)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM cat_aka_name_1 AS an,
   cat_char_name_1 AS chn,
   cat_cast_info_1 AS ci,
   cat_company_name_1 AS cn,
   cat_info_type_1 AS it,
  cat_movie_companies_1 AS mc,
   cat_movie_info_1 AS mi,
   cat_name_1 AS n,
   cat_role_type_1 AS rt,
   cat_title_1 AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(uncredited)', '(as Ulf Risell)', '(as Marie Bosch)', '(as Gianni De Luca)', '(as Mike Ferris)')
AND cn.country_code = '[us]'
AND it.info = 'adaption'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%(%' OR mc.note LIKE '%i%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%z%' OR mi.info LIKE '%a%')
AND n.gender = 'm'
AND n.name LIKE '%w%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1908 AND 1991;",384,/*+  SeqScan(n) IndexOnlyScan(an person_id_aka_name_cat_1) IndexScan(ci person_id_cast_info_cat_1) SeqScan(rt) IndexScan(t cat_title_1_pkey) IndexScan(mi movie_id_movie_info_cat_1) SeqScan(it) IndexScan(mc movie_id_movie_companies_cat_1) IndexScan(cn cat_company_name_1_pkey) IndexOnlyScan(chn cat_char_name_1_pkey) NestLoop(n an) NestLoop(n an ci) HashJoin(n an ci rt) NestLoop(n an ci rt t) NestLoop(n an ci rt t mi) HashJoin(n an ci rt t mi it) NestLoop(n an ci rt t mi it mc) NestLoop(n an ci rt t mi it mc cn) NestLoop(n an ci rt t mi it mc cn chn) Leading((((((((((n an) ci) rt) t) mi) it) mc) cn) chn)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM cat_aka_name_1 AS an,
   cat_char_name_1 AS chn,
   cat_cast_info_1 AS ci,
   cat_company_name_1 AS cn,
   cat_info_type_1 AS it,
  cat_movie_companies_1 AS mc,
   cat_movie_info_1 AS mi,
   cat_name_1 AS n,
   cat_role_type_1 AS rt,
   cat_title_1 AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(uncredited)', '(Agent 000)', '(as RomÃ©o Bosetti)', '(as Sid Olcott)', '(as Garland L. Yee)')
AND cn.country_code = '[us]'
AND it.info = 'tech info'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%)%' OR mc.note LIKE '%1%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%:%' OR mi.info LIKE '%T%')
AND n.gender = 'm'
AND n.name LIKE '%n%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1905 AND 2012;",384,/*+  SeqScan(n) IndexOnlyScan(an person_id_aka_name_cat_1) IndexScan(ci person_id_cast_info_cat_1) SeqScan(rt) IndexScan(t cat_title_1_pkey) IndexScan(mi movie_id_movie_info_cat_1) SeqScan(it) IndexScan(mc movie_id_movie_companies_cat_1) IndexScan(cn cat_company_name_1_pkey) IndexOnlyScan(chn cat_char_name_1_pkey) NestLoop(n an) NestLoop(n an ci) HashJoin(n an ci rt) NestLoop(n an ci rt t) NestLoop(n an ci rt t mi) HashJoin(n an ci rt t mi it) NestLoop(n an ci rt t mi it mc) NestLoop(n an ci rt t mi it mc cn) NestLoop(n an ci rt t mi it mc cn chn) Leading((((((((((n an) ci) rt) t) mi) it) mc) cn) chn)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM cat_aka_name_1 AS an,
   cat_char_name_1 AS chn,
   cat_cast_info_1 AS ci,
   cat_company_name_1 AS cn,
   cat_info_type_1 AS it,
  cat_movie_companies_1 AS mc,
   cat_movie_info_1 AS mi,
   cat_name_1 AS n,
   cat_role_type_1 AS rt,
   cat_title_1 AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(uncredited)', '(as Elliott Fisher)', '(as Dorothy Haddon)', '(as Lucy)', '(as Gamy Viray)')
AND cn.country_code = '[us]'
AND it.info = 'trivia'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%a%' OR mc.note LIKE '%(%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%f%' OR mi.info LIKE '%d%')
AND n.gender = 'm'
AND n.name LIKE '%E%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1951 AND 1968;",384,/*+  SeqScan(n) IndexOnlyScan(an person_id_aka_name_cat_1) IndexScan(ci person_id_cast_info_cat_1) SeqScan(rt) IndexScan(t cat_title_1_pkey) IndexScan(mi movie_id_movie_info_cat_1) SeqScan(it) IndexScan(mc movie_id_movie_companies_cat_1) IndexScan(cn cat_company_name_1_pkey) IndexOnlyScan(chn cat_char_name_1_pkey) NestLoop(n an) NestLoop(n an ci) HashJoin(n an ci rt) NestLoop(n an ci rt t) NestLoop(n an ci rt t mi) HashJoin(n an ci rt t mi it) NestLoop(n an ci rt t mi it mc) NestLoop(n an ci rt t mi it mc cn) NestLoop(n an ci rt t mi it mc cn chn) Leading((((((((((n an) ci) rt) t) mi) it) mc) cn) chn)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM cat_aka_name_1 AS an,
   cat_char_name_1 AS chn,
   cat_cast_info_1 AS ci,
   cat_company_name_1 AS cn,
   cat_info_type_1 AS it,
  cat_movie_companies_1 AS mc,
   cat_movie_info_1 AS mi,
   cat_name_1 AS n,
   cat_role_type_1 AS rt,
   cat_title_1 AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(as James M. King)', '(as Xiong Lang)', '(story ""Road Work"")', '(as RenÃ©e Wedel)', '(as A. Leach)')
AND cn.country_code = '[us]'
AND it.info = 'release dates'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%)%' OR mc.note LIKE '%d%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%e%' OR mi.info LIKE '%F%')
AND n.gender = 'm'
AND n.name LIKE '%J%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1891 AND 2008;",384,/*+  SeqScan(n) IndexOnlyScan(an person_id_aka_name_cat_1) IndexScan(ci person_id_cast_info_cat_1) SeqScan(rt) IndexScan(t cat_title_1_pkey) IndexScan(mi movie_id_movie_info_cat_1) SeqScan(it) IndexScan(mc movie_id_movie_companies_cat_1) IndexScan(cn cat_company_name_1_pkey) IndexOnlyScan(chn cat_char_name_1_pkey) NestLoop(n an) NestLoop(n an ci) HashJoin(n an ci rt) NestLoop(n an ci rt t) NestLoop(n an ci rt t mi) HashJoin(n an ci rt t mi it) NestLoop(n an ci rt t mi it mc) NestLoop(n an ci rt t mi it mc cn) NestLoop(n an ci rt t mi it mc cn chn) Leading((((((((((n an) ci) rt) t) mi) it) mc) cn) chn)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM cat_aka_name_1 AS an,
   cat_char_name_1 AS chn,
   cat_cast_info_1 AS ci,
   cat_company_name_1 AS cn,
   cat_info_type_1 AS it,
  cat_movie_companies_1 AS mc,
   cat_movie_info_1 AS mi,
   cat_name_1 AS n,
   cat_role_type_1 AS rt,
   cat_title_1 AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(as Anthony Fridjhon)', '(as J. Companeez)', '(as Master Jeetu)', '(as Greg Grover)', '(as Veri)')
AND cn.country_code = '[nl]'
AND it.info = 'copyright holder'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%a%' OR mc.note LIKE '%m%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%l%' OR mi.info LIKE '%P%')
AND n.gender = 'm'
AND n.name LIKE '%y%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1985 AND 2004;",384,/*+  SeqScan(n) IndexOnlyScan(an person_id_aka_name_cat_1) IndexScan(ci person_id_cast_info_cat_1) SeqScan(rt) IndexScan(t cat_title_1_pkey) IndexScan(mi movie_id_movie_info_cat_1) SeqScan(it) IndexScan(mc movie_id_movie_companies_cat_1) IndexScan(cn cat_company_name_1_pkey) IndexOnlyScan(chn cat_char_name_1_pkey) NestLoop(n an) NestLoop(n an ci) HashJoin(n an ci rt) NestLoop(n an ci rt t) NestLoop(n an ci rt t mi) HashJoin(n an ci rt t mi it) NestLoop(n an ci rt t mi it mc) NestLoop(n an ci rt t mi it mc cn) NestLoop(n an ci rt t mi it mc cn chn) Leading((((((((((n an) ci) rt) t) mi) it) mc) cn) chn)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM cat_aka_name_1 AS an,
   cat_char_name_1 AS chn,
   cat_cast_info_1 AS ci,
   cat_company_name_1 AS cn,
   cat_info_type_1 AS it,
  cat_movie_companies_1 AS mc,
   cat_movie_info_1 AS mi,
   cat_name_1 AS n,
   cat_role_type_1 AS rt,
   cat_title_1 AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(uncredited)', '(as JÃ¶ns Pappila)', '(as Alex Kudritsky)', '(as Tang Chu Yau)', '(DJ lady)')
AND cn.country_code = '[us]'
AND it.info = 'runtimes'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%(%' OR mc.note LIKE '%(%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%1%' OR mi.info LIKE '%9%')
AND n.gender = 'm'
AND n.name LIKE '%,%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1899 AND 2003;",384,/*+  SeqScan(n) IndexOnlyScan(an person_id_aka_name_cat_1) IndexScan(ci person_id_cast_info_cat_1) SeqScan(rt) IndexScan(t cat_title_1_pkey) IndexScan(mi movie_id_movie_info_cat_1) SeqScan(it) IndexScan(mc movie_id_movie_companies_cat_1) IndexScan(cn cat_company_name_1_pkey) IndexOnlyScan(chn cat_char_name_1_pkey) NestLoop(n an) NestLoop(n an ci) HashJoin(n an ci rt) NestLoop(n an ci rt t) NestLoop(n an ci rt t mi) HashJoin(n an ci rt t mi it) NestLoop(n an ci rt t mi it mc) NestLoop(n an ci rt t mi it mc cn) NestLoop(n an ci rt t mi it mc cn chn) Leading((((((((((n an) ci) rt) t) mi) it) mc) cn) chn)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM cat_aka_name_1 AS an,
   cat_char_name_1 AS chn,
   cat_cast_info_1 AS ci,
   cat_company_name_1 AS cn,
   cat_info_type_1 AS it,
  cat_movie_companies_1 AS mc,
   cat_movie_info_1 AS mi,
   cat_name_1 AS n,
   cat_role_type_1 AS rt,
   cat_title_1 AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(as Anthony Fridjhon)', '(as Richard Svehla)', '(as Robert Dern)', '(as Jacob Klatfke)', '(as C. B. Tuite)')
AND cn.country_code = '[nl]'
AND it.info = 'release dates'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%)%' OR mc.note LIKE '%)%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%S%' OR mi.info LIKE '%l%')
AND n.gender = 'm'
AND n.name LIKE '%o%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1919 AND 1997;",384,/*+  SeqScan(n) IndexOnlyScan(an person_id_aka_name_cat_1) IndexScan(ci person_id_cast_info_cat_1) SeqScan(rt) IndexScan(t cat_title_1_pkey) IndexScan(mi movie_id_movie_info_cat_1) SeqScan(it) IndexScan(mc movie_id_movie_companies_cat_1) IndexScan(cn cat_company_name_1_pkey) IndexOnlyScan(chn cat_char_name_1_pkey) NestLoop(n an) NestLoop(n an ci) HashJoin(n an ci rt) NestLoop(n an ci rt t) NestLoop(n an ci rt t mi) HashJoin(n an ci rt t mi it) NestLoop(n an ci rt t mi it mc) NestLoop(n an ci rt t mi it mc cn) NestLoop(n an ci rt t mi it mc cn chn) Leading((((((((((n an) ci) rt) t) mi) it) mc) cn) chn)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM cat_aka_name_1 AS an,
   cat_char_name_1 AS chn,
   cat_cast_info_1 AS ci,
   cat_company_name_1 AS cn,
   cat_info_type_1 AS it,
  cat_movie_companies_1 AS mc,
   cat_movie_info_1 AS mi,
   cat_name_1 AS n,
   cat_role_type_1 AS rt,
   cat_title_1 AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(uncredited)', '(as Syd de Grey)', '(as Jeffrey Bemiss)', '(as Durga Prasad)', '(as Sampath)')
AND cn.country_code = '[us]'
AND it.info = 'release dates'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%)%' OR mc.note LIKE '%1%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%2%' OR mi.info LIKE '%b%')
AND n.gender = 'm'
AND n.name LIKE '%E%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1915 AND 2020;",384,/*+  SeqScan(n) IndexOnlyScan(an person_id_aka_name_cat_1) IndexScan(ci person_id_cast_info_cat_1) SeqScan(rt) IndexScan(t cat_title_1_pkey) IndexScan(mi movie_id_movie_info_cat_1) SeqScan(it) IndexScan(mc movie_id_movie_companies_cat_1) IndexScan(cn cat_company_name_1_pkey) IndexOnlyScan(chn cat_char_name_1_pkey) NestLoop(n an) NestLoop(n an ci) HashJoin(n an ci rt) NestLoop(n an ci rt t) NestLoop(n an ci rt t mi) HashJoin(n an ci rt t mi it) NestLoop(n an ci rt t mi it mc) NestLoop(n an ci rt t mi it mc cn) NestLoop(n an ci rt t mi it mc cn chn) Leading((((((((((n an) ci) rt) t) mi) it) mc) cn) chn)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM cat_aka_name_1 AS an,
   cat_char_name_1 AS chn,
   cat_cast_info_1 AS ci,
   cat_company_name_1 AS cn,
   cat_info_type_1 AS it,
  cat_movie_companies_1 AS mc,
   cat_movie_info_1 AS mi,
   cat_name_1 AS n,
   cat_role_type_1 AS rt,
   cat_title_1 AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(uncredited)', '(cast trainer)', '(as Matt Waite)', '(as Jill Maddin)', '(as Jayshri Gadkar)')
AND cn.country_code = '[us]'
AND it.info = 'sound mix'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%a%' OR mc.note LIKE '%i%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%o%' OR mi.info LIKE '%M%')
AND n.gender = 'm'
AND n.name LIKE '%w%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1943 AND 1963;",384,/*+  SeqScan(n) IndexOnlyScan(an person_id_aka_name_cat_1) IndexScan(ci person_id_cast_info_cat_1) SeqScan(rt) IndexScan(t cat_title_1_pkey) IndexScan(mi movie_id_movie_info_cat_1) SeqScan(it) IndexScan(mc movie_id_movie_companies_cat_1) IndexScan(cn cat_company_name_1_pkey) IndexOnlyScan(chn cat_char_name_1_pkey) NestLoop(n an) NestLoop(n an ci) HashJoin(n an ci rt) NestLoop(n an ci rt t) NestLoop(n an ci rt t mi) HashJoin(n an ci rt t mi it) NestLoop(n an ci rt t mi it mc) NestLoop(n an ci rt t mi it mc cn) NestLoop(n an ci rt t mi it mc cn chn) Leading((((((((((n an) ci) rt) t) mi) it) mc) cn) chn)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM cat_aka_name_1 AS an,
   cat_char_name_1 AS chn,
   cat_cast_info_1 AS ci,
   cat_company_name_1 AS cn,
   cat_info_type_1 AS it,
  cat_movie_companies_1 AS mc,
   cat_movie_info_1 AS mi,
   cat_name_1 AS n,
   cat_role_type_1 AS rt,
   cat_title_1 AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(uncredited)', '(as Gustav Nervil)', '(as Fito Yanelli)', '(as Azaan R. Shah)', '(as Valerie)')
AND cn.country_code = '[ca]'
AND it.info = 'certificates'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%f%' OR mc.note LIKE '%i%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%2%' OR mi.info LIKE '%y%')
AND n.gender = 'm'
AND n.name LIKE '%i%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1910 AND 1997;",384,/*+  SeqScan(n) IndexOnlyScan(an person_id_aka_name_cat_1) IndexScan(ci person_id_cast_info_cat_1) SeqScan(rt) IndexScan(t cat_title_1_pkey) IndexScan(mi movie_id_movie_info_cat_1) SeqScan(it) IndexScan(mc movie_id_movie_companies_cat_1) IndexScan(cn cat_company_name_1_pkey) IndexOnlyScan(chn cat_char_name_1_pkey) NestLoop(n an) NestLoop(n an ci) HashJoin(n an ci rt) NestLoop(n an ci rt t) NestLoop(n an ci rt t mi) HashJoin(n an ci rt t mi it) NestLoop(n an ci rt t mi it mc) NestLoop(n an ci rt t mi it mc cn) NestLoop(n an ci rt t mi it mc cn chn) Leading((((((((((n an) ci) rt) t) mi) it) mc) cn) chn)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM cat_aka_name_1 AS an,
   cat_char_name_1 AS chn,
   cat_cast_info_1 AS ci,
   cat_company_name_1 AS cn,
   cat_info_type_1 AS it,
  cat_movie_companies_1 AS mc,
   cat_movie_info_1 AS mi,
   cat_name_1 AS n,
   cat_role_type_1 AS rt,
   cat_title_1 AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(as Anthony Fridjhon)', '(as Frank Liu)', '(as Jerold Ward)', '(as Jeff Zinn)', '(as Alan Parker)')
AND cn.country_code = '[nl]'
AND it.info = 'countries'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%t%' OR mc.note LIKE '%t%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%U%' OR mi.info LIKE '%A%')
AND n.gender = 'm'
AND n.name LIKE '%d%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1975 AND 2015;",384,/*+  SeqScan(n) IndexOnlyScan(an person_id_aka_name_cat_1) IndexScan(ci person_id_cast_info_cat_1) SeqScan(rt) IndexScan(t cat_title_1_pkey) IndexScan(mi movie_id_movie_info_cat_1) SeqScan(it) IndexScan(mc movie_id_movie_companies_cat_1) IndexScan(cn cat_company_name_1_pkey) IndexOnlyScan(chn cat_char_name_1_pkey) NestLoop(n an) NestLoop(n an ci) HashJoin(n an ci rt) NestLoop(n an ci rt t) NestLoop(n an ci rt t mi) HashJoin(n an ci rt t mi it) NestLoop(n an ci rt t mi it mc) NestLoop(n an ci rt t mi it mc cn) NestLoop(n an ci rt t mi it mc cn chn) Leading((((((((((n an) ci) rt) t) mi) it) mc) cn) chn)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM cat_aka_name_1 AS an,
   cat_char_name_1 AS chn,
   cat_cast_info_1 AS ci,
   cat_company_name_1 AS cn,
   cat_info_type_1 AS it,
  cat_movie_companies_1 AS mc,
   cat_movie_info_1 AS mi,
   cat_name_1 AS n,
   cat_role_type_1 AS rt,
   cat_title_1 AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(as James M. King)', '(as A. Shvedersky)', '(as D. Boschero)', '(wrap party: dj)', '(as Mike Dufays)')
AND cn.country_code = '[us]'
AND it.info = 'tech info'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%n%' OR mc.note LIKE '%d%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%g%' OR mi.info LIKE '%I%')
AND n.gender = 'm'
AND n.name LIKE '%i%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1894 AND 2019;",384,/*+  SeqScan(n) IndexOnlyScan(an person_id_aka_name_cat_1) IndexScan(ci person_id_cast_info_cat_1) SeqScan(rt) IndexScan(t cat_title_1_pkey) IndexScan(mi movie_id_movie_info_cat_1) SeqScan(it) IndexScan(mc movie_id_movie_companies_cat_1) IndexScan(cn cat_company_name_1_pkey) IndexOnlyScan(chn cat_char_name_1_pkey) NestLoop(n an) NestLoop(n an ci) HashJoin(n an ci rt) NestLoop(n an ci rt t) NestLoop(n an ci rt t mi) HashJoin(n an ci rt t mi it) NestLoop(n an ci rt t mi it mc) NestLoop(n an ci rt t mi it mc cn) NestLoop(n an ci rt t mi it mc cn chn) Leading((((((((((n an) ci) rt) t) mi) it) mc) cn) chn)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM cat_aka_name_1 AS an,
   cat_char_name_1 AS chn,
   cat_cast_info_1 AS ci,
   cat_company_name_1 AS cn,
   cat_info_type_1 AS it,
  cat_movie_companies_1 AS mc,
   cat_movie_info_1 AS mi,
   cat_name_1 AS n,
   cat_role_type_1 AS rt,
   cat_title_1 AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(as James M. King)', '(as M. Derzhavin)', '(album cover)', '(as Jenn Rivell)', '(as Philipp Wolter)')
AND cn.country_code = '[us]'
AND it.info = 'release dates'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%u%' OR mc.note LIKE '%d%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%e%' OR mi.info LIKE '%1%')
AND n.gender = 'm'
AND n.name LIKE '%m%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1934 AND 2010;",384,/*+  SeqScan(n) IndexOnlyScan(an person_id_aka_name_cat_1) IndexScan(ci person_id_cast_info_cat_1) SeqScan(rt) IndexScan(t cat_title_1_pkey) IndexScan(mi movie_id_movie_info_cat_1) SeqScan(it) IndexScan(mc movie_id_movie_companies_cat_1) IndexScan(cn cat_company_name_1_pkey) IndexOnlyScan(chn cat_char_name_1_pkey) NestLoop(n an) NestLoop(n an ci) HashJoin(n an ci rt) NestLoop(n an ci rt t) NestLoop(n an ci rt t mi) HashJoin(n an ci rt t mi it) NestLoop(n an ci rt t mi it mc) NestLoop(n an ci rt t mi it mc cn) NestLoop(n an ci rt t mi it mc cn chn) Leading((((((((((n an) ci) rt) t) mi) it) mc) cn) chn)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM cat_aka_name_1 AS an,
   cat_char_name_1 AS chn,
   cat_cast_info_1 AS ci,
   cat_company_name_1 AS cn,
   cat_info_type_1 AS it,
  cat_movie_companies_1 AS mc,
   cat_movie_info_1 AS mi,
   cat_name_1 AS n,
   cat_role_type_1 AS rt,
   cat_title_1 AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(uncredited)', '(as Rafael Corio)', '(segment 12)', '(Suzy)', '(as Ramarasila)')
AND cn.country_code = '[us]'
AND it.info = 'novel'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%)%' OR mc.note LIKE '%)%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%Y%' OR mi.info LIKE '%t%')
AND n.gender = 'm'
AND n.name LIKE '%r%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1942 AND 2001;",384,/*+  SeqScan(n) IndexOnlyScan(an person_id_aka_name_cat_1) IndexScan(ci person_id_cast_info_cat_1) SeqScan(rt) IndexScan(t cat_title_1_pkey) IndexScan(mi movie_id_movie_info_cat_1) SeqScan(it) IndexScan(mc movie_id_movie_companies_cat_1) IndexScan(cn cat_company_name_1_pkey) IndexOnlyScan(chn cat_char_name_1_pkey) NestLoop(n an) NestLoop(n an ci) HashJoin(n an ci rt) NestLoop(n an ci rt t) NestLoop(n an ci rt t mi) HashJoin(n an ci rt t mi it) NestLoop(n an ci rt t mi it mc) NestLoop(n an ci rt t mi it mc cn) NestLoop(n an ci rt t mi it mc cn chn) Leading((((((((((n an) ci) rt) t) mi) it) mc) cn) chn)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM cat_aka_name_1 AS an,
   cat_char_name_1 AS chn,
   cat_cast_info_1 AS ci,
   cat_company_name_1 AS cn,
   cat_info_type_1 AS it,
  cat_movie_companies_1 AS mc,
   cat_movie_info_1 AS mi,
   cat_name_1 AS n,
   cat_role_type_1 AS rt,
   cat_title_1 AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(uncredited)', '(as Bonita)', '(as Ken Farrington)', '(as Bill Jackson)', '(livestock trainer)')
AND cn.country_code = '[us]'
AND it.info = 'trivia'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%)%' OR mc.note LIKE '%n%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%u%' OR mi.info LIKE '%r%')
AND n.gender = 'm'
AND n.name LIKE '%,%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1930 AND 1968;",384,/*+  SeqScan(n) IndexOnlyScan(an person_id_aka_name_cat_1) IndexScan(ci person_id_cast_info_cat_1) SeqScan(rt) IndexScan(t cat_title_1_pkey) IndexScan(mi movie_id_movie_info_cat_1) SeqScan(it) IndexScan(mc movie_id_movie_companies_cat_1) IndexScan(cn cat_company_name_1_pkey) IndexOnlyScan(chn cat_char_name_1_pkey) NestLoop(n an) NestLoop(n an ci) HashJoin(n an ci rt) NestLoop(n an ci rt t) NestLoop(n an ci rt t mi) HashJoin(n an ci rt t mi it) NestLoop(n an ci rt t mi it mc) NestLoop(n an ci rt t mi it mc cn) NestLoop(n an ci rt t mi it mc cn chn) Leading((((((((((n an) ci) rt) t) mi) it) mc) cn) chn)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM cat_aka_name_1 AS an,
   cat_char_name_1 AS chn,
   cat_cast_info_1 AS ci,
   cat_company_name_1 AS cn,
   cat_info_type_1 AS it,
  cat_movie_companies_1 AS mc,
   cat_movie_info_1 AS mi,
   cat_name_1 AS n,
   cat_role_type_1 AS rt,
   cat_title_1 AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(as James M. King)', '(as Felba Dragomir)', '(as Onse)', '(as Shekhar Kapoor)', '(as Crystal Liu)')
AND cn.country_code = '[us]'
AND it.info = 'tech info'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%i%' OR mc.note LIKE '%)%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%m%' OR mi.info LIKE '%1%')
AND n.gender = 'm'
AND n.name LIKE '%m%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1969 AND 2007;",384,/*+  SeqScan(n) IndexOnlyScan(an person_id_aka_name_cat_1) IndexScan(ci person_id_cast_info_cat_1) SeqScan(rt) IndexScan(t cat_title_1_pkey) IndexScan(mi movie_id_movie_info_cat_1) SeqScan(it) IndexScan(mc movie_id_movie_companies_cat_1) IndexScan(cn cat_company_name_1_pkey) IndexOnlyScan(chn cat_char_name_1_pkey) NestLoop(n an) NestLoop(n an ci) HashJoin(n an ci rt) NestLoop(n an ci rt t) NestLoop(n an ci rt t mi) HashJoin(n an ci rt t mi it) NestLoop(n an ci rt t mi it mc) NestLoop(n an ci rt t mi it mc cn) NestLoop(n an ci rt t mi it mc cn chn) Leading((((((((((n an) ci) rt) t) mi) it) mc) cn) chn)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM cat_aka_name_1 AS an,
   cat_char_name_1 AS chn,
   cat_cast_info_1 AS ci,
   cat_company_name_1 AS cn,
   cat_info_type_1 AS it,
  cat_movie_companies_1 AS mc,
   cat_movie_info_1 AS mi,
   cat_name_1 AS n,
   cat_role_type_1 AS rt,
   cat_title_1 AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(uncredited)', '(as Vinay)', '(as Bert Frank)', '(continuity: (U.S))', '(as ClÃ udia Abate)')
AND cn.country_code = '[us]'
AND it.info = 'languages'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%u%' OR mc.note LIKE '%0%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%h%' OR mi.info LIKE '%l%')
AND n.gender = 'm'
AND n.name LIKE '%l%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1936 AND 1961;",384,/*+  SeqScan(n) IndexOnlyScan(an person_id_aka_name_cat_1) IndexScan(ci person_id_cast_info_cat_1) SeqScan(rt) IndexScan(t cat_title_1_pkey) IndexScan(mi movie_id_movie_info_cat_1) SeqScan(it) IndexScan(mc movie_id_movie_companies_cat_1) IndexScan(cn cat_company_name_1_pkey) IndexOnlyScan(chn cat_char_name_1_pkey) NestLoop(n an) NestLoop(n an ci) HashJoin(n an ci rt) NestLoop(n an ci rt t) NestLoop(n an ci rt t mi) HashJoin(n an ci rt t mi it) NestLoop(n an ci rt t mi it mc) NestLoop(n an ci rt t mi it mc cn) NestLoop(n an ci rt t mi it mc cn chn) Leading((((((((((n an) ci) rt) t) mi) it) mc) cn) chn)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM cat_aka_name_1 AS an,
   cat_char_name_1 AS chn,
   cat_cast_info_1 AS ci,
   cat_company_name_1 AS cn,
   cat_info_type_1 AS it,
  cat_movie_companies_1 AS mc,
   cat_movie_info_1 AS mi,
   cat_name_1 AS n,
   cat_role_type_1 AS rt,
   cat_title_1 AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(voice) (uncredited)', '(as Lew Musser)', '(as M. Santos)', '(archive stuff)', '(Memo)')
AND cn.country_code = '[fi]'
AND it.info = 'quotes'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%(%' OR mc.note LIKE '%4%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%o%' OR mi.info LIKE '%m%')
AND n.gender = 'm'
AND n.name LIKE '%,%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1986 AND 2012;",384,/*+  SeqScan(n) IndexOnlyScan(an person_id_aka_name_cat_1) IndexScan(ci person_id_cast_info_cat_1) SeqScan(rt) IndexScan(t cat_title_1_pkey) IndexScan(mi movie_id_movie_info_cat_1) SeqScan(it) IndexScan(mc movie_id_movie_companies_cat_1) IndexScan(cn cat_company_name_1_pkey) IndexOnlyScan(chn cat_char_name_1_pkey) NestLoop(n an) NestLoop(n an ci) HashJoin(n an ci rt) NestLoop(n an ci rt t) NestLoop(n an ci rt t mi) HashJoin(n an ci rt t mi it) NestLoop(n an ci rt t mi it mc) NestLoop(n an ci rt t mi it mc cn) NestLoop(n an ci rt t mi it mc cn chn) Leading((((((((((n an) ci) rt) t) mi) it) mc) cn) chn)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM cat_aka_name_1 AS an,
   cat_char_name_1 AS chn,
   cat_cast_info_1 AS ci,
   cat_company_name_1 AS cn,
   cat_info_type_1 AS it,
  cat_movie_companies_1 AS mc,
   cat_movie_info_1 AS mi,
   cat_name_1 AS n,
   cat_role_type_1 AS rt,
   cat_title_1 AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(uncredited)', '(as Roxana Pope)', '(epk sound: Israel)', '(as Pinky Thompson)', '(as Mostepha Stiti)')
AND cn.country_code = '[us]'
AND it.info = 'goofs'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%s%' OR mc.note LIKE '%i%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%Y%' OR mi.info LIKE '%i%')
AND n.gender = 'm'
AND n.name LIKE '%e%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1930 AND 1999;",384,/*+  SeqScan(n) IndexOnlyScan(an person_id_aka_name_cat_1) IndexScan(ci person_id_cast_info_cat_1) SeqScan(rt) IndexScan(t cat_title_1_pkey) IndexScan(mi movie_id_movie_info_cat_1) SeqScan(it) IndexScan(mc movie_id_movie_companies_cat_1) IndexScan(cn cat_company_name_1_pkey) IndexOnlyScan(chn cat_char_name_1_pkey) NestLoop(n an) NestLoop(n an ci) HashJoin(n an ci rt) NestLoop(n an ci rt t) NestLoop(n an ci rt t mi) HashJoin(n an ci rt t mi it) NestLoop(n an ci rt t mi it mc) NestLoop(n an ci rt t mi it mc cn) NestLoop(n an ci rt t mi it mc cn chn) Leading((((((((((n an) ci) rt) t) mi) it) mc) cn) chn)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM cat_aka_name_1 AS an,
   cat_char_name_1 AS chn,
   cat_cast_info_1 AS ci,
   cat_company_name_1 AS cn,
   cat_info_type_1 AS it,
  cat_movie_companies_1 AS mc,
   cat_movie_info_1 AS mi,
   cat_name_1 AS n,
   cat_role_type_1 AS rt,
   cat_title_1 AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(as James M. King)', '(as Edward J. Peil)', '(Acme Temp Guy)', '(as Henry De Vere)', '(roommate)')
AND cn.country_code = '[us]'
AND it.info = 'tech info'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%e%' OR mc.note LIKE '%u%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%F%' OR mi.info LIKE '%3%')
AND n.gender = 'm'
AND n.name LIKE '%y%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1940 AND 2010;",384,/*+  SeqScan(n) IndexOnlyScan(an person_id_aka_name_cat_1) IndexScan(ci person_id_cast_info_cat_1) SeqScan(rt) IndexScan(t cat_title_1_pkey) IndexScan(mi movie_id_movie_info_cat_1) SeqScan(it) IndexScan(mc movie_id_movie_companies_cat_1) IndexScan(cn cat_company_name_1_pkey) IndexOnlyScan(chn cat_char_name_1_pkey) NestLoop(n an) NestLoop(n an ci) HashJoin(n an ci rt) NestLoop(n an ci rt t) NestLoop(n an ci rt t mi) HashJoin(n an ci rt t mi it) NestLoop(n an ci rt t mi it mc) NestLoop(n an ci rt t mi it mc cn) NestLoop(n an ci rt t mi it mc cn chn) Leading((((((((((n an) ci) rt) t) mi) it) mc) cn) chn)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM cat_aka_name_1 AS an,
   cat_char_name_1 AS chn,
   cat_cast_info_1 AS ci,
   cat_company_name_1 AS cn,
   cat_info_type_1 AS it,
  cat_movie_companies_1 AS mc,
   cat_movie_info_1 AS mi,
   cat_name_1 AS n,
   cat_role_type_1 AS rt,
   cat_title_1 AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(as Chong Ti Bo-Chu)', '(voice: ""Review"")', '(as Alberto Diaz)', '(as MartÃ­n Aslan)', '(runner: Helsinki)')
AND cn.country_code = '[nl]'
AND it.info = 'release dates'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%9%' OR mc.note LIKE '%e%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%s%' OR mi.info LIKE '%t%')
AND n.gender = 'm'
AND n.name LIKE '%a%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1895 AND 1992;",384,/*+  SeqScan(n) IndexOnlyScan(an person_id_aka_name_cat_1) IndexScan(ci person_id_cast_info_cat_1) SeqScan(rt) IndexScan(t cat_title_1_pkey) IndexScan(mi movie_id_movie_info_cat_1) SeqScan(it) IndexScan(mc movie_id_movie_companies_cat_1) IndexScan(cn cat_company_name_1_pkey) IndexOnlyScan(chn cat_char_name_1_pkey) NestLoop(n an) NestLoop(n an ci) HashJoin(n an ci rt) NestLoop(n an ci rt t) NestLoop(n an ci rt t mi) HashJoin(n an ci rt t mi it) NestLoop(n an ci rt t mi it mc) NestLoop(n an ci rt t mi it mc cn) NestLoop(n an ci rt t mi it mc cn chn) Leading((((((((((n an) ci) rt) t) mi) it) mc) cn) chn)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM cat_aka_name_1 AS an,
   cat_char_name_1 AS chn,
   cat_cast_info_1 AS ci,
   cat_company_name_1 AS cn,
   cat_info_type_1 AS it,
  cat_movie_companies_1 AS mc,
   cat_movie_info_1 AS mi,
   cat_name_1 AS n,
   cat_role_type_1 AS rt,
   cat_title_1 AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(uncredited)', '(as J. Worth)', '(Friend 1)', '(as John Valent)', '(karate advisor)')
AND cn.country_code = '[us]'
AND it.info = 'release dates'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%)%' OR mc.note LIKE '%a%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%6%' OR mi.info LIKE '%c%')
AND n.gender = 'm'
AND n.name LIKE '%,%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1951 AND 1972;",384,/*+  SeqScan(n) IndexOnlyScan(an person_id_aka_name_cat_1) IndexScan(ci person_id_cast_info_cat_1) SeqScan(rt) IndexScan(t cat_title_1_pkey) IndexScan(mi movie_id_movie_info_cat_1) SeqScan(it) IndexScan(mc movie_id_movie_companies_cat_1) IndexScan(cn cat_company_name_1_pkey) IndexOnlyScan(chn cat_char_name_1_pkey) NestLoop(n an) NestLoop(n an ci) HashJoin(n an ci rt) NestLoop(n an ci rt t) NestLoop(n an ci rt t mi) HashJoin(n an ci rt t mi it) NestLoop(n an ci rt t mi it mc) NestLoop(n an ci rt t mi it mc cn) NestLoop(n an ci rt t mi it mc cn chn) Leading((((((((((n an) ci) rt) t) mi) it) mc) cn) chn)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM cat_aka_name_1 AS an,
   cat_char_name_1 AS chn,
   cat_cast_info_1 AS ci,
   cat_company_name_1 AS cn,
   cat_info_type_1 AS it,
  cat_movie_companies_1 AS mc,
   cat_movie_info_1 AS mi,
   cat_name_1 AS n,
   cat_role_type_1 AS rt,
   cat_title_1 AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(uncredited)', '(as John Montoya)', '(as S. Basagic)', '(as Jack Cheese)', '(as Gioula Gavala)')
AND cn.country_code = '[us]'
AND it.info = 'trivia'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%-%' OR mc.note LIKE '%r%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%n%' OR mi.info LIKE '%l%')
AND n.gender = 'm'
AND n.name LIKE '%i%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1904 AND 1992;",384,/*+  SeqScan(n) IndexOnlyScan(an person_id_aka_name_cat_1) IndexScan(ci person_id_cast_info_cat_1) SeqScan(rt) IndexScan(t cat_title_1_pkey) IndexScan(mi movie_id_movie_info_cat_1) SeqScan(it) IndexScan(mc movie_id_movie_companies_cat_1) IndexScan(cn cat_company_name_1_pkey) IndexOnlyScan(chn cat_char_name_1_pkey) NestLoop(n an) NestLoop(n an ci) HashJoin(n an ci rt) NestLoop(n an ci rt t) NestLoop(n an ci rt t mi) HashJoin(n an ci rt t mi it) NestLoop(n an ci rt t mi it mc) NestLoop(n an ci rt t mi it mc cn) NestLoop(n an ci rt t mi it mc cn chn) Leading((((((((((n an) ci) rt) t) mi) it) mc) cn) chn)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM cat_aka_name_1 AS an,
   cat_char_name_1 AS chn,
   cat_cast_info_1 AS ci,
   cat_company_name_1 AS cn,
   cat_info_type_1 AS it,
  cat_movie_companies_1 AS mc,
   cat_movie_info_1 AS mi,
   cat_name_1 AS n,
   cat_role_type_1 AS rt,
   cat_title_1 AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(as James M. King)', '(as Tim Hanson)', '(as Jagirdar)', '(as Mike Malfitano)', '(as Yin-Man Choi)')
AND cn.country_code = '[us]'
AND it.info = 'release dates'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%(%' OR mc.note LIKE '%d%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%B%' OR mi.info LIKE '%u%')
AND n.gender = 'm'
AND n.name LIKE '%,%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1950 AND 2016;",384,/*+  SeqScan(n) IndexOnlyScan(an person_id_aka_name_cat_1) IndexScan(ci person_id_cast_info_cat_1) SeqScan(rt) IndexScan(t cat_title_1_pkey) IndexScan(mi movie_id_movie_info_cat_1) SeqScan(it) IndexScan(mc movie_id_movie_companies_cat_1) IndexScan(cn cat_company_name_1_pkey) IndexOnlyScan(chn cat_char_name_1_pkey) NestLoop(n an) NestLoop(n an ci) HashJoin(n an ci rt) NestLoop(n an ci rt t) NestLoop(n an ci rt t mi) HashJoin(n an ci rt t mi it) NestLoop(n an ci rt t mi it mc) NestLoop(n an ci rt t mi it mc cn) NestLoop(n an ci rt t mi it mc cn chn) Leading((((((((((n an) ci) rt) t) mi) it) mc) cn) chn)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM cat_aka_name_1 AS an,
   cat_char_name_1 AS chn,
   cat_cast_info_1 AS ci,
   cat_company_name_1 AS cn,
   cat_info_type_1 AS it,
  cat_movie_companies_1 AS mc,
   cat_movie_info_1 AS mi,
   cat_name_1 AS n,
   cat_role_type_1 AS rt,
   cat_title_1 AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(uncredited)', '(as IchijirÃ´ Ãya)', '(as Kari Seekins)', '(as Ameet Gaur)', '(as Josh Dov)')
AND cn.country_code = '[fi]'
AND it.info = 'goofs'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%F%' OR mc.note LIKE '%n%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%i%' OR mi.info LIKE '%i%')
AND n.gender = 'm'
AND n.name LIKE '%R%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1929 AND 1971;",384,/*+  SeqScan(n) IndexOnlyScan(an person_id_aka_name_cat_1) IndexScan(ci person_id_cast_info_cat_1) SeqScan(rt) IndexScan(t cat_title_1_pkey) IndexScan(mi movie_id_movie_info_cat_1) SeqScan(it) IndexScan(mc movie_id_movie_companies_cat_1) IndexScan(cn cat_company_name_1_pkey) IndexOnlyScan(chn cat_char_name_1_pkey) NestLoop(n an) NestLoop(n an ci) HashJoin(n an ci rt) NestLoop(n an ci rt t) NestLoop(n an ci rt t mi) HashJoin(n an ci rt t mi it) NestLoop(n an ci rt t mi it mc) NestLoop(n an ci rt t mi it mc cn) NestLoop(n an ci rt t mi it mc cn chn) Leading((((((((((n an) ci) rt) t) mi) it) mc) cn) chn)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM cat_aka_name_1 AS an,
   cat_char_name_1 AS chn,
   cat_cast_info_1 AS ci,
   cat_company_name_1 AS cn,
   cat_info_type_1 AS it,
  cat_movie_companies_1 AS mc,
   cat_movie_info_1 AS mi,
   cat_name_1 AS n,
   cat_role_type_1 AS rt,
   cat_title_1 AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(as James M. King)', '(as Jose C. Mendez)', '(as Loren Mead)', '(Tiger Rose)', '(loader #3)')
AND cn.country_code = '[us]'
AND it.info = 'release dates'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%(%' OR mc.note LIKE '%u%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%e%' OR mi.info LIKE '%7%')
AND n.gender = 'm'
AND n.name LIKE '%K%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1964 AND 2014;",384,/*+  SeqScan(n) IndexOnlyScan(an person_id_aka_name_cat_1) IndexScan(ci person_id_cast_info_cat_1) SeqScan(rt) IndexScan(t cat_title_1_pkey) IndexScan(mi movie_id_movie_info_cat_1) SeqScan(it) IndexScan(mc movie_id_movie_companies_cat_1) IndexScan(cn cat_company_name_1_pkey) IndexOnlyScan(chn cat_char_name_1_pkey) NestLoop(n an) NestLoop(n an ci) HashJoin(n an ci rt) NestLoop(n an ci rt t) NestLoop(n an ci rt t mi) HashJoin(n an ci rt t mi it) NestLoop(n an ci rt t mi it mc) NestLoop(n an ci rt t mi it mc cn) NestLoop(n an ci rt t mi it mc cn chn) Leading((((((((((n an) ci) rt) t) mi) it) mc) cn) chn)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM cat_aka_name_1 AS an,
   cat_char_name_1 AS chn,
   cat_cast_info_1 AS ci,
   cat_company_name_1 AS cn,
   cat_info_type_1 AS it,
  cat_movie_companies_1 AS mc,
   cat_movie_info_1 AS mi,
   cat_name_1 AS n,
   cat_role_type_1 AS rt,
   cat_title_1 AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(as James M. King)', '(as Jack Jozephson)', '(as Members)', '(as Ersi Pitta)', '(as Carrol Baker)')
AND cn.country_code = '[us]'
AND it.info = 'release dates'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%n%' OR mc.note LIKE '%(%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%O%' OR mi.info LIKE '%2%')
AND n.gender = 'm'
AND n.name LIKE '%i%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1897 AND 2017;",384,/*+  SeqScan(n) IndexOnlyScan(an person_id_aka_name_cat_1) IndexScan(ci person_id_cast_info_cat_1) SeqScan(rt) IndexScan(t cat_title_1_pkey) IndexScan(mi movie_id_movie_info_cat_1) SeqScan(it) IndexScan(mc movie_id_movie_companies_cat_1) IndexScan(cn cat_company_name_1_pkey) IndexOnlyScan(chn cat_char_name_1_pkey) NestLoop(n an) NestLoop(n an ci) HashJoin(n an ci rt) NestLoop(n an ci rt t) NestLoop(n an ci rt t mi) HashJoin(n an ci rt t mi it) NestLoop(n an ci rt t mi it mc) NestLoop(n an ci rt t mi it mc cn) NestLoop(n an ci rt t mi it mc cn chn) Leading((((((((((n an) ci) rt) t) mi) it) mc) cn) chn)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM cat_aka_name_1 AS an,
   cat_char_name_1 AS chn,
   cat_cast_info_1 AS ci,
   cat_company_name_1 AS cn,
   cat_info_type_1 AS it,
  cat_movie_companies_1 AS mc,
   cat_movie_info_1 AS mi,
   cat_name_1 AS n,
   cat_role_type_1 AS rt,
   cat_title_1 AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(uncredited)', '(as Biel)', '(as Marcel Moreau)', '(as Barry Boldero)', '(as Brian Newett)')
AND cn.country_code = '[us]'
AND it.info = 'sound mix'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%)%' OR mc.note LIKE '%B%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%o%' OR mi.info LIKE '%n%')
AND n.gender = 'm'
AND n.name LIKE '%E%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1947 AND 2015;",384,/*+  SeqScan(n) IndexOnlyScan(an person_id_aka_name_cat_1) IndexScan(ci person_id_cast_info_cat_1) SeqScan(rt) IndexScan(t cat_title_1_pkey) IndexScan(mi movie_id_movie_info_cat_1) SeqScan(it) IndexScan(mc movie_id_movie_companies_cat_1) IndexScan(cn cat_company_name_1_pkey) IndexOnlyScan(chn cat_char_name_1_pkey) NestLoop(n an) NestLoop(n an ci) HashJoin(n an ci rt) NestLoop(n an ci rt t) NestLoop(n an ci rt t mi) HashJoin(n an ci rt t mi it) NestLoop(n an ci rt t mi it mc) NestLoop(n an ci rt t mi it mc cn) NestLoop(n an ci rt t mi it mc cn chn) Leading((((((((((n an) ci) rt) t) mi) it) mc) cn) chn)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM cat_aka_name_1 AS an,
   cat_char_name_1 AS chn,
   cat_cast_info_1 AS ci,
   cat_company_name_1 AS cn,
   cat_info_type_1 AS it,
  cat_movie_companies_1 AS mc,
   cat_movie_info_1 AS mi,
   cat_name_1 AS n,
   cat_role_type_1 AS rt,
   cat_title_1 AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(uncredited)', '(as Mehmood Ali)', '(as O. Demidov)', '(as Lynn Mess)', '(as Jerry Jacobs)')
AND cn.country_code = '[us]'
AND it.info = 'languages'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%B%' OR mc.note LIKE '%D%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%l%' OR mi.info LIKE '%s%')
AND n.gender = 'm'
AND n.name LIKE '%n%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1923 AND 1987;",384,/*+  SeqScan(n) IndexOnlyScan(an person_id_aka_name_cat_1) IndexScan(ci person_id_cast_info_cat_1) SeqScan(rt) IndexScan(t cat_title_1_pkey) IndexScan(mi movie_id_movie_info_cat_1) SeqScan(it) IndexScan(mc movie_id_movie_companies_cat_1) IndexScan(cn cat_company_name_1_pkey) IndexOnlyScan(chn cat_char_name_1_pkey) NestLoop(n an) NestLoop(n an ci) HashJoin(n an ci rt) NestLoop(n an ci rt t) NestLoop(n an ci rt t mi) HashJoin(n an ci rt t mi it) NestLoop(n an ci rt t mi it mc) NestLoop(n an ci rt t mi it mc cn) NestLoop(n an ci rt t mi it mc cn chn) Leading((((((((((n an) ci) rt) t) mi) it) mc) cn) chn)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM cat_aka_name_1 AS an,
   cat_char_name_1 AS chn,
   cat_cast_info_1 AS ci,
   cat_company_name_1 AS cn,
   cat_info_type_1 AS it,
  cat_movie_companies_1 AS mc,
   cat_movie_info_1 AS mi,
   cat_name_1 AS n,
   cat_role_type_1 AS rt,
   cat_title_1 AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(uncredited)', '(as Ira Bobkova)', '(as Odette Bedogni)', '(as Big Matthews)', '(as Robert Corddry)')
AND cn.country_code = '[us]'
AND it.info = 'release dates'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%T%' OR mc.note LIKE '%T%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%5%' OR mi.info LIKE '%e%')
AND n.gender = 'm'
AND n.name LIKE '%w%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1957 AND 2001;",384,/*+  SeqScan(n) IndexOnlyScan(an person_id_aka_name_cat_1) IndexScan(ci person_id_cast_info_cat_1) SeqScan(rt) IndexScan(t cat_title_1_pkey) IndexScan(mi movie_id_movie_info_cat_1) SeqScan(it) IndexScan(mc movie_id_movie_companies_cat_1) IndexScan(cn cat_company_name_1_pkey) IndexOnlyScan(chn cat_char_name_1_pkey) NestLoop(n an) NestLoop(n an ci) HashJoin(n an ci rt) NestLoop(n an ci rt t) NestLoop(n an ci rt t mi) HashJoin(n an ci rt t mi it) NestLoop(n an ci rt t mi it mc) NestLoop(n an ci rt t mi it mc cn) NestLoop(n an ci rt t mi it mc cn chn) Leading((((((((((n an) ci) rt) t) mi) it) mc) cn) chn)) */
"SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS voiced_movie
FROM cat_aka_name_1 AS an,
   cat_char_name_1 AS chn,
   cat_cast_info_1 AS ci,
   cat_company_name_1 AS cn,
   cat_info_type_1 AS it,
  cat_movie_companies_1 AS mc,
   cat_movie_info_1 AS mi,
   cat_name_1 AS n,
   cat_role_type_1 AS rt,
   cat_title_1 AS t
WHERE t.id = mi.movie_id
AND t.id = mc.movie_id
AND t.id = ci.movie_id
AND mc.movie_id = ci.movie_id
AND mc.movie_id = mi.movie_id
AND mi.movie_id = ci.movie_id
AND cn.id = mc.company_id
AND it.id = mi.info_type_id
AND n.id = ci.person_id
AND rt.id = ci.role_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND chn.id = ci.person_role_id
AND ci.note IN ('(uncredited)', '(as Judith Gibson)', '(as Timothy Perez)', '(as Zhenya Serikov)', '(as Arthur Foster)')
AND cn.country_code = '[us]'
AND it.info = 'release dates'
AND mc.note IS NOT NULL
AND (mc.note LIKE '%o%' OR mc.note LIKE '%r%')
AND mi.info IS NOT NULL
AND (mi.info LIKE '%5%' OR mi.info LIKE '%5%')
AND n.gender = 'm'
AND n.name LIKE '%,%'
AND rt.role = 'actor'
AND t.production_year BETWEEN 1900 AND 2014;",384,/*+  SeqScan(n) IndexOnlyScan(an person_id_aka_name_cat_1) IndexScan(ci person_id_cast_info_cat_1) SeqScan(rt) IndexScan(t cat_title_1_pkey) IndexScan(mi movie_id_movie_info_cat_1) SeqScan(it) IndexScan(mc movie_id_movie_companies_cat_1) IndexScan(cn cat_company_name_1_pkey) IndexOnlyScan(chn cat_char_name_1_pkey) NestLoop(n an) NestLoop(n an ci) HashJoin(n an ci rt) NestLoop(n an ci rt t) NestLoop(n an ci rt t mi) HashJoin(n an ci rt t mi it) NestLoop(n an ci rt t mi it mc) NestLoop(n an ci rt t mi it mc cn) NestLoop(n an ci rt t mi it mc cn chn) Leading((((((((((n an) ci) rt) t) mi) it) mc) cn) chn)) */
